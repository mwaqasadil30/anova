/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export interface IApplicationTimeoutUtilityService {
    applicationTimeoutUtility_GetTimeoutRelatedValues(api_version?: string | null | undefined): Promise<GetTimeoutRelatedValuesResponse>;
}

export class ApplicationTimeoutUtilityService implements IApplicationTimeoutUtilityService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    applicationTimeoutUtility_GetTimeoutRelatedValues(api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<GetTimeoutRelatedValuesResponse> {
        let url_ = this.baseUrl + "/ApplicationTimeoutUtility/timeoutRelatedValues";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processApplicationTimeoutUtility_GetTimeoutRelatedValues(_response);
        });
    }

    protected processApplicationTimeoutUtility_GetTimeoutRelatedValues(response: AxiosResponse): Promise<GetTimeoutRelatedValuesResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GetTimeoutRelatedValuesResponse.fromJS(resultData200);
            return Promise.resolve<GetTimeoutRelatedValuesResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetTimeoutRelatedValuesResponse>(<any>null);
    }
}

export interface ITankDimensionService {
    tankDimension_Find(searchExpression: string | null, api_version?: string | null | undefined): Promise<TankDimensionInfoDto[]>;
}

export class TankDimensionService implements ITankDimensionService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    tankDimension_Find(searchExpression: string | null, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<TankDimensionInfoDto[]> {
        let url_ = this.baseUrl + "/TankDimension/find/{searchExpression}";
        if (searchExpression === undefined || searchExpression === null)
            throw new Error("The parameter 'searchExpression' must be defined.");
        url_ = url_.replace("{searchExpression}", encodeURIComponent("" + searchExpression));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTankDimension_Find(_response);
        });
    }

    protected processTankDimension_Find(response: AxiosResponse): Promise<TankDimensionInfoDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TankDimensionInfoDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<TankDimensionInfoDto[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TankDimensionInfoDto[]>(<any>null);
    }
}

export interface ITagService {
    tag_GetTags(domainid: string, api_version?: string | null | undefined): Promise<TagDto[]>;
}

export class TagService implements ITagService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    tag_GetTags(domainid: string, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<TagDto[]> {
        let url_ = this.baseUrl + "/Tag/{domainid}";
        if (domainid === undefined || domainid === null)
            throw new Error("The parameter 'domainid' must be defined.");
        url_ = url_.replace("{domainid}", encodeURIComponent("" + domainid));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTag_GetTags(_response);
        });
    }

    protected processTag_GetTags(response: AxiosResponse): Promise<TagDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TagDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<TagDto[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TagDto[]>(<any>null);
    }
}

export interface ISiteService {
    /**
     * Site Number download.
     * @param siteNumber This is the unique identifier for the site on the external system
     * @param api_version (optional) 
     * @return SiteInfoDTO
     */
    site_SearchForSiteBySiteNumber(siteNumber: string | null, api_version?: string | null | undefined): Promise<SiteInfoDto>;
    /**
     * Site Number autofill.
     * @param startsWith (optional) Partially entered site number
     * @param offset (optional) Site record offset of first record in result set. Defaults to 0 if absent.
     * @param limit (optional) Maximum number of records to return. Defaults to 20 if absent.
     * @param api_version (optional) 
     * @return SiteInfoDTO[]
     */
    site_SearchForSites(startsWith?: string | null | undefined, offset?: number | null | undefined, limit?: number | null | undefined, api_version?: string | null | undefined): Promise<SiteInfoDto[]>;
    /**
     * Site save.
     * @param request Site record.
     * @param api_version (optional) 
     * @return SiteDTO
     */
    site_Save(request: SiteDto, api_version?: string | null | undefined): Promise<SiteDto>;
    /**
     * Site Number import.
     * @param siteNumber This is the unique identifier for the site on the integrated external system.
     * @param api_version (optional) 
     * @return SiteInfoDTO
     */
    site_Import(siteNumber: string, api_version?: string | null | undefined): Promise<SiteInfoDto>;
    /**
     * Site Number Domain transfer.
     * @param siteNumber This is the unique identifier for the site on the integrated external system.
     * @param api_version (optional) 
     * @return SiteInfoDTO
     */
    site_Transfer(siteNumber: string, api_version?: string | null | undefined): Promise<SiteInfoDto>;
}

export class SiteService implements ISiteService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    /**
     * Site Number download.
     * @param siteNumber This is the unique identifier for the site on the external system
     * @param api_version (optional) 
     * @return SiteInfoDTO
     */
    site_SearchForSiteBySiteNumber(siteNumber: string | null, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<SiteInfoDto> {
        let url_ = this.baseUrl + "/Site/sitenumber/{siteNumber}";
        if (siteNumber === undefined || siteNumber === null)
            throw new Error("The parameter 'siteNumber' must be defined.");
        url_ = url_.replace("{siteNumber}", encodeURIComponent("" + siteNumber));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSite_SearchForSiteBySiteNumber(_response);
        });
    }

    protected processSite_SearchForSiteBySiteNumber(response: AxiosResponse): Promise<SiteInfoDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SiteInfoDto.fromJS(resultData200);
            return Promise.resolve<SiteInfoDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SiteInfoDto>(<any>null);
    }

    /**
     * Site Number autofill.
     * @param startsWith (optional) Partially entered site number
     * @param offset (optional) Site record offset of first record in result set. Defaults to 0 if absent.
     * @param limit (optional) Maximum number of records to return. Defaults to 20 if absent.
     * @param api_version (optional) 
     * @return SiteInfoDTO[]
     */
    site_SearchForSites(startsWith?: string | null | undefined, offset?: number | null | undefined, limit?: number | null | undefined, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<SiteInfoDto[]> {
        let url_ = this.baseUrl + "/Site/sitenumbers?";
        if (startsWith !== undefined && startsWith !== null)
            url_ += "begins-with=" + encodeURIComponent("" + startsWith) + "&";
        if (offset !== undefined && offset !== null)
            url_ += "offset=" + encodeURIComponent("" + offset) + "&";
        if (limit !== undefined && limit !== null)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSite_SearchForSites(_response);
        });
    }

    protected processSite_SearchForSites(response: AxiosResponse): Promise<SiteInfoDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SiteInfoDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<SiteInfoDto[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SiteInfoDto[]>(<any>null);
    }

    /**
     * Site save.
     * @param request Site record.
     * @param api_version (optional) 
     * @return SiteDTO
     */
    site_Save(request: SiteDto, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<SiteDto> {
        let url_ = this.baseUrl + "/Site";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSite_Save(_response);
        });
    }

    protected processSite_Save(response: AxiosResponse): Promise<SiteDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SiteDto.fromJS(resultData200);
            return Promise.resolve<SiteDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SiteDto>(<any>null);
    }

    /**
     * Site Number import.
     * @param siteNumber This is the unique identifier for the site on the integrated external system.
     * @param api_version (optional) 
     * @return SiteInfoDTO
     */
    site_Import(siteNumber: string, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<SiteInfoDto> {
        let url_ = this.baseUrl + "/Site/sitenumber";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(siteNumber);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSite_Import(_response);
        });
    }

    protected processSite_Import(response: AxiosResponse): Promise<SiteInfoDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SiteInfoDto.fromJS(resultData200);
            return Promise.resolve<SiteInfoDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SiteInfoDto>(<any>null);
    }

    /**
     * Site Number Domain transfer.
     * @param siteNumber This is the unique identifier for the site on the integrated external system.
     * @param api_version (optional) 
     * @return SiteInfoDTO
     */
    site_Transfer(siteNumber: string, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<SiteInfoDto> {
        let url_ = this.baseUrl + "/Site/sitenumber/domain";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(siteNumber);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSite_Transfer(_response);
        });
    }

    protected processSite_Transfer(response: AxiosResponse): Promise<SiteInfoDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = SiteInfoDto.fromJS(resultData200);
            return Promise.resolve<SiteInfoDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SiteInfoDto>(<any>null);
    }
}

export interface IGeneralService {
    retrieveTreeNodeInfoListBranchByParentNode_RetrieveTreeNodeInfoListBranchByParentNode(request: EvolveRetrieveTreeNodeInfoListBranchByParentNodeRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveTreeNodeInfoListBranchByParentNodeResponse>;
    retrieveTreeNodeInfoListRootByDomain_RetrieveTreeNodeInfoListRootByDomain(request: EvolveRetrieveTreeNodeInfoListRootByDomainRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveTreeNodeInfoListRootByDomainResponse>;
    updateUserPreferredTimeZone_UpdateUserPreferredTimeZone(request: EvolveUpdateUserPreferredTimeZoneRequest, api_version?: string | null | undefined): Promise<FileResponse>;
    getAssetGroupsByUserIdAndDomainId_GetAssetGroupsByUserIdAndDomainId(request: EvolveGetAssetGroupsByUserIdAndDomainIdRequest, api_version?: string | null | undefined): Promise<EvolveGetAssetGroupsByUserIdAndDomainIdResponse>;
    getFavouritesByUserIdAndDomainId_GetFavouritesByUserIdAndDomainId(request: EvolveGetFavouritesByUserIdAndDomainIdRequest, api_version?: string | null | undefined): Promise<EvolveGetFavouritesByUserIdAndDomainIdResponse>;
    getNavigationByUserIdAndDomainId_GetNavigationByUserIdAndDomainId(request: EvolveGetNavigationByUserIdAndDomainIdRequest, api_version?: string | null | undefined): Promise<EvolveGetNavigationByUserIdAndDomainIdResponse>;
    saveUserFeedback_SaveUserFeedback(request: EvolveUserFeedbackRequest, api_version?: string | null | undefined): Promise<void>;
    saveUserShowPreviewPage_SaveUserShowPreviewPage(request: EvolveSaveUserShowPreviewPageRequest, api_version?: string | null | undefined): Promise<EvolveSaveUserShowPreviewPageResponse>;
    deleteFavouriteById_DeleteFavouriteById(request: EvolveDeleteFavouriteByIdRequest, api_version?: string | null | undefined): Promise<EvolveDeleteFavouriteByIdResponse>;
    retrieveIsInWatchList_RetrieveIsInWatchList(request: EvolveRetrieveIsInWatchListRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveIsInWatchListResponse>;
    retrieveSiteNoteEditComponentsById_RetrieveSiteNoteEditComponentsById(request: EvolveRetrieveSiteNoteEditComponentsByIdRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveSiteNoteEditComponentsByIdResponse>;
    retrieveWatchListTreeNodesByUser_RetrieveWatchListTreeNodesByUser(request: EvolveRetrieveWatchListTreeNodesByUserRequest, api_version?: string | null | undefined): Promise<FileResponse>;
    saveFavourite_SaveFavourite(request: EvolveSaveFavouriteRequest, api_version?: string | null | undefined): Promise<EvolveSaveFavouriteResponse>;
    saveSiteNotes_SaveSiteNotes(request: EvolveSaveSiteNotesRequest, api_version?: string | null | undefined): Promise<EvolveSaveSiteNotesResponse>;
    /**
     * Endpoint to get azure storage data channel readings.
     * @param api_version (optional) 
     */
    getAzureStorageDataChannelReadings_GetAzureStorageDataChannelReadings(request: EvolveGetReadingsByDataChannelIdRequest, api_version?: string | null | undefined): Promise<EvolveGetReadingsByDataChannelIdResponse>;
    deleteProductByIdList_DeleteProductByIdList(request: EvolveDeleteProductByIdListRequest, api_version?: string | null | undefined): Promise<EvolveDeleteProductByIdListResponse>;
    deleteSitesByIdList_DeleteSitesByIdList(request: EvolveDeleteSitesByIdListRequest, api_version?: string | null | undefined): Promise<EvolveDeleteSitesByIdListResponse>;
    deleteTankDimensionsByIdList_DeleteTankDimensionsByIdList(request: EvolveDeleteTankDimensionsByIdListRequest, api_version?: string | null | undefined): Promise<EvolveDeleteTankDimensionsByIdListResponse>;
    retrieveAuditHistoryByOptions_RetrieveAuditHistoryByOptions(request: EvolveRetrieveAuditHistoryByOptionsRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveAuditHistoryByOptionsResponse>;
    /**
     * Get domain editor components.
     * @param api_version (optional) 
     */
    retrieveDomainEditComponentsById_RetrieveDomainEditComponentsById(request: EvolveRetrieveDomainEditComponentsByIdRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveDomainEditComponentsByIdResponse>;
    retrieveDomainInfoRecordsByParentDomainId_RetrieveDomainInfoRecordsByParentDomainId(request: EvolveRetrieveDomainInfoRecordsByParentDomainIdRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveDomainInfoRecordsByParentDomainIdResponse>;
    retrieveProductDetailById_RetrieveProductDetailById(request: EvolveRetrieveProductDetailByIdRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveProductDetailByIdResponse>;
    retrieveProductEditComponents_RetrieveProductEditComponents(request: EvolveRetrieveProductEditComponentsRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveProductEditComponentsResponse>;
    retrieveProductNameInfoListByPrefix_RetrieveProductNameInfoListByPrefix(request: EvolveRetrieveProductNameInfoListByPrefixRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveProductNameInfoListByPrefixResponse>;
    retrieveProductRecordsByDomain_RetrieveProductRecordsByDomain(request: EvolveRetrieveProductRecordsByDomainRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveProductRecordsByDomainResponse>;
    retrieveRtuRequestQueueInfoRecordsByOptions_RetrieveRtuRequestQueueInfoRecordsByOptions(request: EvolveRetrieveRtuRequestQueueInfoRecordsByOptionsRequest, api_version?: string | null | undefined): Promise<FileResponse>;
    retrieveSiteEditComponentsById_RetrieveSiteEditComponentsById(request: EvolveRetrieveSiteEditComponentsByIdRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveSiteEditComponentsByIdResponse>;
    retrieveSiteInfoRecordById_RetrieveSiteInfoRecordById(request: EvolveRetrieveSiteInfoRecordByIdRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveSiteInfoRecordByIdResponse>;
    retrieveSiteInfoRecordsByAutoCompleteOptions_RetrieveSiteInfoRecordsByAutoCompleteOptions(request: EvolveRetrieveSiteInfoRecordsByAutoCompleteOptionsRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveSiteInfoRecordsByAutoCompleteOptionsResponse>;
    retrieveSiteInfoRecordsByOptions_RetrieveSiteInfoRecordsByOptions(request: EvolveRetrieveSiteInfoRecordsByOptionsRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveSiteInfoRecordsByOptionsResponse>;
    retrieveSiteLocationInfoAutoCompleteListByOptions_RetrieveSiteLocationInfoAutoCompleteListByOptions(request: EvolveRetrieveSiteLocationInfoAutoCompleteListByOptionsRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveSiteLocationInfoAutoCompleteListByOptionsResponse>;
    retrieveTankDimensionDescriptionInfoListByPrefix_RetrieveTankDimensionDescriptionInfoListByPrefix(request: EvolveRetrieveTankDimensionDescriptionInfoListByPrefixRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveTankDimensionDescriptionInfoListByPrefixResponse>;
    retrieveTankDimensionDetailById_RetrieveTankDimensionDetailById(request: EvolveRetrieveTankDimensionDetailByIdRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveTankDimensionDetailByIdResponse>;
    retrieveTankDimensionEditComponentsById_RetrieveTankDimensionEditComponentsById(request: EvolveRetrieveTankDimensionEditComponentsByIdRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveTankDimensionEditComponentsByIdResponse>;
    retrieveTankDimensionInfoRecordsByDomain_RetrieveTankDimensionInfoRecordsByDomain(request: EvolveRetrieveTankDimensionInfoRecordsByDomainRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveTankDimensionInfoRecordsByDomainResponse>;
    retrieveUnitTypeByUnitQuantityTypeId_RetrieveUnitTypeByUnitQuantityTypeId(request: EvolveRetrieveUnitTypeByUnitQuantityTypeIdRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveUnitTypeByUnitQuantityTypeIdResponse>;
    saveDomain_SaveDomain(request: EvolveSaveDomainRequest, api_version?: string | null | undefined): Promise<EvolveSaveDomainResponse>;
    saveProduct_SaveProduct(request: EvolveSaveProductRequest, api_version?: string | null | undefined): Promise<EvolveSaveProductResponse>;
    saveSite_SaveSite(request: EvolveSaveSiteRequest, api_version?: string | null | undefined): Promise<EvolveSaveSiteResponse>;
    saveTankDimension_SaveTankDimension(request: EvolveSaveTankDimensionRequest, api_version?: string | null | undefined): Promise<EvolveSaveTankDimensionResponse>;
    /**
     * Get domain editor components.
     * @param api_version (optional) 
     */
    getDomainAdditionalById_RetrieveDomainAdditionalById(request: EvolveGetDomainAdditionalByIdRequest, api_version?: string | null | undefined): Promise<EvolveGetDomainAdditionalByIdResponse>;
    saveDomainAdditional_SaveDomainAdditional(request: EvolveSaveDomainAdditionalRequest, api_version?: string | null | undefined): Promise<EvolveSaveDomainAdditionalResponse>;
}

export class GeneralService implements IGeneralService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    retrieveTreeNodeInfoListBranchByParentNode_RetrieveTreeNodeInfoListBranchByParentNode(request: EvolveRetrieveTreeNodeInfoListBranchByParentNodeRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveTreeNodeInfoListBranchByParentNodeResponse> {
        let url_ = this.baseUrl + "/RetrieveTreeNodeInfoListBranchByParentNode";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveTreeNodeInfoListBranchByParentNode_RetrieveTreeNodeInfoListBranchByParentNode(_response);
        });
    }

    protected processRetrieveTreeNodeInfoListBranchByParentNode_RetrieveTreeNodeInfoListBranchByParentNode(response: AxiosResponse): Promise<EvolveRetrieveTreeNodeInfoListBranchByParentNodeResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveTreeNodeInfoListBranchByParentNodeResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveTreeNodeInfoListBranchByParentNodeResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveTreeNodeInfoListBranchByParentNodeResponse>(<any>null);
    }

    retrieveTreeNodeInfoListRootByDomain_RetrieveTreeNodeInfoListRootByDomain(request: EvolveRetrieveTreeNodeInfoListRootByDomainRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveTreeNodeInfoListRootByDomainResponse> {
        let url_ = this.baseUrl + "/RetrieveTreeNodeInfoListRootByDomain";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveTreeNodeInfoListRootByDomain_RetrieveTreeNodeInfoListRootByDomain(_response);
        });
    }

    protected processRetrieveTreeNodeInfoListRootByDomain_RetrieveTreeNodeInfoListRootByDomain(response: AxiosResponse): Promise<EvolveRetrieveTreeNodeInfoListRootByDomainResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveTreeNodeInfoListRootByDomainResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveTreeNodeInfoListRootByDomainResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveTreeNodeInfoListRootByDomainResponse>(<any>null);
    }

    updateUserPreferredTimeZone_UpdateUserPreferredTimeZone(request: EvolveUpdateUserPreferredTimeZoneRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/UpdateUserPreferredTimeZone";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateUserPreferredTimeZone_UpdateUserPreferredTimeZone(_response);
        });
    }

    protected processUpdateUserPreferredTimeZone_UpdateUserPreferredTimeZone(response: AxiosResponse): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    getAssetGroupsByUserIdAndDomainId_GetAssetGroupsByUserIdAndDomainId(request: EvolveGetAssetGroupsByUserIdAndDomainIdRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveGetAssetGroupsByUserIdAndDomainIdResponse> {
        let url_ = this.baseUrl + "/GetAssetGroupsByUserIdAndDomainId";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAssetGroupsByUserIdAndDomainId_GetAssetGroupsByUserIdAndDomainId(_response);
        });
    }

    protected processGetAssetGroupsByUserIdAndDomainId_GetAssetGroupsByUserIdAndDomainId(response: AxiosResponse): Promise<EvolveGetAssetGroupsByUserIdAndDomainIdResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveGetAssetGroupsByUserIdAndDomainIdResponse.fromJS(resultData200);
            return Promise.resolve<EvolveGetAssetGroupsByUserIdAndDomainIdResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveGetAssetGroupsByUserIdAndDomainIdResponse>(<any>null);
    }

    getFavouritesByUserIdAndDomainId_GetFavouritesByUserIdAndDomainId(request: EvolveGetFavouritesByUserIdAndDomainIdRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveGetFavouritesByUserIdAndDomainIdResponse> {
        let url_ = this.baseUrl + "/GetFavouritesByUserIdAndDomainId";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetFavouritesByUserIdAndDomainId_GetFavouritesByUserIdAndDomainId(_response);
        });
    }

    protected processGetFavouritesByUserIdAndDomainId_GetFavouritesByUserIdAndDomainId(response: AxiosResponse): Promise<EvolveGetFavouritesByUserIdAndDomainIdResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveGetFavouritesByUserIdAndDomainIdResponse.fromJS(resultData200);
            return Promise.resolve<EvolveGetFavouritesByUserIdAndDomainIdResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveGetFavouritesByUserIdAndDomainIdResponse>(<any>null);
    }

    getNavigationByUserIdAndDomainId_GetNavigationByUserIdAndDomainId(request: EvolveGetNavigationByUserIdAndDomainIdRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveGetNavigationByUserIdAndDomainIdResponse> {
        let url_ = this.baseUrl + "/GetNavigationByUserIdAndDomainId";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetNavigationByUserIdAndDomainId_GetNavigationByUserIdAndDomainId(_response);
        });
    }

    protected processGetNavigationByUserIdAndDomainId_GetNavigationByUserIdAndDomainId(response: AxiosResponse): Promise<EvolveGetNavigationByUserIdAndDomainIdResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveGetNavigationByUserIdAndDomainIdResponse.fromJS(resultData200);
            return Promise.resolve<EvolveGetNavigationByUserIdAndDomainIdResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveGetNavigationByUserIdAndDomainIdResponse>(<any>null);
    }

    saveUserFeedback_SaveUserFeedback(request: EvolveUserFeedbackRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/SaveUserFeedback";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSaveUserFeedback_SaveUserFeedback(_response);
        });
    }

    protected processSaveUserFeedback_SaveUserFeedback(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    saveUserShowPreviewPage_SaveUserShowPreviewPage(request: EvolveSaveUserShowPreviewPageRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveSaveUserShowPreviewPageResponse> {
        let url_ = this.baseUrl + "/SaveUserShowPreviewPage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSaveUserShowPreviewPage_SaveUserShowPreviewPage(_response);
        });
    }

    protected processSaveUserShowPreviewPage_SaveUserShowPreviewPage(response: AxiosResponse): Promise<EvolveSaveUserShowPreviewPageResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveSaveUserShowPreviewPageResponse.fromJS(resultData200);
            return Promise.resolve<EvolveSaveUserShowPreviewPageResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = EvolveProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveSaveUserShowPreviewPageResponse>(<any>null);
    }

    deleteFavouriteById_DeleteFavouriteById(request: EvolveDeleteFavouriteByIdRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveDeleteFavouriteByIdResponse> {
        let url_ = this.baseUrl + "/DeleteFavouriteById";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteFavouriteById_DeleteFavouriteById(_response);
        });
    }

    protected processDeleteFavouriteById_DeleteFavouriteById(response: AxiosResponse): Promise<EvolveDeleteFavouriteByIdResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveDeleteFavouriteByIdResponse.fromJS(resultData200);
            return Promise.resolve<EvolveDeleteFavouriteByIdResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveDeleteFavouriteByIdResponse>(<any>null);
    }

    retrieveIsInWatchList_RetrieveIsInWatchList(request: EvolveRetrieveIsInWatchListRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveIsInWatchListResponse> {
        let url_ = this.baseUrl + "/RetrieveIsInWatchList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveIsInWatchList_RetrieveIsInWatchList(_response);
        });
    }

    protected processRetrieveIsInWatchList_RetrieveIsInWatchList(response: AxiosResponse): Promise<EvolveRetrieveIsInWatchListResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveIsInWatchListResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveIsInWatchListResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveIsInWatchListResponse>(<any>null);
    }

    retrieveSiteNoteEditComponentsById_RetrieveSiteNoteEditComponentsById(request: EvolveRetrieveSiteNoteEditComponentsByIdRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveSiteNoteEditComponentsByIdResponse> {
        let url_ = this.baseUrl + "/RetrieveSiteNoteEditComponentsById";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveSiteNoteEditComponentsById_RetrieveSiteNoteEditComponentsById(_response);
        });
    }

    protected processRetrieveSiteNoteEditComponentsById_RetrieveSiteNoteEditComponentsById(response: AxiosResponse): Promise<EvolveRetrieveSiteNoteEditComponentsByIdResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveSiteNoteEditComponentsByIdResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveSiteNoteEditComponentsByIdResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveSiteNoteEditComponentsByIdResponse>(<any>null);
    }

    retrieveWatchListTreeNodesByUser_RetrieveWatchListTreeNodesByUser(request: EvolveRetrieveWatchListTreeNodesByUserRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/RetrieveWatchListTreeNodesByUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveWatchListTreeNodesByUser_RetrieveWatchListTreeNodesByUser(_response);
        });
    }

    protected processRetrieveWatchListTreeNodesByUser_RetrieveWatchListTreeNodesByUser(response: AxiosResponse): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    saveFavourite_SaveFavourite(request: EvolveSaveFavouriteRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveSaveFavouriteResponse> {
        let url_ = this.baseUrl + "/SaveFavourite";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSaveFavourite_SaveFavourite(_response);
        });
    }

    protected processSaveFavourite_SaveFavourite(response: AxiosResponse): Promise<EvolveSaveFavouriteResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveSaveFavouriteResponse.fromJS(resultData200);
            return Promise.resolve<EvolveSaveFavouriteResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveSaveFavouriteResponse>(<any>null);
    }

    saveSiteNotes_SaveSiteNotes(request: EvolveSaveSiteNotesRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveSaveSiteNotesResponse> {
        let url_ = this.baseUrl + "/SaveSiteNotes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSaveSiteNotes_SaveSiteNotes(_response);
        });
    }

    protected processSaveSiteNotes_SaveSiteNotes(response: AxiosResponse): Promise<EvolveSaveSiteNotesResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveSaveSiteNotesResponse.fromJS(resultData200);
            return Promise.resolve<EvolveSaveSiteNotesResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveSaveSiteNotesResponse>(<any>null);
    }

    /**
     * Endpoint to get azure storage data channel readings.
     * @param api_version (optional) 
     */
    getAzureStorageDataChannelReadings_GetAzureStorageDataChannelReadings(request: EvolveGetReadingsByDataChannelIdRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveGetReadingsByDataChannelIdResponse> {
        let url_ = this.baseUrl + "/GetAzureStorageDataChannelReadings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAzureStorageDataChannelReadings_GetAzureStorageDataChannelReadings(_response);
        });
    }

    protected processGetAzureStorageDataChannelReadings_GetAzureStorageDataChannelReadings(response: AxiosResponse): Promise<EvolveGetReadingsByDataChannelIdResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveGetReadingsByDataChannelIdResponse.fromJS(resultData200);
            return Promise.resolve<EvolveGetReadingsByDataChannelIdResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveGetReadingsByDataChannelIdResponse>(<any>null);
    }

    deleteProductByIdList_DeleteProductByIdList(request: EvolveDeleteProductByIdListRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveDeleteProductByIdListResponse> {
        let url_ = this.baseUrl + "/DeleteProductByIdList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteProductByIdList_DeleteProductByIdList(_response);
        });
    }

    protected processDeleteProductByIdList_DeleteProductByIdList(response: AxiosResponse): Promise<EvolveDeleteProductByIdListResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveDeleteProductByIdListResponse.fromJS(resultData200);
            return Promise.resolve<EvolveDeleteProductByIdListResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 403) {
            const _responseText = response.data;
            let result403: any = null;
            let resultData403  = _responseText;
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("A server side error occurred.", status, _responseText, _headers, result403);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveDeleteProductByIdListResponse>(<any>null);
    }

    deleteSitesByIdList_DeleteSitesByIdList(request: EvolveDeleteSitesByIdListRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveDeleteSitesByIdListResponse> {
        let url_ = this.baseUrl + "/DeleteSitesByIdList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteSitesByIdList_DeleteSitesByIdList(_response);
        });
    }

    protected processDeleteSitesByIdList_DeleteSitesByIdList(response: AxiosResponse): Promise<EvolveDeleteSitesByIdListResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveDeleteSitesByIdListResponse.fromJS(resultData200);
            return Promise.resolve<EvolveDeleteSitesByIdListResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveDeleteSitesByIdListResponse>(<any>null);
    }

    deleteTankDimensionsByIdList_DeleteTankDimensionsByIdList(request: EvolveDeleteTankDimensionsByIdListRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveDeleteTankDimensionsByIdListResponse> {
        let url_ = this.baseUrl + "/DeleteTankDimensionsByIdList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteTankDimensionsByIdList_DeleteTankDimensionsByIdList(_response);
        });
    }

    protected processDeleteTankDimensionsByIdList_DeleteTankDimensionsByIdList(response: AxiosResponse): Promise<EvolveDeleteTankDimensionsByIdListResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveDeleteTankDimensionsByIdListResponse.fromJS(resultData200);
            return Promise.resolve<EvolveDeleteTankDimensionsByIdListResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 403) {
            const _responseText = response.data;
            let result403: any = null;
            let resultData403  = _responseText;
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("A server side error occurred.", status, _responseText, _headers, result403);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveDeleteTankDimensionsByIdListResponse>(<any>null);
    }

    retrieveAuditHistoryByOptions_RetrieveAuditHistoryByOptions(request: EvolveRetrieveAuditHistoryByOptionsRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveAuditHistoryByOptionsResponse> {
        let url_ = this.baseUrl + "/RetrieveAuditHistoryByOptions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveAuditHistoryByOptions_RetrieveAuditHistoryByOptions(_response);
        });
    }

    protected processRetrieveAuditHistoryByOptions_RetrieveAuditHistoryByOptions(response: AxiosResponse): Promise<EvolveRetrieveAuditHistoryByOptionsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveAuditHistoryByOptionsResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveAuditHistoryByOptionsResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveAuditHistoryByOptionsResponse>(<any>null);
    }

    /**
     * Get domain editor components.
     * @param api_version (optional) 
     */
    retrieveDomainEditComponentsById_RetrieveDomainEditComponentsById(request: EvolveRetrieveDomainEditComponentsByIdRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveDomainEditComponentsByIdResponse> {
        let url_ = this.baseUrl + "/RetrieveDomainEditComponentsById";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveDomainEditComponentsById_RetrieveDomainEditComponentsById(_response);
        });
    }

    protected processRetrieveDomainEditComponentsById_RetrieveDomainEditComponentsById(response: AxiosResponse): Promise<EvolveRetrieveDomainEditComponentsByIdResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveDomainEditComponentsByIdResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveDomainEditComponentsByIdResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveDomainEditComponentsByIdResponse>(<any>null);
    }

    retrieveDomainInfoRecordsByParentDomainId_RetrieveDomainInfoRecordsByParentDomainId(request: EvolveRetrieveDomainInfoRecordsByParentDomainIdRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveDomainInfoRecordsByParentDomainIdResponse> {
        let url_ = this.baseUrl + "/RetrieveDomainInfoRecordsByParentDomainId";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveDomainInfoRecordsByParentDomainId_RetrieveDomainInfoRecordsByParentDomainId(_response);
        });
    }

    protected processRetrieveDomainInfoRecordsByParentDomainId_RetrieveDomainInfoRecordsByParentDomainId(response: AxiosResponse): Promise<EvolveRetrieveDomainInfoRecordsByParentDomainIdResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveDomainInfoRecordsByParentDomainIdResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveDomainInfoRecordsByParentDomainIdResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveDomainInfoRecordsByParentDomainIdResponse>(<any>null);
    }

    retrieveProductDetailById_RetrieveProductDetailById(request: EvolveRetrieveProductDetailByIdRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveProductDetailByIdResponse> {
        let url_ = this.baseUrl + "/RetrieveProductDetailById";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveProductDetailById_RetrieveProductDetailById(_response);
        });
    }

    protected processRetrieveProductDetailById_RetrieveProductDetailById(response: AxiosResponse): Promise<EvolveRetrieveProductDetailByIdResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveProductDetailByIdResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveProductDetailByIdResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 403) {
            const _responseText = response.data;
            let result403: any = null;
            let resultData403  = _responseText;
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("A server side error occurred.", status, _responseText, _headers, result403);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveProductDetailByIdResponse>(<any>null);
    }

    retrieveProductEditComponents_RetrieveProductEditComponents(request: EvolveRetrieveProductEditComponentsRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveProductEditComponentsResponse> {
        let url_ = this.baseUrl + "/RetrieveProductEditComponents";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveProductEditComponents_RetrieveProductEditComponents(_response);
        });
    }

    protected processRetrieveProductEditComponents_RetrieveProductEditComponents(response: AxiosResponse): Promise<EvolveRetrieveProductEditComponentsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveProductEditComponentsResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveProductEditComponentsResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 403) {
            const _responseText = response.data;
            let result403: any = null;
            let resultData403  = _responseText;
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("A server side error occurred.", status, _responseText, _headers, result403);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveProductEditComponentsResponse>(<any>null);
    }

    retrieveProductNameInfoListByPrefix_RetrieveProductNameInfoListByPrefix(request: EvolveRetrieveProductNameInfoListByPrefixRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveProductNameInfoListByPrefixResponse> {
        let url_ = this.baseUrl + "/RetrieveProductNameInfoListByPrefix";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveProductNameInfoListByPrefix_RetrieveProductNameInfoListByPrefix(_response);
        });
    }

    protected processRetrieveProductNameInfoListByPrefix_RetrieveProductNameInfoListByPrefix(response: AxiosResponse): Promise<EvolveRetrieveProductNameInfoListByPrefixResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveProductNameInfoListByPrefixResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveProductNameInfoListByPrefixResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 403) {
            const _responseText = response.data;
            let result403: any = null;
            let resultData403  = _responseText;
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("A server side error occurred.", status, _responseText, _headers, result403);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveProductNameInfoListByPrefixResponse>(<any>null);
    }

    retrieveProductRecordsByDomain_RetrieveProductRecordsByDomain(request: EvolveRetrieveProductRecordsByDomainRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveProductRecordsByDomainResponse> {
        let url_ = this.baseUrl + "/RetrieveProductRecordsByDomain";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveProductRecordsByDomain_RetrieveProductRecordsByDomain(_response);
        });
    }

    protected processRetrieveProductRecordsByDomain_RetrieveProductRecordsByDomain(response: AxiosResponse): Promise<EvolveRetrieveProductRecordsByDomainResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveProductRecordsByDomainResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveProductRecordsByDomainResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 403) {
            const _responseText = response.data;
            let result403: any = null;
            let resultData403  = _responseText;
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("A server side error occurred.", status, _responseText, _headers, result403);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveProductRecordsByDomainResponse>(<any>null);
    }

    retrieveRtuRequestQueueInfoRecordsByOptions_RetrieveRtuRequestQueueInfoRecordsByOptions(request: EvolveRetrieveRtuRequestQueueInfoRecordsByOptionsRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/RetrieveRtuRequestQueueInfoRecordsByOptions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveRtuRequestQueueInfoRecordsByOptions_RetrieveRtuRequestQueueInfoRecordsByOptions(_response);
        });
    }

    protected processRetrieveRtuRequestQueueInfoRecordsByOptions_RetrieveRtuRequestQueueInfoRecordsByOptions(response: AxiosResponse): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    retrieveSiteEditComponentsById_RetrieveSiteEditComponentsById(request: EvolveRetrieveSiteEditComponentsByIdRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveSiteEditComponentsByIdResponse> {
        let url_ = this.baseUrl + "/RetrieveSiteEditComponentsById";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveSiteEditComponentsById_RetrieveSiteEditComponentsById(_response);
        });
    }

    protected processRetrieveSiteEditComponentsById_RetrieveSiteEditComponentsById(response: AxiosResponse): Promise<EvolveRetrieveSiteEditComponentsByIdResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveSiteEditComponentsByIdResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveSiteEditComponentsByIdResponse>(result200);

        } else if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = EvolveRetrieveSiteEditComponentsByIdResponse.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveSiteEditComponentsByIdResponse>(<any>null);
    }

    retrieveSiteInfoRecordById_RetrieveSiteInfoRecordById(request: EvolveRetrieveSiteInfoRecordByIdRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveSiteInfoRecordByIdResponse> {
        let url_ = this.baseUrl + "/RetrieveSiteInfoRecordById";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveSiteInfoRecordById_RetrieveSiteInfoRecordById(_response);
        });
    }

    protected processRetrieveSiteInfoRecordById_RetrieveSiteInfoRecordById(response: AxiosResponse): Promise<EvolveRetrieveSiteInfoRecordByIdResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveSiteInfoRecordByIdResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveSiteInfoRecordByIdResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveSiteInfoRecordByIdResponse>(<any>null);
    }

    retrieveSiteInfoRecordsByAutoCompleteOptions_RetrieveSiteInfoRecordsByAutoCompleteOptions(request: EvolveRetrieveSiteInfoRecordsByAutoCompleteOptionsRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveSiteInfoRecordsByAutoCompleteOptionsResponse> {
        let url_ = this.baseUrl + "/RetrieveSiteInfoRecordsByAutoCompleteOptions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveSiteInfoRecordsByAutoCompleteOptions_RetrieveSiteInfoRecordsByAutoCompleteOptions(_response);
        });
    }

    protected processRetrieveSiteInfoRecordsByAutoCompleteOptions_RetrieveSiteInfoRecordsByAutoCompleteOptions(response: AxiosResponse): Promise<EvolveRetrieveSiteInfoRecordsByAutoCompleteOptionsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveSiteInfoRecordsByAutoCompleteOptionsResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveSiteInfoRecordsByAutoCompleteOptionsResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveSiteInfoRecordsByAutoCompleteOptionsResponse>(<any>null);
    }

    retrieveSiteInfoRecordsByOptions_RetrieveSiteInfoRecordsByOptions(request: EvolveRetrieveSiteInfoRecordsByOptionsRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveSiteInfoRecordsByOptionsResponse> {
        let url_ = this.baseUrl + "/RetrieveSiteInfoRecordsByOptions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveSiteInfoRecordsByOptions_RetrieveSiteInfoRecordsByOptions(_response);
        });
    }

    protected processRetrieveSiteInfoRecordsByOptions_RetrieveSiteInfoRecordsByOptions(response: AxiosResponse): Promise<EvolveRetrieveSiteInfoRecordsByOptionsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveSiteInfoRecordsByOptionsResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveSiteInfoRecordsByOptionsResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveSiteInfoRecordsByOptionsResponse>(<any>null);
    }

    retrieveSiteLocationInfoAutoCompleteListByOptions_RetrieveSiteLocationInfoAutoCompleteListByOptions(request: EvolveRetrieveSiteLocationInfoAutoCompleteListByOptionsRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveSiteLocationInfoAutoCompleteListByOptionsResponse> {
        let url_ = this.baseUrl + "/RetrieveSiteLocationInfoAutoCompleteListByOptions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveSiteLocationInfoAutoCompleteListByOptions_RetrieveSiteLocationInfoAutoCompleteListByOptions(_response);
        });
    }

    protected processRetrieveSiteLocationInfoAutoCompleteListByOptions_RetrieveSiteLocationInfoAutoCompleteListByOptions(response: AxiosResponse): Promise<EvolveRetrieveSiteLocationInfoAutoCompleteListByOptionsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveSiteLocationInfoAutoCompleteListByOptionsResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveSiteLocationInfoAutoCompleteListByOptionsResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveSiteLocationInfoAutoCompleteListByOptionsResponse>(<any>null);
    }

    retrieveTankDimensionDescriptionInfoListByPrefix_RetrieveTankDimensionDescriptionInfoListByPrefix(request: EvolveRetrieveTankDimensionDescriptionInfoListByPrefixRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveTankDimensionDescriptionInfoListByPrefixResponse> {
        let url_ = this.baseUrl + "/RetrieveTankDimensionDescriptionInfoListByPrefix";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveTankDimensionDescriptionInfoListByPrefix_RetrieveTankDimensionDescriptionInfoListByPrefix(_response);
        });
    }

    protected processRetrieveTankDimensionDescriptionInfoListByPrefix_RetrieveTankDimensionDescriptionInfoListByPrefix(response: AxiosResponse): Promise<EvolveRetrieveTankDimensionDescriptionInfoListByPrefixResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveTankDimensionDescriptionInfoListByPrefixResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveTankDimensionDescriptionInfoListByPrefixResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 403) {
            const _responseText = response.data;
            let result403: any = null;
            let resultData403  = _responseText;
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("A server side error occurred.", status, _responseText, _headers, result403);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveTankDimensionDescriptionInfoListByPrefixResponse>(<any>null);
    }

    retrieveTankDimensionDetailById_RetrieveTankDimensionDetailById(request: EvolveRetrieveTankDimensionDetailByIdRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveTankDimensionDetailByIdResponse> {
        let url_ = this.baseUrl + "/RetrieveTankDimensionDetailById";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveTankDimensionDetailById_RetrieveTankDimensionDetailById(_response);
        });
    }

    protected processRetrieveTankDimensionDetailById_RetrieveTankDimensionDetailById(response: AxiosResponse): Promise<EvolveRetrieveTankDimensionDetailByIdResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveTankDimensionDetailByIdResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveTankDimensionDetailByIdResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 403) {
            const _responseText = response.data;
            let result403: any = null;
            let resultData403  = _responseText;
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("A server side error occurred.", status, _responseText, _headers, result403);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveTankDimensionDetailByIdResponse>(<any>null);
    }

    retrieveTankDimensionEditComponentsById_RetrieveTankDimensionEditComponentsById(request: EvolveRetrieveTankDimensionEditComponentsByIdRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveTankDimensionEditComponentsByIdResponse> {
        let url_ = this.baseUrl + "/RetrieveTankDimensionEditComponentsById";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveTankDimensionEditComponentsById_RetrieveTankDimensionEditComponentsById(_response);
        });
    }

    protected processRetrieveTankDimensionEditComponentsById_RetrieveTankDimensionEditComponentsById(response: AxiosResponse): Promise<EvolveRetrieveTankDimensionEditComponentsByIdResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveTankDimensionEditComponentsByIdResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveTankDimensionEditComponentsByIdResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 403) {
            const _responseText = response.data;
            let result403: any = null;
            let resultData403  = _responseText;
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("A server side error occurred.", status, _responseText, _headers, result403);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveTankDimensionEditComponentsByIdResponse>(<any>null);
    }

    retrieveTankDimensionInfoRecordsByDomain_RetrieveTankDimensionInfoRecordsByDomain(request: EvolveRetrieveTankDimensionInfoRecordsByDomainRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveTankDimensionInfoRecordsByDomainResponse> {
        let url_ = this.baseUrl + "/RetrieveTankDimensionInfoRecordsByDomain";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveTankDimensionInfoRecordsByDomain_RetrieveTankDimensionInfoRecordsByDomain(_response);
        });
    }

    protected processRetrieveTankDimensionInfoRecordsByDomain_RetrieveTankDimensionInfoRecordsByDomain(response: AxiosResponse): Promise<EvolveRetrieveTankDimensionInfoRecordsByDomainResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveTankDimensionInfoRecordsByDomainResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveTankDimensionInfoRecordsByDomainResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 403) {
            const _responseText = response.data;
            let result403: any = null;
            let resultData403  = _responseText;
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("A server side error occurred.", status, _responseText, _headers, result403);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveTankDimensionInfoRecordsByDomainResponse>(<any>null);
    }

    retrieveUnitTypeByUnitQuantityTypeId_RetrieveUnitTypeByUnitQuantityTypeId(request: EvolveRetrieveUnitTypeByUnitQuantityTypeIdRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveUnitTypeByUnitQuantityTypeIdResponse> {
        let url_ = this.baseUrl + "/RetrieveUnitTypeByUnitQuantityTypeId";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveUnitTypeByUnitQuantityTypeId_RetrieveUnitTypeByUnitQuantityTypeId(_response);
        });
    }

    protected processRetrieveUnitTypeByUnitQuantityTypeId_RetrieveUnitTypeByUnitQuantityTypeId(response: AxiosResponse): Promise<EvolveRetrieveUnitTypeByUnitQuantityTypeIdResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveUnitTypeByUnitQuantityTypeIdResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveUnitTypeByUnitQuantityTypeIdResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveUnitTypeByUnitQuantityTypeIdResponse>(<any>null);
    }

    saveDomain_SaveDomain(request: EvolveSaveDomainRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveSaveDomainResponse> {
        let url_ = this.baseUrl + "/SaveDomain";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSaveDomain_SaveDomain(_response);
        });
    }

    protected processSaveDomain_SaveDomain(response: AxiosResponse): Promise<EvolveSaveDomainResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveSaveDomainResponse.fromJS(resultData200);
            return Promise.resolve<EvolveSaveDomainResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveSaveDomainResponse>(<any>null);
    }

    saveProduct_SaveProduct(request: EvolveSaveProductRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveSaveProductResponse> {
        let url_ = this.baseUrl + "/SaveProduct";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSaveProduct_SaveProduct(_response);
        });
    }

    protected processSaveProduct_SaveProduct(response: AxiosResponse): Promise<EvolveSaveProductResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveSaveProductResponse.fromJS(resultData200);
            return Promise.resolve<EvolveSaveProductResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 403) {
            const _responseText = response.data;
            let result403: any = null;
            let resultData403  = _responseText;
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("A server side error occurred.", status, _responseText, _headers, result403);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveSaveProductResponse>(<any>null);
    }

    saveSite_SaveSite(request: EvolveSaveSiteRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveSaveSiteResponse> {
        let url_ = this.baseUrl + "/SaveSite";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSaveSite_SaveSite(_response);
        });
    }

    protected processSaveSite_SaveSite(response: AxiosResponse): Promise<EvolveSaveSiteResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveSaveSiteResponse.fromJS(resultData200);
            return Promise.resolve<EvolveSaveSiteResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveSaveSiteResponse>(<any>null);
    }

    saveTankDimension_SaveTankDimension(request: EvolveSaveTankDimensionRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveSaveTankDimensionResponse> {
        let url_ = this.baseUrl + "/SaveTankDimension";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSaveTankDimension_SaveTankDimension(_response);
        });
    }

    protected processSaveTankDimension_SaveTankDimension(response: AxiosResponse): Promise<EvolveSaveTankDimensionResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveSaveTankDimensionResponse.fromJS(resultData200);
            return Promise.resolve<EvolveSaveTankDimensionResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 403) {
            const _responseText = response.data;
            let result403: any = null;
            let resultData403  = _responseText;
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("A server side error occurred.", status, _responseText, _headers, result403);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveSaveTankDimensionResponse>(<any>null);
    }

    /**
     * Get domain editor components.
     * @param api_version (optional) 
     */
    getDomainAdditionalById_RetrieveDomainAdditionalById(request: EvolveGetDomainAdditionalByIdRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveGetDomainAdditionalByIdResponse> {
        let url_ = this.baseUrl + "/GetDomainAdditionalById";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetDomainAdditionalById_RetrieveDomainAdditionalById(_response);
        });
    }

    protected processGetDomainAdditionalById_RetrieveDomainAdditionalById(response: AxiosResponse): Promise<EvolveGetDomainAdditionalByIdResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveGetDomainAdditionalByIdResponse.fromJS(resultData200);
            return Promise.resolve<EvolveGetDomainAdditionalByIdResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveGetDomainAdditionalByIdResponse>(<any>null);
    }

    saveDomainAdditional_SaveDomainAdditional(request: EvolveSaveDomainAdditionalRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveSaveDomainAdditionalResponse> {
        let url_ = this.baseUrl + "/SaveDomainAdditional";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSaveDomainAdditional_SaveDomainAdditional(_response);
        });
    }

    protected processSaveDomainAdditional_SaveDomainAdditional(response: AxiosResponse): Promise<EvolveSaveDomainAdditionalResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveSaveDomainAdditionalResponse.fromJS(resultData200);
            return Promise.resolve<EvolveSaveDomainAdditionalResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = EvolveProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveSaveDomainAdditionalResponse>(<any>null);
    }
}

export interface IBaseService {
    authenticateAndRetrieveApplicationInfo_AuthenticateAndRetrieveApplicationInfo(request: EvolveAuthenticateAndRetrieveApplicationInfoRequest, api_version?: string | null | undefined): Promise<EvolveAuthenticateAndRetrieveApplicationInfoResponse>;
    retrieveDomainApplicationInfoById_RetrieveDomainApplicationInfoById(request: EvolveRetrieveDomainApplicationInfoByIdRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveDomainApplicationInfoByIdResponse>;
    retrieveUserPermissionsInfoById_RetrieveUserPermissionsInfoById(request: EvolveRetrieveUserPermissionsInfoByIdRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveUserPermissionsInfoByIdResponse>;
}

export class BaseService implements IBaseService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    authenticateAndRetrieveApplicationInfo_AuthenticateAndRetrieveApplicationInfo(request: EvolveAuthenticateAndRetrieveApplicationInfoRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveAuthenticateAndRetrieveApplicationInfoResponse> {
        let url_ = this.baseUrl + "/AuthenticateAndRetrieveApplicationInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAuthenticateAndRetrieveApplicationInfo_AuthenticateAndRetrieveApplicationInfo(_response);
        });
    }

    protected processAuthenticateAndRetrieveApplicationInfo_AuthenticateAndRetrieveApplicationInfo(response: AxiosResponse): Promise<EvolveAuthenticateAndRetrieveApplicationInfoResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveAuthenticateAndRetrieveApplicationInfoResponse.fromJS(resultData200);
            return Promise.resolve<EvolveAuthenticateAndRetrieveApplicationInfoResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveAuthenticateAndRetrieveApplicationInfoResponse>(<any>null);
    }

    retrieveDomainApplicationInfoById_RetrieveDomainApplicationInfoById(request: EvolveRetrieveDomainApplicationInfoByIdRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveDomainApplicationInfoByIdResponse> {
        let url_ = this.baseUrl + "/RetrieveDomainApplicationInfoById";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveDomainApplicationInfoById_RetrieveDomainApplicationInfoById(_response);
        });
    }

    protected processRetrieveDomainApplicationInfoById_RetrieveDomainApplicationInfoById(response: AxiosResponse): Promise<EvolveRetrieveDomainApplicationInfoByIdResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveDomainApplicationInfoByIdResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveDomainApplicationInfoByIdResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveDomainApplicationInfoByIdResponse>(<any>null);
    }

    retrieveUserPermissionsInfoById_RetrieveUserPermissionsInfoById(request: EvolveRetrieveUserPermissionsInfoByIdRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveUserPermissionsInfoByIdResponse> {
        let url_ = this.baseUrl + "/RetrieveUserPermissionsInfoById";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveUserPermissionsInfoById_RetrieveUserPermissionsInfoById(_response);
        });
    }

    protected processRetrieveUserPermissionsInfoById_RetrieveUserPermissionsInfoById(response: AxiosResponse): Promise<EvolveRetrieveUserPermissionsInfoByIdResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveUserPermissionsInfoByIdResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveUserPermissionsInfoByIdResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveUserPermissionsInfoByIdResponse>(<any>null);
    }
}

export interface IAssetService {
    retrieveAssetCustomPropertiesEditComponentsById_RetrieveAssetCustomPropertiesEditComponentsById(request: EvolveRetrieveAssetCustomPropertiesEditComponentsByIdRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveAssetCustomPropertiesEditComponentsByIdResponse>;
    retrieveAssetDetailAndGraphInfoById_RetrieveAssetDetailAndGraphInfoById(request: EvolveRetrieveAssetDetailAndGraphInfoByIdRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveAssetDetailAndGraphInfoByIdResponse>;
    retrieveAssetMapSiteDetailsByOptions_RetrieveAssetMapSiteDetailsByOptions(request: EvolveRetrieveAssetMapSiteDetailsByOptionsRequest, api_version?: string | null | undefined): Promise<FileResponse>;
    retrieveAssetMapSiteInfoRecordsByOptions_RetrieveAssetMapSiteInfoRecordsByOptions(request: EvolveAssetMapSiteInfoRecordsByOptionsRequest, api_version?: string | null | undefined): Promise<EvolveAssetMapSiteInfoRecordsByOptionsResponse>;
    saveUserAssetSettings_SaveUserAssetSettings(request: EvolveSaveUserAssetSettingsRequest, api_version?: string | null | undefined): Promise<FileResponse>;
    updateAssetNotes_UpdateAssetNotes(request: EvolveUpdateAssetNotesRequest, api_version?: string | null | undefined): Promise<FileResponse>;
    /**
     * 2.0 Asset Summary Records.
     * @param api_version (optional) 
     */
    getAssetSummaryRecordsByOptions_GetAssetSummaryRecordsByOptions(req: EvolveGetAssetSummaryRecordsByOptionsRequest, api_version?: string | null | undefined): Promise<EvolveGetAssetSummaryRecordsByOptionsResponse>;
    /**
     * Get Asset Map Records.
     * @param api_version (optional) 
     */
    retrieveAssetMapRecordsByOptions_GetAssetMapRecordsByOptions(req: EvolveRetrieveAssetMapRecordsByOptionsRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveAssetMapRecordsByOptionsResponse>;
    /**
     * save asset details info
     * @param api_version (optional) 
     */
    saveEditAssetDetailsInfo_SaveEditAssetDetailsInfo(request: EvolveSaveEditAssetDetailsInfoRequest, api_version?: string | null | undefined): Promise<EvolveSaveEditAssetDetailsInfoResponse>;
    /**
     * Save user asset details set up
     * @param api_version (optional) 
     */
    saveUserAssetDetailsSetting_SaveUserAssetDetailsSetting(request: EvovleSaveUserAssetDetailsSettingRequest, api_version?: string | null | undefined): Promise<EvolveSaveUserAssetDetailsSettingResponse>;
    asset_GetDetails(assetId: string, api_version?: string | null | undefined): Promise<AssetDetailGetResp>;
    asset_GetSummary(domainId: string, userId?: string | undefined, pageNumber?: number | undefined, pageSize?: number | null | undefined, sortBy?: string | null | undefined, sortDirection?: ListSortDirection | undefined, filterBy?: AssetListFilterOptions | undefined, filterText?: string | null | undefined, groupBy?: AssetSummaryGroupingOptions | undefined, groupSortDirection?: ListSortDirection | undefined, assetSearchExpression?: string | null | undefined, dataChannelTypes?: DataChannelType[] | null | undefined, inventoryStates?: string[] | null | undefined, assetSearchDomainId?: string | null | undefined, api_version?: string | null | undefined): Promise<AssetSummaryDto>;
    asset_GetSummaryMobile(domainId: string, userId?: string | undefined, pageNumber?: number | undefined, pageSize?: number | null | undefined, sortBy?: string | null | undefined, sortDirection?: ListSortDirection | undefined, filterBy?: AssetListFilterOptions | undefined, filterText?: string | null | undefined, groupBy?: AssetSummaryGroupingOptions | undefined, groupSortDirection?: ListSortDirection | undefined, assetSearchExpression?: string | null | undefined, dataChannelTypes?: DataChannelType[] | null | undefined, inventoryStates?: string[] | null | undefined, assetSearchDomainId?: string | null | undefined, api_version?: string | null | undefined): Promise<AssetSummaryMobileDto>;
    /**
     * Update DataChannels display priority.
     * @param assetId Unique id of the asset
     * @param requestParams List of data channels and their priority.
     * @param api_version (optional) 
     * @return true = successfuly completed updates
     */
    asset_UpdateDataChannelsDisplayPriority(assetId: string, requestParams: AssetDataChannelsDisplayPriorityDto, api_version?: string | null | undefined): Promise<boolean>;
    deleteAssetGroupsByIdList_DeleteAssetGroupsByIdList(request: EvolveDeleteAssetGroupsByIdListRequest, api_version?: string | null | undefined): Promise<EvolveDeleteAssetGroupsByIdListResponse>;
    deleteAssetsByIdList_DeleteAssetsByIdList(request: EvolveDeleteAssetsByIdListRequest, api_version?: string | null | undefined): Promise<EvolveDeleteAssetsByIdListResponse>;
    deleteAssetTreesByIdList_DeleteAssetTreesByIdList(request: EvolveDeleteAssetTreesByIdListRequest, api_version?: string | null | undefined): Promise<EvolveDeleteAssetTreesByIdListResponse>;
    retrieveAssetCopyEditComponentsById_RetrieveAssetCopyEditComponentsById(request: EvolveRetrieveAssetCopyEditComponentsByIdRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveAssetCopyEditComponentsByIdResponse>;
    retrieveAssetEditComponentsById_RetrieveAssetEditComponentsById(request: EvolveRetrieveAssetEditComponentsByIdRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveAssetEditComponentsByIdResponse>;
    retrieveAssetGroupCriteriaAutoCompleteFilterItemsByOptions_RetrieveAssetGroupCriteriaAutoCompleteFilterItemsByOptions(request: EvolveRetrieveAssetGroupCriteriaAutoCompleteFilterItemsByOptionsRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveAssetGroupCriteriaAutoCompleteFilterItemsByOptionsResponse>;
    retrieveAssetGroupEditComponentsById_RetrieveAssetGroupEditComponentsById(request: EvolveRetrieveAssetGroupEditComponentsByIdRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveAssetGroupEditComponentsByIdResponse>;
    retrieveAssetGroupInfoRecordsByDomain_RetrieveAssetGroupInfoRecordsByDomain(request: EvolveRetrieveAssetGroupInfoRecordsByDomainRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveAssetGroupInfoRecordsByDomainResponse>;
    retrieveAssetInfoRecordsByOptions_RetrieveAssetInfoRecordsByOptions(request: EvolveRetrieveAssetInfoRecordsByOptionsRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveAssetInfoRecordsByOptionsResponse>;
    retrieveAssetSummaryFromAssetGroupLoadByOptions_RetrieveAssetSummaryFromAssetGroupLoadByOptions(request: EvolveRetrieveAssetSummaryFromAssetGroupLoadByOptionsRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveAssetSummaryFromAssetGroupLoadByOptionsResponse>;
    retrieveAssetTreeInfoRecordsByDomain_RetrieveAssetTreeInfoRecordsByDomain(request: EvolveRetrieveAssetTreeInfoRecordsByDomainRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveAssetTreeInfoRecordsByDomainResponse>;
    retrieveTransferAssetProcessInfoByOptions_RetrieveTransferAssetProcessInfoByOptions(request: EvolveRetrieveTransferAssetProcessInfoByOptionsRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveTransferAssetProcessInfoByOptionsResponse>;
    retrieveTransferAssetTargetDomainInfoById_RetrieveTransferAssetTargetDomainInfoById(request: EvolveRetrieveTransferAssetTargetDomainInfoByIdRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveTransferAssetTargetDomainInfoByIdResponse>;
    retrieveTreeEditComponents_RetrieveTreeEditComponents(request: EvolveRetrieveTreeEditComponentsRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveTreeEditComponentsResponse>;
    saveAsset_SaveAsset(request: EvolveSaveAssetRequest, api_version?: string | null | undefined): Promise<EvolveSaveAssetResponse>;
    saveAssetCopy_SaveAssetCopy(request: EvolveSaveAssetCopyRequest, api_version?: string | null | undefined): Promise<EvolveSaveAssetCopyResponse>;
    saveAssetGroup_SaveAssetGroup(request: EvolveSaveAssetGroupRequest, api_version?: string | null | undefined): Promise<EvolveSaveAssetGroupResponse>;
    saveTree_SaveTree(request: EvolveSaveTreeRequest, api_version?: string | null | undefined): Promise<EvolveSaveTreeResponse>;
    transferAssets_TransferAssets(request: EvolveTransferAssetsRequest, api_version?: string | null | undefined): Promise<EvolveTransferAssetsResponse>;
    validateAssetDataChannel_ValidateAssetDataChannel(request: EvolveValidateAssetDataChannelRequest, api_version?: string | null | undefined): Promise<EvolveValidateAssetDataChannelResponse>;
    validateAssetVirtualChannelFormula_ValidateAssetVirtualChannelFormula(request: EvolveValidateAssetVirtualChannelFormulaRequest, api_version?: string | null | undefined): Promise<EvolveValidateAssetVirtualChannelFormulaResponse>;
    /**
     * Retrieve asset supported Diagnostic Data Channels By Rtu .
     * @param api_version (optional) 
     */
    retrieveAssetDiagnosticDataChannelsByRtu_RetrieveAssetDiagnosticDataChannelsByRtu(request: EvolveRetrieveAssetDiagnosticDataChannelsByRtuRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveAssetDiagnosticDataChannelsByRtuResponse>;
    /**
     * Retrieve Asset Edit Details By Id
     * @param api_version (optional) 
     */
    retrieveAssetEditDetailsById_RetrieveAssetEditDetailsById(request: EvolveRetrieveAssetEditDetailsByIdRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveAssetEditDetailsByIdResponse>;
    /**
     * Save Quick Asset Create Bulk Tank
     * @param api_version (optional) 
     */
    saveAssetEdit_SaveAssetEdit(request: EvolveSaveAssetEditRequest, api_version?: string | null | undefined): Promise<EvolveSaveAssetEditResponse>;
    /**
     * Validate asset edit
     * @param api_version (optional) 
     */
    validateAssetEdit_ValidateAssetEdit(request: EvolveSaveAssetEditRequest, api_version?: string | null | undefined): Promise<void>;
    /**
     * Retrieve parameters that are necessary for the process of quick create Helium ISO container
     * @param api_version (optional) 
     */
    retrieveQuickAssetCreateHeliumIsoContainer_RetrieveHeliumISOContainer(request: EvolveRetrieveHeliumISOContainerRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveQuickAssetCreateHeliumISOContainerResponse>;
    /**
     * Save Quick Asset Create Helium ISO Container
     * @param api_version (optional) 
     */
    saveQuickAssetCreateHeliumIsoContainer_SaveQuickAssetCreateHeliumISOContainer(request: EvolveSaveQuickAssetCreateHeliumISOContainerRequest, api_version?: string | null | undefined): Promise<EvolveSaveQuickAssetCreateHeliumISOContainerResponse>;
    retrieveQuickAssetCreateBulkTank_RetrieveQuickAssetCreateBulkTank(api_version?: string | null | undefined): Promise<EvolveRetrieveQuickAssetCreateBulkTankResponse>;
    /**
     * Save Quick Asset Create Bulk Tank
     * @param api_version (optional) 
     */
    saveQuickAssetCreateBulkTank_SaveQuickAssetCreateBulkTank(request: EvolveQuickAssetCreateBulkTankRequest, api_version?: string | null | undefined): Promise<EvolveQuickAssetCreateBulkTankResponse>;
}

export class AssetService implements IAssetService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    retrieveAssetCustomPropertiesEditComponentsById_RetrieveAssetCustomPropertiesEditComponentsById(request: EvolveRetrieveAssetCustomPropertiesEditComponentsByIdRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveAssetCustomPropertiesEditComponentsByIdResponse> {
        let url_ = this.baseUrl + "/RetrieveAssetCustomPropertiesEditComponentsById";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveAssetCustomPropertiesEditComponentsById_RetrieveAssetCustomPropertiesEditComponentsById(_response);
        });
    }

    protected processRetrieveAssetCustomPropertiesEditComponentsById_RetrieveAssetCustomPropertiesEditComponentsById(response: AxiosResponse): Promise<EvolveRetrieveAssetCustomPropertiesEditComponentsByIdResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveAssetCustomPropertiesEditComponentsByIdResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveAssetCustomPropertiesEditComponentsByIdResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveAssetCustomPropertiesEditComponentsByIdResponse>(<any>null);
    }

    retrieveAssetDetailAndGraphInfoById_RetrieveAssetDetailAndGraphInfoById(request: EvolveRetrieveAssetDetailAndGraphInfoByIdRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveAssetDetailAndGraphInfoByIdResponse> {
        let url_ = this.baseUrl + "/RetrieveAssetDetailAndGraphInfoById";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveAssetDetailAndGraphInfoById_RetrieveAssetDetailAndGraphInfoById(_response);
        });
    }

    protected processRetrieveAssetDetailAndGraphInfoById_RetrieveAssetDetailAndGraphInfoById(response: AxiosResponse): Promise<EvolveRetrieveAssetDetailAndGraphInfoByIdResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveAssetDetailAndGraphInfoByIdResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveAssetDetailAndGraphInfoByIdResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveAssetDetailAndGraphInfoByIdResponse>(<any>null);
    }

    retrieveAssetMapSiteDetailsByOptions_RetrieveAssetMapSiteDetailsByOptions(request: EvolveRetrieveAssetMapSiteDetailsByOptionsRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/RetrieveAssetMapSiteDetailsByOptions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveAssetMapSiteDetailsByOptions_RetrieveAssetMapSiteDetailsByOptions(_response);
        });
    }

    protected processRetrieveAssetMapSiteDetailsByOptions_RetrieveAssetMapSiteDetailsByOptions(response: AxiosResponse): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    retrieveAssetMapSiteInfoRecordsByOptions_RetrieveAssetMapSiteInfoRecordsByOptions(request: EvolveAssetMapSiteInfoRecordsByOptionsRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveAssetMapSiteInfoRecordsByOptionsResponse> {
        let url_ = this.baseUrl + "/RetrieveAssetMapSiteInfoRecordsByOptions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveAssetMapSiteInfoRecordsByOptions_RetrieveAssetMapSiteInfoRecordsByOptions(_response);
        });
    }

    protected processRetrieveAssetMapSiteInfoRecordsByOptions_RetrieveAssetMapSiteInfoRecordsByOptions(response: AxiosResponse): Promise<EvolveAssetMapSiteInfoRecordsByOptionsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveAssetMapSiteInfoRecordsByOptionsResponse.fromJS(resultData200);
            return Promise.resolve<EvolveAssetMapSiteInfoRecordsByOptionsResponse>(result200);

        } else if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = EvolveProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = EvolveProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 403) {
            const _responseText = response.data;
            let result403: any = null;
            let resultData403  = _responseText;
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("A server side error occurred.", status, _responseText, _headers, result403);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveAssetMapSiteInfoRecordsByOptionsResponse>(<any>null);
    }

    saveUserAssetSettings_SaveUserAssetSettings(request: EvolveSaveUserAssetSettingsRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/SaveUserAssetSettings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSaveUserAssetSettings_SaveUserAssetSettings(_response);
        });
    }

    protected processSaveUserAssetSettings_SaveUserAssetSettings(response: AxiosResponse): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    updateAssetNotes_UpdateAssetNotes(request: EvolveUpdateAssetNotesRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/UpdateAssetNotes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateAssetNotes_UpdateAssetNotes(_response);
        });
    }

    protected processUpdateAssetNotes_UpdateAssetNotes(response: AxiosResponse): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    /**
     * 2.0 Asset Summary Records.
     * @param api_version (optional) 
     */
    getAssetSummaryRecordsByOptions_GetAssetSummaryRecordsByOptions(req: EvolveGetAssetSummaryRecordsByOptionsRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveGetAssetSummaryRecordsByOptionsResponse> {
        let url_ = this.baseUrl + "/GetAssetSummaryRecordsByOptions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAssetSummaryRecordsByOptions_GetAssetSummaryRecordsByOptions(_response);
        });
    }

    protected processGetAssetSummaryRecordsByOptions_GetAssetSummaryRecordsByOptions(response: AxiosResponse): Promise<EvolveGetAssetSummaryRecordsByOptionsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveGetAssetSummaryRecordsByOptionsResponse.fromJS(resultData200);
            return Promise.resolve<EvolveGetAssetSummaryRecordsByOptionsResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 403) {
            const _responseText = response.data;
            let result403: any = null;
            let resultData403  = _responseText;
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("A server side error occurred.", status, _responseText, _headers, result403);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveGetAssetSummaryRecordsByOptionsResponse>(<any>null);
    }

    /**
     * Get Asset Map Records.
     * @param api_version (optional) 
     */
    retrieveAssetMapRecordsByOptions_GetAssetMapRecordsByOptions(req: EvolveRetrieveAssetMapRecordsByOptionsRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveAssetMapRecordsByOptionsResponse> {
        let url_ = this.baseUrl + "/RetrieveAssetMapRecordsByOptions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveAssetMapRecordsByOptions_GetAssetMapRecordsByOptions(_response);
        });
    }

    protected processRetrieveAssetMapRecordsByOptions_GetAssetMapRecordsByOptions(response: AxiosResponse): Promise<EvolveRetrieveAssetMapRecordsByOptionsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveAssetMapRecordsByOptionsResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveAssetMapRecordsByOptionsResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 403) {
            const _responseText = response.data;
            let result403: any = null;
            let resultData403  = _responseText;
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("A server side error occurred.", status, _responseText, _headers, result403);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveAssetMapRecordsByOptionsResponse>(<any>null);
    }

    /**
     * save asset details info
     * @param api_version (optional) 
     */
    saveEditAssetDetailsInfo_SaveEditAssetDetailsInfo(request: EvolveSaveEditAssetDetailsInfoRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveSaveEditAssetDetailsInfoResponse> {
        let url_ = this.baseUrl + "/SaveEditAssetDetailsInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSaveEditAssetDetailsInfo_SaveEditAssetDetailsInfo(_response);
        });
    }

    protected processSaveEditAssetDetailsInfo_SaveEditAssetDetailsInfo(response: AxiosResponse): Promise<EvolveSaveEditAssetDetailsInfoResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveSaveEditAssetDetailsInfoResponse.fromJS(resultData200);
            return Promise.resolve<EvolveSaveEditAssetDetailsInfoResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = EvolveProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 403) {
            const _responseText = response.data;
            let result403: any = null;
            let resultData403  = _responseText;
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("A server side error occurred.", status, _responseText, _headers, result403);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveSaveEditAssetDetailsInfoResponse>(<any>null);
    }

    /**
     * Save user asset details set up
     * @param api_version (optional) 
     */
    saveUserAssetDetailsSetting_SaveUserAssetDetailsSetting(request: EvovleSaveUserAssetDetailsSettingRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveSaveUserAssetDetailsSettingResponse> {
        let url_ = this.baseUrl + "/SaveUserAssetDetailsSetting";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSaveUserAssetDetailsSetting_SaveUserAssetDetailsSetting(_response);
        });
    }

    protected processSaveUserAssetDetailsSetting_SaveUserAssetDetailsSetting(response: AxiosResponse): Promise<EvolveSaveUserAssetDetailsSettingResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveSaveUserAssetDetailsSettingResponse.fromJS(resultData200);
            return Promise.resolve<EvolveSaveUserAssetDetailsSettingResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveSaveUserAssetDetailsSettingResponse>(<any>null);
    }

    asset_GetDetails(assetId: string, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<AssetDetailGetResp> {
        let url_ = this.baseUrl + "/Asset/Detail/{assetId}";
        if (assetId === undefined || assetId === null)
            throw new Error("The parameter 'assetId' must be defined.");
        url_ = url_.replace("{assetId}", encodeURIComponent("" + assetId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAsset_GetDetails(_response);
        });
    }

    protected processAsset_GetDetails(response: AxiosResponse): Promise<AssetDetailGetResp> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = AssetDetailGetResp.fromJS(resultData200);
            return Promise.resolve<AssetDetailGetResp>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AssetDetailGetResp>(<any>null);
    }

    asset_GetSummary(domainId: string, userId?: string | undefined, pageNumber?: number | undefined, pageSize?: number | null | undefined, sortBy?: string | null | undefined, sortDirection?: ListSortDirection | undefined, filterBy?: AssetListFilterOptions | undefined, filterText?: string | null | undefined, groupBy?: AssetSummaryGroupingOptions | undefined, groupSortDirection?: ListSortDirection | undefined, assetSearchExpression?: string | null | undefined, dataChannelTypes?: DataChannelType[] | null | undefined, inventoryStates?: string[] | null | undefined, assetSearchDomainId?: string | null | undefined, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<AssetSummaryDto> {
        let url_ = this.baseUrl + "/Asset/summary/domain/{domainId}?";
        if (domainId === undefined || domainId === null)
            throw new Error("The parameter 'domainId' must be defined.");
        url_ = url_.replace("{domainId}", encodeURIComponent("" + domainId));
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize !== undefined && pageSize !== null)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (sortBy !== undefined && sortBy !== null)
            url_ += "SortBy=" + encodeURIComponent("" + sortBy) + "&";
        if (sortDirection === null)
            throw new Error("The parameter 'sortDirection' cannot be null.");
        else if (sortDirection !== undefined)
            url_ += "SortDirection=" + encodeURIComponent("" + sortDirection) + "&";
        if (filterBy === null)
            throw new Error("The parameter 'filterBy' cannot be null.");
        else if (filterBy !== undefined)
            url_ += "FilterBy=" + encodeURIComponent("" + filterBy) + "&";
        if (filterText !== undefined && filterText !== null)
            url_ += "FilterText=" + encodeURIComponent("" + filterText) + "&";
        if (groupBy === null)
            throw new Error("The parameter 'groupBy' cannot be null.");
        else if (groupBy !== undefined)
            url_ += "GroupBy=" + encodeURIComponent("" + groupBy) + "&";
        if (groupSortDirection === null)
            throw new Error("The parameter 'groupSortDirection' cannot be null.");
        else if (groupSortDirection !== undefined)
            url_ += "GroupSortDirection=" + encodeURIComponent("" + groupSortDirection) + "&";
        if (assetSearchExpression !== undefined && assetSearchExpression !== null)
            url_ += "AssetSearchExpression=" + encodeURIComponent("" + assetSearchExpression) + "&";
        if (dataChannelTypes !== undefined && dataChannelTypes !== null)
            dataChannelTypes && dataChannelTypes.forEach(item => { url_ += "DataChannelTypes=" + encodeURIComponent("" + item) + "&"; });
        if (inventoryStates !== undefined && inventoryStates !== null)
            inventoryStates && inventoryStates.forEach(item => { url_ += "InventoryStates=" + encodeURIComponent("" + item) + "&"; });
        if (assetSearchDomainId !== undefined && assetSearchDomainId !== null)
            url_ += "AssetSearchDomainId=" + encodeURIComponent("" + assetSearchDomainId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAsset_GetSummary(_response);
        });
    }

    protected processAsset_GetSummary(response: AxiosResponse): Promise<AssetSummaryDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = AssetSummaryDto.fromJS(resultData200);
            return Promise.resolve<AssetSummaryDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AssetSummaryDto>(<any>null);
    }

    asset_GetSummaryMobile(domainId: string, userId?: string | undefined, pageNumber?: number | undefined, pageSize?: number | null | undefined, sortBy?: string | null | undefined, sortDirection?: ListSortDirection | undefined, filterBy?: AssetListFilterOptions | undefined, filterText?: string | null | undefined, groupBy?: AssetSummaryGroupingOptions | undefined, groupSortDirection?: ListSortDirection | undefined, assetSearchExpression?: string | null | undefined, dataChannelTypes?: DataChannelType[] | null | undefined, inventoryStates?: string[] | null | undefined, assetSearchDomainId?: string | null | undefined, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<AssetSummaryMobileDto> {
        let url_ = this.baseUrl + "/Asset/mobilesummary/domain/{domainId}?";
        if (domainId === undefined || domainId === null)
            throw new Error("The parameter 'domainId' must be defined.");
        url_ = url_.replace("{domainId}", encodeURIComponent("" + domainId));
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize !== undefined && pageSize !== null)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (sortBy !== undefined && sortBy !== null)
            url_ += "SortBy=" + encodeURIComponent("" + sortBy) + "&";
        if (sortDirection === null)
            throw new Error("The parameter 'sortDirection' cannot be null.");
        else if (sortDirection !== undefined)
            url_ += "SortDirection=" + encodeURIComponent("" + sortDirection) + "&";
        if (filterBy === null)
            throw new Error("The parameter 'filterBy' cannot be null.");
        else if (filterBy !== undefined)
            url_ += "FilterBy=" + encodeURIComponent("" + filterBy) + "&";
        if (filterText !== undefined && filterText !== null)
            url_ += "FilterText=" + encodeURIComponent("" + filterText) + "&";
        if (groupBy === null)
            throw new Error("The parameter 'groupBy' cannot be null.");
        else if (groupBy !== undefined)
            url_ += "GroupBy=" + encodeURIComponent("" + groupBy) + "&";
        if (groupSortDirection === null)
            throw new Error("The parameter 'groupSortDirection' cannot be null.");
        else if (groupSortDirection !== undefined)
            url_ += "GroupSortDirection=" + encodeURIComponent("" + groupSortDirection) + "&";
        if (assetSearchExpression !== undefined && assetSearchExpression !== null)
            url_ += "AssetSearchExpression=" + encodeURIComponent("" + assetSearchExpression) + "&";
        if (dataChannelTypes !== undefined && dataChannelTypes !== null)
            dataChannelTypes && dataChannelTypes.forEach(item => { url_ += "DataChannelTypes=" + encodeURIComponent("" + item) + "&"; });
        if (inventoryStates !== undefined && inventoryStates !== null)
            inventoryStates && inventoryStates.forEach(item => { url_ += "InventoryStates=" + encodeURIComponent("" + item) + "&"; });
        if (assetSearchDomainId !== undefined && assetSearchDomainId !== null)
            url_ += "AssetSearchDomainId=" + encodeURIComponent("" + assetSearchDomainId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAsset_GetSummaryMobile(_response);
        });
    }

    protected processAsset_GetSummaryMobile(response: AxiosResponse): Promise<AssetSummaryMobileDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = AssetSummaryMobileDto.fromJS(resultData200);
            return Promise.resolve<AssetSummaryMobileDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AssetSummaryMobileDto>(<any>null);
    }

    /**
     * Update DataChannels display priority.
     * @param assetId Unique id of the asset
     * @param requestParams List of data channels and their priority.
     * @param api_version (optional) 
     * @return true = successfuly completed updates
     */
    asset_UpdateDataChannelsDisplayPriority(assetId: string, requestParams: AssetDataChannelsDisplayPriorityDto, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/Asset/{assetId}/datachannels/displaypriority";
        if (assetId === undefined || assetId === null)
            throw new Error("The parameter 'assetId' must be defined.");
        url_ = url_.replace("{assetId}", encodeURIComponent("" + assetId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(requestParams);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAsset_UpdateDataChannelsDisplayPriority(_response);
        });
    }

    protected processAsset_UpdateDataChannelsDisplayPriority(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorRecordResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    deleteAssetGroupsByIdList_DeleteAssetGroupsByIdList(request: EvolveDeleteAssetGroupsByIdListRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveDeleteAssetGroupsByIdListResponse> {
        let url_ = this.baseUrl + "/DeleteAssetGroupsByIdList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteAssetGroupsByIdList_DeleteAssetGroupsByIdList(_response);
        });
    }

    protected processDeleteAssetGroupsByIdList_DeleteAssetGroupsByIdList(response: AxiosResponse): Promise<EvolveDeleteAssetGroupsByIdListResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveDeleteAssetGroupsByIdListResponse.fromJS(resultData200);
            return Promise.resolve<EvolveDeleteAssetGroupsByIdListResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 403) {
            const _responseText = response.data;
            let result403: any = null;
            let resultData403  = _responseText;
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("A server side error occurred.", status, _responseText, _headers, result403);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveDeleteAssetGroupsByIdListResponse>(<any>null);
    }

    deleteAssetsByIdList_DeleteAssetsByIdList(request: EvolveDeleteAssetsByIdListRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveDeleteAssetsByIdListResponse> {
        let url_ = this.baseUrl + "/DeleteAssetsByIdList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteAssetsByIdList_DeleteAssetsByIdList(_response);
        });
    }

    protected processDeleteAssetsByIdList_DeleteAssetsByIdList(response: AxiosResponse): Promise<EvolveDeleteAssetsByIdListResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveDeleteAssetsByIdListResponse.fromJS(resultData200);
            return Promise.resolve<EvolveDeleteAssetsByIdListResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveDeleteAssetsByIdListResponse>(<any>null);
    }

    deleteAssetTreesByIdList_DeleteAssetTreesByIdList(request: EvolveDeleteAssetTreesByIdListRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveDeleteAssetTreesByIdListResponse> {
        let url_ = this.baseUrl + "/DeleteAssetTreesByIdList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteAssetTreesByIdList_DeleteAssetTreesByIdList(_response);
        });
    }

    protected processDeleteAssetTreesByIdList_DeleteAssetTreesByIdList(response: AxiosResponse): Promise<EvolveDeleteAssetTreesByIdListResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveDeleteAssetTreesByIdListResponse.fromJS(resultData200);
            return Promise.resolve<EvolveDeleteAssetTreesByIdListResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveDeleteAssetTreesByIdListResponse>(<any>null);
    }

    retrieveAssetCopyEditComponentsById_RetrieveAssetCopyEditComponentsById(request: EvolveRetrieveAssetCopyEditComponentsByIdRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveAssetCopyEditComponentsByIdResponse> {
        let url_ = this.baseUrl + "/RetrieveAssetCopyEditComponentsById";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveAssetCopyEditComponentsById_RetrieveAssetCopyEditComponentsById(_response);
        });
    }

    protected processRetrieveAssetCopyEditComponentsById_RetrieveAssetCopyEditComponentsById(response: AxiosResponse): Promise<EvolveRetrieveAssetCopyEditComponentsByIdResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveAssetCopyEditComponentsByIdResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveAssetCopyEditComponentsByIdResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveAssetCopyEditComponentsByIdResponse>(<any>null);
    }

    retrieveAssetEditComponentsById_RetrieveAssetEditComponentsById(request: EvolveRetrieveAssetEditComponentsByIdRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveAssetEditComponentsByIdResponse> {
        let url_ = this.baseUrl + "/RetrieveAssetEditComponentsById";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveAssetEditComponentsById_RetrieveAssetEditComponentsById(_response);
        });
    }

    protected processRetrieveAssetEditComponentsById_RetrieveAssetEditComponentsById(response: AxiosResponse): Promise<EvolveRetrieveAssetEditComponentsByIdResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveAssetEditComponentsByIdResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveAssetEditComponentsByIdResponse>(result200);

        } else if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveAssetEditComponentsByIdResponse>(<any>null);
    }

    retrieveAssetGroupCriteriaAutoCompleteFilterItemsByOptions_RetrieveAssetGroupCriteriaAutoCompleteFilterItemsByOptions(request: EvolveRetrieveAssetGroupCriteriaAutoCompleteFilterItemsByOptionsRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveAssetGroupCriteriaAutoCompleteFilterItemsByOptionsResponse> {
        let url_ = this.baseUrl + "/RetrieveAssetGroupCriteriaAutoCompleteFilterItemsByOptions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveAssetGroupCriteriaAutoCompleteFilterItemsByOptions_RetrieveAssetGroupCriteriaAutoCompleteFilterItemsByOptions(_response);
        });
    }

    protected processRetrieveAssetGroupCriteriaAutoCompleteFilterItemsByOptions_RetrieveAssetGroupCriteriaAutoCompleteFilterItemsByOptions(response: AxiosResponse): Promise<EvolveRetrieveAssetGroupCriteriaAutoCompleteFilterItemsByOptionsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveAssetGroupCriteriaAutoCompleteFilterItemsByOptionsResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveAssetGroupCriteriaAutoCompleteFilterItemsByOptionsResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 403) {
            const _responseText = response.data;
            let result403: any = null;
            let resultData403  = _responseText;
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("A server side error occurred.", status, _responseText, _headers, result403);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveAssetGroupCriteriaAutoCompleteFilterItemsByOptionsResponse>(<any>null);
    }

    retrieveAssetGroupEditComponentsById_RetrieveAssetGroupEditComponentsById(request: EvolveRetrieveAssetGroupEditComponentsByIdRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveAssetGroupEditComponentsByIdResponse> {
        let url_ = this.baseUrl + "/RetrieveAssetGroupEditComponentsById";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveAssetGroupEditComponentsById_RetrieveAssetGroupEditComponentsById(_response);
        });
    }

    protected processRetrieveAssetGroupEditComponentsById_RetrieveAssetGroupEditComponentsById(response: AxiosResponse): Promise<EvolveRetrieveAssetGroupEditComponentsByIdResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveAssetGroupEditComponentsByIdResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveAssetGroupEditComponentsByIdResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 403) {
            const _responseText = response.data;
            let result403: any = null;
            let resultData403  = _responseText;
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("A server side error occurred.", status, _responseText, _headers, result403);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveAssetGroupEditComponentsByIdResponse>(<any>null);
    }

    retrieveAssetGroupInfoRecordsByDomain_RetrieveAssetGroupInfoRecordsByDomain(request: EvolveRetrieveAssetGroupInfoRecordsByDomainRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveAssetGroupInfoRecordsByDomainResponse> {
        let url_ = this.baseUrl + "/RetrieveAssetGroupInfoRecordsByDomain";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveAssetGroupInfoRecordsByDomain_RetrieveAssetGroupInfoRecordsByDomain(_response);
        });
    }

    protected processRetrieveAssetGroupInfoRecordsByDomain_RetrieveAssetGroupInfoRecordsByDomain(response: AxiosResponse): Promise<EvolveRetrieveAssetGroupInfoRecordsByDomainResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveAssetGroupInfoRecordsByDomainResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveAssetGroupInfoRecordsByDomainResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 403) {
            const _responseText = response.data;
            let result403: any = null;
            let resultData403  = _responseText;
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("A server side error occurred.", status, _responseText, _headers, result403);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveAssetGroupInfoRecordsByDomainResponse>(<any>null);
    }

    retrieveAssetInfoRecordsByOptions_RetrieveAssetInfoRecordsByOptions(request: EvolveRetrieveAssetInfoRecordsByOptionsRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveAssetInfoRecordsByOptionsResponse> {
        let url_ = this.baseUrl + "/RetrieveAssetInfoRecordsByOptions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveAssetInfoRecordsByOptions_RetrieveAssetInfoRecordsByOptions(_response);
        });
    }

    protected processRetrieveAssetInfoRecordsByOptions_RetrieveAssetInfoRecordsByOptions(response: AxiosResponse): Promise<EvolveRetrieveAssetInfoRecordsByOptionsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveAssetInfoRecordsByOptionsResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveAssetInfoRecordsByOptionsResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveAssetInfoRecordsByOptionsResponse>(<any>null);
    }

    retrieveAssetSummaryFromAssetGroupLoadByOptions_RetrieveAssetSummaryFromAssetGroupLoadByOptions(request: EvolveRetrieveAssetSummaryFromAssetGroupLoadByOptionsRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveAssetSummaryFromAssetGroupLoadByOptionsResponse> {
        let url_ = this.baseUrl + "/RetrieveAssetSummaryFromAssetGroupLoadByOptions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveAssetSummaryFromAssetGroupLoadByOptions_RetrieveAssetSummaryFromAssetGroupLoadByOptions(_response);
        });
    }

    protected processRetrieveAssetSummaryFromAssetGroupLoadByOptions_RetrieveAssetSummaryFromAssetGroupLoadByOptions(response: AxiosResponse): Promise<EvolveRetrieveAssetSummaryFromAssetGroupLoadByOptionsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveAssetSummaryFromAssetGroupLoadByOptionsResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveAssetSummaryFromAssetGroupLoadByOptionsResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveAssetSummaryFromAssetGroupLoadByOptionsResponse>(<any>null);
    }

    retrieveAssetTreeInfoRecordsByDomain_RetrieveAssetTreeInfoRecordsByDomain(request: EvolveRetrieveAssetTreeInfoRecordsByDomainRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveAssetTreeInfoRecordsByDomainResponse> {
        let url_ = this.baseUrl + "/RetrieveAssetTreeInfoRecordsByDomain";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveAssetTreeInfoRecordsByDomain_RetrieveAssetTreeInfoRecordsByDomain(_response);
        });
    }

    protected processRetrieveAssetTreeInfoRecordsByDomain_RetrieveAssetTreeInfoRecordsByDomain(response: AxiosResponse): Promise<EvolveRetrieveAssetTreeInfoRecordsByDomainResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveAssetTreeInfoRecordsByDomainResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveAssetTreeInfoRecordsByDomainResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveAssetTreeInfoRecordsByDomainResponse>(<any>null);
    }

    retrieveTransferAssetProcessInfoByOptions_RetrieveTransferAssetProcessInfoByOptions(request: EvolveRetrieveTransferAssetProcessInfoByOptionsRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveTransferAssetProcessInfoByOptionsResponse> {
        let url_ = this.baseUrl + "/RetrieveTransferAssetProcessInfoByOptions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveTransferAssetProcessInfoByOptions_RetrieveTransferAssetProcessInfoByOptions(_response);
        });
    }

    protected processRetrieveTransferAssetProcessInfoByOptions_RetrieveTransferAssetProcessInfoByOptions(response: AxiosResponse): Promise<EvolveRetrieveTransferAssetProcessInfoByOptionsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveTransferAssetProcessInfoByOptionsResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveTransferAssetProcessInfoByOptionsResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveTransferAssetProcessInfoByOptionsResponse>(<any>null);
    }

    retrieveTransferAssetTargetDomainInfoById_RetrieveTransferAssetTargetDomainInfoById(request: EvolveRetrieveTransferAssetTargetDomainInfoByIdRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveTransferAssetTargetDomainInfoByIdResponse> {
        let url_ = this.baseUrl + "/RetrieveTransferAssetTargetDomainInfoById";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveTransferAssetTargetDomainInfoById_RetrieveTransferAssetTargetDomainInfoById(_response);
        });
    }

    protected processRetrieveTransferAssetTargetDomainInfoById_RetrieveTransferAssetTargetDomainInfoById(response: AxiosResponse): Promise<EvolveRetrieveTransferAssetTargetDomainInfoByIdResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveTransferAssetTargetDomainInfoByIdResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveTransferAssetTargetDomainInfoByIdResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveTransferAssetTargetDomainInfoByIdResponse>(<any>null);
    }

    retrieveTreeEditComponents_RetrieveTreeEditComponents(request: EvolveRetrieveTreeEditComponentsRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveTreeEditComponentsResponse> {
        let url_ = this.baseUrl + "/RetrieveTreeEditComponents";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveTreeEditComponents_RetrieveTreeEditComponents(_response);
        });
    }

    protected processRetrieveTreeEditComponents_RetrieveTreeEditComponents(response: AxiosResponse): Promise<EvolveRetrieveTreeEditComponentsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveTreeEditComponentsResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveTreeEditComponentsResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveTreeEditComponentsResponse>(<any>null);
    }

    saveAsset_SaveAsset(request: EvolveSaveAssetRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveSaveAssetResponse> {
        let url_ = this.baseUrl + "/SaveAsset";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSaveAsset_SaveAsset(_response);
        });
    }

    protected processSaveAsset_SaveAsset(response: AxiosResponse): Promise<EvolveSaveAssetResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveSaveAssetResponse.fromJS(resultData200);
            return Promise.resolve<EvolveSaveAssetResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveSaveAssetResponse>(<any>null);
    }

    saveAssetCopy_SaveAssetCopy(request: EvolveSaveAssetCopyRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveSaveAssetCopyResponse> {
        let url_ = this.baseUrl + "/SaveAssetCopy";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSaveAssetCopy_SaveAssetCopy(_response);
        });
    }

    protected processSaveAssetCopy_SaveAssetCopy(response: AxiosResponse): Promise<EvolveSaveAssetCopyResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveSaveAssetCopyResponse.fromJS(resultData200);
            return Promise.resolve<EvolveSaveAssetCopyResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveSaveAssetCopyResponse>(<any>null);
    }

    saveAssetGroup_SaveAssetGroup(request: EvolveSaveAssetGroupRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveSaveAssetGroupResponse> {
        let url_ = this.baseUrl + "/SaveAssetGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSaveAssetGroup_SaveAssetGroup(_response);
        });
    }

    protected processSaveAssetGroup_SaveAssetGroup(response: AxiosResponse): Promise<EvolveSaveAssetGroupResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveSaveAssetGroupResponse.fromJS(resultData200);
            return Promise.resolve<EvolveSaveAssetGroupResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 403) {
            const _responseText = response.data;
            let result403: any = null;
            let resultData403  = _responseText;
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("A server side error occurred.", status, _responseText, _headers, result403);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveSaveAssetGroupResponse>(<any>null);
    }

    saveTree_SaveTree(request: EvolveSaveTreeRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveSaveTreeResponse> {
        let url_ = this.baseUrl + "/SaveTree";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSaveTree_SaveTree(_response);
        });
    }

    protected processSaveTree_SaveTree(response: AxiosResponse): Promise<EvolveSaveTreeResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveSaveTreeResponse.fromJS(resultData200);
            return Promise.resolve<EvolveSaveTreeResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveSaveTreeResponse>(<any>null);
    }

    transferAssets_TransferAssets(request: EvolveTransferAssetsRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveTransferAssetsResponse> {
        let url_ = this.baseUrl + "/TransferAssets";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTransferAssets_TransferAssets(_response);
        });
    }

    protected processTransferAssets_TransferAssets(response: AxiosResponse): Promise<EvolveTransferAssetsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveTransferAssetsResponse.fromJS(resultData200);
            return Promise.resolve<EvolveTransferAssetsResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveTransferAssetsResponse>(<any>null);
    }

    validateAssetDataChannel_ValidateAssetDataChannel(request: EvolveValidateAssetDataChannelRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveValidateAssetDataChannelResponse> {
        let url_ = this.baseUrl + "/ValidateAssetDataChannel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processValidateAssetDataChannel_ValidateAssetDataChannel(_response);
        });
    }

    protected processValidateAssetDataChannel_ValidateAssetDataChannel(response: AxiosResponse): Promise<EvolveValidateAssetDataChannelResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveValidateAssetDataChannelResponse.fromJS(resultData200);
            return Promise.resolve<EvolveValidateAssetDataChannelResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveValidateAssetDataChannelResponse>(<any>null);
    }

    validateAssetVirtualChannelFormula_ValidateAssetVirtualChannelFormula(request: EvolveValidateAssetVirtualChannelFormulaRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveValidateAssetVirtualChannelFormulaResponse> {
        let url_ = this.baseUrl + "/ValidateAssetVirtualChannelFormula";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processValidateAssetVirtualChannelFormula_ValidateAssetVirtualChannelFormula(_response);
        });
    }

    protected processValidateAssetVirtualChannelFormula_ValidateAssetVirtualChannelFormula(response: AxiosResponse): Promise<EvolveValidateAssetVirtualChannelFormulaResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveValidateAssetVirtualChannelFormulaResponse.fromJS(resultData200);
            return Promise.resolve<EvolveValidateAssetVirtualChannelFormulaResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveValidateAssetVirtualChannelFormulaResponse>(<any>null);
    }

    /**
     * Retrieve asset supported Diagnostic Data Channels By Rtu .
     * @param api_version (optional) 
     */
    retrieveAssetDiagnosticDataChannelsByRtu_RetrieveAssetDiagnosticDataChannelsByRtu(request: EvolveRetrieveAssetDiagnosticDataChannelsByRtuRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveAssetDiagnosticDataChannelsByRtuResponse> {
        let url_ = this.baseUrl + "/RetrieveAssetDiagnosticDataChannelsByRtu";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveAssetDiagnosticDataChannelsByRtu_RetrieveAssetDiagnosticDataChannelsByRtu(_response);
        });
    }

    protected processRetrieveAssetDiagnosticDataChannelsByRtu_RetrieveAssetDiagnosticDataChannelsByRtu(response: AxiosResponse): Promise<EvolveRetrieveAssetDiagnosticDataChannelsByRtuResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveAssetDiagnosticDataChannelsByRtuResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveAssetDiagnosticDataChannelsByRtuResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveAssetDiagnosticDataChannelsByRtuResponse>(<any>null);
    }

    /**
     * Retrieve Asset Edit Details By Id
     * @param api_version (optional) 
     */
    retrieveAssetEditDetailsById_RetrieveAssetEditDetailsById(request: EvolveRetrieveAssetEditDetailsByIdRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveAssetEditDetailsByIdResponse> {
        let url_ = this.baseUrl + "/RetrieveAssetEditDetailsById";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveAssetEditDetailsById_RetrieveAssetEditDetailsById(_response);
        });
    }

    protected processRetrieveAssetEditDetailsById_RetrieveAssetEditDetailsById(response: AxiosResponse): Promise<EvolveRetrieveAssetEditDetailsByIdResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveAssetEditDetailsByIdResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveAssetEditDetailsByIdResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveAssetEditDetailsByIdResponse>(<any>null);
    }

    /**
     * Save Quick Asset Create Bulk Tank
     * @param api_version (optional) 
     */
    saveAssetEdit_SaveAssetEdit(request: EvolveSaveAssetEditRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveSaveAssetEditResponse> {
        let url_ = this.baseUrl + "/SaveAssetEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSaveAssetEdit_SaveAssetEdit(_response);
        });
    }

    protected processSaveAssetEdit_SaveAssetEdit(response: AxiosResponse): Promise<EvolveSaveAssetEditResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveSaveAssetEditResponse.fromJS(resultData200);
            return Promise.resolve<EvolveSaveAssetEditResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = EvolveProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveSaveAssetEditResponse>(<any>null);
    }

    /**
     * Validate asset edit
     * @param api_version (optional) 
     */
    validateAssetEdit_ValidateAssetEdit(request: EvolveSaveAssetEditRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/ValidateAssetEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processValidateAssetEdit_ValidateAssetEdit(_response);
        });
    }

    protected processValidateAssetEdit_ValidateAssetEdit(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = EvolveProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Retrieve parameters that are necessary for the process of quick create Helium ISO container
     * @param api_version (optional) 
     */
    retrieveQuickAssetCreateHeliumIsoContainer_RetrieveHeliumISOContainer(request: EvolveRetrieveHeliumISOContainerRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveQuickAssetCreateHeliumISOContainerResponse> {
        let url_ = this.baseUrl + "/RetrieveQuickAssetCreateHeliumIsoContainer";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveQuickAssetCreateHeliumIsoContainer_RetrieveHeliumISOContainer(_response);
        });
    }

    protected processRetrieveQuickAssetCreateHeliumIsoContainer_RetrieveHeliumISOContainer(response: AxiosResponse): Promise<EvolveRetrieveQuickAssetCreateHeliumISOContainerResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveQuickAssetCreateHeliumISOContainerResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveQuickAssetCreateHeliumISOContainerResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveQuickAssetCreateHeliumISOContainerResponse>(<any>null);
    }

    /**
     * Save Quick Asset Create Helium ISO Container
     * @param api_version (optional) 
     */
    saveQuickAssetCreateHeliumIsoContainer_SaveQuickAssetCreateHeliumISOContainer(request: EvolveSaveQuickAssetCreateHeliumISOContainerRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveSaveQuickAssetCreateHeliumISOContainerResponse> {
        let url_ = this.baseUrl + "/SaveQuickAssetCreateHeliumIsoContainer";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSaveQuickAssetCreateHeliumIsoContainer_SaveQuickAssetCreateHeliumISOContainer(_response);
        });
    }

    protected processSaveQuickAssetCreateHeliumIsoContainer_SaveQuickAssetCreateHeliumISOContainer(response: AxiosResponse): Promise<EvolveSaveQuickAssetCreateHeliumISOContainerResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveSaveQuickAssetCreateHeliumISOContainerResponse.fromJS(resultData200);
            return Promise.resolve<EvolveSaveQuickAssetCreateHeliumISOContainerResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = EvolveProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveSaveQuickAssetCreateHeliumISOContainerResponse>(<any>null);
    }

    retrieveQuickAssetCreateBulkTank_RetrieveQuickAssetCreateBulkTank(api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveQuickAssetCreateBulkTankResponse> {
        let url_ = this.baseUrl + "/RetrieveQuickAssetCreateBulkTank";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveQuickAssetCreateBulkTank_RetrieveQuickAssetCreateBulkTank(_response);
        });
    }

    protected processRetrieveQuickAssetCreateBulkTank_RetrieveQuickAssetCreateBulkTank(response: AxiosResponse): Promise<EvolveRetrieveQuickAssetCreateBulkTankResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveQuickAssetCreateBulkTankResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveQuickAssetCreateBulkTankResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveQuickAssetCreateBulkTankResponse>(<any>null);
    }

    /**
     * Save Quick Asset Create Bulk Tank
     * @param api_version (optional) 
     */
    saveQuickAssetCreateBulkTank_SaveQuickAssetCreateBulkTank(request: EvolveQuickAssetCreateBulkTankRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveQuickAssetCreateBulkTankResponse> {
        let url_ = this.baseUrl + "/SaveQuickAssetCreateBulkTank";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSaveQuickAssetCreateBulkTank_SaveQuickAssetCreateBulkTank(_response);
        });
    }

    protected processSaveQuickAssetCreateBulkTank_SaveQuickAssetCreateBulkTank(response: AxiosResponse): Promise<EvolveQuickAssetCreateBulkTankResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveQuickAssetCreateBulkTankResponse.fromJS(resultData200);
            return Promise.resolve<EvolveQuickAssetCreateBulkTankResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = EvolveProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveQuickAssetCreateBulkTankResponse>(<any>null);
    }
}

export interface IErrorService {
    /**
     * When exception is thrown in application it will error here. Capture it and pass through to app insights.
     * @param api_version (optional) 
     */
    error_Error(api_version?: string | null | undefined): Promise<FileResponse>;
}

export class ErrorService implements IErrorService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    /**
     * When exception is thrown in application it will error here. Capture it and pass through to app insights.
     * @param api_version (optional) 
     */
    error_Error(api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/error";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            responseType: "blob",
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processError_Error(_response);
        });
    }

    protected processError_Error(response: AxiosResponse): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(<any>null);
    }
}

export interface ILocalizationService {
    /**
     * Returns a list of supported languages for the API.
     * @param api_version (optional) 
     * @return List of supported languages.
     */
    localization_GetSupportedLanguages(api_version?: string | null | undefined): Promise<string[]>;
    /**
     * Returns all localized messages in the language currently set by the apiRequest culture.
     * @param api_version (optional) 
     * @return List of all localization messages translated into the language set by the apiRequest culture.
     */
    localization_GetAllLocalizedMessages(api_version?: string | null | undefined): Promise<LocalizedString[]>;
    /**
     * Set's the language in the culture cookie utilized by the localizer service.
     * @param api_version (optional) 
     * @return Language successfully appended to response cookie.
     */
    localization_SetLanguage(culture: string, api_version?: string | null | undefined): Promise<string>;
}

export class LocalizationService implements ILocalizationService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    /**
     * Returns a list of supported languages for the API.
     * @param api_version (optional) 
     * @return List of supported languages.
     */
    localization_GetSupportedLanguages(api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<string[]> {
        let url_ = this.baseUrl + "/supportedLanguages";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLocalization_GetSupportedLanguages(_response);
        });
    }

    protected processLocalization_GetSupportedLanguages(response: AxiosResponse): Promise<string[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<string[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string[]>(<any>null);
    }

    /**
     * Returns all localized messages in the language currently set by the apiRequest culture.
     * @param api_version (optional) 
     * @return List of all localization messages translated into the language set by the apiRequest culture.
     */
    localization_GetAllLocalizedMessages(api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<LocalizedString[]> {
        let url_ = this.baseUrl + "/messages";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLocalization_GetAllLocalizedMessages(_response);
        });
    }

    protected processLocalization_GetAllLocalizedMessages(response: AxiosResponse): Promise<LocalizedString[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(LocalizedString.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<LocalizedString[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<LocalizedString[]>(<any>null);
    }

    /**
     * Set's the language in the culture cookie utilized by the localizer service.
     * @param api_version (optional) 
     * @return Language successfully appended to response cookie.
     */
    localization_SetLanguage(culture: string, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<string> {
        let url_ = this.baseUrl + "/setLanguage";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(culture);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLocalization_SetLanguage(_response);
        });
    }

    protected processLocalization_SetLanguage(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<string>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Language not supported.\nor\nLanguage cannot be null.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(<any>null);
    }
}

export interface ITestService {
    /**
     * Endpoint to ping the api to see if it's running.
     * @param api_version (optional) 
     */
    test_Ping(api_version?: string | null | undefined): Promise<FileResponse>;
    /**
     * Endpoint to test exception logging to app insights.
     * @param api_version (optional) 
     */
    test_TestExceptionLogging(api_version?: string | null | undefined): Promise<FileResponse>;
}

export class TestService implements ITestService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    /**
     * Endpoint to ping the api to see if it's running.
     * @param api_version (optional) 
     */
    test_Ping(api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/ping";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            responseType: "blob",
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTest_Ping(_response);
        });
    }

    protected processTest_Ping(response: AxiosResponse): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    /**
     * Endpoint to test exception logging to app insights.
     * @param api_version (optional) 
     */
    test_TestExceptionLogging(api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/testExceptionLogging";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            responseType: "blob",
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTest_TestExceptionLogging(_response);
        });
    }

    protected processTest_TestExceptionLogging(response: AxiosResponse): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(<any>null);
    }
}

export interface IUnitsConverterService {
    /**
     * Converts data channel values from a source unit to a target unit.
     * @param api_version (optional) 
     */
    dataChannelUnitsConverter_DataChannelUnitsConverter(request: EvolveUnitsConverterRequest, api_version?: string | null | undefined): Promise<EvolveUnitsConverterResponse>;
    /**
     * Converts max product height value from a source unit to a target unit.
     * @param api_version (optional) 
     */
    maxProductHeightUnitsConverterWithTankDimensions_MaxProductHeightUnitsConverterWithTankDimensions(request: EvolveMaxProductHeightUnitsConverterWithTankDimensionsRequest, api_version?: string | null | undefined): Promise<EvolveMaxProductHeightUnitsConverterWithTankDimensionsResponse>;
    /**
     * Converts values from a source unit to a target unit.
     * @param api_version (optional) 
     */
    unitsConverterWithConversionInfo_UnitsConverterWithConversionInfo(request: EvolveUnitsConverterWithConversionInfoRequest, api_version?: string | null | undefined): Promise<EvolveUnitsConverterWithConversionInfoResponse>;
    /**
     * Converts values from a source unit to a target unit.
     * @param api_version (optional) 
     */
    quickAssetCreateUnitsConverter_QuickAssetCreateUnitsConverter(request: EvolveQuickAssetCreateUnitsConverterRequest, api_version?: string | null | undefined): Promise<EvolveQuickAssetCreateUnitsConverterResponse>;
}

export class UnitsConverterService implements IUnitsConverterService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    /**
     * Converts data channel values from a source unit to a target unit.
     * @param api_version (optional) 
     */
    dataChannelUnitsConverter_DataChannelUnitsConverter(request: EvolveUnitsConverterRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveUnitsConverterResponse> {
        let url_ = this.baseUrl + "/DataChannelUnitsConverter";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDataChannelUnitsConverter_DataChannelUnitsConverter(_response);
        });
    }

    protected processDataChannelUnitsConverter_DataChannelUnitsConverter(response: AxiosResponse): Promise<EvolveUnitsConverterResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveUnitsConverterResponse.fromJS(resultData200);
            return Promise.resolve<EvolveUnitsConverterResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveUnitsConverterResponse>(<any>null);
    }

    /**
     * Converts max product height value from a source unit to a target unit.
     * @param api_version (optional) 
     */
    maxProductHeightUnitsConverterWithTankDimensions_MaxProductHeightUnitsConverterWithTankDimensions(request: EvolveMaxProductHeightUnitsConverterWithTankDimensionsRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveMaxProductHeightUnitsConverterWithTankDimensionsResponse> {
        let url_ = this.baseUrl + "/MaxProductHeightUnitsConverterWithTankDimensions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMaxProductHeightUnitsConverterWithTankDimensions_MaxProductHeightUnitsConverterWithTankDimensions(_response);
        });
    }

    protected processMaxProductHeightUnitsConverterWithTankDimensions_MaxProductHeightUnitsConverterWithTankDimensions(response: AxiosResponse): Promise<EvolveMaxProductHeightUnitsConverterWithTankDimensionsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveMaxProductHeightUnitsConverterWithTankDimensionsResponse.fromJS(resultData200);
            return Promise.resolve<EvolveMaxProductHeightUnitsConverterWithTankDimensionsResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveMaxProductHeightUnitsConverterWithTankDimensionsResponse>(<any>null);
    }

    /**
     * Converts values from a source unit to a target unit.
     * @param api_version (optional) 
     */
    unitsConverterWithConversionInfo_UnitsConverterWithConversionInfo(request: EvolveUnitsConverterWithConversionInfoRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveUnitsConverterWithConversionInfoResponse> {
        let url_ = this.baseUrl + "/UnitsConverterWithConversionInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUnitsConverterWithConversionInfo_UnitsConverterWithConversionInfo(_response);
        });
    }

    protected processUnitsConverterWithConversionInfo_UnitsConverterWithConversionInfo(response: AxiosResponse): Promise<EvolveUnitsConverterWithConversionInfoResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveUnitsConverterWithConversionInfoResponse.fromJS(resultData200);
            return Promise.resolve<EvolveUnitsConverterWithConversionInfoResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveUnitsConverterWithConversionInfoResponse>(<any>null);
    }

    /**
     * Converts values from a source unit to a target unit.
     * @param api_version (optional) 
     */
    quickAssetCreateUnitsConverter_QuickAssetCreateUnitsConverter(request: EvolveQuickAssetCreateUnitsConverterRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveQuickAssetCreateUnitsConverterResponse> {
        let url_ = this.baseUrl + "/QuickAssetCreateUnitsConverter";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processQuickAssetCreateUnitsConverter_QuickAssetCreateUnitsConverter(_response);
        });
    }

    protected processQuickAssetCreateUnitsConverter_QuickAssetCreateUnitsConverter(response: AxiosResponse): Promise<EvolveQuickAssetCreateUnitsConverterResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveQuickAssetCreateUnitsConverterResponse.fromJS(resultData200);
            return Promise.resolve<EvolveQuickAssetCreateUnitsConverterResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveQuickAssetCreateUnitsConverterResponse>(<any>null);
    }
}

export interface ICloverRtuService {
    /**
     * Retrieve a Clover RTU Communication Log.
     * @param deviceId Hardware unique identifier for an RTU.
     * @param beginTime (optional) The log records are retrieved in decending order starting from this time.
     * @param offset (optional) This is the starting record offset (starts at 0) in the communication log. Used to page through the comm logs. For example, with a limit of 20, the offset first page is 0 and second is 20.
     * @param limit (optional) This is the maximum number of records to return.
     * @param statuses (optional) List of status values to include in response.
     * @param direction (optional) Filter on inbound/outbound calls.
     * @param endTime (optional) This is the oldest record that will be returned.
     * @param api_version (optional) 
     * @return CallJournalRcmDTO[]
     */
    cloverRtu_RetrieveRtuCommlog(deviceId: string | null, beginTime?: Date | undefined, offset?: number | null | undefined, limit?: number | null | undefined, statuses?: RcmJournalItemStatusEnum[] | null | undefined, direction?: RtuCommDirection | null | undefined, endTime?: Date | null | undefined, api_version?: string | null | undefined): Promise<CallJournalRcmDto[]>;
    /**
     * Retrieve a Clover RTU session records for a call.
     * @param callJournalId This is the CallJournalId from the CallJournalRcmDTO. It identifies the call to which the sessions belong.
     * @param callTime (optional) This is the CreatedDate field from the CallJournalRcmDTO. It is used to speed up the search for session records as the data is partitioned on the CreatedDate.
     * @param api_version (optional) 
     */
    cloverRtu_RetrieveRtuCommlogSession(callJournalId: number, deviceId: string, callTime?: Date | undefined, api_version?: string | null | undefined): Promise<SessionJournalRcmDto[]>;
}

export class CloverRtuService implements ICloverRtuService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    /**
     * Retrieve a Clover RTU Communication Log.
     * @param deviceId Hardware unique identifier for an RTU.
     * @param beginTime (optional) The log records are retrieved in decending order starting from this time.
     * @param offset (optional) This is the starting record offset (starts at 0) in the communication log. Used to page through the comm logs. For example, with a limit of 20, the offset first page is 0 and second is 20.
     * @param limit (optional) This is the maximum number of records to return.
     * @param statuses (optional) List of status values to include in response.
     * @param direction (optional) Filter on inbound/outbound calls.
     * @param endTime (optional) This is the oldest record that will be returned.
     * @param api_version (optional) 
     * @return CallJournalRcmDTO[]
     */
    cloverRtu_RetrieveRtuCommlog(deviceId: string | null, beginTime?: Date | undefined, offset?: number | null | undefined, limit?: number | null | undefined, statuses?: RcmJournalItemStatusEnum[] | null | undefined, direction?: RtuCommDirection | null | undefined, endTime?: Date | null | undefined, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<CallJournalRcmDto[]> {
        let url_ = this.baseUrl + "/CloverRtu/{deviceId}/commlog?";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        if (beginTime === null)
            throw new Error("The parameter 'beginTime' cannot be null.");
        else if (beginTime !== undefined)
            url_ += "begin_time=" + encodeURIComponent(beginTime ? "" + beginTime.toJSON() : "") + "&";
        if (offset !== undefined && offset !== null)
            url_ += "offset=" + encodeURIComponent("" + offset) + "&";
        if (limit !== undefined && limit !== null)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        if (statuses !== undefined && statuses !== null)
            statuses && statuses.forEach(item => { url_ += "statuses=" + encodeURIComponent("" + item) + "&"; });
        if (direction !== undefined && direction !== null)
            url_ += "direction=" + encodeURIComponent("" + direction) + "&";
        if (endTime !== undefined && endTime !== null)
            url_ += "end_time=" + encodeURIComponent(endTime ? "" + endTime.toJSON() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCloverRtu_RetrieveRtuCommlog(_response);
        });
    }

    protected processCloverRtu_RetrieveRtuCommlog(response: AxiosResponse): Promise<CallJournalRcmDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CallJournalRcmDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<CallJournalRcmDto[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CallJournalRcmDto[]>(<any>null);
    }

    /**
     * Retrieve a Clover RTU session records for a call.
     * @param callJournalId This is the CallJournalId from the CallJournalRcmDTO. It identifies the call to which the sessions belong.
     * @param callTime (optional) This is the CreatedDate field from the CallJournalRcmDTO. It is used to speed up the search for session records as the data is partitioned on the CreatedDate.
     * @param api_version (optional) 
     */
    cloverRtu_RetrieveRtuCommlogSession(callJournalId: number, deviceId: string, callTime?: Date | undefined, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<SessionJournalRcmDto[]> {
        let url_ = this.baseUrl + "/CloverRtu/{deviceId}/commlog/sessions/{callJournalId}?";
        if (callJournalId === undefined || callJournalId === null)
            throw new Error("The parameter 'callJournalId' must be defined.");
        url_ = url_.replace("{callJournalId}", encodeURIComponent("" + callJournalId));
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        if (callTime === null)
            throw new Error("The parameter 'callTime' cannot be null.");
        else if (callTime !== undefined)
            url_ += "call_time=" + encodeURIComponent(callTime ? "" + callTime.toJSON() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCloverRtu_RetrieveRtuCommlogSession(_response);
        });
    }

    protected processCloverRtu_RetrieveRtuCommlogSession(response: AxiosResponse): Promise<SessionJournalRcmDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SessionJournalRcmDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<SessionJournalRcmDto[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SessionJournalRcmDto[]>(<any>null);
    }
}

export interface IFileRtuService {
    /**
     * Create a new File or GG Plant Rtu.
     * @param api_version (optional) 
     * @return True if Rtu was created, False if it was not created.
     */
    fileRtu_AddFileRtu(request: FileRtuCreateDto, api_version?: string | null | undefined): Promise<boolean>;
    /**
     * Retrieve a File RTU Communication Packets.
     * @param deviceId Hardware unique identifier for an RTU.
     * @param beginTime (optional) The log records are retrieved in decending order starting from this time.
     * @param offset (optional) This is the starting record offset (starts at 0) in the packet records. Used to page through the packet records. For example, with a limit of 20, the offset first page is 0 and second is 20.
     * @param limit (optional) This is the maximum number of records to return.
     * @param channels (optional) List of RTU channels to include.
     * @param categories (optional) List of packet category
     * @param direction (optional) Inbound/outbound packets.
     * @param endTime (optional) This is the oldest record that will be returned.
     * @param api_version (optional) 
     * @return RtuPacketDTO[]
     */
    fileRtu_RetrieveRtuPackets(deviceId: string | null, beginTime?: Date | undefined, offset?: number | null | undefined, limit?: number | null | undefined, channels?: string[] | null | undefined, categories?: RtuPacketCategory[] | null | undefined, direction?: RtuCommDirection | null | undefined, endTime?: Date | null | undefined, api_version?: string | null | undefined): Promise<RtuPacketDTO[]>;
    /**
     * Retrieve general information of File RTU
     * @param deviceId Hardware unique identifier for an RTU.
     * @param api_version (optional) 
     * @return General Information of RTU file
     */
    fileRtu_RetrieveRtuFileGeneralInformation(deviceId: string | null, api_version?: string | null | undefined): Promise<FileRtuDto>;
    /**
     * Retrieve a File RTU's AI Channels summary
     * @param deviceId Hardware unique identifier for an RTU.
     * @param api_version (optional) 
     * @return A list of File RTU AI channels summary
     */
    fileRtu_RetrieveRtuFileAnalogInputChannelsSummary(deviceId: string | null, api_version?: string | null | undefined): Promise<RtuChannelSummaryDto[]>;
}

export class FileRtuService implements IFileRtuService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    /**
     * Create a new File or GG Plant Rtu.
     * @param api_version (optional) 
     * @return True if Rtu was created, False if it was not created.
     */
    fileRtu_AddFileRtu(request: FileRtuCreateDto, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/FileRtu";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFileRtu_AddFileRtu(_response);
        });
    }

    protected processFileRtu_AddFileRtu(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    /**
     * Retrieve a File RTU Communication Packets.
     * @param deviceId Hardware unique identifier for an RTU.
     * @param beginTime (optional) The log records are retrieved in decending order starting from this time.
     * @param offset (optional) This is the starting record offset (starts at 0) in the packet records. Used to page through the packet records. For example, with a limit of 20, the offset first page is 0 and second is 20.
     * @param limit (optional) This is the maximum number of records to return.
     * @param channels (optional) List of RTU channels to include.
     * @param categories (optional) List of packet category
     * @param direction (optional) Inbound/outbound packets.
     * @param endTime (optional) This is the oldest record that will be returned.
     * @param api_version (optional) 
     * @return RtuPacketDTO[]
     */
    fileRtu_RetrieveRtuPackets(deviceId: string | null, beginTime?: Date | undefined, offset?: number | null | undefined, limit?: number | null | undefined, channels?: string[] | null | undefined, categories?: RtuPacketCategory[] | null | undefined, direction?: RtuCommDirection | null | undefined, endTime?: Date | null | undefined, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<RtuPacketDTO[]> {
        let url_ = this.baseUrl + "/FileRtu/{deviceId}/commpackets?";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        if (beginTime === null)
            throw new Error("The parameter 'beginTime' cannot be null.");
        else if (beginTime !== undefined)
            url_ += "begin_time=" + encodeURIComponent(beginTime ? "" + beginTime.toJSON() : "") + "&";
        if (offset !== undefined && offset !== null)
            url_ += "offset=" + encodeURIComponent("" + offset) + "&";
        if (limit !== undefined && limit !== null)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        if (channels !== undefined && channels !== null)
            channels && channels.forEach(item => { url_ += "channels=" + encodeURIComponent("" + item) + "&"; });
        if (categories !== undefined && categories !== null)
            categories && categories.forEach(item => { url_ += "categories=" + encodeURIComponent("" + item) + "&"; });
        if (direction !== undefined && direction !== null)
            url_ += "direction=" + encodeURIComponent("" + direction) + "&";
        if (endTime !== undefined && endTime !== null)
            url_ += "end_time=" + encodeURIComponent(endTime ? "" + endTime.toJSON() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFileRtu_RetrieveRtuPackets(_response);
        });
    }

    protected processFileRtu_RetrieveRtuPackets(response: AxiosResponse): Promise<RtuPacketDTO[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(RtuPacketDTO.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<RtuPacketDTO[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RtuPacketDTO[]>(<any>null);
    }

    /**
     * Retrieve general information of File RTU
     * @param deviceId Hardware unique identifier for an RTU.
     * @param api_version (optional) 
     * @return General Information of RTU file
     */
    fileRtu_RetrieveRtuFileGeneralInformation(deviceId: string | null, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<FileRtuDto> {
        let url_ = this.baseUrl + "/FileRtu/{deviceId}/generalinformation";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFileRtu_RetrieveRtuFileGeneralInformation(_response);
        });
    }

    protected processFileRtu_RetrieveRtuFileGeneralInformation(response: AxiosResponse): Promise<FileRtuDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = FileRtuDto.fromJS(resultData200);
            return Promise.resolve<FileRtuDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileRtuDto>(<any>null);
    }

    /**
     * Retrieve a File RTU's AI Channels summary
     * @param deviceId Hardware unique identifier for an RTU.
     * @param api_version (optional) 
     * @return A list of File RTU AI channels summary
     */
    fileRtu_RetrieveRtuFileAnalogInputChannelsSummary(deviceId: string | null, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<RtuChannelSummaryDto[]> {
        let url_ = this.baseUrl + "/FileRtu/{deviceId}/aichannels/summary";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFileRtu_RetrieveRtuFileAnalogInputChannelsSummary(_response);
        });
    }

    protected processFileRtu_RetrieveRtuFileAnalogInputChannelsSummary(response: AxiosResponse): Promise<RtuChannelSummaryDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(RtuChannelSummaryDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<RtuChannelSummaryDto[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RtuChannelSummaryDto[]>(<any>null);
    }
}

export interface IHornerRtuService {
    hornerRtu_AddHornerRtu(request: HornerRtuCreateDto, api_version?: string | null | undefined): Promise<boolean>;
    /**
     * Retrieve a Horner RTU Communication Log.
     * @param deviceId Hardware unique identifier for an RTU.
     * @param beginTime (optional) The log records are retrieved in decending order starting from this time.
     * @param offset (optional) This is the starting record offset (starts at 0) in the communication log. Used to page through the comm logs. For example, with a limit of 20, the offset first page is 0 and second is 20.
     * @param limit (optional) This is the maximum number of records to return.
     * @param statuses (optional) List of status values to include in response.
     * @param direction (optional) Filter on inbound/outbound calls.
     * @param endTime (optional) This is the oldest record that will be returned.
     * @param api_version (optional) 
     * @return CallJournalRcmDTO[]
     */
    hornerRtu_RetrieveRtuCommlog(deviceId: string | null, beginTime?: Date | undefined, offset?: number | null | undefined, limit?: number | null | undefined, statuses?: RcmJournalItemStatusEnum[] | null | undefined, direction?: RtuCommDirection | null | undefined, endTime?: Date | null | undefined, api_version?: string | null | undefined): Promise<CallJournalRcmDto[]>;
    /**
     * Retrieve a Horner RTU session records for a call.
     * @param callJournalId This is the CallJournalId from the CallJournalRcmDTO. It identifies the call to which the sessions belong.
     * @param callTime (optional) This is the CreatedDate field from the CallJournalRcmDTO. It is used to speed up the search for session records as the data is partitioned on the CreatedDate.
     * @param api_version (optional) 
     */
    hornerRtu_RetrieveRtuCommlogSession(callJournalId: number, deviceId: string, callTime?: Date | undefined, api_version?: string | null | undefined): Promise<SessionJournalRcmDto[]>;
    /**
     * Retrieve Horner RTU data for the General Information panel.
     * @param deviceId Hardware unique identifier for an RTU.
     * @param api_version (optional) 
     */
    hornerRtu_RetrieveHornerGeneralInformation(deviceId: string | null, api_version?: string | null | undefined): Promise<HornerGeneralInformationDTO>;
    /**
     * Save Horner RTU General Information data.
     * @param api_version (optional) 
     */
    hornerRtu_UpdateHornerGeneralInformation(deviceId: string | null, hornerGeneralInformationDTO: HornerGeneralInformationDTO, api_version?: string | null | undefined): Promise<boolean>;
    /**
     * Retrieve Horner RTU Analog Input channels
     * @param deviceId Hardware unique identifier for an RTU.
     * @param api_version (optional) 
     * @return List of Analog Input channels, unit of measurements and field types
     */
    hornerRtu_RetrieveHornerAnalogInputChannels(deviceId: string | null, api_version?: string | null | undefined): Promise<HornerRtuAnalogInputChannelsDTO>;
    /**
     * Update Horner RTU AnalogInput channels.
     * @param deviceId Hardware unique identifier for an RTU.
     * @param analogInputChannels List of AnalogInput Channels that should be saved.
     * @param api_version (optional) 
     * @return List of saved AnalogInput channels
     */
    hornerRtu_UpdateHornerAnalogInputChannels(deviceId: string | null, analogInputChannels: HornerRtuAnalogInputChannelDTO[], api_version?: string | null | undefined): Promise<boolean>;
    /**
     * Retrieve Horner RTU Communication Configuration
     * @param deviceId Hardware unique identifier for an RTU.
     * @param api_version (optional) 
     * @return Communication settings
     */
    hornerRtu_RetrieveCommunicationConfigs(deviceId: string | null, api_version?: string | null | undefined): Promise<HornerRtuCommunicationConfigDTO>;
    /**
     * Update Horner RTU Communication configurations.
     * @param deviceId Hardware unique identifier for an RTU.
     * @param configs Horner Communication configurations
     * @param api_version (optional) 
     * @return true if successfully updated otherwise a list of errors
     */
    hornerRtu_UpdateHornerCommunicationConfigs(deviceId: string | null, configs: HornerRtuCommunicationConfigDTO, api_version?: string | null | undefined): Promise<boolean>;
    /**
     * Retrieve Horner RTU Time Correction
     * @param deviceId Hardware unique identifier for an RTU.
     * @param api_version (optional) 
     * @return Time Correction Info
     */
    hornerRtu_RetrieveTimeCorrectionInfo(deviceId: string | null, api_version?: string | null | undefined): Promise<HornerRtuTimeCorrectionDTO>;
    /**
     * Retrieve Horner RTU Transaction channels.
     * @param deviceId Hardware unique identifier for an RTU.
     * @param api_version (optional) 
     * @return List of Transaction channels, unit of measurements and field types
     */
    hornerRtu_RetrieveHornerTransactionChannels(deviceId: string | null, api_version?: string | null | undefined): Promise<HornerRtuTransactionChannelsDTO>;
    /**
     * Update Horner RTU Transaction channels.
     * @param deviceId Hardware unique identifier for an RTU.
     * @param transactionChannels List of Transaction Channels that should be saved.
     * @param api_version (optional) 
     * @return List of saved Transaction channels
     */
    hornerRtu_UpdateHornerTransactionChannels(deviceId: string | null, transactionChannels: HornerRtuTransactionChannelDTO[], api_version?: string | null | undefined): Promise<boolean>;
    /**
     * Retrieve Horner RTU Analog Input channels template
     * @param templateId Id of Horner AI Channel Template.
     * @param api_version (optional) 
     * @return Selected template
     */
    hornerRtu_RetrieveHornerAnalogInputChannelsTemplate(templateId: number, api_version?: string | null | undefined): Promise<HornerRtuAnalogInputChannelsDTO>;
    /**
     * Create new Horner RTU Analog Input channels Template
     * @param templateName Name of new template
     * @param analogInputChannels List of channels
     * @param api_version (optional) 
     * @return Id of created template
     */
    hornerRtu_CreateHornerAnalogInputChannelsTemplate(templateName: string | null, analogInputChannels: HornerRtuAnalogInputChannelDTO[], api_version?: string | null | undefined): Promise<number | null>;
    /**
     * Retrieve Horner RTU Transaction channels template
     * @param templateId Id of Horner Transaction Channel Template.
     * @param api_version (optional) 
     * @return Selected template
     */
    hornerRtu_RetrieveHornerTransactionChannelsTemplate(templateId: number, api_version?: string | null | undefined): Promise<HornerRtuTransactionChannelsDTO>;
    /**
     * Create new Horner RTU Transaction channels Template
     * @param templateName Name of new template
     * @param transactionChannels List of transaction channels
     * @param api_version (optional) 
     * @return Id of created template
     */
    hornerRtu_CreateHornerTransactionChannelsTemplate(templateName: string | null, transactionChannels: HornerRtuTransactionChannelDTO[], api_version?: string | null | undefined): Promise<number | null>;
    /**
     * Retrieve Outgoing Sms Interface
     * @param api_version (optional) 
     * @return A list of Outgoing Sms Interfaces
     */
    hornerRtu_RetrieveOutgoingSmsInterface(api_version?: string | null | undefined): Promise<DropDownListDtoOfInteger[]>;
    /**
     * Retrieve List of Carriers
     * @param api_version (optional) 
     * @return List of Carriers
     */
    hornerRtu_RetrieveCarriers(api_version?: string | null | undefined): Promise<DropDownListDtoOfInteger[]>;
    /**
     * Retrieve a List of Transaction Journals
     * @param rtuDeviceId Id of Rtu Device
     * @param startDate Start date of transactions
     * @param endDate End date of transactions
     * @param api_version (optional) 
     * @return List of Transaction Journals
     */
    hornerRtu_RetrieveTransactionJournals(rtuDeviceId: string | null, startDate: Date, endDate: Date, api_version?: string | null | undefined): Promise<HornerTransactionJournalDTO[]>;
    /**
     * Retrieve a List of Detail Journals
     * @param transactionJournalId Id of Transaction Journal
     * @param startDate Start date of transactions
     * @param endDate End date of transactions
     * @param api_version (optional) 
     * @return List of Detail Journals
     */
    hornerRtu_RetrieveDetailJournals(transactionJournalId: number | null, startDate: Date, endDate: Date, api_version?: string | null | undefined): Promise<HornerDetailJournalDTO[]>;
    /**
     * Retrieve a List of Detail Journals
     * @param rtuDeviceId Id of Transaction Journal
     * @param startDate Start date of transactions
     * @param endDate End date of transactions
     * @param api_version (optional) 
     * @return List of Detail Journals
     */
    hornerRtu_RetrieveDetailJournalsByDeviceId(rtuDeviceId: string | null, startDate: Date, endDate: Date, api_version?: string | null | undefined): Promise<HornerDetailJournalDTO[]>;
    /**
     * Retrieve Horner RTU data for the Diagnostic Information panel.
     * @param deviceId Hardware unique identifier for an RTU.
     * @param api_version (optional) 
     */
    hornerRtu_RetrieveHornerDiagnosticInformation(deviceId: string | null, api_version?: string | null | undefined): Promise<HornerDiagnosticInformationDTO>;
}

export class HornerRtuService implements IHornerRtuService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    hornerRtu_AddHornerRtu(request: HornerRtuCreateDto, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/HornerRtu";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processHornerRtu_AddHornerRtu(_response);
        });
    }

    protected processHornerRtu_AddHornerRtu(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    /**
     * Retrieve a Horner RTU Communication Log.
     * @param deviceId Hardware unique identifier for an RTU.
     * @param beginTime (optional) The log records are retrieved in decending order starting from this time.
     * @param offset (optional) This is the starting record offset (starts at 0) in the communication log. Used to page through the comm logs. For example, with a limit of 20, the offset first page is 0 and second is 20.
     * @param limit (optional) This is the maximum number of records to return.
     * @param statuses (optional) List of status values to include in response.
     * @param direction (optional) Filter on inbound/outbound calls.
     * @param endTime (optional) This is the oldest record that will be returned.
     * @param api_version (optional) 
     * @return CallJournalRcmDTO[]
     */
    hornerRtu_RetrieveRtuCommlog(deviceId: string | null, beginTime?: Date | undefined, offset?: number | null | undefined, limit?: number | null | undefined, statuses?: RcmJournalItemStatusEnum[] | null | undefined, direction?: RtuCommDirection | null | undefined, endTime?: Date | null | undefined, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<CallJournalRcmDto[]> {
        let url_ = this.baseUrl + "/HornerRtu/{deviceId}/commlog?";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        if (beginTime === null)
            throw new Error("The parameter 'beginTime' cannot be null.");
        else if (beginTime !== undefined)
            url_ += "begin_time=" + encodeURIComponent(beginTime ? "" + beginTime.toJSON() : "") + "&";
        if (offset !== undefined && offset !== null)
            url_ += "offset=" + encodeURIComponent("" + offset) + "&";
        if (limit !== undefined && limit !== null)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        if (statuses !== undefined && statuses !== null)
            statuses && statuses.forEach(item => { url_ += "statuses=" + encodeURIComponent("" + item) + "&"; });
        if (direction !== undefined && direction !== null)
            url_ += "direction=" + encodeURIComponent("" + direction) + "&";
        if (endTime !== undefined && endTime !== null)
            url_ += "end_time=" + encodeURIComponent(endTime ? "" + endTime.toJSON() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processHornerRtu_RetrieveRtuCommlog(_response);
        });
    }

    protected processHornerRtu_RetrieveRtuCommlog(response: AxiosResponse): Promise<CallJournalRcmDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CallJournalRcmDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<CallJournalRcmDto[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CallJournalRcmDto[]>(<any>null);
    }

    /**
     * Retrieve a Horner RTU session records for a call.
     * @param callJournalId This is the CallJournalId from the CallJournalRcmDTO. It identifies the call to which the sessions belong.
     * @param callTime (optional) This is the CreatedDate field from the CallJournalRcmDTO. It is used to speed up the search for session records as the data is partitioned on the CreatedDate.
     * @param api_version (optional) 
     */
    hornerRtu_RetrieveRtuCommlogSession(callJournalId: number, deviceId: string, callTime?: Date | undefined, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<SessionJournalRcmDto[]> {
        let url_ = this.baseUrl + "/HornerRtu/{deviceId}/commlog/sessions/{callJournalId}?";
        if (callJournalId === undefined || callJournalId === null)
            throw new Error("The parameter 'callJournalId' must be defined.");
        url_ = url_.replace("{callJournalId}", encodeURIComponent("" + callJournalId));
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        if (callTime === null)
            throw new Error("The parameter 'callTime' cannot be null.");
        else if (callTime !== undefined)
            url_ += "call_time=" + encodeURIComponent(callTime ? "" + callTime.toJSON() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processHornerRtu_RetrieveRtuCommlogSession(_response);
        });
    }

    protected processHornerRtu_RetrieveRtuCommlogSession(response: AxiosResponse): Promise<SessionJournalRcmDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SessionJournalRcmDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<SessionJournalRcmDto[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SessionJournalRcmDto[]>(<any>null);
    }

    /**
     * Retrieve Horner RTU data for the General Information panel.
     * @param deviceId Hardware unique identifier for an RTU.
     * @param api_version (optional) 
     */
    hornerRtu_RetrieveHornerGeneralInformation(deviceId: string | null, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<HornerGeneralInformationDTO> {
        let url_ = this.baseUrl + "/HornerRtu/{deviceId}/generalinformation";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processHornerRtu_RetrieveHornerGeneralInformation(_response);
        });
    }

    protected processHornerRtu_RetrieveHornerGeneralInformation(response: AxiosResponse): Promise<HornerGeneralInformationDTO> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HornerGeneralInformationDTO.fromJS(resultData200);
            return Promise.resolve<HornerGeneralInformationDTO>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HornerGeneralInformationDTO>(<any>null);
    }

    /**
     * Save Horner RTU General Information data.
     * @param api_version (optional) 
     */
    hornerRtu_UpdateHornerGeneralInformation(deviceId: string | null, hornerGeneralInformationDTO: HornerGeneralInformationDTO, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/HornerRtu/{deviceId}/generalinformation";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(hornerGeneralInformationDTO);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processHornerRtu_UpdateHornerGeneralInformation(_response);
        });
    }

    protected processHornerRtu_UpdateHornerGeneralInformation(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    /**
     * Retrieve Horner RTU Analog Input channels
     * @param deviceId Hardware unique identifier for an RTU.
     * @param api_version (optional) 
     * @return List of Analog Input channels, unit of measurements and field types
     */
    hornerRtu_RetrieveHornerAnalogInputChannels(deviceId: string | null, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<HornerRtuAnalogInputChannelsDTO> {
        let url_ = this.baseUrl + "/HornerRtu/{deviceId}/aichannels";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processHornerRtu_RetrieveHornerAnalogInputChannels(_response);
        });
    }

    protected processHornerRtu_RetrieveHornerAnalogInputChannels(response: AxiosResponse): Promise<HornerRtuAnalogInputChannelsDTO> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HornerRtuAnalogInputChannelsDTO.fromJS(resultData200);
            return Promise.resolve<HornerRtuAnalogInputChannelsDTO>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HornerRtuAnalogInputChannelsDTO>(<any>null);
    }

    /**
     * Update Horner RTU AnalogInput channels.
     * @param deviceId Hardware unique identifier for an RTU.
     * @param analogInputChannels List of AnalogInput Channels that should be saved.
     * @param api_version (optional) 
     * @return List of saved AnalogInput channels
     */
    hornerRtu_UpdateHornerAnalogInputChannels(deviceId: string | null, analogInputChannels: HornerRtuAnalogInputChannelDTO[], api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/HornerRtu/{deviceId}/aichannels";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(analogInputChannels);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processHornerRtu_UpdateHornerAnalogInputChannels(_response);
        });
    }

    protected processHornerRtu_UpdateHornerAnalogInputChannels(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorRecordResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    /**
     * Retrieve Horner RTU Communication Configuration
     * @param deviceId Hardware unique identifier for an RTU.
     * @param api_version (optional) 
     * @return Communication settings
     */
    hornerRtu_RetrieveCommunicationConfigs(deviceId: string | null, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<HornerRtuCommunicationConfigDTO> {
        let url_ = this.baseUrl + "/HornerRtu/{deviceId}/communication";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processHornerRtu_RetrieveCommunicationConfigs(_response);
        });
    }

    protected processHornerRtu_RetrieveCommunicationConfigs(response: AxiosResponse): Promise<HornerRtuCommunicationConfigDTO> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HornerRtuCommunicationConfigDTO.fromJS(resultData200);
            return Promise.resolve<HornerRtuCommunicationConfigDTO>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HornerRtuCommunicationConfigDTO>(<any>null);
    }

    /**
     * Update Horner RTU Communication configurations.
     * @param deviceId Hardware unique identifier for an RTU.
     * @param configs Horner Communication configurations
     * @param api_version (optional) 
     * @return true if successfully updated otherwise a list of errors
     */
    hornerRtu_UpdateHornerCommunicationConfigs(deviceId: string | null, configs: HornerRtuCommunicationConfigDTO, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/HornerRtu/{deviceId}/communication";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(configs);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processHornerRtu_UpdateHornerCommunicationConfigs(_response);
        });
    }

    protected processHornerRtu_UpdateHornerCommunicationConfigs(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    /**
     * Retrieve Horner RTU Time Correction
     * @param deviceId Hardware unique identifier for an RTU.
     * @param api_version (optional) 
     * @return Time Correction Info
     */
    hornerRtu_RetrieveTimeCorrectionInfo(deviceId: string | null, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<HornerRtuTimeCorrectionDTO> {
        let url_ = this.baseUrl + "/HornerRtu/{deviceId}/timecorrectioninfo";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processHornerRtu_RetrieveTimeCorrectionInfo(_response);
        });
    }

    protected processHornerRtu_RetrieveTimeCorrectionInfo(response: AxiosResponse): Promise<HornerRtuTimeCorrectionDTO> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HornerRtuTimeCorrectionDTO.fromJS(resultData200);
            return Promise.resolve<HornerRtuTimeCorrectionDTO>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HornerRtuTimeCorrectionDTO>(<any>null);
    }

    /**
     * Retrieve Horner RTU Transaction channels.
     * @param deviceId Hardware unique identifier for an RTU.
     * @param api_version (optional) 
     * @return List of Transaction channels, unit of measurements and field types
     */
    hornerRtu_RetrieveHornerTransactionChannels(deviceId: string | null, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<HornerRtuTransactionChannelsDTO> {
        let url_ = this.baseUrl + "/HornerRtu/{deviceId}/tchannels";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processHornerRtu_RetrieveHornerTransactionChannels(_response);
        });
    }

    protected processHornerRtu_RetrieveHornerTransactionChannels(response: AxiosResponse): Promise<HornerRtuTransactionChannelsDTO> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HornerRtuTransactionChannelsDTO.fromJS(resultData200);
            return Promise.resolve<HornerRtuTransactionChannelsDTO>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HornerRtuTransactionChannelsDTO>(<any>null);
    }

    /**
     * Update Horner RTU Transaction channels.
     * @param deviceId Hardware unique identifier for an RTU.
     * @param transactionChannels List of Transaction Channels that should be saved.
     * @param api_version (optional) 
     * @return List of saved Transaction channels
     */
    hornerRtu_UpdateHornerTransactionChannels(deviceId: string | null, transactionChannels: HornerRtuTransactionChannelDTO[], api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/HornerRtu/{deviceId}/tchannels";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(transactionChannels);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processHornerRtu_UpdateHornerTransactionChannels(_response);
        });
    }

    protected processHornerRtu_UpdateHornerTransactionChannels(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorRecordResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    /**
     * Retrieve Horner RTU Analog Input channels template
     * @param templateId Id of Horner AI Channel Template.
     * @param api_version (optional) 
     * @return Selected template
     */
    hornerRtu_RetrieveHornerAnalogInputChannelsTemplate(templateId: number, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<HornerRtuAnalogInputChannelsDTO> {
        let url_ = this.baseUrl + "/HornerRtu/aichannels/template/{templateId}";
        if (templateId === undefined || templateId === null)
            throw new Error("The parameter 'templateId' must be defined.");
        url_ = url_.replace("{templateId}", encodeURIComponent("" + templateId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processHornerRtu_RetrieveHornerAnalogInputChannelsTemplate(_response);
        });
    }

    protected processHornerRtu_RetrieveHornerAnalogInputChannelsTemplate(response: AxiosResponse): Promise<HornerRtuAnalogInputChannelsDTO> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HornerRtuAnalogInputChannelsDTO.fromJS(resultData200);
            return Promise.resolve<HornerRtuAnalogInputChannelsDTO>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HornerRtuAnalogInputChannelsDTO>(<any>null);
    }

    /**
     * Create new Horner RTU Analog Input channels Template
     * @param templateName Name of new template
     * @param analogInputChannels List of channels
     * @param api_version (optional) 
     * @return Id of created template
     */
    hornerRtu_CreateHornerAnalogInputChannelsTemplate(templateName: string | null, analogInputChannels: HornerRtuAnalogInputChannelDTO[], api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<number | null> {
        let url_ = this.baseUrl + "/HornerRtu/aichannels/template/{templateName}";
        if (templateName === undefined || templateName === null)
            throw new Error("The parameter 'templateName' must be defined.");
        url_ = url_.replace("{templateName}", encodeURIComponent("" + templateName));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(analogInputChannels);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processHornerRtu_CreateHornerAnalogInputChannelsTemplate(_response);
        });
    }

    protected processHornerRtu_CreateHornerAnalogInputChannelsTemplate(response: AxiosResponse): Promise<number | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<number | null>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<number | null>(<any>null);
    }

    /**
     * Retrieve Horner RTU Transaction channels template
     * @param templateId Id of Horner Transaction Channel Template.
     * @param api_version (optional) 
     * @return Selected template
     */
    hornerRtu_RetrieveHornerTransactionChannelsTemplate(templateId: number, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<HornerRtuTransactionChannelsDTO> {
        let url_ = this.baseUrl + "/HornerRtu/tchannels/template/{templateId}";
        if (templateId === undefined || templateId === null)
            throw new Error("The parameter 'templateId' must be defined.");
        url_ = url_.replace("{templateId}", encodeURIComponent("" + templateId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processHornerRtu_RetrieveHornerTransactionChannelsTemplate(_response);
        });
    }

    protected processHornerRtu_RetrieveHornerTransactionChannelsTemplate(response: AxiosResponse): Promise<HornerRtuTransactionChannelsDTO> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HornerRtuTransactionChannelsDTO.fromJS(resultData200);
            return Promise.resolve<HornerRtuTransactionChannelsDTO>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HornerRtuTransactionChannelsDTO>(<any>null);
    }

    /**
     * Create new Horner RTU Transaction channels Template
     * @param templateName Name of new template
     * @param transactionChannels List of transaction channels
     * @param api_version (optional) 
     * @return Id of created template
     */
    hornerRtu_CreateHornerTransactionChannelsTemplate(templateName: string | null, transactionChannels: HornerRtuTransactionChannelDTO[], api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<number | null> {
        let url_ = this.baseUrl + "/HornerRtu/tchannels/template/{templateName}";
        if (templateName === undefined || templateName === null)
            throw new Error("The parameter 'templateName' must be defined.");
        url_ = url_.replace("{templateName}", encodeURIComponent("" + templateName));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(transactionChannels);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processHornerRtu_CreateHornerTransactionChannelsTemplate(_response);
        });
    }

    protected processHornerRtu_CreateHornerTransactionChannelsTemplate(response: AxiosResponse): Promise<number | null> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<number | null>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<number | null>(<any>null);
    }

    /**
     * Retrieve Outgoing Sms Interface
     * @param api_version (optional) 
     * @return A list of Outgoing Sms Interfaces
     */
    hornerRtu_RetrieveOutgoingSmsInterface(api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<DropDownListDtoOfInteger[]> {
        let url_ = this.baseUrl + "/HornerRtu/outgoingsmsinterfaces";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processHornerRtu_RetrieveOutgoingSmsInterface(_response);
        });
    }

    protected processHornerRtu_RetrieveOutgoingSmsInterface(response: AxiosResponse): Promise<DropDownListDtoOfInteger[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DropDownListDtoOfInteger.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<DropDownListDtoOfInteger[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DropDownListDtoOfInteger[]>(<any>null);
    }

    /**
     * Retrieve List of Carriers
     * @param api_version (optional) 
     * @return List of Carriers
     */
    hornerRtu_RetrieveCarriers(api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<DropDownListDtoOfInteger[]> {
        let url_ = this.baseUrl + "/HornerRtu/carriers";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processHornerRtu_RetrieveCarriers(_response);
        });
    }

    protected processHornerRtu_RetrieveCarriers(response: AxiosResponse): Promise<DropDownListDtoOfInteger[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DropDownListDtoOfInteger.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<DropDownListDtoOfInteger[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DropDownListDtoOfInteger[]>(<any>null);
    }

    /**
     * Retrieve a List of Transaction Journals
     * @param rtuDeviceId Id of Rtu Device
     * @param startDate Start date of transactions
     * @param endDate End date of transactions
     * @param api_version (optional) 
     * @return List of Transaction Journals
     */
    hornerRtu_RetrieveTransactionJournals(rtuDeviceId: string | null, startDate: Date, endDate: Date, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<HornerTransactionJournalDTO[]> {
        let url_ = this.baseUrl + "/HornerRtu/transactionjournals/{rtuDeviceId}/{startDate}/{endDate}";
        if (rtuDeviceId === undefined || rtuDeviceId === null)
            throw new Error("The parameter 'rtuDeviceId' must be defined.");
        url_ = url_.replace("{rtuDeviceId}", encodeURIComponent("" + rtuDeviceId));
        if (startDate === undefined || startDate === null)
            throw new Error("The parameter 'startDate' must be defined.");
        url_ = url_.replace("{startDate}", encodeURIComponent(startDate ? "" + startDate.toISOString() : "null"));
        if (endDate === undefined || endDate === null)
            throw new Error("The parameter 'endDate' must be defined.");
        url_ = url_.replace("{endDate}", encodeURIComponent(endDate ? "" + endDate.toISOString() : "null"));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processHornerRtu_RetrieveTransactionJournals(_response);
        });
    }

    protected processHornerRtu_RetrieveTransactionJournals(response: AxiosResponse): Promise<HornerTransactionJournalDTO[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(HornerTransactionJournalDTO.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<HornerTransactionJournalDTO[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HornerTransactionJournalDTO[]>(<any>null);
    }

    /**
     * Retrieve a List of Detail Journals
     * @param transactionJournalId Id of Transaction Journal
     * @param startDate Start date of transactions
     * @param endDate End date of transactions
     * @param api_version (optional) 
     * @return List of Detail Journals
     */
    hornerRtu_RetrieveDetailJournals(transactionJournalId: number | null, startDate: Date, endDate: Date, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<HornerDetailJournalDTO[]> {
        let url_ = this.baseUrl + "/HornerRtu/detailjournals/{transactionJournalId}/{startDate}/{endDate}";
        if (transactionJournalId === undefined || transactionJournalId === null)
            throw new Error("The parameter 'transactionJournalId' must be defined.");
        url_ = url_.replace("{transactionJournalId}", encodeURIComponent("" + transactionJournalId));
        if (startDate === undefined || startDate === null)
            throw new Error("The parameter 'startDate' must be defined.");
        url_ = url_.replace("{startDate}", encodeURIComponent(startDate ? "" + startDate.toISOString() : "null"));
        if (endDate === undefined || endDate === null)
            throw new Error("The parameter 'endDate' must be defined.");
        url_ = url_.replace("{endDate}", encodeURIComponent(endDate ? "" + endDate.toISOString() : "null"));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processHornerRtu_RetrieveDetailJournals(_response);
        });
    }

    protected processHornerRtu_RetrieveDetailJournals(response: AxiosResponse): Promise<HornerDetailJournalDTO[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(HornerDetailJournalDTO.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<HornerDetailJournalDTO[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HornerDetailJournalDTO[]>(<any>null);
    }

    /**
     * Retrieve a List of Detail Journals
     * @param rtuDeviceId Id of Transaction Journal
     * @param startDate Start date of transactions
     * @param endDate End date of transactions
     * @param api_version (optional) 
     * @return List of Detail Journals
     */
    hornerRtu_RetrieveDetailJournalsByDeviceId(rtuDeviceId: string | null, startDate: Date, endDate: Date, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<HornerDetailJournalDTO[]> {
        let url_ = this.baseUrl + "/HornerRtu/detailjournalsbydeviceid/{rtuDeviceId}/{startDate}/{endDate}";
        if (rtuDeviceId === undefined || rtuDeviceId === null)
            throw new Error("The parameter 'rtuDeviceId' must be defined.");
        url_ = url_.replace("{rtuDeviceId}", encodeURIComponent("" + rtuDeviceId));
        if (startDate === undefined || startDate === null)
            throw new Error("The parameter 'startDate' must be defined.");
        url_ = url_.replace("{startDate}", encodeURIComponent(startDate ? "" + startDate.toISOString() : "null"));
        if (endDate === undefined || endDate === null)
            throw new Error("The parameter 'endDate' must be defined.");
        url_ = url_.replace("{endDate}", encodeURIComponent(endDate ? "" + endDate.toISOString() : "null"));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processHornerRtu_RetrieveDetailJournalsByDeviceId(_response);
        });
    }

    protected processHornerRtu_RetrieveDetailJournalsByDeviceId(response: AxiosResponse): Promise<HornerDetailJournalDTO[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(HornerDetailJournalDTO.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<HornerDetailJournalDTO[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HornerDetailJournalDTO[]>(<any>null);
    }

    /**
     * Retrieve Horner RTU data for the Diagnostic Information panel.
     * @param deviceId Hardware unique identifier for an RTU.
     * @param api_version (optional) 
     */
    hornerRtu_RetrieveHornerDiagnosticInformation(deviceId: string | null, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<HornerDiagnosticInformationDTO> {
        let url_ = this.baseUrl + "/HornerRtu/{deviceId}/diagnosticinformation";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processHornerRtu_RetrieveHornerDiagnosticInformation(_response);
        });
    }

    protected processHornerRtu_RetrieveHornerDiagnosticInformation(response: AxiosResponse): Promise<HornerDiagnosticInformationDTO> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = HornerDiagnosticInformationDTO.fromJS(resultData200);
            return Promise.resolve<HornerDiagnosticInformationDTO>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<HornerDiagnosticInformationDTO>(<any>null);
    }
}

export interface IMetronRtuService {
    /**
     * Retrieve a Metron RTU Communication Log.
     * @param deviceId Hardware unique identifier for an RTU.
     * @param beginTime (optional) The log records are retrieved in decending order starting from this time.
     * @param offset (optional) This is the starting record offset (starts at 0) in the communication log. Used to page through the comm logs. For example, with a limit of 20, the offset first page is 0 and second is 20.
     * @param limit (optional) This is the maximum number of records to return.
     * @param statuses (optional) List of status values to include in response.
     * @param direction (optional) Filter on inbound/outbound calls.
     * @param endTime (optional) This is the oldest record that will be returned.
     * @param api_version (optional) 
     * @return CallJournalRcmDTO[]
     */
    metronRtu_RetrieveRtuCommlog(deviceId: string | null, beginTime?: Date | undefined, offset?: number | null | undefined, limit?: number | null | undefined, statuses?: RcmJournalItemStatusEnum[] | null | undefined, direction?: RtuCommDirection | null | undefined, endTime?: Date | null | undefined, api_version?: string | null | undefined): Promise<CallJournalRcmDto[]>;
    /**
     * Retrieve a Metron RTU session records for a call.
     * @param callJournalId This is the CallJournalId from the CallJournalRcmDTO. It identifies the call to which the sessions belong.
     * @param callTime (optional) This is the CreatedDate field from the CallJournalRcmDTO. It is used to speed up the search for session records as the data is partitioned on the CreatedDate.
     * @param api_version (optional) 
     */
    metronRtu_RetrieveRtuCommlogSession(callJournalId: number, deviceId: string, callTime?: Date | undefined, api_version?: string | null | undefined): Promise<SessionJournalRcmDto[]>;
    /**
     * Retrieve a Metron RTU configurations.
     * @param deviceId Hardware unique identifier for an RTU.
     * @param api_version (optional) 
     * @return Local and Remote configurations
     */
    metronRtu_RetrieveMetronConfigs(deviceId: string | null, api_version?: string | null | undefined): Promise<MetronConfigurationsDTO>;
    /**
     * Update a Metron RTU configurations.
     * @param deviceId Hardware unique identifier for an RTU.
     * @param configs Metron local configuration
     * @param api_version (optional) 
     * @return It returns true if successfully updated otherwise a list of errors
     */
    metronRtu_UpdateMetronConfigs(deviceId: string | null, configs: MetronConfigurationDTO, api_version?: string | null | undefined): Promise<boolean>;
    /**
     * Retrieve a Metron RTU Communication configurations.
     * @param deviceId Hardware unique identifier for an RTU.
     * @param api_version (optional) 
     * @return Local and Remote configurations
     */
    metronRtu_RetrieveMetronCommunicationConfigs(deviceId: string | null, api_version?: string | null | undefined): Promise<MetronCommunicationConfigDTO>;
    /**
     * Update Metron RTU Communication configurations.
     * @param deviceId Hardware unique identifier for an RTU.
     * @param configs Metron Communication configurations
     * @param api_version (optional) 
     * @return true if successfully updated otherwise a list of errors
     */
    metronRtu_UpdateMetronCommunicationConfigs(deviceId: string | null, configs: MetronCommunicationConfigInputDto, api_version?: string | null | undefined): Promise<boolean>;
    /**
     * Retrieve a Metron RTU Analog Input Channel configurations.
     * @param deviceId Hardware unique identifier for an RTU.
     * @param channelNo Channel Number
     * @param api_version (optional) 
     * @return Local and Remote configurations
     */
    metronRtu_RetrieveMetronAiChannelConfigs(deviceId: string | null, channelNo: string | null, api_version?: string | null | undefined): Promise<MetronRtuChannelInfoDTO>;
    /**
     * Retrieve a Metron RTU Available Analog Input Channels.
     * @param deviceId Hardware unique identifier for an RTU.
     * @param api_version (optional) 
     * @return Local and Remote configurations
     */
    metronRtu_RetrieveMetronAiChannelSummaryList(deviceId: string | null, api_version?: string | null | undefined): Promise<MetronAiChannelSummaryItemDto[]>;
    /**
     * Retrieve a list of Metron Direction Types.
     * @param api_version (optional) 
     * @return A list of Metron Direction Types
     */
    metronRtu_RetrieveMetronDirectionTypes(api_version?: string | null | undefined): Promise<string[]>;
    /**
     * Retrieve a list of Metron Antenna Types.
     * @param api_version (optional) 
     * @return A list of Metron Antenna Types
     */
    metronRtu_RetrieveMetronAntennaTypes(api_version?: string | null | undefined): Promise<string[]>;
    /**
     * Retrieve a list of Metron Power Modes.
     * @param api_version (optional) 
     * @return A list of Metron Power Modes
     */
    metronRtu_RetrieveMetronPowerModes(api_version?: string | null | undefined): Promise<string[]>;
    /**
     * Retrieve Metron RTU data for the General Information panel.
     * @param deviceId Hardware unique identifier for an RTU.
     * @param api_version (optional) 
     */
    metronRtu_RetrieveMetronGeneralInformation(deviceId: string | null, api_version?: string | null | undefined): Promise<MetronGeneralInformationDTO>;
    /**
     * Save Metron RTU General Information data.
     * @param api_version (optional) 
     */
    metronRtu_UpdateMetronGeneralInformation(deviceId: string | null, metronGeneralInformationDTO: MetronGeneralInformationDTO, api_version?: string | null | undefined): Promise<boolean>;
    /**
     * Retrieve Metron RTU data for the Diagnostic Information panel.
     * @param deviceId Hardware unique identifier for an RTU.
     * @param api_version (optional) 
     */
    metronRtu_RetrieveMetronDiagnosticInformation(deviceId: string | null, api_version?: string | null | undefined): Promise<MetronDiagnosticInformationDTO>;
    /**
     * Retrieve Outgoing Sms Interface
     * @param api_version (optional) 
     * @return A list of Outgoing Sms Interfaces
     */
    metronRtu_RetrieveOutgoingSmsInterface(api_version?: string | null | undefined): Promise<ValueTupleOfIntegerAndString[]>;
    /**
     * Retrieve List of Carriers
     * @param api_version (optional) 
     * @return List of Carriers
     */
    metronRtu_RetrieveCarriers(api_version?: string | null | undefined): Promise<DropDownListDtoOfInteger[]>;
    /**
     * Delete a Metron Rtu's channel
     * @param api_version (optional) 
     * @return True if successfully deleted otherwise an error
     */
    metronRtu_DeleteChannel(deviceId: string | null, channelNumber: string | null, api_version?: string | null | undefined): Promise<boolean>;
    /**
     * Generate new Metron AI Channel
     * @param deviceId RTU Device Id
     * @param channelNumber Number of new channel, must be between 1 and 8
     * @param api_version (optional) 
     * @return A new  AI channel detail
     */
    metronRtu_GenerateNewAnalogInputChannelConfig(deviceId: string | null, channelNumber: string | null, api_version?: string | null | undefined): Promise<MetronRtuChannelInfoDTO>;
    /**
     * Add a new Metron Rtu's channel
     * @param api_version (optional) 
     * @return True if successfully added otherwise an error
     */
    metronRtu_AddAiChannel(newChannel: MetronCreateRtuChannelInfoDto, api_version?: string | null | undefined): Promise<boolean>;
    /**
     * Update a Metron RTU Analog Input Channel configurations.
     * @param channel Channel information
     * @param api_version (optional) 
     * @return True if updated successfully
     */
    metronRtu_UpdateMetronAiChannelConfigs(channel: MetronCreateRtuChannelInfoDto, api_version?: string | null | undefined): Promise<boolean>;
    metronRtu_AddMetronRtu(request: MetronRtuCreateDto, api_version?: string | null | undefined): Promise<boolean>;
}

export class MetronRtuService implements IMetronRtuService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    /**
     * Retrieve a Metron RTU Communication Log.
     * @param deviceId Hardware unique identifier for an RTU.
     * @param beginTime (optional) The log records are retrieved in decending order starting from this time.
     * @param offset (optional) This is the starting record offset (starts at 0) in the communication log. Used to page through the comm logs. For example, with a limit of 20, the offset first page is 0 and second is 20.
     * @param limit (optional) This is the maximum number of records to return.
     * @param statuses (optional) List of status values to include in response.
     * @param direction (optional) Filter on inbound/outbound calls.
     * @param endTime (optional) This is the oldest record that will be returned.
     * @param api_version (optional) 
     * @return CallJournalRcmDTO[]
     */
    metronRtu_RetrieveRtuCommlog(deviceId: string | null, beginTime?: Date | undefined, offset?: number | null | undefined, limit?: number | null | undefined, statuses?: RcmJournalItemStatusEnum[] | null | undefined, direction?: RtuCommDirection | null | undefined, endTime?: Date | null | undefined, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<CallJournalRcmDto[]> {
        let url_ = this.baseUrl + "/MetronRtu/{deviceId}/commlog?";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        if (beginTime === null)
            throw new Error("The parameter 'beginTime' cannot be null.");
        else if (beginTime !== undefined)
            url_ += "begin_time=" + encodeURIComponent(beginTime ? "" + beginTime.toJSON() : "") + "&";
        if (offset !== undefined && offset !== null)
            url_ += "offset=" + encodeURIComponent("" + offset) + "&";
        if (limit !== undefined && limit !== null)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        if (statuses !== undefined && statuses !== null)
            statuses && statuses.forEach(item => { url_ += "statuses=" + encodeURIComponent("" + item) + "&"; });
        if (direction !== undefined && direction !== null)
            url_ += "direction=" + encodeURIComponent("" + direction) + "&";
        if (endTime !== undefined && endTime !== null)
            url_ += "end_time=" + encodeURIComponent(endTime ? "" + endTime.toJSON() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMetronRtu_RetrieveRtuCommlog(_response);
        });
    }

    protected processMetronRtu_RetrieveRtuCommlog(response: AxiosResponse): Promise<CallJournalRcmDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CallJournalRcmDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<CallJournalRcmDto[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CallJournalRcmDto[]>(<any>null);
    }

    /**
     * Retrieve a Metron RTU session records for a call.
     * @param callJournalId This is the CallJournalId from the CallJournalRcmDTO. It identifies the call to which the sessions belong.
     * @param callTime (optional) This is the CreatedDate field from the CallJournalRcmDTO. It is used to speed up the search for session records as the data is partitioned on the CreatedDate.
     * @param api_version (optional) 
     */
    metronRtu_RetrieveRtuCommlogSession(callJournalId: number, deviceId: string, callTime?: Date | undefined, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<SessionJournalRcmDto[]> {
        let url_ = this.baseUrl + "/MetronRtu/{deviceId}/commlog/sessions/{callJournalId}?";
        if (callJournalId === undefined || callJournalId === null)
            throw new Error("The parameter 'callJournalId' must be defined.");
        url_ = url_.replace("{callJournalId}", encodeURIComponent("" + callJournalId));
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        if (callTime === null)
            throw new Error("The parameter 'callTime' cannot be null.");
        else if (callTime !== undefined)
            url_ += "call_time=" + encodeURIComponent(callTime ? "" + callTime.toJSON() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMetronRtu_RetrieveRtuCommlogSession(_response);
        });
    }

    protected processMetronRtu_RetrieveRtuCommlogSession(response: AxiosResponse): Promise<SessionJournalRcmDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SessionJournalRcmDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<SessionJournalRcmDto[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SessionJournalRcmDto[]>(<any>null);
    }

    /**
     * Retrieve a Metron RTU configurations.
     * @param deviceId Hardware unique identifier for an RTU.
     * @param api_version (optional) 
     * @return Local and Remote configurations
     */
    metronRtu_RetrieveMetronConfigs(deviceId: string | null, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<MetronConfigurationsDTO> {
        let url_ = this.baseUrl + "/MetronRtu/{deviceId}/configuration";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMetronRtu_RetrieveMetronConfigs(_response);
        });
    }

    protected processMetronRtu_RetrieveMetronConfigs(response: AxiosResponse): Promise<MetronConfigurationsDTO> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MetronConfigurationsDTO.fromJS(resultData200);
            return Promise.resolve<MetronConfigurationsDTO>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MetronConfigurationsDTO>(<any>null);
    }

    /**
     * Update a Metron RTU configurations.
     * @param deviceId Hardware unique identifier for an RTU.
     * @param configs Metron local configuration
     * @param api_version (optional) 
     * @return It returns true if successfully updated otherwise a list of errors
     */
    metronRtu_UpdateMetronConfigs(deviceId: string | null, configs: MetronConfigurationDTO, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/MetronRtu/{deviceId}/configuration";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(configs);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMetronRtu_UpdateMetronConfigs(_response);
        });
    }

    protected processMetronRtu_UpdateMetronConfigs(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    /**
     * Retrieve a Metron RTU Communication configurations.
     * @param deviceId Hardware unique identifier for an RTU.
     * @param api_version (optional) 
     * @return Local and Remote configurations
     */
    metronRtu_RetrieveMetronCommunicationConfigs(deviceId: string | null, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<MetronCommunicationConfigDTO> {
        let url_ = this.baseUrl + "/MetronRtu/{deviceId}/communication";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMetronRtu_RetrieveMetronCommunicationConfigs(_response);
        });
    }

    protected processMetronRtu_RetrieveMetronCommunicationConfigs(response: AxiosResponse): Promise<MetronCommunicationConfigDTO> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MetronCommunicationConfigDTO.fromJS(resultData200);
            return Promise.resolve<MetronCommunicationConfigDTO>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MetronCommunicationConfigDTO>(<any>null);
    }

    /**
     * Update Metron RTU Communication configurations.
     * @param deviceId Hardware unique identifier for an RTU.
     * @param configs Metron Communication configurations
     * @param api_version (optional) 
     * @return true if successfully updated otherwise a list of errors
     */
    metronRtu_UpdateMetronCommunicationConfigs(deviceId: string | null, configs: MetronCommunicationConfigInputDto, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/MetronRtu/{deviceId}/communication";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(configs);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMetronRtu_UpdateMetronCommunicationConfigs(_response);
        });
    }

    protected processMetronRtu_UpdateMetronCommunicationConfigs(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    /**
     * Retrieve a Metron RTU Analog Input Channel configurations.
     * @param deviceId Hardware unique identifier for an RTU.
     * @param channelNo Channel Number
     * @param api_version (optional) 
     * @return Local and Remote configurations
     */
    metronRtu_RetrieveMetronAiChannelConfigs(deviceId: string | null, channelNo: string | null, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<MetronRtuChannelInfoDTO> {
        let url_ = this.baseUrl + "/MetronRtu/{deviceId}/aichannel/{channelNo}";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        if (channelNo === undefined || channelNo === null)
            throw new Error("The parameter 'channelNo' must be defined.");
        url_ = url_.replace("{channelNo}", encodeURIComponent("" + channelNo));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMetronRtu_RetrieveMetronAiChannelConfigs(_response);
        });
    }

    protected processMetronRtu_RetrieveMetronAiChannelConfigs(response: AxiosResponse): Promise<MetronRtuChannelInfoDTO> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MetronRtuChannelInfoDTO.fromJS(resultData200);
            return Promise.resolve<MetronRtuChannelInfoDTO>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MetronRtuChannelInfoDTO>(<any>null);
    }

    /**
     * Retrieve a Metron RTU Available Analog Input Channels.
     * @param deviceId Hardware unique identifier for an RTU.
     * @param api_version (optional) 
     * @return Local and Remote configurations
     */
    metronRtu_RetrieveMetronAiChannelSummaryList(deviceId: string | null, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<MetronAiChannelSummaryItemDto[]> {
        let url_ = this.baseUrl + "/MetronRtu/{deviceId}/aichannels/summary";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMetronRtu_RetrieveMetronAiChannelSummaryList(_response);
        });
    }

    protected processMetronRtu_RetrieveMetronAiChannelSummaryList(response: AxiosResponse): Promise<MetronAiChannelSummaryItemDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MetronAiChannelSummaryItemDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<MetronAiChannelSummaryItemDto[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MetronAiChannelSummaryItemDto[]>(<any>null);
    }

    /**
     * Retrieve a list of Metron Direction Types.
     * @param api_version (optional) 
     * @return A list of Metron Direction Types
     */
    metronRtu_RetrieveMetronDirectionTypes(api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<string[]> {
        let url_ = this.baseUrl + "/MetronRtu/directiontypes";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMetronRtu_RetrieveMetronDirectionTypes(_response);
        });
    }

    protected processMetronRtu_RetrieveMetronDirectionTypes(response: AxiosResponse): Promise<string[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<string[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string[]>(<any>null);
    }

    /**
     * Retrieve a list of Metron Antenna Types.
     * @param api_version (optional) 
     * @return A list of Metron Antenna Types
     */
    metronRtu_RetrieveMetronAntennaTypes(api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<string[]> {
        let url_ = this.baseUrl + "/MetronRtu/antennatypes";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMetronRtu_RetrieveMetronAntennaTypes(_response);
        });
    }

    protected processMetronRtu_RetrieveMetronAntennaTypes(response: AxiosResponse): Promise<string[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<string[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string[]>(<any>null);
    }

    /**
     * Retrieve a list of Metron Power Modes.
     * @param api_version (optional) 
     * @return A list of Metron Power Modes
     */
    metronRtu_RetrieveMetronPowerModes(api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<string[]> {
        let url_ = this.baseUrl + "/MetronRtu/powermodes";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMetronRtu_RetrieveMetronPowerModes(_response);
        });
    }

    protected processMetronRtu_RetrieveMetronPowerModes(response: AxiosResponse): Promise<string[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<string[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string[]>(<any>null);
    }

    /**
     * Retrieve Metron RTU data for the General Information panel.
     * @param deviceId Hardware unique identifier for an RTU.
     * @param api_version (optional) 
     */
    metronRtu_RetrieveMetronGeneralInformation(deviceId: string | null, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<MetronGeneralInformationDTO> {
        let url_ = this.baseUrl + "/MetronRtu/{deviceId}/generalinformation";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMetronRtu_RetrieveMetronGeneralInformation(_response);
        });
    }

    protected processMetronRtu_RetrieveMetronGeneralInformation(response: AxiosResponse): Promise<MetronGeneralInformationDTO> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MetronGeneralInformationDTO.fromJS(resultData200);
            return Promise.resolve<MetronGeneralInformationDTO>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MetronGeneralInformationDTO>(<any>null);
    }

    /**
     * Save Metron RTU General Information data.
     * @param api_version (optional) 
     */
    metronRtu_UpdateMetronGeneralInformation(deviceId: string | null, metronGeneralInformationDTO: MetronGeneralInformationDTO, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/MetronRtu/{deviceId}/generalinformation";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(metronGeneralInformationDTO);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMetronRtu_UpdateMetronGeneralInformation(_response);
        });
    }

    protected processMetronRtu_UpdateMetronGeneralInformation(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    /**
     * Retrieve Metron RTU data for the Diagnostic Information panel.
     * @param deviceId Hardware unique identifier for an RTU.
     * @param api_version (optional) 
     */
    metronRtu_RetrieveMetronDiagnosticInformation(deviceId: string | null, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<MetronDiagnosticInformationDTO> {
        let url_ = this.baseUrl + "/MetronRtu/{deviceId}/diagnosticinformation";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMetronRtu_RetrieveMetronDiagnosticInformation(_response);
        });
    }

    protected processMetronRtu_RetrieveMetronDiagnosticInformation(response: AxiosResponse): Promise<MetronDiagnosticInformationDTO> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MetronDiagnosticInformationDTO.fromJS(resultData200);
            return Promise.resolve<MetronDiagnosticInformationDTO>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MetronDiagnosticInformationDTO>(<any>null);
    }

    /**
     * Retrieve Outgoing Sms Interface
     * @param api_version (optional) 
     * @return A list of Outgoing Sms Interfaces
     */
    metronRtu_RetrieveOutgoingSmsInterface(api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<ValueTupleOfIntegerAndString[]> {
        let url_ = this.baseUrl + "/MetronRtu/outgoingsmsinterfaces";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMetronRtu_RetrieveOutgoingSmsInterface(_response);
        });
    }

    protected processMetronRtu_RetrieveOutgoingSmsInterface(response: AxiosResponse): Promise<ValueTupleOfIntegerAndString[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ValueTupleOfIntegerAndString.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<ValueTupleOfIntegerAndString[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ValueTupleOfIntegerAndString[]>(<any>null);
    }

    /**
     * Retrieve List of Carriers
     * @param api_version (optional) 
     * @return List of Carriers
     */
    metronRtu_RetrieveCarriers(api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<DropDownListDtoOfInteger[]> {
        let url_ = this.baseUrl + "/MetronRtu/carriers";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMetronRtu_RetrieveCarriers(_response);
        });
    }

    protected processMetronRtu_RetrieveCarriers(response: AxiosResponse): Promise<DropDownListDtoOfInteger[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DropDownListDtoOfInteger.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<DropDownListDtoOfInteger[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DropDownListDtoOfInteger[]>(<any>null);
    }

    /**
     * Delete a Metron Rtu's channel
     * @param api_version (optional) 
     * @return True if successfully deleted otherwise an error
     */
    metronRtu_DeleteChannel(deviceId: string | null, channelNumber: string | null, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/MetronRtu/{deviceId}/{channelNumber}";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        if (channelNumber === undefined || channelNumber === null)
            throw new Error("The parameter 'channelNumber' must be defined.");
        url_ = url_.replace("{channelNumber}", encodeURIComponent("" + channelNumber));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMetronRtu_DeleteChannel(_response);
        });
    }

    protected processMetronRtu_DeleteChannel(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ErrorResponseModel.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    /**
     * Generate new Metron AI Channel
     * @param deviceId RTU Device Id
     * @param channelNumber Number of new channel, must be between 1 and 8
     * @param api_version (optional) 
     * @return A new  AI channel detail
     */
    metronRtu_GenerateNewAnalogInputChannelConfig(deviceId: string | null, channelNumber: string | null, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<MetronRtuChannelInfoDTO> {
        let url_ = this.baseUrl + "/MetronRtu/newaichannelconfig/{deviceId}/{channelNumber}";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        if (channelNumber === undefined || channelNumber === null)
            throw new Error("The parameter 'channelNumber' must be defined.");
        url_ = url_.replace("{channelNumber}", encodeURIComponent("" + channelNumber));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMetronRtu_GenerateNewAnalogInputChannelConfig(_response);
        });
    }

    protected processMetronRtu_GenerateNewAnalogInputChannelConfig(response: AxiosResponse): Promise<MetronRtuChannelInfoDTO> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MetronRtuChannelInfoDTO.fromJS(resultData200);
            return Promise.resolve<MetronRtuChannelInfoDTO>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MetronRtuChannelInfoDTO>(<any>null);
    }

    /**
     * Add a new Metron Rtu's channel
     * @param api_version (optional) 
     * @return True if successfully added otherwise an error
     */
    metronRtu_AddAiChannel(newChannel: MetronCreateRtuChannelInfoDto, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/MetronRtu/aichannel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(newChannel);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMetronRtu_AddAiChannel(_response);
        });
    }

    protected processMetronRtu_AddAiChannel(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ErrorResponseModel.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    /**
     * Update a Metron RTU Analog Input Channel configurations.
     * @param channel Channel information
     * @param api_version (optional) 
     * @return True if updated successfully
     */
    metronRtu_UpdateMetronAiChannelConfigs(channel: MetronCreateRtuChannelInfoDto, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/MetronRtu/aichannel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(channel);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMetronRtu_UpdateMetronAiChannelConfigs(_response);
        });
    }

    protected processMetronRtu_UpdateMetronAiChannelConfigs(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    metronRtu_AddMetronRtu(request: MetronRtuCreateDto, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/MetronRtu";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMetronRtu_AddMetronRtu(_response);
        });
    }

    protected processMetronRtu_AddMetronRtu(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }
}

export interface IModbusRtuService {
    /**
     * Retrieve a Modbus RTU Communication Log.
     * @param deviceId Hardware unique identifier for an RTU.
     * @param beginTime (optional) The log records are retrieved in decending order starting from this time.
     * @param offset (optional) This is the starting record offset (starts at 0) in the communication log. Used to page through the comm logs. For example, with a limit of 20, the offset first page is 0 and second is 20.
     * @param limit (optional) This is the maximum number of records to return.
     * @param statuses (optional) List of status values to include in response.
     * @param direction (optional) Filter on inbound/outbound calls.
     * @param endTime (optional) This is the oldest record that will be returned.
     * @param api_version (optional) 
     * @return CallJournalRcmDTO[]
     */
    modbusRtu_RetrieveRtuCommlog(deviceId: string | null, beginTime?: Date | undefined, offset?: number | null | undefined, limit?: number | null | undefined, statuses?: RcmJournalItemStatusEnum[] | null | undefined, direction?: RtuCommDirection | null | undefined, endTime?: Date | null | undefined, api_version?: string | null | undefined): Promise<CallJournalRcmDto[]>;
    /**
     * Retrieve a Modbus RTU session records for a call.
     * @param callJournalId This is the CallJournalId from the CallJournalRcmDTO. It identifies the call to which the sessions belong.
     * @param callTime (optional) This is the CreatedDate field from the CallJournalRcmDTO. It is used to speed up the search for session records as the data is partitioned on the CreatedDate.
     * @param api_version (optional) 
     */
    modbusRtu_RetrieveRtuCommlogSession(callJournalId: number, deviceId: string, callTime?: Date | undefined, api_version?: string | null | undefined): Promise<SessionJournalRcmDto[]>;
}

export class ModbusRtuService implements IModbusRtuService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    /**
     * Retrieve a Modbus RTU Communication Log.
     * @param deviceId Hardware unique identifier for an RTU.
     * @param beginTime (optional) The log records are retrieved in decending order starting from this time.
     * @param offset (optional) This is the starting record offset (starts at 0) in the communication log. Used to page through the comm logs. For example, with a limit of 20, the offset first page is 0 and second is 20.
     * @param limit (optional) This is the maximum number of records to return.
     * @param statuses (optional) List of status values to include in response.
     * @param direction (optional) Filter on inbound/outbound calls.
     * @param endTime (optional) This is the oldest record that will be returned.
     * @param api_version (optional) 
     * @return CallJournalRcmDTO[]
     */
    modbusRtu_RetrieveRtuCommlog(deviceId: string | null, beginTime?: Date | undefined, offset?: number | null | undefined, limit?: number | null | undefined, statuses?: RcmJournalItemStatusEnum[] | null | undefined, direction?: RtuCommDirection | null | undefined, endTime?: Date | null | undefined, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<CallJournalRcmDto[]> {
        let url_ = this.baseUrl + "/ModbusRtu/{deviceId}/commlog?";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        if (beginTime === null)
            throw new Error("The parameter 'beginTime' cannot be null.");
        else if (beginTime !== undefined)
            url_ += "begin_time=" + encodeURIComponent(beginTime ? "" + beginTime.toJSON() : "") + "&";
        if (offset !== undefined && offset !== null)
            url_ += "offset=" + encodeURIComponent("" + offset) + "&";
        if (limit !== undefined && limit !== null)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        if (statuses !== undefined && statuses !== null)
            statuses && statuses.forEach(item => { url_ += "statuses=" + encodeURIComponent("" + item) + "&"; });
        if (direction !== undefined && direction !== null)
            url_ += "direction=" + encodeURIComponent("" + direction) + "&";
        if (endTime !== undefined && endTime !== null)
            url_ += "end_time=" + encodeURIComponent(endTime ? "" + endTime.toJSON() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processModbusRtu_RetrieveRtuCommlog(_response);
        });
    }

    protected processModbusRtu_RetrieveRtuCommlog(response: AxiosResponse): Promise<CallJournalRcmDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CallJournalRcmDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<CallJournalRcmDto[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CallJournalRcmDto[]>(<any>null);
    }

    /**
     * Retrieve a Modbus RTU session records for a call.
     * @param callJournalId This is the CallJournalId from the CallJournalRcmDTO. It identifies the call to which the sessions belong.
     * @param callTime (optional) This is the CreatedDate field from the CallJournalRcmDTO. It is used to speed up the search for session records as the data is partitioned on the CreatedDate.
     * @param api_version (optional) 
     */
    modbusRtu_RetrieveRtuCommlogSession(callJournalId: number, deviceId: string, callTime?: Date | undefined, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<SessionJournalRcmDto[]> {
        let url_ = this.baseUrl + "/ModbusRtu/{deviceId}/commlog/sessions/{callJournalId}?";
        if (callJournalId === undefined || callJournalId === null)
            throw new Error("The parameter 'callJournalId' must be defined.");
        url_ = url_.replace("{callJournalId}", encodeURIComponent("" + callJournalId));
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        if (callTime === null)
            throw new Error("The parameter 'callTime' cannot be null.");
        else if (callTime !== undefined)
            url_ += "call_time=" + encodeURIComponent(callTime ? "" + callTime.toJSON() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processModbusRtu_RetrieveRtuCommlogSession(_response);
        });
    }

    protected processModbusRtu_RetrieveRtuCommlogSession(response: AxiosResponse): Promise<SessionJournalRcmDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SessionJournalRcmDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<SessionJournalRcmDto[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SessionJournalRcmDto[]>(<any>null);
    }
}

export interface IRtuService {
    /**
     * Poll RTU.

    This API is called to poll a 400 series RTU.
     * @param deviceId Unique identifier for an RTU
     * @param api_version (optional) 
     * @return HTTP status code 204 if successful
     */
    rtu_PollRtu(deviceId: string | null, api_version?: string | null | undefined): Promise<void>;
    /**
     * Poll RTU channel.

    This API is called to poll a 400 series RTU channel.
     * @param deviceId Unique identifier for an RTU
     * @param channelNumber Unique identifier for an RTU channel
     * @param api_version (optional) 
     * @return HTTP status code 204 if successful
     */
    rtu_PollRtu2(deviceId: string | null, channelNumber: string | null, api_version?: string | null | undefined): Promise<void>;
    /**
     * Retrieve RTU Communication Packets.
     * @param deviceId Hardware unique identifier for an RTU.
     * @param beginTime (optional) The log records are retrieved in decending order starting from this time.
     * @param offset (optional) This is the starting record offset (starts at 0) in the packet records. Used to page through the packet records. For example, with a limit of 20, the offset first page is 0 and second is 20.
     * @param limit (optional) This is the maximum number of records to return.
     * @param channels (optional) List of RTU channels to include.
     * @param categories (optional) List of packet category
     * @param direction (optional) Inbound/outbound packets.
     * @param endTime (optional) This is the oldest record that will be returned.
     * @param api_version (optional) 
     * @return RtuPacketDTO[]
     */
    rtu_RetrieveRtuPackets(deviceId: string | null, beginTime?: Date | undefined, offset?: number | null | undefined, limit?: number | null | undefined, channels?: string[] | null | undefined, categories?: RtuPacketCategory[] | null | undefined, direction?: RtuCommDirection | null | undefined, endTime?: Date | null | undefined, api_version?: string | null | undefined): Promise<RtuPacketDTO[]>;
    /**
     * Generate setpoints and scaling report
     * @param reportType (optional) 
     * @param api_version (optional) 
     * @return RtuChannelSetpointsAndScalingSyncReportDTO
     */
    rtu_GenerateSetpointAndScalingSyncReport(reportType?: string | null | undefined, api_version?: string | null | undefined): Promise<RtuChannelSetpointsSyncDetailReportDto>;
    /**
     * Retrieve Rtu400 Genral Information
     * @param deviceId Hardware unique identifier for an RTU.
     * @param api_version (optional) 
     * @return General Information of selected RTU400
     */
    rtu_RetrieveGenralInfo(deviceId: string | null, api_version?: string | null | undefined): Promise<Rtu400GeneralInfoDto>;
    /**
     * Find RTUs that match device id expression.
     * @param deviceId Device id expression
     * @param api_version (optional) 
     * @return RtuInfoDTO
     */
    rtu_Find(deviceId: string | null, api_version?: string | null | undefined): Promise<RtuInfoDTO[]>;
    /**
     * Get Poll Status
     * @param deviceId Unique identifier for an RTU
     * @param api_version (optional) 
     * @return RtuPollStatusEnum
     */
    rtu_GetRtuPollStatus(deviceId: string | null, api_version?: string | null | undefined): Promise<RtuPollStatusEnum>;
    /**
     * Poll RTU for instantaneous and historical readings
     * @param deviceId Unique identifier for an RTU
     * @param api_version (optional) 
     * @return true = Poll apiRequest was sent
     */
    rtu_PollRtuForInstantaneousAndHistoricalReadings(deviceId: string | null, api_version?: string | null | undefined): Promise<boolean>;
    /**
     * Poll RTU for instantaneous readings
     * @param deviceId Unique identifier for an RTU
     * @param api_version (optional) 
     * @return true = Poll apiRequest was sent
     */
    rtu_PollRtuForInstantaneousReadings(deviceId: string | null, api_version?: string | null | undefined): Promise<boolean>;
    /**
     * Set an RTU Channel counter value
     * @param deviceId Unique identifier for an RTU
     * @param channelNumber Number used to identifiy an RTU channel
     * @param counterValue The new value of the counter
     * @param api_version (optional) 
     * @return true = successful
     */
    rtu_SetChannelCounterValue(deviceId: string | null, channelNumber: string | null, counterValue: number, api_version?: string | null | undefined): Promise<boolean>;
    /**
     * Save RTU Notes
     * @param deviceId Unique identifier for an RTU
     * @param rtuNotesInfo RTU notes in QuickEditRtuNotesDTO structured payload
     * @param api_version (optional) 
     * @return true = successful
     */
    rtu_SaveRtuNotes(deviceId: string | null, rtuNotesInfo: QuickEditRtuNotesDTO, api_version?: string | null | undefined): Promise<boolean>;
    /**
     * Retrieve RTU notes
     * @param deviceId Unique identifier for an RTU
     * @param api_version (optional) 
     */
    rtu_RetrieveRtuNotes(deviceId: string | null, api_version?: string | null | undefined): Promise<QuickEditRtuNotesDTO>;
    /**
     * Retrieve RTU category
     * @param deviceId Unique identifier for an RTU
     * @param api_version (optional) 
     * @return RtuCategoryEnum
     */
    rtu_RetrieveRtuCategory(deviceId: string | null, api_version?: string | null | undefined): Promise<RtuDeviceCategory>;
    /**
     * Search RTU
     * @param rtuSearchOptions RTU search options
     * @param api_version (optional) 
     */
    rtu_RtuSearch(rtuSearchOptions: RtuSearchDTO, api_version?: string | null | undefined): Promise<RtuSearchResultSetDTO>;
    /**
     * Transfer RTU
     * @param rtuTransferOptions RTU transfer options
     * @param api_version (optional) 
     */
    rtu_RtuTransfer(rtuTransferOptions: RtuTransferDTO, api_version?: string | null | undefined): Promise<boolean>;
    /**
     * Retrieve RTU Poll Schedule Groups
     * @param api_version (optional) 
     * @return A list of Rtu Schedule Group for current domain
     */
    rtu_RetrievePollScheduleGroups(api_version?: string | null | undefined): Promise<RtuPollScheduleGroupDTO[]>;
    /**
     * Return Audit History with pagination data
     * @param deviceId Unique identifier for an RTU
     * @param pageNumber (optional) Number of requested page 1-based
     * @param pageSize (optional) Number of records per page
     * @param api_version (optional) 
     * @return List of records and total number of records
     */
    rtu_RetrieveAuditHistory(deviceId: string | null, pageNumber?: number | undefined, pageSize?: number | undefined, api_version?: string | null | undefined): Promise<PaginatedResponseModelOfAuditHistoryDto>;
    /**
     * Retrieve Helium ISO Container RTU List By Prefix
     * @param api_version (optional) 
     */
    retrieveHeliumISOContainerRtuListByPrefix_RetrieveHeliumISOContainerRTUListByPrefix(request: EvolveRetrieveHeliumISOContainerRtuListByPrefixRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveHeliumISOContainerRtuListByPrefixResponse>;
}

export class RtuService implements IRtuService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    /**
     * Poll RTU.

    This API is called to poll a 400 series RTU.
     * @param deviceId Unique identifier for an RTU
     * @param api_version (optional) 
     * @return HTTP status code 204 if successful
     */
    rtu_PollRtu(deviceId: string | null, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/rtu400/{deviceid}/readings";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRtu_PollRtu(_response);
        });
    }

    protected processRtu_PollRtu(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Poll RTU channel.

    This API is called to poll a 400 series RTU channel.
     * @param deviceId Unique identifier for an RTU
     * @param channelNumber Unique identifier for an RTU channel
     * @param api_version (optional) 
     * @return HTTP status code 204 if successful
     */
    rtu_PollRtu2(deviceId: string | null, channelNumber: string | null, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/rtu400/{deviceid}/channel/{channelNumber}/readings";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        if (channelNumber === undefined || channelNumber === null)
            throw new Error("The parameter 'channelNumber' must be defined.");
        url_ = url_.replace("{channelNumber}", encodeURIComponent("" + channelNumber));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRtu_PollRtu2(_response);
        });
    }

    protected processRtu_PollRtu2(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Retrieve RTU Communication Packets.
     * @param deviceId Hardware unique identifier for an RTU.
     * @param beginTime (optional) The log records are retrieved in decending order starting from this time.
     * @param offset (optional) This is the starting record offset (starts at 0) in the packet records. Used to page through the packet records. For example, with a limit of 20, the offset first page is 0 and second is 20.
     * @param limit (optional) This is the maximum number of records to return.
     * @param channels (optional) List of RTU channels to include.
     * @param categories (optional) List of packet category
     * @param direction (optional) Inbound/outbound packets.
     * @param endTime (optional) This is the oldest record that will be returned.
     * @param api_version (optional) 
     * @return RtuPacketDTO[]
     */
    rtu_RetrieveRtuPackets(deviceId: string | null, beginTime?: Date | undefined, offset?: number | null | undefined, limit?: number | null | undefined, channels?: string[] | null | undefined, categories?: RtuPacketCategory[] | null | undefined, direction?: RtuCommDirection | null | undefined, endTime?: Date | null | undefined, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<RtuPacketDTO[]> {
        let url_ = this.baseUrl + "/rtu400/{deviceId}/commpackets?";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        if (beginTime === null)
            throw new Error("The parameter 'beginTime' cannot be null.");
        else if (beginTime !== undefined)
            url_ += "begin_time=" + encodeURIComponent(beginTime ? "" + beginTime.toJSON() : "") + "&";
        if (offset !== undefined && offset !== null)
            url_ += "offset=" + encodeURIComponent("" + offset) + "&";
        if (limit !== undefined && limit !== null)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        if (channels !== undefined && channels !== null)
            channels && channels.forEach(item => { url_ += "channels=" + encodeURIComponent("" + item) + "&"; });
        if (categories !== undefined && categories !== null)
            categories && categories.forEach(item => { url_ += "categories=" + encodeURIComponent("" + item) + "&"; });
        if (direction !== undefined && direction !== null)
            url_ += "direction=" + encodeURIComponent("" + direction) + "&";
        if (endTime !== undefined && endTime !== null)
            url_ += "end_time=" + encodeURIComponent(endTime ? "" + endTime.toJSON() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRtu_RetrieveRtuPackets(_response);
        });
    }

    protected processRtu_RetrieveRtuPackets(response: AxiosResponse): Promise<RtuPacketDTO[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(RtuPacketDTO.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<RtuPacketDTO[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RtuPacketDTO[]>(<any>null);
    }

    /**
     * Generate setpoints and scaling report
     * @param reportType (optional) 
     * @param api_version (optional) 
     * @return RtuChannelSetpointsAndScalingSyncReportDTO
     */
    rtu_GenerateSetpointAndScalingSyncReport(reportType?: string | null | undefined, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<RtuChannelSetpointsSyncDetailReportDto> {
        let url_ = this.baseUrl + "/rtu400/setpoints/syncreport?";
        if (reportType !== undefined && reportType !== null)
            url_ += "reportType=" + encodeURIComponent("" + reportType) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRtu_GenerateSetpointAndScalingSyncReport(_response);
        });
    }

    protected processRtu_GenerateSetpointAndScalingSyncReport(response: AxiosResponse): Promise<RtuChannelSetpointsSyncDetailReportDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RtuChannelSetpointsSyncDetailReportDto.fromJS(resultData200);
            return Promise.resolve<RtuChannelSetpointsSyncDetailReportDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RtuChannelSetpointsSyncDetailReportDto>(<any>null);
    }

    /**
     * Retrieve Rtu400 Genral Information
     * @param deviceId Hardware unique identifier for an RTU.
     * @param api_version (optional) 
     * @return General Information of selected RTU400
     */
    rtu_RetrieveGenralInfo(deviceId: string | null, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<Rtu400GeneralInfoDto> {
        let url_ = this.baseUrl + "/rtu400/generalinfo/{deviceId}";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRtu_RetrieveGenralInfo(_response);
        });
    }

    protected processRtu_RetrieveGenralInfo(response: AxiosResponse): Promise<Rtu400GeneralInfoDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Rtu400GeneralInfoDto.fromJS(resultData200);
            return Promise.resolve<Rtu400GeneralInfoDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Rtu400GeneralInfoDto>(<any>null);
    }

    /**
     * Find RTUs that match device id expression.
     * @param deviceId Device id expression
     * @param api_version (optional) 
     * @return RtuInfoDTO
     */
    rtu_Find(deviceId: string | null, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<RtuInfoDTO[]> {
        let url_ = this.baseUrl + "/Rtu/{deviceId}/find";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRtu_Find(_response);
        });
    }

    protected processRtu_Find(response: AxiosResponse): Promise<RtuInfoDTO[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(RtuInfoDTO.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<RtuInfoDTO[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RtuInfoDTO[]>(<any>null);
    }

    /**
     * Get Poll Status
     * @param deviceId Unique identifier for an RTU
     * @param api_version (optional) 
     * @return RtuPollStatusEnum
     */
    rtu_GetRtuPollStatus(deviceId: string | null, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<RtuPollStatusEnum> {
        let url_ = this.baseUrl + "/Rtu/{deviceId}/pollstatus";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRtu_GetRtuPollStatus(_response);
        });
    }

    protected processRtu_GetRtuPollStatus(response: AxiosResponse): Promise<RtuPollStatusEnum> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<RtuPollStatusEnum>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RtuPollStatusEnum>(<any>null);
    }

    /**
     * Poll RTU for instantaneous and historical readings
     * @param deviceId Unique identifier for an RTU
     * @param api_version (optional) 
     * @return true = Poll apiRequest was sent
     */
    rtu_PollRtuForInstantaneousAndHistoricalReadings(deviceId: string | null, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/Rtu/{deviceId}/telemetry/logs";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRtu_PollRtuForInstantaneousAndHistoricalReadings(_response);
        });
    }

    protected processRtu_PollRtuForInstantaneousAndHistoricalReadings(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    /**
     * Poll RTU for instantaneous readings
     * @param deviceId Unique identifier for an RTU
     * @param api_version (optional) 
     * @return true = Poll apiRequest was sent
     */
    rtu_PollRtuForInstantaneousReadings(deviceId: string | null, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/Rtu/{deviceId}/telemetry/readings";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRtu_PollRtuForInstantaneousReadings(_response);
        });
    }

    protected processRtu_PollRtuForInstantaneousReadings(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    /**
     * Set an RTU Channel counter value
     * @param deviceId Unique identifier for an RTU
     * @param channelNumber Number used to identifiy an RTU channel
     * @param counterValue The new value of the counter
     * @param api_version (optional) 
     * @return true = successful
     */
    rtu_SetChannelCounterValue(deviceId: string | null, channelNumber: string | null, counterValue: number, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/Rtu/{deviceId}/channel/{channelNumber}/counter";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        if (channelNumber === undefined || channelNumber === null)
            throw new Error("The parameter 'channelNumber' must be defined.");
        url_ = url_.replace("{channelNumber}", encodeURIComponent("" + channelNumber));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(counterValue);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRtu_SetChannelCounterValue(_response);
        });
    }

    protected processRtu_SetChannelCounterValue(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    /**
     * Save RTU Notes
     * @param deviceId Unique identifier for an RTU
     * @param rtuNotesInfo RTU notes in QuickEditRtuNotesDTO structured payload
     * @param api_version (optional) 
     * @return true = successful
     */
    rtu_SaveRtuNotes(deviceId: string | null, rtuNotesInfo: QuickEditRtuNotesDTO, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/Rtu/{deviceId}/notes";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(rtuNotesInfo);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRtu_SaveRtuNotes(_response);
        });
    }

    protected processRtu_SaveRtuNotes(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    /**
     * Retrieve RTU notes
     * @param deviceId Unique identifier for an RTU
     * @param api_version (optional) 
     */
    rtu_RetrieveRtuNotes(deviceId: string | null, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<QuickEditRtuNotesDTO> {
        let url_ = this.baseUrl + "/Rtu/{deviceId}/notes";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRtu_RetrieveRtuNotes(_response);
        });
    }

    protected processRtu_RetrieveRtuNotes(response: AxiosResponse): Promise<QuickEditRtuNotesDTO> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = QuickEditRtuNotesDTO.fromJS(resultData200);
            return Promise.resolve<QuickEditRtuNotesDTO>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QuickEditRtuNotesDTO>(<any>null);
    }

    /**
     * Retrieve RTU category
     * @param deviceId Unique identifier for an RTU
     * @param api_version (optional) 
     * @return RtuCategoryEnum
     */
    rtu_RetrieveRtuCategory(deviceId: string | null, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<RtuDeviceCategory> {
        let url_ = this.baseUrl + "/Rtu/{deviceId}/category";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRtu_RetrieveRtuCategory(_response);
        });
    }

    protected processRtu_RetrieveRtuCategory(response: AxiosResponse): Promise<RtuDeviceCategory> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<RtuDeviceCategory>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RtuDeviceCategory>(<any>null);
    }

    /**
     * Search RTU
     * @param rtuSearchOptions RTU search options
     * @param api_version (optional) 
     */
    rtu_RtuSearch(rtuSearchOptions: RtuSearchDTO, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<RtuSearchResultSetDTO> {
        let url_ = this.baseUrl + "/Rtu/search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(rtuSearchOptions);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRtu_RtuSearch(_response);
        });
    }

    protected processRtu_RtuSearch(response: AxiosResponse): Promise<RtuSearchResultSetDTO> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RtuSearchResultSetDTO.fromJS(resultData200);
            return Promise.resolve<RtuSearchResultSetDTO>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RtuSearchResultSetDTO>(<any>null);
    }

    /**
     * Transfer RTU
     * @param rtuTransferOptions RTU transfer options
     * @param api_version (optional) 
     */
    rtu_RtuTransfer(rtuTransferOptions: RtuTransferDTO, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/Rtu/transfer";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(rtuTransferOptions);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRtu_RtuTransfer(_response);
        });
    }

    protected processRtu_RtuTransfer(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    /**
     * Retrieve RTU Poll Schedule Groups
     * @param api_version (optional) 
     * @return A list of Rtu Schedule Group for current domain
     */
    rtu_RetrievePollScheduleGroups(api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<RtuPollScheduleGroupDTO[]> {
        let url_ = this.baseUrl + "/Rtu/pollschedulegroups";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRtu_RetrievePollScheduleGroups(_response);
        });
    }

    protected processRtu_RetrievePollScheduleGroups(response: AxiosResponse): Promise<RtuPollScheduleGroupDTO[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(RtuPollScheduleGroupDTO.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<RtuPollScheduleGroupDTO[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RtuPollScheduleGroupDTO[]>(<any>null);
    }

    /**
     * Return Audit History with pagination data
     * @param deviceId Unique identifier for an RTU
     * @param pageNumber (optional) Number of requested page 1-based
     * @param pageSize (optional) Number of records per page
     * @param api_version (optional) 
     * @return List of records and total number of records
     */
    rtu_RetrieveAuditHistory(deviceId: string | null, pageNumber?: number | undefined, pageSize?: number | undefined, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<PaginatedResponseModelOfAuditHistoryDto> {
        let url_ = this.baseUrl + "/Rtu/audithistory/{deviceId}?";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "pageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRtu_RetrieveAuditHistory(_response);
        });
    }

    protected processRtu_RetrieveAuditHistory(response: AxiosResponse): Promise<PaginatedResponseModelOfAuditHistoryDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PaginatedResponseModelOfAuditHistoryDto.fromJS(resultData200);
            return Promise.resolve<PaginatedResponseModelOfAuditHistoryDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PaginatedResponseModelOfAuditHistoryDto>(<any>null);
    }

    /**
     * Retrieve Helium ISO Container RTU List By Prefix
     * @param api_version (optional) 
     */
    retrieveHeliumISOContainerRtuListByPrefix_RetrieveHeliumISOContainerRTUListByPrefix(request: EvolveRetrieveHeliumISOContainerRtuListByPrefixRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveHeliumISOContainerRtuListByPrefixResponse> {
        let url_ = this.baseUrl + "/RetrieveHeliumISOContainerRtuListByPrefix";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveHeliumISOContainerRtuListByPrefix_RetrieveHeliumISOContainerRTUListByPrefix(_response);
        });
    }

    protected processRetrieveHeliumISOContainerRtuListByPrefix_RetrieveHeliumISOContainerRTUListByPrefix(response: AxiosResponse): Promise<EvolveRetrieveHeliumISOContainerRtuListByPrefixResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveHeliumISOContainerRtuListByPrefixResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveHeliumISOContainerRtuListByPrefixResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveHeliumISOContainerRtuListByPrefixResponse>(<any>null);
    }
}

export interface ISmsRtuService {
    /**
     * Retrieve a SMS RTU Communication Packets.
     * @param deviceId Hardware unique identifier for an RTU.
     * @param beginTime (optional) The log records are retrieved in decending order starting from this time.
     * @param offset (optional) This is the starting record offset (starts at 0) in the packet records. Used to page through the packet records. For example, with a limit of 20, the offset first page is 0 and second is 20.
     * @param limit (optional) This is the maximum number of records to return.
     * @param channels (optional) List of RTU channels to include.
     * @param categories (optional) List of packet category
     * @param direction (optional) Inbound/outbound packets.
     * @param endTime (optional) This is the oldest record that will be returned.
     * @param api_version (optional) 
     * @return RtuPacketDTO[]
     */
    smsRtu_RetrieveRtuPackets(deviceId: string | null, beginTime?: Date | undefined, offset?: number | null | undefined, limit?: number | null | undefined, channels?: string[] | null | undefined, categories?: RtuPacketCategory[] | null | undefined, direction?: RtuCommDirection | null | undefined, endTime?: Date | null | undefined, api_version?: string | null | undefined): Promise<RtuPacketDTO[]>;
    /**
     * Generate setpoints and scaling report
     * @param reportType (optional) 
     * @param api_version (optional) 
     * @return RtuChannelSetpointsAndScalingSyncReportDTO
     */
    smsRtu_GenerateSetpointAndScalingSyncReport(reportType?: string | null | undefined, api_version?: string | null | undefined): Promise<RtuChannelSetpointsSyncReportDto>;
}

export class SmsRtuService implements ISmsRtuService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    /**
     * Retrieve a SMS RTU Communication Packets.
     * @param deviceId Hardware unique identifier for an RTU.
     * @param beginTime (optional) The log records are retrieved in decending order starting from this time.
     * @param offset (optional) This is the starting record offset (starts at 0) in the packet records. Used to page through the packet records. For example, with a limit of 20, the offset first page is 0 and second is 20.
     * @param limit (optional) This is the maximum number of records to return.
     * @param channels (optional) List of RTU channels to include.
     * @param categories (optional) List of packet category
     * @param direction (optional) Inbound/outbound packets.
     * @param endTime (optional) This is the oldest record that will be returned.
     * @param api_version (optional) 
     * @return RtuPacketDTO[]
     */
    smsRtu_RetrieveRtuPackets(deviceId: string | null, beginTime?: Date | undefined, offset?: number | null | undefined, limit?: number | null | undefined, channels?: string[] | null | undefined, categories?: RtuPacketCategory[] | null | undefined, direction?: RtuCommDirection | null | undefined, endTime?: Date | null | undefined, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<RtuPacketDTO[]> {
        let url_ = this.baseUrl + "/SmsRtu/{deviceId}/commpackets?";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        if (beginTime === null)
            throw new Error("The parameter 'beginTime' cannot be null.");
        else if (beginTime !== undefined)
            url_ += "begin_time=" + encodeURIComponent(beginTime ? "" + beginTime.toJSON() : "") + "&";
        if (offset !== undefined && offset !== null)
            url_ += "offset=" + encodeURIComponent("" + offset) + "&";
        if (limit !== undefined && limit !== null)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        if (channels !== undefined && channels !== null)
            channels && channels.forEach(item => { url_ += "channels=" + encodeURIComponent("" + item) + "&"; });
        if (categories !== undefined && categories !== null)
            categories && categories.forEach(item => { url_ += "categories=" + encodeURIComponent("" + item) + "&"; });
        if (direction !== undefined && direction !== null)
            url_ += "direction=" + encodeURIComponent("" + direction) + "&";
        if (endTime !== undefined && endTime !== null)
            url_ += "end_time=" + encodeURIComponent(endTime ? "" + endTime.toJSON() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSmsRtu_RetrieveRtuPackets(_response);
        });
    }

    protected processSmsRtu_RetrieveRtuPackets(response: AxiosResponse): Promise<RtuPacketDTO[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(RtuPacketDTO.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<RtuPacketDTO[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RtuPacketDTO[]>(<any>null);
    }

    /**
     * Generate setpoints and scaling report
     * @param reportType (optional) 
     * @param api_version (optional) 
     * @return RtuChannelSetpointsAndScalingSyncReportDTO
     */
    smsRtu_GenerateSetpointAndScalingSyncReport(reportType?: string | null | undefined, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<RtuChannelSetpointsSyncReportDto> {
        let url_ = this.baseUrl + "/SmsRtu/setpoints/syncreport?";
        if (reportType !== undefined && reportType !== null)
            url_ += "reportType=" + encodeURIComponent("" + reportType) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSmsRtu_GenerateSetpointAndScalingSyncReport(_response);
        });
    }

    protected processSmsRtu_GenerateSetpointAndScalingSyncReport(response: AxiosResponse): Promise<RtuChannelSetpointsSyncReportDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RtuChannelSetpointsSyncReportDto.fromJS(resultData200);
            return Promise.resolve<RtuChannelSetpointsSyncReportDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RtuChannelSetpointsSyncReportDto>(<any>null);
    }
}

export interface IRtuChannelService {
    /**
     * Retrieve RTU Channels for an RTU.
     * @param rtuId Unique system identifier for the RTU
     * @param dataChannelId Unique system identifier for the DataChannel being updated.
     * @param api_version (optional) 
     */
    rtuChannel_Get(rtuId: string, dataChannelId: string, api_version?: string | null | undefined): Promise<RtuChannelInfoDto[]>;
    /**
     * Synchronize RTU channel setpoints and scaling parameters
     * @param dataChannelId Unique system identifier for the data channel
     * @param api_version (optional) 
     */
    rtuChannel_SyncSetPointsAndScalingRtuChannel(dataChannelId: string, api_version?: string | null | undefined): Promise<boolean>;
}

export class RtuChannelService implements IRtuChannelService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    /**
     * Retrieve RTU Channels for an RTU.
     * @param rtuId Unique system identifier for the RTU
     * @param dataChannelId Unique system identifier for the DataChannel being updated.
     * @param api_version (optional) 
     */
    rtuChannel_Get(rtuId: string, dataChannelId: string, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<RtuChannelInfoDto[]> {
        let url_ = this.baseUrl + "/RtuChannel/rtu/{rtuId}/datachannel/{dataChannelId}";
        if (rtuId === undefined || rtuId === null)
            throw new Error("The parameter 'rtuId' must be defined.");
        url_ = url_.replace("{rtuId}", encodeURIComponent("" + rtuId));
        if (dataChannelId === undefined || dataChannelId === null)
            throw new Error("The parameter 'dataChannelId' must be defined.");
        url_ = url_.replace("{dataChannelId}", encodeURIComponent("" + dataChannelId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRtuChannel_Get(_response);
        });
    }

    protected processRtuChannel_Get(response: AxiosResponse): Promise<RtuChannelInfoDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(RtuChannelInfoDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<RtuChannelInfoDto[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RtuChannelInfoDto[]>(<any>null);
    }

    /**
     * Synchronize RTU channel setpoints and scaling parameters
     * @param dataChannelId Unique system identifier for the data channel
     * @param api_version (optional) 
     */
    rtuChannel_SyncSetPointsAndScalingRtuChannel(dataChannelId: string, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/RtuChannel/datachannel/{dataChannelId}/setpoints";
        if (dataChannelId === undefined || dataChannelId === null)
            throw new Error("The parameter 'dataChannelId' must be defined.");
        url_ = url_.replace("{dataChannelId}", encodeURIComponent("" + dataChannelId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "PUT",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRtuChannel_SyncSetPointsAndScalingRtuChannel(_response);
        });
    }

    protected processRtuChannel_SyncSetPointsAndScalingRtuChannel(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }
}

export interface IB2CUsersService {
    b2CUsers_DeleteB2CUser(userId: string, api_version?: string | null | undefined): Promise<void>;
    b2CUsers_UpdateUserDomainRolesAndAssetGroups(userId: string, updateRequest: UpdateB2cUserDomainRolesAndAssetGroupsRequest, api_version?: string | null | undefined): Promise<UpdateB2cUserDomainRolesAndAssetGroupsResponse>;
    b2CUsers_UpdateUser(updateB2CUserRequest: UpdateB2cUserRequest, api_version?: string | null | undefined): Promise<UpdateB2cUserResponse>;
    b2CUsers_CreateUser(createB2CUserRequest: CreateB2cUserRequest, api_version?: string | null | undefined): Promise<CreateB2cUserResponse>;
}

export class B2CUsersService implements IB2CUsersService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    b2CUsers_DeleteB2CUser(userId: string, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/b2cusers/{userId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processB2CUsers_DeleteB2CUser(_response);
        });
    }

    protected processB2CUsers_DeleteB2CUser(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    b2CUsers_UpdateUserDomainRolesAndAssetGroups(userId: string, updateRequest: UpdateB2cUserDomainRolesAndAssetGroupsRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<UpdateB2cUserDomainRolesAndAssetGroupsResponse> {
        let url_ = this.baseUrl + "/b2cusers/DomainRolesAndAssetGroups/{userId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(updateRequest);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processB2CUsers_UpdateUserDomainRolesAndAssetGroups(_response);
        });
    }

    protected processB2CUsers_UpdateUserDomainRolesAndAssetGroups(response: AxiosResponse): Promise<UpdateB2cUserDomainRolesAndAssetGroupsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UpdateB2cUserDomainRolesAndAssetGroupsResponse.fromJS(resultData200);
            return Promise.resolve<UpdateB2cUserDomainRolesAndAssetGroupsResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UpdateB2cUserDomainRolesAndAssetGroupsResponse>(<any>null);
    }

    b2CUsers_UpdateUser(updateB2CUserRequest: UpdateB2cUserRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<UpdateB2cUserResponse> {
        let url_ = this.baseUrl + "/b2cusers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(updateB2CUserRequest);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processB2CUsers_UpdateUser(_response);
        });
    }

    protected processB2CUsers_UpdateUser(response: AxiosResponse): Promise<UpdateB2cUserResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UpdateB2cUserResponse.fromJS(resultData200);
            return Promise.resolve<UpdateB2cUserResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UpdateB2cUserResponse>(<any>null);
    }

    b2CUsers_CreateUser(createB2CUserRequest: CreateB2cUserRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<CreateB2cUserResponse> {
        let url_ = this.baseUrl + "/b2cusers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(createB2CUserRequest);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processB2CUsers_CreateUser(_response);
        });
    }

    protected processB2CUsers_CreateUser(response: AxiosResponse): Promise<CreateB2cUserResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CreateB2cUserResponse.fromJS(resultData200);
            return Promise.resolve<CreateB2cUserResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CreateB2cUserResponse>(<any>null);
    }
}

export interface IDolV3AccessForB2CUserService {
    dolV3AccessForB2CUser_SetupDolV3Access(request: SetupDolV3AccessRequest, api_version?: string | null | undefined): Promise<void>;
}

export class DolV3AccessForB2CUserService implements IDolV3AccessForB2CUserService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    dolV3AccessForB2CUser_SetupDolV3Access(request: SetupDolV3AccessRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/b2cusers/SetupDolV3Access";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDolV3AccessForB2CUser_SetupDolV3Access(_response);
        });
    }

    protected processDolV3AccessForB2CUser_SetupDolV3Access(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export interface IUserService {
    user_GetUsersByDomainId(domainid: string, api_version?: string | null | undefined): Promise<ResponseModelOfListOfUserGetResp>;
    user_DeleteUserByUserId(userid: string, api_version?: string | null | undefined): Promise<boolean>;
    user_GetUserByUserId(userid: string, api_version?: string | null | undefined): Promise<UserDto>;
    user_SelfServeUpdate(userid: string, userDTO: UserSelfServeDto, api_version?: string | null | undefined): Promise<boolean>;
    user_Save(userDTO: UserDto, api_version?: string | null | undefined): Promise<UserDto>;
    user_GetUserByPrefix(domainId: string, searchExpression?: string | null | undefined, api_version?: string | null | undefined): Promise<UserNameDto[]>;
    /**
     * Retrieve current user permissions
     * @param api_version (optional) 
     * @return UserPermissionsInfo
     */
    user_RetrieveCurrentUserPermissions(api_version?: string | null | undefined): Promise<UserPermissionsInfo>;
    /**
     * Retrieve current user accessible domains
     * @param api_version (optional) 
     */
    user_RetrieveCurrentUserAccessibleDomains(api_version?: string | null | undefined): Promise<DomainDetailDto[]>;
    user_CanAccessRtu(userId: string, rtuDeviceId: string | null, api_version?: string | null | undefined): Promise<CanAccessRtuResponse>;
}

export class UserService implements IUserService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    user_GetUsersByDomainId(domainid: string, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<ResponseModelOfListOfUserGetResp> {
        let url_ = this.baseUrl + "/User/bydomain/{domainid}";
        if (domainid === undefined || domainid === null)
            throw new Error("The parameter 'domainid' must be defined.");
        url_ = url_.replace("{domainid}", encodeURIComponent("" + domainid));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUser_GetUsersByDomainId(_response);
        });
    }

    protected processUser_GetUsersByDomainId(response: AxiosResponse): Promise<ResponseModelOfListOfUserGetResp> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ResponseModelOfListOfUserGetResp.fromJS(resultData200);
            return Promise.resolve<ResponseModelOfListOfUserGetResp>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ResponseModelOfListOfUserGetResp>(<any>null);
    }

    user_DeleteUserByUserId(userid: string, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/User/{userid}";
        if (userid === undefined || userid === null)
            throw new Error("The parameter 'userid' must be defined.");
        url_ = url_.replace("{userid}", encodeURIComponent("" + userid));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUser_DeleteUserByUserId(_response);
        });
    }

    protected processUser_DeleteUserByUserId(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    user_GetUserByUserId(userid: string, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<UserDto> {
        let url_ = this.baseUrl + "/User/{userid}";
        if (userid === undefined || userid === null)
            throw new Error("The parameter 'userid' must be defined.");
        url_ = url_.replace("{userid}", encodeURIComponent("" + userid));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUser_GetUserByUserId(_response);
        });
    }

    protected processUser_GetUserByUserId(response: AxiosResponse): Promise<UserDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UserDto.fromJS(resultData200);
            return Promise.resolve<UserDto>(result200);

        } else if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            if (Array.isArray(resultData404)) {
                result404 = [] as any;
                for (let item of resultData404)
                    result404!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result404 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserDto>(<any>null);
    }

    user_SelfServeUpdate(userid: string, userDTO: UserSelfServeDto, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/User/{userid}";
        if (userid === undefined || userid === null)
            throw new Error("The parameter 'userid' must be defined.");
        url_ = url_.replace("{userid}", encodeURIComponent("" + userid));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(userDTO);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUser_SelfServeUpdate(_response);
        });
    }

    protected processUser_SelfServeUpdate(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    user_Save(userDTO: UserDto, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<UserDto> {
        let url_ = this.baseUrl + "/User";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(userDTO);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUser_Save(_response);
        });
    }

    protected processUser_Save(response: AxiosResponse): Promise<UserDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UserDto.fromJS(resultData200);
            return Promise.resolve<UserDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserDto>(<any>null);
    }

    user_GetUserByPrefix(domainId: string, searchExpression?: string | null | undefined, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<UserNameDto[]> {
        let url_ = this.baseUrl + "/User/Search/domains/{domainId}?";
        if (domainId === undefined || domainId === null)
            throw new Error("The parameter 'domainId' must be defined.");
        url_ = url_.replace("{domainId}", encodeURIComponent("" + domainId));
        if (searchExpression !== undefined && searchExpression !== null)
            url_ += "searchExpression=" + encodeURIComponent("" + searchExpression) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUser_GetUserByPrefix(_response);
        });
    }

    protected processUser_GetUserByPrefix(response: AxiosResponse): Promise<UserNameDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UserNameDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<UserNameDto[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserNameDto[]>(<any>null);
    }

    /**
     * Retrieve current user permissions
     * @param api_version (optional) 
     * @return UserPermissionsInfo
     */
    user_RetrieveCurrentUserPermissions(api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<UserPermissionsInfo> {
        let url_ = this.baseUrl + "/User/permissions";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUser_RetrieveCurrentUserPermissions(_response);
        });
    }

    protected processUser_RetrieveCurrentUserPermissions(response: AxiosResponse): Promise<UserPermissionsInfo> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UserPermissionsInfo.fromJS(resultData200);
            return Promise.resolve<UserPermissionsInfo>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserPermissionsInfo>(<any>null);
    }

    /**
     * Retrieve current user accessible domains
     * @param api_version (optional) 
     */
    user_RetrieveCurrentUserAccessibleDomains(api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<DomainDetailDto[]> {
        let url_ = this.baseUrl + "/User/accessibledomains";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUser_RetrieveCurrentUserAccessibleDomains(_response);
        });
    }

    protected processUser_RetrieveCurrentUserAccessibleDomains(response: AxiosResponse): Promise<DomainDetailDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DomainDetailDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<DomainDetailDto[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DomainDetailDto[]>(<any>null);
    }

    user_CanAccessRtu(userId: string, rtuDeviceId: string | null, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<CanAccessRtuResponse> {
        let url_ = this.baseUrl + "/User/{userId}/CanAccessRtu/{rtuDeviceId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        if (rtuDeviceId === undefined || rtuDeviceId === null)
            throw new Error("The parameter 'rtuDeviceId' must be defined.");
        url_ = url_.replace("{rtuDeviceId}", encodeURIComponent("" + rtuDeviceId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUser_CanAccessRtu(_response);
        });
    }

    protected processUser_CanAccessRtu(response: AxiosResponse): Promise<CanAccessRtuResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = CanAccessRtuResponse.fromJS(resultData200);
            return Promise.resolve<CanAccessRtuResponse>(result200);

        } else if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            if (Array.isArray(resultData404)) {
                result404 = [] as any;
                for (let item of resultData404)
                    result404!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result404 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<CanAccessRtuResponse>(<any>null);
    }
}

export interface IUserWatchListService {
    userWatchList_SaveUserWatchListItem(userWLDTO: UserWatchListDto, api_version?: string | null | undefined): Promise<UserWatchListModel>;
    userWatchList_DeleteUserWatchListItem(userWLDTO: UserWatchListDto, api_version?: string | null | undefined): Promise<boolean>;
    userWatchList_GetUserWatchList(userid: string, domainid: string, api_version?: string | null | undefined): Promise<UserWatchListDto[]>;
}

export class UserWatchListService implements IUserWatchListService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    userWatchList_SaveUserWatchListItem(userWLDTO: UserWatchListDto, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<UserWatchListModel> {
        let url_ = this.baseUrl + "/UserWatchList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(userWLDTO);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUserWatchList_SaveUserWatchListItem(_response);
        });
    }

    protected processUserWatchList_SaveUserWatchListItem(response: AxiosResponse): Promise<UserWatchListModel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UserWatchListModel.fromJS(resultData200);
            return Promise.resolve<UserWatchListModel>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserWatchListModel>(<any>null);
    }

    userWatchList_DeleteUserWatchListItem(userWLDTO: UserWatchListDto, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/UserWatchList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(userWLDTO);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "DELETE",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUserWatchList_DeleteUserWatchListItem(_response);
        });
    }

    protected processUserWatchList_DeleteUserWatchListItem(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    userWatchList_GetUserWatchList(userid: string, domainid: string, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<UserWatchListDto[]> {
        let url_ = this.baseUrl + "/UserWatchList/{userid}/{domainid}";
        if (userid === undefined || userid === null)
            throw new Error("The parameter 'userid' must be defined.");
        url_ = url_.replace("{userid}", encodeURIComponent("" + userid));
        if (domainid === undefined || domainid === null)
            throw new Error("The parameter 'domainid' must be defined.");
        url_ = url_.replace("{domainid}", encodeURIComponent("" + domainid));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUserWatchList_GetUserWatchList(_response);
        });
    }

    protected processUserWatchList_GetUserWatchList(response: AxiosResponse): Promise<UserWatchListDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UserWatchListDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<UserWatchListDto[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserWatchListDto[]>(<any>null);
    }
}

export interface IRosterService {
    roster_GetByDomainId(domainId: string, api_version?: string | null | undefined): Promise<RosterSummaryDto[]>;
    roster_Delete(rosterIds?: number[] | null | undefined, api_version?: string | null | undefined): Promise<boolean>;
    roster_Save(roster: RosterDto, api_version?: string | null | undefined): Promise<RosterDto>;
    roster_GetByRosterId(rosterId: number, api_version?: string | null | undefined): Promise<RosterDto>;
    roster_SaveRosterUser(rosterId: number, roster: RosterUserDto, api_version?: string | null | undefined): Promise<RosterUserSummaryDto>;
}

export class RosterService implements IRosterService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    roster_GetByDomainId(domainId: string, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<RosterSummaryDto[]> {
        let url_ = this.baseUrl + "/Roster/domains/{domainId}";
        if (domainId === undefined || domainId === null)
            throw new Error("The parameter 'domainId' must be defined.");
        url_ = url_.replace("{domainId}", encodeURIComponent("" + domainId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRoster_GetByDomainId(_response);
        });
    }

    protected processRoster_GetByDomainId(response: AxiosResponse): Promise<RosterSummaryDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(RosterSummaryDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<RosterSummaryDto[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RosterSummaryDto[]>(<any>null);
    }

    roster_Delete(rosterIds?: number[] | null | undefined, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/Roster?";
        if (rosterIds !== undefined && rosterIds !== null)
            rosterIds && rosterIds.forEach(item => { url_ += "rosterIds=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRoster_Delete(_response);
        });
    }

    protected processRoster_Delete(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    roster_Save(roster: RosterDto, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<RosterDto> {
        let url_ = this.baseUrl + "/Roster";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(roster);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRoster_Save(_response);
        });
    }

    protected processRoster_Save(response: AxiosResponse): Promise<RosterDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RosterDto.fromJS(resultData200);
            return Promise.resolve<RosterDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RosterDto>(<any>null);
    }

    roster_GetByRosterId(rosterId: number, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<RosterDto> {
        let url_ = this.baseUrl + "/Roster/{rosterId}";
        if (rosterId === undefined || rosterId === null)
            throw new Error("The parameter 'rosterId' must be defined.");
        url_ = url_.replace("{rosterId}", encodeURIComponent("" + rosterId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRoster_GetByRosterId(_response);
        });
    }

    protected processRoster_GetByRosterId(response: AxiosResponse): Promise<RosterDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RosterDto.fromJS(resultData200);
            return Promise.resolve<RosterDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RosterDto>(<any>null);
    }

    roster_SaveRosterUser(rosterId: number, roster: RosterUserDto, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<RosterUserSummaryDto> {
        let url_ = this.baseUrl + "/Roster/{rosterId}/users";
        if (rosterId === undefined || rosterId === null)
            throw new Error("The parameter 'rosterId' must be defined.");
        url_ = url_.replace("{rosterId}", encodeURIComponent("" + rosterId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(roster);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRoster_SaveRosterUser(_response);
        });
    }

    protected processRoster_SaveRosterUser(response: AxiosResponse): Promise<RosterUserSummaryDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = RosterUserSummaryDto.fromJS(resultData200);
            return Promise.resolve<RosterUserSummaryDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RosterUserSummaryDto>(<any>null);
    }
}

export interface IHornerDetailRecordTemplateService {
    hornerDetailRecordTemplate_GetTemplateList(api_version?: string | null | undefined): Promise<RecordTemplateDto[]>;
}

export class HornerDetailRecordTemplateService implements IHornerDetailRecordTemplateService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    hornerDetailRecordTemplate_GetTemplateList(api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<RecordTemplateDto[]> {
        let url_ = this.baseUrl + "/HornerDetailRecordTemplate";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processHornerDetailRecordTemplate_GetTemplateList(_response);
        });
    }

    protected processHornerDetailRecordTemplate_GetTemplateList(response: AxiosResponse): Promise<RecordTemplateDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(RecordTemplateDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<RecordTemplateDto[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RecordTemplateDto[]>(<any>null);
    }
}

export interface IHornerTransactionRecordTemplateService {
    hornerTransactionRecordTemplate_GetTemplateList(api_version?: string | null | undefined): Promise<RecordTemplateDto[]>;
}

export class HornerTransactionRecordTemplateService implements IHornerTransactionRecordTemplateService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    hornerTransactionRecordTemplate_GetTemplateList(api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<RecordTemplateDto[]> {
        let url_ = this.baseUrl + "/HornerTransactionRecordTemplate";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processHornerTransactionRecordTemplate_GetTemplateList(_response);
        });
    }

    protected processHornerTransactionRecordTemplate_GetTemplateList(response: AxiosResponse): Promise<RecordTemplateDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(RecordTemplateDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<RecordTemplateDto[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RecordTemplateDto[]>(<any>null);
    }
}

export interface IReadingsService {
    /**
     * Delete data channel readings
     * @param dataChannelId System identifier for a data channel
     * @param beginTime (optional) Begin time for the readings time range
     * @param endTime (optional) End time for the readings time range
     * @param api_version (optional) 
     */
    readings_DeleteDataChannelReadingsByDateRange(dataChannelId: string, beginTime?: Date | undefined, endTime?: Date | undefined, api_version?: string | null | undefined): Promise<boolean>;
    /**
     * Rescale data channel readings
     * @param dataChannelId System identifier for a data channel
     * @param beginTime (optional) Begin time for the readings time range
     * @param endTime (optional) End time for the readings time range
     * @param api_version (optional) 
     */
    readings_RescaleDataChannelReadingsByDateRange(dataChannelId: string, beginTime?: Date | undefined, endTime?: Date | undefined, api_version?: string | null | undefined): Promise<boolean>;
}

export class ReadingsService implements IReadingsService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    /**
     * Delete data channel readings
     * @param dataChannelId System identifier for a data channel
     * @param beginTime (optional) Begin time for the readings time range
     * @param endTime (optional) End time for the readings time range
     * @param api_version (optional) 
     */
    readings_DeleteDataChannelReadingsByDateRange(dataChannelId: string, beginTime?: Date | undefined, endTime?: Date | undefined, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/datachannel/{dataChannelId}/readings?";
        if (dataChannelId === undefined || dataChannelId === null)
            throw new Error("The parameter 'dataChannelId' must be defined.");
        url_ = url_.replace("{dataChannelId}", encodeURIComponent("" + dataChannelId));
        if (beginTime === null)
            throw new Error("The parameter 'beginTime' cannot be null.");
        else if (beginTime !== undefined)
            url_ += "begin_time=" + encodeURIComponent(beginTime ? "" + beginTime.toJSON() : "") + "&";
        if (endTime === null)
            throw new Error("The parameter 'endTime' cannot be null.");
        else if (endTime !== undefined)
            url_ += "end_time=" + encodeURIComponent(endTime ? "" + endTime.toJSON() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processReadings_DeleteDataChannelReadingsByDateRange(_response);
        });
    }

    protected processReadings_DeleteDataChannelReadingsByDateRange(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    /**
     * Rescale data channel readings
     * @param dataChannelId System identifier for a data channel
     * @param beginTime (optional) Begin time for the readings time range
     * @param endTime (optional) End time for the readings time range
     * @param api_version (optional) 
     */
    readings_RescaleDataChannelReadingsByDateRange(dataChannelId: string, beginTime?: Date | undefined, endTime?: Date | undefined, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/datachannel/{dataChannelId}/readings/rescale?";
        if (dataChannelId === undefined || dataChannelId === null)
            throw new Error("The parameter 'dataChannelId' must be defined.");
        url_ = url_.replace("{dataChannelId}", encodeURIComponent("" + dataChannelId));
        if (beginTime === null)
            throw new Error("The parameter 'beginTime' cannot be null.");
        else if (beginTime !== undefined)
            url_ += "begin_time=" + encodeURIComponent(beginTime ? "" + beginTime.toJSON() : "") + "&";
        if (endTime === null)
            throw new Error("The parameter 'endTime' cannot be null.");
        else if (endTime !== undefined)
            url_ += "end_time=" + encodeURIComponent(endTime ? "" + endTime.toJSON() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "PUT",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processReadings_RescaleDataChannelReadingsByDateRange(_response);
        });
    }

    protected processReadings_RescaleDataChannelReadingsByDateRange(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }
}

export interface IReadingsApiService {
    /**
     * Get Forecast Readings By DataChannel Id
     * @param api_version (optional) 
     */
    getForecastReadingsByDataChannelId_GetForecastReadingsByDataChannelId(request: EvolveGetForecastReadingsByDataChannelIdRequest, api_version?: string | null | undefined): Promise<EvolveGetForecastReadingsByDataChannelIdResponse>;
    /**
     * Get Readings By DataChannelId
     * @param api_version (optional) 
     */
    getReadingsByDataChannelId_GetReadingsByDataChannelId(request: EvolveGetReadingsByDataChannelIdRequest, api_version?: string | null | undefined): Promise<EvolveGetReadingsByDataChannelIdResponse>;
}

export class ReadingsApiService implements IReadingsApiService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    /**
     * Get Forecast Readings By DataChannel Id
     * @param api_version (optional) 
     */
    getForecastReadingsByDataChannelId_GetForecastReadingsByDataChannelId(request: EvolveGetForecastReadingsByDataChannelIdRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveGetForecastReadingsByDataChannelIdResponse> {
        let url_ = this.baseUrl + "/GetForecastReadingsByDataChannelId";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetForecastReadingsByDataChannelId_GetForecastReadingsByDataChannelId(_response);
        });
    }

    protected processGetForecastReadingsByDataChannelId_GetForecastReadingsByDataChannelId(response: AxiosResponse): Promise<EvolveGetForecastReadingsByDataChannelIdResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveGetForecastReadingsByDataChannelIdResponse.fromJS(resultData200);
            return Promise.resolve<EvolveGetForecastReadingsByDataChannelIdResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 403) {
            const _responseText = response.data;
            let result403: any = null;
            let resultData403  = _responseText;
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("A server side error occurred.", status, _responseText, _headers, result403);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveGetForecastReadingsByDataChannelIdResponse>(<any>null);
    }

    /**
     * Get Readings By DataChannelId
     * @param api_version (optional) 
     */
    getReadingsByDataChannelId_GetReadingsByDataChannelId(request: EvolveGetReadingsByDataChannelIdRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveGetReadingsByDataChannelIdResponse> {
        let url_ = this.baseUrl + "/GetReadingsByDataChannelId";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetReadingsByDataChannelId_GetReadingsByDataChannelId(_response);
        });
    }

    protected processGetReadingsByDataChannelId_GetReadingsByDataChannelId(response: AxiosResponse): Promise<EvolveGetReadingsByDataChannelIdResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveGetReadingsByDataChannelIdResponse.fromJS(resultData200);
            return Promise.resolve<EvolveGetReadingsByDataChannelIdResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 403) {
            const _responseText = response.data;
            let result403: any = null;
            let resultData403  = _responseText;
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("A server side error occurred.", status, _responseText, _headers, result403);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveGetReadingsByDataChannelIdResponse>(<any>null);
    }
}

export interface IProductService {
    /**
     * Find products using search exoression
     * @param searchExpression Regular expression used in search
     * @param api_version (optional) 
     */
    product_Find(searchExpression: string | null, api_version?: string | null | undefined): Promise<ProductInfoDto[]>;
    /**
     * RetrieveProductNamesByPrefix
     * @param startsWith (optional) Product name prefix
     * @param offset (optional) Record subscript of first record in result
     * @param limit (optional) Maximum number of records
     * @param api_version (optional) 
     */
    product_RetrieveProductNamesByPrefix(startsWith?: string | null | undefined, offset?: number | null | undefined, limit?: number | null | undefined, api_version?: string | null | undefined): Promise<ProductNameInfoDto[]>;
}

export class ProductService implements IProductService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    /**
     * Find products using search exoression
     * @param searchExpression Regular expression used in search
     * @param api_version (optional) 
     */
    product_Find(searchExpression: string | null, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<ProductInfoDto[]> {
        let url_ = this.baseUrl + "/Product/find/{searchExpression}";
        if (searchExpression === undefined || searchExpression === null)
            throw new Error("The parameter 'searchExpression' must be defined.");
        url_ = url_.replace("{searchExpression}", encodeURIComponent("" + searchExpression));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProduct_Find(_response);
        });
    }

    protected processProduct_Find(response: AxiosResponse): Promise<ProductInfoDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ProductInfoDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<ProductInfoDto[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ProductInfoDto[]>(<any>null);
    }

    /**
     * RetrieveProductNamesByPrefix
     * @param startsWith (optional) Product name prefix
     * @param offset (optional) Record subscript of first record in result
     * @param limit (optional) Maximum number of records
     * @param api_version (optional) 
     */
    product_RetrieveProductNamesByPrefix(startsWith?: string | null | undefined, offset?: number | null | undefined, limit?: number | null | undefined, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<ProductNameInfoDto[]> {
        let url_ = this.baseUrl + "/Product/names?";
        if (startsWith !== undefined && startsWith !== null)
            url_ += "begins-with=" + encodeURIComponent("" + startsWith) + "&";
        if (offset !== undefined && offset !== null)
            url_ += "offset=" + encodeURIComponent("" + offset) + "&";
        if (limit !== undefined && limit !== null)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProduct_RetrieveProductNamesByPrefix(_response);
        });
    }

    protected processProduct_RetrieveProductNamesByPrefix(response: AxiosResponse): Promise<ProductNameInfoDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ProductNameInfoDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<ProductNameInfoDto[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ProductNameInfoDto[]>(<any>null);
    }
}

export interface IProblemReportService {
    problemReport_GetList(assetSearchExpression?: string | null | undefined, assetId?: string | null | undefined, viewTypeId?: ProblemReportViewEnum | undefined, showClosed?: boolean | undefined, showOpen?: boolean | undefined, filterByTypeId?: ProblemReportFilter | undefined, tagIdList?: number[] | null | undefined, timeRangeTypeId?: TimeRangeTypeEnum | undefined, fromDate?: Date | null | undefined, toDate?: Date | null | undefined, isAlarmVerified?: boolean | null | undefined, loadUserSettings?: boolean | undefined, isCountRequired?: boolean | undefined, userId?: string | undefined, domainId?: string | undefined, pageNumber?: number | undefined, pageSize?: number | undefined, filterText?: string | null | undefined, sortColumnName?: string | null | undefined, sortDirectionTypeId?: SortDirectionEnum | null | undefined, api_version?: string | null | undefined): Promise<PagingResponseModelOfListOfProblemReport_SummaryDto>;
    problemReport_Get(problemReportId: number, api_version?: string | null | undefined): Promise<ProblemReportDetailDto>;
    problemReport_Update(problemReportId: number, problemReport: ProblemReportDto, api_version?: string | null | undefined): Promise<boolean>;
    problemReport_SaveActivityLog(problemReportId: number, dto: ProblemReportActivityLogDto, api_version?: string | null | undefined): Promise<boolean>;
    problemReport_DeleteActivityLog(problemReportActivityLogId: number, problemReportId: string, api_version?: string | null | undefined): Promise<boolean>;
    problemReport_Search(filterBy?: DataChannelFilter | undefined, isCountRequired?: boolean | undefined, userId?: string | undefined, domainId?: string | undefined, pageNumber?: number | undefined, pageSize?: number | undefined, filterText?: string | null | undefined, sortColumnName?: string | null | undefined, sortDirectionTypeId?: SortDirectionEnum | null | undefined, api_version?: string | null | undefined): Promise<PagingResponseModelOfListOfDataChannel_SummaryDto>;
    problemReport_AddAffectedDataChannel(problemReportId: number, dto: DataChannel_SummaryDto[], api_version?: string | null | undefined): Promise<boolean>;
    problemReport_UpdateAffectedDataChannel(problemReportId: number, affectedDataChannelId: string, isPrimary?: boolean | undefined, isFaulty?: boolean | undefined, api_version?: string | null | undefined): Promise<boolean>;
    problemReport_DeleteAffectedDataChannel(problemReportId: number, affectedDataChannelId: string, api_version?: string | null | undefined): Promise<boolean>;
    problemReport_GetUserSettings(api_version?: string | null | undefined): Promise<UserProblemReportSettingDto>;
    problemReport_SaveUserSettings(dto: UserProblemReportSettingDto, api_version?: string | null | undefined): Promise<UserProblemReportSettingDto>;
    /**
     * Generate new problem report template
     * @param dataChannelId Internal unique identifier for a data channel
     * @param api_version (optional) 
     * @return ProblemReportDetailDTO
     */
    problemReport_GenerateNewProblemReport(dataChannelId: string, api_version?: string | null | undefined): Promise<ProblemReportDetailDto>;
    /**
     * Create Manual Problem Report
     * @param problemReport Problem report detail information
     * @param api_version (optional) 
     */
    problemReport_CreateManualProblemReport(problemReport: ProblemReportDetailDto, dataChannelId: string, api_version?: string | null | undefined): Promise<boolean>;
    /**
     * Close or reopen a problem report
     * @param problemReportId Problem report system identifier
     * @param status Close or Reopen
     * @param api_version (optional) 
     * @return true = successful
     */
    problemReport_UpdateProblemReportStatus(problemReportId: number, status: string | null, api_version?: string | null | undefined): Promise<boolean>;
    /**
     * Retrieve Problem Report template field names
     * @param api_version (optional) 
     * @return DropDownListDTO[]
     */
    problemReport_RetrieveMessageTemplateFields(api_version?: string | null | undefined): Promise<string[]>;
    /**
     * Retrieve problem report message templates
     * @param api_version (optional) 
     * @return MessageTemplateDTO[]
     */
    problemReport_RetrieveMessageTemplates(api_version?: string | null | undefined): Promise<MessageTemplateDto[]>;
    /**
     * Send a problem report email
     * @param problemReportId Problem report system identifier
     * @param messageTemplate Email message template.
     * @param api_version (optional) 
     */
    problemReport_SendProblemReportEmail(problemReportId: number, messageTemplate: MessageTemplateDto, api_version?: string | null | undefined): Promise<boolean>;
    /**
     * Preview Problem Report email.
     * @param problemReportId System unique identifier for a problem report
     * @param messageTemplate Tokenized message template
     * @param api_version (optional) 
     * @return MessageTemplateDTO
     */
    problemReport_PreviewProblemReportEmail(problemReportId: number, messageTemplate: MessageTemplateDto, api_version?: string | null | undefined): Promise<MessageTemplateDto>;
    /**
     * Get Problem Report email list
     * @param api_version (optional) 
     * @return string[]
     */
    problemReport_RetrieveEmailAddresses(api_version?: string | null | undefined): Promise<string[]>;
}

export class ProblemReportService implements IProblemReportService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    problemReport_GetList(assetSearchExpression?: string | null | undefined, assetId?: string | null | undefined, viewTypeId?: ProblemReportViewEnum | undefined, showClosed?: boolean | undefined, showOpen?: boolean | undefined, filterByTypeId?: ProblemReportFilter | undefined, tagIdList?: number[] | null | undefined, timeRangeTypeId?: TimeRangeTypeEnum | undefined, fromDate?: Date | null | undefined, toDate?: Date | null | undefined, isAlarmVerified?: boolean | null | undefined, loadUserSettings?: boolean | undefined, isCountRequired?: boolean | undefined, userId?: string | undefined, domainId?: string | undefined, pageNumber?: number | undefined, pageSize?: number | undefined, filterText?: string | null | undefined, sortColumnName?: string | null | undefined, sortDirectionTypeId?: SortDirectionEnum | null | undefined, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<PagingResponseModelOfListOfProblemReport_SummaryDto> {
        let url_ = this.baseUrl + "/ProblemReport?";
        if (assetSearchExpression !== undefined && assetSearchExpression !== null)
            url_ += "AssetSearchExpression=" + encodeURIComponent("" + assetSearchExpression) + "&";
        if (assetId !== undefined && assetId !== null)
            url_ += "AssetId=" + encodeURIComponent("" + assetId) + "&";
        if (viewTypeId === null)
            throw new Error("The parameter 'viewTypeId' cannot be null.");
        else if (viewTypeId !== undefined)
            url_ += "ViewTypeId=" + encodeURIComponent("" + viewTypeId) + "&";
        if (showClosed === null)
            throw new Error("The parameter 'showClosed' cannot be null.");
        else if (showClosed !== undefined)
            url_ += "ShowClosed=" + encodeURIComponent("" + showClosed) + "&";
        if (showOpen === null)
            throw new Error("The parameter 'showOpen' cannot be null.");
        else if (showOpen !== undefined)
            url_ += "ShowOpen=" + encodeURIComponent("" + showOpen) + "&";
        if (filterByTypeId === null)
            throw new Error("The parameter 'filterByTypeId' cannot be null.");
        else if (filterByTypeId !== undefined)
            url_ += "FilterByTypeId=" + encodeURIComponent("" + filterByTypeId) + "&";
        if (tagIdList !== undefined && tagIdList !== null)
            tagIdList && tagIdList.forEach(item => { url_ += "TagIdList=" + encodeURIComponent("" + item) + "&"; });
        if (timeRangeTypeId === null)
            throw new Error("The parameter 'timeRangeTypeId' cannot be null.");
        else if (timeRangeTypeId !== undefined)
            url_ += "TimeRangeTypeId=" + encodeURIComponent("" + timeRangeTypeId) + "&";
        if (fromDate !== undefined && fromDate !== null)
            url_ += "FromDate=" + encodeURIComponent(fromDate ? "" + fromDate.toJSON() : "") + "&";
        if (toDate !== undefined && toDate !== null)
            url_ += "ToDate=" + encodeURIComponent(toDate ? "" + toDate.toJSON() : "") + "&";
        if (isAlarmVerified !== undefined && isAlarmVerified !== null)
            url_ += "IsAlarmVerified=" + encodeURIComponent("" + isAlarmVerified) + "&";
        if (loadUserSettings === null)
            throw new Error("The parameter 'loadUserSettings' cannot be null.");
        else if (loadUserSettings !== undefined)
            url_ += "LoadUserSettings=" + encodeURIComponent("" + loadUserSettings) + "&";
        if (isCountRequired === null)
            throw new Error("The parameter 'isCountRequired' cannot be null.");
        else if (isCountRequired !== undefined)
            url_ += "IsCountRequired=" + encodeURIComponent("" + isCountRequired) + "&";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        if (domainId === null)
            throw new Error("The parameter 'domainId' cannot be null.");
        else if (domainId !== undefined)
            url_ += "DomainId=" + encodeURIComponent("" + domainId) + "&";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (filterText !== undefined && filterText !== null)
            url_ += "FilterText=" + encodeURIComponent("" + filterText) + "&";
        if (sortColumnName !== undefined && sortColumnName !== null)
            url_ += "SortColumnName=" + encodeURIComponent("" + sortColumnName) + "&";
        if (sortDirectionTypeId !== undefined && sortDirectionTypeId !== null)
            url_ += "SortDirectionTypeId=" + encodeURIComponent("" + sortDirectionTypeId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProblemReport_GetList(_response);
        });
    }

    protected processProblemReport_GetList(response: AxiosResponse): Promise<PagingResponseModelOfListOfProblemReport_SummaryDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PagingResponseModelOfListOfProblemReport_SummaryDto.fromJS(resultData200);
            return Promise.resolve<PagingResponseModelOfListOfProblemReport_SummaryDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagingResponseModelOfListOfProblemReport_SummaryDto>(<any>null);
    }

    problemReport_Get(problemReportId: number, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<ProblemReportDetailDto> {
        let url_ = this.baseUrl + "/ProblemReport/{problemReportId}";
        if (problemReportId === undefined || problemReportId === null)
            throw new Error("The parameter 'problemReportId' must be defined.");
        url_ = url_.replace("{problemReportId}", encodeURIComponent("" + problemReportId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProblemReport_Get(_response);
        });
    }

    protected processProblemReport_Get(response: AxiosResponse): Promise<ProblemReportDetailDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ProblemReportDetailDto.fromJS(resultData200);
            return Promise.resolve<ProblemReportDetailDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ProblemReportDetailDto>(<any>null);
    }

    problemReport_Update(problemReportId: number, problemReport: ProblemReportDto, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/ProblemReport/{problemReportId}";
        if (problemReportId === undefined || problemReportId === null)
            throw new Error("The parameter 'problemReportId' must be defined.");
        url_ = url_.replace("{problemReportId}", encodeURIComponent("" + problemReportId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(problemReport);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PATCH",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProblemReport_Update(_response);
        });
    }

    protected processProblemReport_Update(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    problemReport_SaveActivityLog(problemReportId: number, dto: ProblemReportActivityLogDto, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/ProblemReport/{problemReportId}/ActivityLog";
        if (problemReportId === undefined || problemReportId === null)
            throw new Error("The parameter 'problemReportId' must be defined.");
        url_ = url_.replace("{problemReportId}", encodeURIComponent("" + problemReportId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProblemReport_SaveActivityLog(_response);
        });
    }

    protected processProblemReport_SaveActivityLog(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    problemReport_DeleteActivityLog(problemReportActivityLogId: number, problemReportId: string, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/ProblemReport/{problemReportId}/ActivityLog/{ProblemReportActivityLogId}";
        if (problemReportActivityLogId === undefined || problemReportActivityLogId === null)
            throw new Error("The parameter 'problemReportActivityLogId' must be defined.");
        url_ = url_.replace("{ProblemReportActivityLogId}", encodeURIComponent("" + problemReportActivityLogId));
        if (problemReportId === undefined || problemReportId === null)
            throw new Error("The parameter 'problemReportId' must be defined.");
        url_ = url_.replace("{problemReportId}", encodeURIComponent("" + problemReportId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProblemReport_DeleteActivityLog(_response);
        });
    }

    protected processProblemReport_DeleteActivityLog(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    problemReport_Search(filterBy?: DataChannelFilter | undefined, isCountRequired?: boolean | undefined, userId?: string | undefined, domainId?: string | undefined, pageNumber?: number | undefined, pageSize?: number | undefined, filterText?: string | null | undefined, sortColumnName?: string | null | undefined, sortDirectionTypeId?: SortDirectionEnum | null | undefined, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<PagingResponseModelOfListOfDataChannel_SummaryDto> {
        let url_ = this.baseUrl + "/ProblemReport/DataChannel?";
        if (filterBy === null)
            throw new Error("The parameter 'filterBy' cannot be null.");
        else if (filterBy !== undefined)
            url_ += "FilterBy=" + encodeURIComponent("" + filterBy) + "&";
        if (isCountRequired === null)
            throw new Error("The parameter 'isCountRequired' cannot be null.");
        else if (isCountRequired !== undefined)
            url_ += "IsCountRequired=" + encodeURIComponent("" + isCountRequired) + "&";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "UserId=" + encodeURIComponent("" + userId) + "&";
        if (domainId === null)
            throw new Error("The parameter 'domainId' cannot be null.");
        else if (domainId !== undefined)
            url_ += "DomainId=" + encodeURIComponent("" + domainId) + "&";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (filterText !== undefined && filterText !== null)
            url_ += "FilterText=" + encodeURIComponent("" + filterText) + "&";
        if (sortColumnName !== undefined && sortColumnName !== null)
            url_ += "SortColumnName=" + encodeURIComponent("" + sortColumnName) + "&";
        if (sortDirectionTypeId !== undefined && sortDirectionTypeId !== null)
            url_ += "SortDirectionTypeId=" + encodeURIComponent("" + sortDirectionTypeId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProblemReport_Search(_response);
        });
    }

    protected processProblemReport_Search(response: AxiosResponse): Promise<PagingResponseModelOfListOfDataChannel_SummaryDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PagingResponseModelOfListOfDataChannel_SummaryDto.fromJS(resultData200);
            return Promise.resolve<PagingResponseModelOfListOfDataChannel_SummaryDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PagingResponseModelOfListOfDataChannel_SummaryDto>(<any>null);
    }

    problemReport_AddAffectedDataChannel(problemReportId: number, dto: DataChannel_SummaryDto[], api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/ProblemReport/{problemReportId}/AffectedDataChannel";
        if (problemReportId === undefined || problemReportId === null)
            throw new Error("The parameter 'problemReportId' must be defined.");
        url_ = url_.replace("{problemReportId}", encodeURIComponent("" + problemReportId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProblemReport_AddAffectedDataChannel(_response);
        });
    }

    protected processProblemReport_AddAffectedDataChannel(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    problemReport_UpdateAffectedDataChannel(problemReportId: number, affectedDataChannelId: string, isPrimary?: boolean | undefined, isFaulty?: boolean | undefined, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/ProblemReport/{problemReportId}/AffectedDataChannel/{affectedDataChannelId}?";
        if (problemReportId === undefined || problemReportId === null)
            throw new Error("The parameter 'problemReportId' must be defined.");
        url_ = url_.replace("{problemReportId}", encodeURIComponent("" + problemReportId));
        if (affectedDataChannelId === undefined || affectedDataChannelId === null)
            throw new Error("The parameter 'affectedDataChannelId' must be defined.");
        url_ = url_.replace("{affectedDataChannelId}", encodeURIComponent("" + affectedDataChannelId));
        if (isPrimary === null)
            throw new Error("The parameter 'isPrimary' cannot be null.");
        else if (isPrimary !== undefined)
            url_ += "IsPrimary=" + encodeURIComponent("" + isPrimary) + "&";
        if (isFaulty === null)
            throw new Error("The parameter 'isFaulty' cannot be null.");
        else if (isFaulty !== undefined)
            url_ += "IsFaulty=" + encodeURIComponent("" + isFaulty) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProblemReport_UpdateAffectedDataChannel(_response);
        });
    }

    protected processProblemReport_UpdateAffectedDataChannel(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    problemReport_DeleteAffectedDataChannel(problemReportId: number, affectedDataChannelId: string, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/ProblemReport/{problemReportId}/AffectedDataChannel/{affectedDataChannelId}";
        if (problemReportId === undefined || problemReportId === null)
            throw new Error("The parameter 'problemReportId' must be defined.");
        url_ = url_.replace("{problemReportId}", encodeURIComponent("" + problemReportId));
        if (affectedDataChannelId === undefined || affectedDataChannelId === null)
            throw new Error("The parameter 'affectedDataChannelId' must be defined.");
        url_ = url_.replace("{affectedDataChannelId}", encodeURIComponent("" + affectedDataChannelId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProblemReport_DeleteAffectedDataChannel(_response);
        });
    }

    protected processProblemReport_DeleteAffectedDataChannel(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    problemReport_GetUserSettings(api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<UserProblemReportSettingDto> {
        let url_ = this.baseUrl + "/ProblemReport/userSetting";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProblemReport_GetUserSettings(_response);
        });
    }

    protected processProblemReport_GetUserSettings(response: AxiosResponse): Promise<UserProblemReportSettingDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UserProblemReportSettingDto.fromJS(resultData200);
            return Promise.resolve<UserProblemReportSettingDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserProblemReportSettingDto>(<any>null);
    }

    problemReport_SaveUserSettings(dto: UserProblemReportSettingDto, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<UserProblemReportSettingDto> {
        let url_ = this.baseUrl + "/ProblemReport/userSetting";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProblemReport_SaveUserSettings(_response);
        });
    }

    protected processProblemReport_SaveUserSettings(response: AxiosResponse): Promise<UserProblemReportSettingDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UserProblemReportSettingDto.fromJS(resultData200);
            return Promise.resolve<UserProblemReportSettingDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserProblemReportSettingDto>(<any>null);
    }

    /**
     * Generate new problem report template
     * @param dataChannelId Internal unique identifier for a data channel
     * @param api_version (optional) 
     * @return ProblemReportDetailDTO
     */
    problemReport_GenerateNewProblemReport(dataChannelId: string, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<ProblemReportDetailDto> {
        let url_ = this.baseUrl + "/ProblemReport/NewProblemReport/datachannel/{dataChannelId}";
        if (dataChannelId === undefined || dataChannelId === null)
            throw new Error("The parameter 'dataChannelId' must be defined.");
        url_ = url_.replace("{dataChannelId}", encodeURIComponent("" + dataChannelId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProblemReport_GenerateNewProblemReport(_response);
        });
    }

    protected processProblemReport_GenerateNewProblemReport(response: AxiosResponse): Promise<ProblemReportDetailDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ProblemReportDetailDto.fromJS(resultData200);
            return Promise.resolve<ProblemReportDetailDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ProblemReportDetailDto>(<any>null);
    }

    /**
     * Create Manual Problem Report
     * @param problemReport Problem report detail information
     * @param api_version (optional) 
     */
    problemReport_CreateManualProblemReport(problemReport: ProblemReportDetailDto, dataChannelId: string, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/ProblemReport/datachannel/{dataChannelId}";
        if (dataChannelId === undefined || dataChannelId === null)
            throw new Error("The parameter 'dataChannelId' must be defined.");
        url_ = url_.replace("{dataChannelId}", encodeURIComponent("" + dataChannelId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(problemReport);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProblemReport_CreateManualProblemReport(_response);
        });
    }

    protected processProblemReport_CreateManualProblemReport(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    /**
     * Close or reopen a problem report
     * @param problemReportId Problem report system identifier
     * @param status Close or Reopen
     * @param api_version (optional) 
     * @return true = successful
     */
    problemReport_UpdateProblemReportStatus(problemReportId: number, status: string | null, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/ProblemReport/{problemReportId}/status/{status}";
        if (problemReportId === undefined || problemReportId === null)
            throw new Error("The parameter 'problemReportId' must be defined.");
        url_ = url_.replace("{problemReportId}", encodeURIComponent("" + problemReportId));
        if (status === undefined || status === null)
            throw new Error("The parameter 'status' must be defined.");
        url_ = url_.replace("{status}", encodeURIComponent("" + status));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "PUT",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProblemReport_UpdateProblemReportStatus(_response);
        });
    }

    protected processProblemReport_UpdateProblemReportStatus(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    /**
     * Retrieve Problem Report template field names
     * @param api_version (optional) 
     * @return DropDownListDTO[]
     */
    problemReport_RetrieveMessageTemplateFields(api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<string[]> {
        let url_ = this.baseUrl + "/ProblemReport/messagetemplate/fields";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProblemReport_RetrieveMessageTemplateFields(_response);
        });
    }

    protected processProblemReport_RetrieveMessageTemplateFields(response: AxiosResponse): Promise<string[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<string[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string[]>(<any>null);
    }

    /**
     * Retrieve problem report message templates
     * @param api_version (optional) 
     * @return MessageTemplateDTO[]
     */
    problemReport_RetrieveMessageTemplates(api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<MessageTemplateDto[]> {
        let url_ = this.baseUrl + "/ProblemReport/messagetemplate/templates";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProblemReport_RetrieveMessageTemplates(_response);
        });
    }

    protected processProblemReport_RetrieveMessageTemplates(response: AxiosResponse): Promise<MessageTemplateDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MessageTemplateDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<MessageTemplateDto[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MessageTemplateDto[]>(<any>null);
    }

    /**
     * Send a problem report email
     * @param problemReportId Problem report system identifier
     * @param messageTemplate Email message template.
     * @param api_version (optional) 
     */
    problemReport_SendProblemReportEmail(problemReportId: number, messageTemplate: MessageTemplateDto, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/ProblemReport/{problemReportId}/email";
        if (problemReportId === undefined || problemReportId === null)
            throw new Error("The parameter 'problemReportId' must be defined.");
        url_ = url_.replace("{problemReportId}", encodeURIComponent("" + problemReportId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(messageTemplate);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProblemReport_SendProblemReportEmail(_response);
        });
    }

    protected processProblemReport_SendProblemReportEmail(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    /**
     * Preview Problem Report email.
     * @param problemReportId System unique identifier for a problem report
     * @param messageTemplate Tokenized message template
     * @param api_version (optional) 
     * @return MessageTemplateDTO
     */
    problemReport_PreviewProblemReportEmail(problemReportId: number, messageTemplate: MessageTemplateDto, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<MessageTemplateDto> {
        let url_ = this.baseUrl + "/ProblemReport/{problemReportId}/email/preview";
        if (problemReportId === undefined || problemReportId === null)
            throw new Error("The parameter 'problemReportId' must be defined.");
        url_ = url_.replace("{problemReportId}", encodeURIComponent("" + problemReportId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(messageTemplate);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProblemReport_PreviewProblemReportEmail(_response);
        });
    }

    protected processProblemReport_PreviewProblemReportEmail(response: AxiosResponse): Promise<MessageTemplateDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MessageTemplateDto.fromJS(resultData200);
            return Promise.resolve<MessageTemplateDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MessageTemplateDto>(<any>null);
    }

    /**
     * Get Problem Report email list
     * @param api_version (optional) 
     * @return string[]
     */
    problemReport_RetrieveEmailAddresses(api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<string[]> {
        let url_ = this.baseUrl + "/ProblemReport/emailaddresses";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProblemReport_RetrieveEmailAddresses(_response);
        });
    }

    protected processProblemReport_RetrieveEmailAddresses(response: AxiosResponse): Promise<string[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<string[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string[]>(<any>null);
    }
}

export interface IPacketService {
    /**
     * Reprocess data packets
     * @param packets Data packets retrieved from the system.
     * @param api_version (optional) 
     * @return StatusCode
     */
    packet_ReprocessPackets(packets: PacketRecordDto[], api_version?: string | null | undefined): Promise<void>;
}

export class PacketService implements IPacketService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    /**
     * Reprocess data packets
     * @param packets Data packets retrieved from the system.
     * @param api_version (optional) 
     * @return StatusCode
     */
    packet_ReprocessPackets(packets: PacketRecordDto[], api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/packets/reprocess";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(packets);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPacket_ReprocessPackets(_response);
        });
    }

    protected processPacket_ReprocessPackets(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export interface IRcmService {
    /**
     * Abort active call to RTU.
     * @param deviceId Unique identifier for an RTU
     * @param api_version (optional) 
     * @return HTTP status code 204 if successful
     */
    rcm_AbortRtuCall(deviceId: string | null, api_version?: string | null | undefined): Promise<void>;
    /**
     * Call RTU.
     * @param deviceId Unique identifier for an RTU
     * @param api_version (optional) 
     * @return HTTP status code 204 if successful
     */
    rcm_CallRtu(deviceId: string | null, api_version?: string | null | undefined): Promise<void>;
    /**
     * Commission a RTU.
     * @param deviceId Unique identifier for an RTU
     * @param api_version (optional) 
     * @return HTTP status code 204 if successful
     */
    rcm_CommissionRtu(deviceId: string | null, api_version?: string | null | undefined): Promise<void>;
    /**
     * Start Fast Poll mode for RTU.
     * @param deviceId Unique identifier for an RTU
     * @param api_version (optional) 
     * @return HTTP status code 204 if successful
     */
    rcm_FastPollRtu(deviceId: string | null, api_version?: string | null | undefined): Promise<void>;
    /**
     * Minimum Poll RTU.
     * @param deviceId Unique identifier for an RTU
     * @param api_version (optional) 
     * @return HTTP status code 204 if successful
     */
    rcm_MinPollRtu(deviceId: string | null, api_version?: string | null | undefined): Promise<void>;
    /**
     * Poll RTU.
     * @param deviceId Unique identifier for an RTU
     * @param api_version (optional) 
     * @return HTTP status code 204 if successful
     */
    rcm_PollRtu(deviceId: string | null, api_version?: string | null | undefined): Promise<void>;
    /**
     * Reboot RTU.
     * @param deviceId Unique identifier for an RTU
     * @param api_version (optional) 
     * @return HTTP status code 204 if successful
     */
    rcm_RebootRtu(deviceId: string | null, api_version?: string | null | undefined): Promise<void>;
    /**
     * Test call in.
     * @param deviceId Unique identifier for an RTU
     * @param api_version (optional) 
     * @return HTTP status code 204 if successful
     */
    rcm_RequestRtuTestCallIn(deviceId: string | null, api_version?: string | null | undefined): Promise<void>;
    /**
     * Reset RTU to factory defaults.
     * @param deviceId Unique identifier for an RTU
     * @param api_version (optional) 
     * @return HTTP status code 204 if successful
     */
    rcm_ResetRtuToFactoryDefault(deviceId: string | null, api_version?: string | null | undefined): Promise<void>;
    /**
     * Retrieve RTU events.
     * @param deviceId Unique identifier for an RTU
     * @param api_version (optional) 
     * @return HTTP status code 204 if successful
     */
    rcm_RetrieveRtuEventHistory(deviceId: string | null, api_version?: string | null | undefined): Promise<void>;
    /**
     * Update GPRS parameters.
     * @param deviceId Unique identifier for an RTU
     * @param api_version (optional) 
     * @return HTTP status code 204 if successful
     */
    rcm_UpdateRtuGprsProfile(deviceId: string | null, api_version?: string | null | undefined): Promise<void>;
    /**
     * GPRS parameters over SMS.
     * @param deviceId Unique identifier for an RTU
     * @param api_version (optional) 
     * @return HTTP status code 204 if successful
     */
    rcm_UpdateGprsParametersViaSmsSvc(deviceId: string | null, api_version?: string | null | undefined): Promise<void>;
    /**
     * Retrieve RTU configuration.
     * @param deviceId Unique identifier for an RTU
     * @param api_version (optional) 
     * @return HTTP status code 204 if successful
     */
    rcm_RetrieveRtuConfiguration(deviceId: string | null, api_version?: string | null | undefined): Promise<void>;
    /**
     * Synchronize scaling chart
     * @param api_version (optional) 
     * @return true = executed
     */
    rcm_SyncScalingChart(dataChannelId: string, api_version?: string | null | undefined): Promise<boolean>;
}

export class RcmService implements IRcmService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    /**
     * Abort active call to RTU.
     * @param deviceId Unique identifier for an RTU
     * @param api_version (optional) 
     * @return HTTP status code 204 if successful
     */
    rcm_AbortRtuCall(deviceId: string | null, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/rcm/rtu/{deviceId}/connection";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRcm_AbortRtuCall(_response);
        });
    }

    protected processRcm_AbortRtuCall(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Call RTU.
     * @param deviceId Unique identifier for an RTU
     * @param api_version (optional) 
     * @return HTTP status code 204 if successful
     */
    rcm_CallRtu(deviceId: string | null, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/rcm/rtu/{deviceId}/connection";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRcm_CallRtu(_response);
        });
    }

    protected processRcm_CallRtu(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Commission a RTU.
     * @param deviceId Unique identifier for an RTU
     * @param api_version (optional) 
     * @return HTTP status code 204 if successful
     */
    rcm_CommissionRtu(deviceId: string | null, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/rcm/rtu/{deviceId}/commission";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRcm_CommissionRtu(_response);
        });
    }

    protected processRcm_CommissionRtu(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Start Fast Poll mode for RTU.
     * @param deviceId Unique identifier for an RTU
     * @param api_version (optional) 
     * @return HTTP status code 204 if successful
     */
    rcm_FastPollRtu(deviceId: string | null, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/rcm/rtu/{deviceId}/fastpoll";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRcm_FastPollRtu(_response);
        });
    }

    protected processRcm_FastPollRtu(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Minimum Poll RTU.
     * @param deviceId Unique identifier for an RTU
     * @param api_version (optional) 
     * @return HTTP status code 204 if successful
     */
    rcm_MinPollRtu(deviceId: string | null, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/rcm/rtu/{deviceId}/telemetry/readings";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRcm_MinPollRtu(_response);
        });
    }

    protected processRcm_MinPollRtu(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Poll RTU.
     * @param deviceId Unique identifier for an RTU
     * @param api_version (optional) 
     * @return HTTP status code 204 if successful
     */
    rcm_PollRtu(deviceId: string | null, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/rcm/rtu/{deviceId}/telemetry/logs";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRcm_PollRtu(_response);
        });
    }

    protected processRcm_PollRtu(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Reboot RTU.
     * @param deviceId Unique identifier for an RTU
     * @param api_version (optional) 
     * @return HTTP status code 204 if successful
     */
    rcm_RebootRtu(deviceId: string | null, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/rcm/rtu/{deviceId}/reboot";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRcm_RebootRtu(_response);
        });
    }

    protected processRcm_RebootRtu(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Test call in.
     * @param deviceId Unique identifier for an RTU
     * @param api_version (optional) 
     * @return HTTP status code 204 if successful
     */
    rcm_RequestRtuTestCallIn(deviceId: string | null, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/rcm/rtu/{deviceId}/testcallin";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRcm_RequestRtuTestCallIn(_response);
        });
    }

    protected processRcm_RequestRtuTestCallIn(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Reset RTU to factory defaults.
     * @param deviceId Unique identifier for an RTU
     * @param api_version (optional) 
     * @return HTTP status code 204 if successful
     */
    rcm_ResetRtuToFactoryDefault(deviceId: string | null, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/rcm/rtu/{deviceId}/factorydefaults";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRcm_ResetRtuToFactoryDefault(_response);
        });
    }

    protected processRcm_ResetRtuToFactoryDefault(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Retrieve RTU events.
     * @param deviceId Unique identifier for an RTU
     * @param api_version (optional) 
     * @return HTTP status code 204 if successful
     */
    rcm_RetrieveRtuEventHistory(deviceId: string | null, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/rcm/rtu/{deviceId}/telemetry/events";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRcm_RetrieveRtuEventHistory(_response);
        });
    }

    protected processRcm_RetrieveRtuEventHistory(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Update GPRS parameters.
     * @param deviceId Unique identifier for an RTU
     * @param api_version (optional) 
     * @return HTTP status code 204 if successful
     */
    rcm_UpdateRtuGprsProfile(deviceId: string | null, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/rcm/rtu/{deviceId}/gprsparameters";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRcm_UpdateRtuGprsProfile(_response);
        });
    }

    protected processRcm_UpdateRtuGprsProfile(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * GPRS parameters over SMS.
     * @param deviceId Unique identifier for an RTU
     * @param api_version (optional) 
     * @return HTTP status code 204 if successful
     */
    rcm_UpdateGprsParametersViaSmsSvc(deviceId: string | null, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/rcm/rtu/{deviceId}/gprsparameters/sms";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRcm_UpdateGprsParametersViaSmsSvc(_response);
        });
    }

    protected processRcm_UpdateGprsParametersViaSmsSvc(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Retrieve RTU configuration.
     * @param deviceId Unique identifier for an RTU
     * @param api_version (optional) 
     * @return HTTP status code 204 if successful
     */
    rcm_RetrieveRtuConfiguration(deviceId: string | null, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/rcm/rtu/{deviceId}/telemetry/configuration";
        if (deviceId === undefined || deviceId === null)
            throw new Error("The parameter 'deviceId' must be defined.");
        url_ = url_.replace("{deviceId}", encodeURIComponent("" + deviceId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRcm_RetrieveRtuConfiguration(_response);
        });
    }

    protected processRcm_RetrieveRtuConfiguration(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 204) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Synchronize scaling chart
     * @param api_version (optional) 
     * @return true = executed
     */
    rcm_SyncScalingChart(dataChannelId: string, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/rcm/datachannel/{dataChannelId}/syncscalingchart";
        if (dataChannelId === undefined || dataChannelId === null)
            throw new Error("The parameter 'dataChannelId' must be defined.");
        url_ = url_.replace("{dataChannelId}", encodeURIComponent("" + dataChannelId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "PUT",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRcm_SyncScalingChart(_response);
        });
    }

    protected processRcm_SyncScalingChart(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }
}

export interface IRTUService {
    retrieveRtuNoteEditComponentsById_RetrieveRtuNoteEditComponentsById(request: EvolveRetrieveRtuNoteEditComponentsByIdRequest, api_version?: string | null | undefined): Promise<FileResponse>;
    saveRtuNote_SaveRtuNote(request: EvolveSaveRtuNoteRequest, api_version?: string | null | undefined): Promise<FileResponse>;
    copyRtuRemoteConfigToLocalConfig_CopyRtuRemoteConfigToLocalConfig(request: EvolveCopyRtuRemoteConfigToLocalConfigRequest, api_version?: string | null | undefined): Promise<FileResponse>;
    deleteRtuPollScheduleGroupByIdList_DeleteRtuPollScheduleGroupByIdList(request: EvolveDeleteRtuPollScheduleGroupByIdListRequest, api_version?: string | null | undefined): Promise<EvolveDeleteRtuPollScheduleGroupByIdListResponse>;
    deleteRTUsByIdList_DeleteRTUsByIdList(request: EvolveDeleteRtusByIdListRequest, api_version?: string | null | undefined): Promise<EvolveDeleteRTUsByIdListResponse>;
    executeRtuChannelSwap_ExecuteRTUChannelSwap(request: EvolveExecuteRtuChannelSwapRequest, api_version?: string | null | undefined): Promise<EvolveExecuteRtuChannelSwapResponse>;
    executeSendRtuChannelRequestList_ExecuteSendRtuChannelRequestList(request: EvolveExecuteSendRtuChannelRequestListRequest, api_version?: string | null | undefined): Promise<FileResponse>;
    retrievePacketRecordsByOptions_RetrievePacketRecordsByOptions(request: EvolveRetrievePacketRecordsByOptionsRequest, api_version?: string | null | undefined): Promise<FileResponse>;
    retrieveRtuChannelDataChannelInfoByRtuChannel_RetrieveRtuChannelDataChannelInfoByRtuChannel(request: EvolveRetrieveRtuChannelDataChannelInfoByRtuChannelRequest, api_version?: string | null | undefined): Promise<FileResponse>;
    retrieveRtuChannelUsageInfoListByRtu_RetrieveRtuChannelUsageInfoListByRtu(request: EvolveRetrieveRtuChannelUsageInfoListByRtuRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveRtuChannelUsageInfoListByRtuResponse>;
    retrieveRtuDeviceInfoListByPrefix_RetrieveRtuDeviceInfoListByPrefix(request: EvolveRetrieveRtuDeviceInfoListByPrefixRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveRtuDeviceInfoListByPrefixResponse>;
    retrieveRtuEditComponentsById_RetrieveRtuEditComponentsById(request: EvolveRetrieveRtuEditComponentsByIdRequest, api_version?: string | null | undefined): Promise<FileResponse>;
    retrieveRtuInfoRecordsByOptions_RetrieveRtuInfoRecordsByOptions(request: EvolveRetrieveRtuInfoRecordsByOptionsRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveRtuInfoRecordsByOptionsResponse>;
    retrieveRtuPollScheduleGroupEditComponentsById_RetrieveRtuPollScheduleGroupEditComponentsById(request: EvolveRetrieveRtuPollScheduleGroupEditComponentsByIdRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveRtuPollScheduleGroupEditComponentsByIdResponse>;
    retrieveRtuPollScheduleGroupRecordsByOptions_RetrieveRtuPollScheduleGroupRecordsByOptions(request: EvolveRetrieveRtuPollScheduleGroupRecordsByOptionsRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveRtuPollScheduleGroupRecordsByOptionsResponse>;
    retrieveRtuTypeInfoByDeviceId_RetrieveRtuTypeInfoByDeviceId(request: EvolveRetrieveRtuTypeInfoByDeviceIdRequest, api_version?: string | null | undefined): Promise<FileResponse>;
    saveRtu_SaveRtu(request: EvolveSaveRtuRequest, api_version?: string | null | undefined): Promise<FileResponse>;
    saveRtuPollScheduleGroup_SaveRtuPollScheduleGroup(request: EvolveSaveRtuPollScheduleGroupRequest, api_version?: string | null | undefined): Promise<EvolveSaveRtuPollScheduleGroupResponse>;
    send400SeriesOutboundMessages_Send400SeriesOutboundMessages(request: EvolveSend400SeriesOutboundMessagesRequest, api_version?: string | null | undefined): Promise<FileResponse>;
}

export class RTUService implements IRTUService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    retrieveRtuNoteEditComponentsById_RetrieveRtuNoteEditComponentsById(request: EvolveRetrieveRtuNoteEditComponentsByIdRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/RetrieveRtuNoteEditComponentsById";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveRtuNoteEditComponentsById_RetrieveRtuNoteEditComponentsById(_response);
        });
    }

    protected processRetrieveRtuNoteEditComponentsById_RetrieveRtuNoteEditComponentsById(response: AxiosResponse): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    saveRtuNote_SaveRtuNote(request: EvolveSaveRtuNoteRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/SaveRtuNote";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSaveRtuNote_SaveRtuNote(_response);
        });
    }

    protected processSaveRtuNote_SaveRtuNote(response: AxiosResponse): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    copyRtuRemoteConfigToLocalConfig_CopyRtuRemoteConfigToLocalConfig(request: EvolveCopyRtuRemoteConfigToLocalConfigRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/CopyRtuRemoteConfigToLocalConfig";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processCopyRtuRemoteConfigToLocalConfig_CopyRtuRemoteConfigToLocalConfig(_response);
        });
    }

    protected processCopyRtuRemoteConfigToLocalConfig_CopyRtuRemoteConfigToLocalConfig(response: AxiosResponse): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    deleteRtuPollScheduleGroupByIdList_DeleteRtuPollScheduleGroupByIdList(request: EvolveDeleteRtuPollScheduleGroupByIdListRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveDeleteRtuPollScheduleGroupByIdListResponse> {
        let url_ = this.baseUrl + "/DeleteRtuPollScheduleGroupByIdList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteRtuPollScheduleGroupByIdList_DeleteRtuPollScheduleGroupByIdList(_response);
        });
    }

    protected processDeleteRtuPollScheduleGroupByIdList_DeleteRtuPollScheduleGroupByIdList(response: AxiosResponse): Promise<EvolveDeleteRtuPollScheduleGroupByIdListResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveDeleteRtuPollScheduleGroupByIdListResponse.fromJS(resultData200);
            return Promise.resolve<EvolveDeleteRtuPollScheduleGroupByIdListResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 403) {
            const _responseText = response.data;
            let result403: any = null;
            let resultData403  = _responseText;
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("A server side error occurred.", status, _responseText, _headers, result403);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveDeleteRtuPollScheduleGroupByIdListResponse>(<any>null);
    }

    deleteRTUsByIdList_DeleteRTUsByIdList(request: EvolveDeleteRtusByIdListRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveDeleteRTUsByIdListResponse> {
        let url_ = this.baseUrl + "/DeleteRTUsByIdList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteRTUsByIdList_DeleteRTUsByIdList(_response);
        });
    }

    protected processDeleteRTUsByIdList_DeleteRTUsByIdList(response: AxiosResponse): Promise<EvolveDeleteRTUsByIdListResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveDeleteRTUsByIdListResponse.fromJS(resultData200);
            return Promise.resolve<EvolveDeleteRTUsByIdListResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveDeleteRTUsByIdListResponse>(<any>null);
    }

    executeRtuChannelSwap_ExecuteRTUChannelSwap(request: EvolveExecuteRtuChannelSwapRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveExecuteRtuChannelSwapResponse> {
        let url_ = this.baseUrl + "/ExecuteRtuChannelSwap";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processExecuteRtuChannelSwap_ExecuteRTUChannelSwap(_response);
        });
    }

    protected processExecuteRtuChannelSwap_ExecuteRTUChannelSwap(response: AxiosResponse): Promise<EvolveExecuteRtuChannelSwapResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveExecuteRtuChannelSwapResponse.fromJS(resultData200);
            return Promise.resolve<EvolveExecuteRtuChannelSwapResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveExecuteRtuChannelSwapResponse>(<any>null);
    }

    executeSendRtuChannelRequestList_ExecuteSendRtuChannelRequestList(request: EvolveExecuteSendRtuChannelRequestListRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/ExecuteSendRtuChannelRequestList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processExecuteSendRtuChannelRequestList_ExecuteSendRtuChannelRequestList(_response);
        });
    }

    protected processExecuteSendRtuChannelRequestList_ExecuteSendRtuChannelRequestList(response: AxiosResponse): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    retrievePacketRecordsByOptions_RetrievePacketRecordsByOptions(request: EvolveRetrievePacketRecordsByOptionsRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/RetrievePacketRecordsByOptions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrievePacketRecordsByOptions_RetrievePacketRecordsByOptions(_response);
        });
    }

    protected processRetrievePacketRecordsByOptions_RetrievePacketRecordsByOptions(response: AxiosResponse): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    retrieveRtuChannelDataChannelInfoByRtuChannel_RetrieveRtuChannelDataChannelInfoByRtuChannel(request: EvolveRetrieveRtuChannelDataChannelInfoByRtuChannelRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/RetrieveRtuChannelDataChannelInfoByRtuChannel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveRtuChannelDataChannelInfoByRtuChannel_RetrieveRtuChannelDataChannelInfoByRtuChannel(_response);
        });
    }

    protected processRetrieveRtuChannelDataChannelInfoByRtuChannel_RetrieveRtuChannelDataChannelInfoByRtuChannel(response: AxiosResponse): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    retrieveRtuChannelUsageInfoListByRtu_RetrieveRtuChannelUsageInfoListByRtu(request: EvolveRetrieveRtuChannelUsageInfoListByRtuRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveRtuChannelUsageInfoListByRtuResponse> {
        let url_ = this.baseUrl + "/RetrieveRtuChannelUsageInfoListByRtu";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveRtuChannelUsageInfoListByRtu_RetrieveRtuChannelUsageInfoListByRtu(_response);
        });
    }

    protected processRetrieveRtuChannelUsageInfoListByRtu_RetrieveRtuChannelUsageInfoListByRtu(response: AxiosResponse): Promise<EvolveRetrieveRtuChannelUsageInfoListByRtuResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveRtuChannelUsageInfoListByRtuResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveRtuChannelUsageInfoListByRtuResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveRtuChannelUsageInfoListByRtuResponse>(<any>null);
    }

    retrieveRtuDeviceInfoListByPrefix_RetrieveRtuDeviceInfoListByPrefix(request: EvolveRetrieveRtuDeviceInfoListByPrefixRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveRtuDeviceInfoListByPrefixResponse> {
        let url_ = this.baseUrl + "/RetrieveRtuDeviceInfoListByPrefix";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveRtuDeviceInfoListByPrefix_RetrieveRtuDeviceInfoListByPrefix(_response);
        });
    }

    protected processRetrieveRtuDeviceInfoListByPrefix_RetrieveRtuDeviceInfoListByPrefix(response: AxiosResponse): Promise<EvolveRetrieveRtuDeviceInfoListByPrefixResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveRtuDeviceInfoListByPrefixResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveRtuDeviceInfoListByPrefixResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveRtuDeviceInfoListByPrefixResponse>(<any>null);
    }

    retrieveRtuEditComponentsById_RetrieveRtuEditComponentsById(request: EvolveRetrieveRtuEditComponentsByIdRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/RetrieveRtuEditComponentsById";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveRtuEditComponentsById_RetrieveRtuEditComponentsById(_response);
        });
    }

    protected processRetrieveRtuEditComponentsById_RetrieveRtuEditComponentsById(response: AxiosResponse): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    retrieveRtuInfoRecordsByOptions_RetrieveRtuInfoRecordsByOptions(request: EvolveRetrieveRtuInfoRecordsByOptionsRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveRtuInfoRecordsByOptionsResponse> {
        let url_ = this.baseUrl + "/RetrieveRtuInfoRecordsByOptions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveRtuInfoRecordsByOptions_RetrieveRtuInfoRecordsByOptions(_response);
        });
    }

    protected processRetrieveRtuInfoRecordsByOptions_RetrieveRtuInfoRecordsByOptions(response: AxiosResponse): Promise<EvolveRetrieveRtuInfoRecordsByOptionsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveRtuInfoRecordsByOptionsResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveRtuInfoRecordsByOptionsResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveRtuInfoRecordsByOptionsResponse>(<any>null);
    }

    retrieveRtuPollScheduleGroupEditComponentsById_RetrieveRtuPollScheduleGroupEditComponentsById(request: EvolveRetrieveRtuPollScheduleGroupEditComponentsByIdRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveRtuPollScheduleGroupEditComponentsByIdResponse> {
        let url_ = this.baseUrl + "/RetrieveRtuPollScheduleGroupEditComponentsById";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveRtuPollScheduleGroupEditComponentsById_RetrieveRtuPollScheduleGroupEditComponentsById(_response);
        });
    }

    protected processRetrieveRtuPollScheduleGroupEditComponentsById_RetrieveRtuPollScheduleGroupEditComponentsById(response: AxiosResponse): Promise<EvolveRetrieveRtuPollScheduleGroupEditComponentsByIdResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveRtuPollScheduleGroupEditComponentsByIdResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveRtuPollScheduleGroupEditComponentsByIdResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 403) {
            const _responseText = response.data;
            let result403: any = null;
            let resultData403  = _responseText;
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("A server side error occurred.", status, _responseText, _headers, result403);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveRtuPollScheduleGroupEditComponentsByIdResponse>(<any>null);
    }

    retrieveRtuPollScheduleGroupRecordsByOptions_RetrieveRtuPollScheduleGroupRecordsByOptions(request: EvolveRetrieveRtuPollScheduleGroupRecordsByOptionsRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveRtuPollScheduleGroupRecordsByOptionsResponse> {
        let url_ = this.baseUrl + "/RetrieveRtuPollScheduleGroupRecordsByOptions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveRtuPollScheduleGroupRecordsByOptions_RetrieveRtuPollScheduleGroupRecordsByOptions(_response);
        });
    }

    protected processRetrieveRtuPollScheduleGroupRecordsByOptions_RetrieveRtuPollScheduleGroupRecordsByOptions(response: AxiosResponse): Promise<EvolveRetrieveRtuPollScheduleGroupRecordsByOptionsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveRtuPollScheduleGroupRecordsByOptionsResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveRtuPollScheduleGroupRecordsByOptionsResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 403) {
            const _responseText = response.data;
            let result403: any = null;
            let resultData403  = _responseText;
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("A server side error occurred.", status, _responseText, _headers, result403);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveRtuPollScheduleGroupRecordsByOptionsResponse>(<any>null);
    }

    retrieveRtuTypeInfoByDeviceId_RetrieveRtuTypeInfoByDeviceId(request: EvolveRetrieveRtuTypeInfoByDeviceIdRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/RetrieveRtuTypeInfoByDeviceId";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveRtuTypeInfoByDeviceId_RetrieveRtuTypeInfoByDeviceId(_response);
        });
    }

    protected processRetrieveRtuTypeInfoByDeviceId_RetrieveRtuTypeInfoByDeviceId(response: AxiosResponse): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    saveRtu_SaveRtu(request: EvolveSaveRtuRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/SaveRtu";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSaveRtu_SaveRtu(_response);
        });
    }

    protected processSaveRtu_SaveRtu(response: AxiosResponse): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    saveRtuPollScheduleGroup_SaveRtuPollScheduleGroup(request: EvolveSaveRtuPollScheduleGroupRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveSaveRtuPollScheduleGroupResponse> {
        let url_ = this.baseUrl + "/SaveRtuPollScheduleGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSaveRtuPollScheduleGroup_SaveRtuPollScheduleGroup(_response);
        });
    }

    protected processSaveRtuPollScheduleGroup_SaveRtuPollScheduleGroup(response: AxiosResponse): Promise<EvolveSaveRtuPollScheduleGroupResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveSaveRtuPollScheduleGroupResponse.fromJS(resultData200);
            return Promise.resolve<EvolveSaveRtuPollScheduleGroupResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 403) {
            const _responseText = response.data;
            let result403: any = null;
            let resultData403  = _responseText;
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("A server side error occurred.", status, _responseText, _headers, result403);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveSaveRtuPollScheduleGroupResponse>(<any>null);
    }

    send400SeriesOutboundMessages_Send400SeriesOutboundMessages(request: EvolveSend400SeriesOutboundMessagesRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/Send400SeriesOutboundMessages";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSend400SeriesOutboundMessages_Send400SeriesOutboundMessages(_response);
        });
    }

    protected processSend400SeriesOutboundMessages_Send400SeriesOutboundMessages(response: AxiosResponse): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(<any>null);
    }
}

export interface IEventService {
    retrieveEventDetailById_RetrieveEventDetailById(request: EvolveRetrieveEventDetailByIdRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveEventDetailByIdResponse>;
    retrieveEventInfoRecordsByOptions_RetrieveEventInfoRecordsByOptions(options: EventInfoRetrievalOptionsDto, api_version?: string | null | undefined): Promise<EvolveRetrieveEventInfoRecordsByOptionsResponse>;
    saveEventNote_SaveEventNote(request: EvolveSaveEventNoteRequest, api_version?: string | null | undefined): Promise<EvolveSaveEventNoteResponse>;
    updateEventToAcknowledgeEvent_UpdateEventToAcknowledgeEvent(request: EvolveUpdateEventToAcknowledgeEventRequest, api_version?: string | null | undefined): Promise<EvolveUpdateEventToAcknowledgeEventResponse>;
    event_GetActiveEvents(request: ActiveEventGetReq, api_version?: string | null | undefined): Promise<ActiveEventGetResp[]>;
    event_GetDomainActiveEvents(domainId: string, eventTypeIds?: EventRuleCategory[] | null | undefined, tagIds?: number[] | null | undefined, assetSearchString?: string | null | undefined, api_version?: string | null | undefined): Promise<DomainEventsDto[]>;
    event_GetInactiveEvents(request: InactiveEventGetReq, api_version?: string | null | undefined): Promise<InactiveEventGetResp[]>;
    event_UpdateUserEventSettings(request: UserEventSettingUpdateReq, api_version?: string | null | undefined): Promise<number>;
    event_GetUserEventSettings(userId: string, domainId: string, api_version?: string | null | undefined): Promise<UserEventSettingGetResp>;
    retrieveEventRuleGroupRuleInfoListByTypeAndInventoryStatus_RetrieveEventRuleGroupRuleInfoListByTypeAndInventoryStatus(request: EvolveRetrieveEventRuleGroupRuleInfoListByTypeAndInventoryStatusRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveEventRuleGroupRuleInfoListByTypeAndInventoryStatusResponse>;
    updateDataChannelEventRuleToDeactivateEvent_UpdateDataChannelEventRuleToDeactivateEvent(request: EvolveUpdateDataChannelEventRuleToDeactivateEventRequest, api_version?: string | null | undefined): Promise<FileResponse>;
}

export class EventService implements IEventService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    retrieveEventDetailById_RetrieveEventDetailById(request: EvolveRetrieveEventDetailByIdRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveEventDetailByIdResponse> {
        let url_ = this.baseUrl + "/RetrieveEventDetailById";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveEventDetailById_RetrieveEventDetailById(_response);
        });
    }

    protected processRetrieveEventDetailById_RetrieveEventDetailById(response: AxiosResponse): Promise<EvolveRetrieveEventDetailByIdResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveEventDetailByIdResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveEventDetailByIdResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveEventDetailByIdResponse>(<any>null);
    }

    retrieveEventInfoRecordsByOptions_RetrieveEventInfoRecordsByOptions(options: EventInfoRetrievalOptionsDto, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveEventInfoRecordsByOptionsResponse> {
        let url_ = this.baseUrl + "/RetrieveEventInfoRecordsByOptions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(options);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveEventInfoRecordsByOptions_RetrieveEventInfoRecordsByOptions(_response);
        });
    }

    protected processRetrieveEventInfoRecordsByOptions_RetrieveEventInfoRecordsByOptions(response: AxiosResponse): Promise<EvolveRetrieveEventInfoRecordsByOptionsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveEventInfoRecordsByOptionsResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveEventInfoRecordsByOptionsResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 403) {
            const _responseText = response.data;
            let result403: any = null;
            let resultData403  = _responseText;
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("A server side error occurred.", status, _responseText, _headers, result403);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveEventInfoRecordsByOptionsResponse>(<any>null);
    }

    saveEventNote_SaveEventNote(request: EvolveSaveEventNoteRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveSaveEventNoteResponse> {
        let url_ = this.baseUrl + "/SaveEventNote";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSaveEventNote_SaveEventNote(_response);
        });
    }

    protected processSaveEventNote_SaveEventNote(response: AxiosResponse): Promise<EvolveSaveEventNoteResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveSaveEventNoteResponse.fromJS(resultData200);
            return Promise.resolve<EvolveSaveEventNoteResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveSaveEventNoteResponse>(<any>null);
    }

    updateEventToAcknowledgeEvent_UpdateEventToAcknowledgeEvent(request: EvolveUpdateEventToAcknowledgeEventRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveUpdateEventToAcknowledgeEventResponse> {
        let url_ = this.baseUrl + "/UpdateEventToAcknowledgeEvent";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateEventToAcknowledgeEvent_UpdateEventToAcknowledgeEvent(_response);
        });
    }

    protected processUpdateEventToAcknowledgeEvent_UpdateEventToAcknowledgeEvent(response: AxiosResponse): Promise<EvolveUpdateEventToAcknowledgeEventResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveUpdateEventToAcknowledgeEventResponse.fromJS(resultData200);
            return Promise.resolve<EvolveUpdateEventToAcknowledgeEventResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveUpdateEventToAcknowledgeEventResponse>(<any>null);
    }

    event_GetActiveEvents(request: ActiveEventGetReq, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<ActiveEventGetResp[]> {
        let url_ = this.baseUrl + "/Event/Active";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processEvent_GetActiveEvents(_response);
        });
    }

    protected processEvent_GetActiveEvents(response: AxiosResponse): Promise<ActiveEventGetResp[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ActiveEventGetResp.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<ActiveEventGetResp[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 403) {
            const _responseText = response.data;
            let result403: any = null;
            let resultData403  = _responseText;
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("A server side error occurred.", status, _responseText, _headers, result403);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ActiveEventGetResp[]>(<any>null);
    }

    event_GetDomainActiveEvents(domainId: string, eventTypeIds?: EventRuleCategory[] | null | undefined, tagIds?: number[] | null | undefined, assetSearchString?: string | null | undefined, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<DomainEventsDto[]> {
        let url_ = this.baseUrl + "/Event/Active/domains/{domainId}?";
        if (domainId === undefined || domainId === null)
            throw new Error("The parameter 'domainId' must be defined.");
        url_ = url_.replace("{domainId}", encodeURIComponent("" + domainId));
        if (eventTypeIds !== undefined && eventTypeIds !== null)
            eventTypeIds && eventTypeIds.forEach(item => { url_ += "eventTypeIds=" + encodeURIComponent("" + item) + "&"; });
        if (tagIds !== undefined && tagIds !== null)
            tagIds && tagIds.forEach(item => { url_ += "tagIds=" + encodeURIComponent("" + item) + "&"; });
        if (assetSearchString !== undefined && assetSearchString !== null)
            url_ += "assetSearchString=" + encodeURIComponent("" + assetSearchString) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processEvent_GetDomainActiveEvents(_response);
        });
    }

    protected processEvent_GetDomainActiveEvents(response: AxiosResponse): Promise<DomainEventsDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DomainEventsDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<DomainEventsDto[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DomainEventsDto[]>(<any>null);
    }

    event_GetInactiveEvents(request: InactiveEventGetReq, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<InactiveEventGetResp[]> {
        let url_ = this.baseUrl + "/Event/Inactive";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processEvent_GetInactiveEvents(_response);
        });
    }

    protected processEvent_GetInactiveEvents(response: AxiosResponse): Promise<InactiveEventGetResp[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(InactiveEventGetResp.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<InactiveEventGetResp[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 403) {
            const _responseText = response.data;
            let result403: any = null;
            let resultData403  = _responseText;
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("A server side error occurred.", status, _responseText, _headers, result403);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<InactiveEventGetResp[]>(<any>null);
    }

    event_UpdateUserEventSettings(request: UserEventSettingUpdateReq, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<number> {
        let url_ = this.baseUrl + "/Event/FilterSettings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processEvent_UpdateUserEventSettings(_response);
        });
    }

    protected processEvent_UpdateUserEventSettings(response: AxiosResponse): Promise<number> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<number>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 403) {
            const _responseText = response.data;
            let result403: any = null;
            let resultData403  = _responseText;
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("A server side error occurred.", status, _responseText, _headers, result403);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<number>(<any>null);
    }

    event_GetUserEventSettings(userId: string, domainId: string, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<UserEventSettingGetResp> {
        let url_ = this.baseUrl + "/Event/FilterSettings/{userId}/{domainId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        if (domainId === undefined || domainId === null)
            throw new Error("The parameter 'domainId' must be defined.");
        url_ = url_.replace("{domainId}", encodeURIComponent("" + domainId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processEvent_GetUserEventSettings(_response);
        });
    }

    protected processEvent_GetUserEventSettings(response: AxiosResponse): Promise<UserEventSettingGetResp> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UserEventSettingGetResp.fromJS(resultData200);
            return Promise.resolve<UserEventSettingGetResp>(result200);

        } else if (status === 403) {
            const _responseText = response.data;
            let result403: any = null;
            let resultData403  = _responseText;
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("A server side error occurred.", status, _responseText, _headers, result403);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserEventSettingGetResp>(<any>null);
    }

    retrieveEventRuleGroupRuleInfoListByTypeAndInventoryStatus_RetrieveEventRuleGroupRuleInfoListByTypeAndInventoryStatus(request: EvolveRetrieveEventRuleGroupRuleInfoListByTypeAndInventoryStatusRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveEventRuleGroupRuleInfoListByTypeAndInventoryStatusResponse> {
        let url_ = this.baseUrl + "/RetrieveEventRuleGroupRuleInfoListByTypeAndInventoryStatus";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveEventRuleGroupRuleInfoListByTypeAndInventoryStatus_RetrieveEventRuleGroupRuleInfoListByTypeAndInventoryStatus(_response);
        });
    }

    protected processRetrieveEventRuleGroupRuleInfoListByTypeAndInventoryStatus_RetrieveEventRuleGroupRuleInfoListByTypeAndInventoryStatus(response: AxiosResponse): Promise<EvolveRetrieveEventRuleGroupRuleInfoListByTypeAndInventoryStatusResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveEventRuleGroupRuleInfoListByTypeAndInventoryStatusResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveEventRuleGroupRuleInfoListByTypeAndInventoryStatusResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveEventRuleGroupRuleInfoListByTypeAndInventoryStatusResponse>(<any>null);
    }

    updateDataChannelEventRuleToDeactivateEvent_UpdateDataChannelEventRuleToDeactivateEvent(request: EvolveUpdateDataChannelEventRuleToDeactivateEventRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/UpdateDataChannelEventRuleToDeactivateEvent";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateDataChannelEventRuleToDeactivateEvent_UpdateDataChannelEventRuleToDeactivateEvent(_response);
        });
    }

    protected processUpdateDataChannelEventRuleToDeactivateEvent_UpdateDataChannelEventRuleToDeactivateEvent(response: AxiosResponse): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(<any>null);
    }
}

export interface IDataChannelService {
    deleteDeliveryScheduleById_DeleteDeliveryScheduleById(request: EvolveDeleteDeliveryScheduleByIdRequest, api_version?: string | null | undefined): Promise<FileResponse>;
    retrieveDataChannelGraphInfoByOptions_RetrieveDataChannelGraphInfoByOptions(request: EvolveRetrieveDataChannelGraphInfoByOptionsRequest, api_version?: string | null | undefined): Promise<FileResponse>;
    retrieveDeliveryScheduleAmountsByOptions_RetrieveDeliveryScheduleAmountsByOptions(request: EvolveRetrieveDeliveryScheduleAmountsByOptionsRequest, api_version?: string | null | undefined): Promise<FileResponse>;
    retrieveDeliveryScheduleEditComponentsById_RetrieveDeliveryScheduleEditComponentsById(request: EvolveRetrieveDeliveryScheduleEditComponentsByIdRequest, api_version?: string | null | undefined): Promise<FileResponse>;
    retrieveDeliveryScheduleInfoRecordsByOptions_RetrieveDeliveryScheduleInfoRecordsByOptions(request: EvolveRetrieveDeliveryScheduleInfoRecordsByOptionsRequest, api_version?: string | null | undefined): Promise<FileResponse>;
    saveDeliverySchedule_SaveDeliverySchedule(request: EvolveSaveDeliveryScheduleRequest, api_version?: string | null | undefined): Promise<FileResponse>;
    /**
     * Get Data Channel Info By Id And UOM Display Type
     * @param api_version (optional) 
     */
    getDataChannelInfoByIdAndUOMDisplayType_GetDataChannelInfoByIdAndUOMDisplayType(request: EvolveGetDataChannelInfoByIdAndUOMDisplayTypeRequest, api_version?: string | null | undefined): Promise<EvolveGetDataChannelInfoByIdAndUOMDisplayTypeResponse>;
    /**
     * Gets data channels by domain id and user id.
     * @param api_version (optional) 
     */
    getDataChannelsByDomainIdAndUserId_GetDataChannelsByDomainIdAndUserId(req: EvolveGetDataChannelsByDomainIdAndUserIdRequest, api_version?: string | null | undefined): Promise<EvolveGetDataChannelsByDomainIdAndUserIdResponse>;
    /**
     * Get's days remaining until next inventory state for data channel.
     * @param api_version (optional) 
     */
    getDaysRemainingUntilNextInventoryState_GetDaysRemainingUntilNextInventoryState(request: EvolveGetDaysRemainingUntilNextInventoryStateRequest, api_version?: string | null | undefined): Promise<FileResponse>;
    dataChannel_GetDataChannel(dataChannelId: string, api_version?: string | null | undefined): Promise<DataChannelDTO>;
    dataChannel_ConvertUOMParams(dataChannelId: string, chosenUnitTypeId?: UnitTypeEnum | null | undefined, api_version?: string | null | undefined): Promise<UOMParamsDTO>;
    dataChannel_GetForecasts(dataChannelId: string, chosenUnitTypeId?: UnitTypeEnum | null | undefined, api_version?: string | null | undefined): Promise<ForecastDTO>;
    dataChannel_RetrieveDataChannel(dataChannelId: string, api_version?: string | null | undefined): Promise<DataChannelReportDTO>;
    dataChannel_SaveGeneralInfo(dataChannel: DataChannelGeneralInfoDTO, api_version?: string | null | undefined): Promise<boolean>;
    dataChannel_GetPublishedComments(publishedDomainId: string, api_version?: string | null | undefined): Promise<DataChannelPublishedCommentsDTO[]>;
    dataChannel_SaveSensorInfo(dataChannel: DataChannelSensorInfoDTO, api_version?: string | null | undefined): Promise<boolean>;
    dataChannel_SavePressureTankAndSensorConfig(tankAndSensor: DataChannelTankAndSensorConfigDTO, api_version?: string | null | undefined): Promise<boolean>;
    dataChannel_SaveTankAndSensorConfig(tankAndSensor: DataChannelTankAndSensorConfigDTO, api_version?: string | null | undefined): Promise<boolean>;
    dataChannel_GetRawUnits(api_version?: string | null | undefined): Promise<DataChannelRawUnitsDTO>;
    dataChannel_GetScaledUnits(dataChannelId: string, api_version?: string | null | undefined): Promise<DataChannelScaledUnitsDTO>;
    /**
     * Save tank and sensor information
     * @param tankSetup Tank and sensor profile.
     * @param api_version (optional) 
     * @return true
     */
    dataChannel_SaveTankSetupInfo(tankSetup: DataChannelSaveTankSetupInfoDTO, api_version?: string | null | undefined): Promise<boolean>;
    dataChannel_ConvertVolumetricValue(volConversion: DataChannelVolumetricValueConversionDTO, api_version?: string | null | undefined): Promise<number>;
    /**
     * Save DataChannel Site Integration profile.

    This API is called to save DataChannel changes to the site integration profile.
     * @param dataChannelInfo DataChannel site integration profile data.
     * @param api_version (optional) 
     * @return HTTP:200 - boolean indicating if change was saved.
     */
    dataChannel_SaveSiteIntegrationProfile(dataChannelInfo: CustomSiteIntegration1DataChannelDTO, api_version?: string | null | undefined): Promise<boolean>;
    dataChannel_SaveForcastDeliveryInfo(forecastDeliveryInfo: DataChannelSaveForecastDeliveryInfoDTO, api_version?: string | null | undefined): Promise<boolean>;
    /**
     * Save integration profile
     * @param integrationInfo Integration profile
     * @param api_version (optional) 
     */
    dataChannel_SaveIntegrationProfileInfo(integrationInfo: DataChannelSaveIntegrationProfileCollectionDTO, api_version?: string | null | undefined): Promise<boolean>;
    dataChannel_GetDisplayUnits(unitConversionModeId: UnitConversionModeEnum, api_version?: string | null | undefined): Promise<DataChannelDisplayUnitsDTO>;
    dataChannel_GetFtpDomains(api_version?: string | null | undefined): Promise<DataChannelFtpDomainsDTO>;
    /**
     * Save manul reading
     * @param dataChannelId System unique identifier for the data channel
     * @param reading Sendor reading
     * @param api_version (optional) 
     * @return true
     */
    dataChannel_SaveManualReading(dataChannelId: string, reading: DataChannelManualReadingDTO, api_version?: string | null | undefined): Promise<boolean>;
    /**
     * Generate scaling map
     * @param tankAndSensorConfig Data channel tank and sensor configuration.
     * @param api_version (optional) 
     * @return DataChannelTankDimensionsMapPointDTO[]
     */
    dataChannel_GenerateScalingMap(tankAndSensorConfig: GenerateScalingMapDTO, api_version?: string | null | undefined): Promise<DataChannelTankDimensionsMapPointDTO[]>;
    dataChannel_GenerateDataChannelMapPoints(dataChannelId: string, api_version?: string | null | undefined): Promise<DataChannelTankDimensionsMapPointDTO[]>;
    /**
     * Save digital setup panel
     * @param digitalSetup Digital Setup information
     * @param api_version (optional) 
     * @return true
     */
    dataChannel_SaveDigitalSetupInfo(digitalSetup: DataChannelSaveDigitalSetupInfoDTO, api_version?: string | null | undefined): Promise<boolean>;
    deleteDataChannelReadingsByDateRange_DeleteDataChannelReadingsByDateRange(request: EvolveDeleteDataChannelReadingsByDateRangeRequest, api_version?: string | null | undefined): Promise<EvolveDeleteDataChannelReadingsByDateRangeResponse>;
    deleteDataChannelsByIdList_DeleteDataChannelsByIdList(request: EvolveDeleteDataChannelsByIdListRequest, api_version?: string | null | undefined): Promise<EvolveDeleteDataChannelsByIdListResponse>;
    executeRescaleDataChannelReadingsByDateRange_ExecuteRescaleDataChannelReadingsByDateRange(request: EvolveExecuteRescaleDataChannelReadingsByDateRangeRequest, api_version?: string | null | undefined): Promise<EvolveExecuteRescaleDataChannelReadingsByDateRangeResponse>;
    recalculateTotalizedDataChannelReadingsById_RecalculateTotalizedDataChannelReadingsById(request: EvolveRecalculateTotalizedDataChannelReadingsByIdRequest, api_version?: string | null | undefined): Promise<EvolveRecalculateTotalizedDataChannelReadingsByIdResponse>;
    retrieveDataChannelEditComponentsById_RetrieveDataChannelEditComponentsById(request: EvolveRetrieveDataChannelEditComponentsByIdRequest, api_version?: string | null | undefined): Promise<FileResponse>;
    retrieveDataChannelInfoRecordById_RetrieveDataChannelInfoRecordById(request: EvolveRetrieveDataChannelInfoRecordByIdRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveDataChannelInfoRecordByIdResponse>;
    retrieveDataChannelInfoRecordsByOptions_RetrieveDataChannelInfoRecordsByOptions(request: EvolveRetrieveDataChannelInfoRecordsByOptionsRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveDataChannelInfoRecordsByOptionsResponse>;
    retrieveDataChannelReversePollDetailByRtuChannelId_RetrieveDataChannelReversePollDetailByRtuChannelId(request: EvolveRetrieveDataChannelReversePollDetailByRtuChannelIdRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveDataChannelReversePollDetailByRtuChannelIdResponse>;
    retrievePublishedDataChannelSearchInfoListByComments_RetrievePublishedDataChannelSearchInfoListByComments(request: EvolveRetrievePublishedDataChannelSearchInfoListByCommentsRequest, api_version?: string | null | undefined): Promise<EvolveRetrievePublishedDataChannelSearchInfoListByCommentsResponse>;
    retrieveRateOfChangeDataChannelEditComponentsById_RetrieveRateOfChangeDataChannelEditComponentsById(request: EvolveRetrieveRateOfChangeDataChannelEditComponentsByIdRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveRateOfChangeDataChannelEditComponentsByIdResponse>;
    retrieveSourceDataChannelDefaultsById_RetrieveSourceDataChannelDefaultsById(request: EvolveRetrieveSourceDataChannelDefaultsByIdRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveSourceDataChannelDefaultsByIdResponse>;
    retrieveTotalizedDataChannelEditComponentsById_RetrieveTotalizedDataChannelEditComponentsById(request: EvolveRetrieveTotalizedDataChannelEditComponentsByIdRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveTotalizedDataChannelEditComponentsByIdResponse>;
    retrieveVirtualChannelEditComponentsById_RetrieveVirtualChannelEditComponentsById(request: EvolveRetrieveVirtualChannelEditComponentsByIdRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveVirtualChannelEditComponentsByIdResponse>;
    saveDataChannel_SaveDataChannel(request: EvolveSaveDataChannelRequest, api_version?: string | null | undefined): Promise<EvolveSaveDataChannelResponse>;
    saveRateOfChangeDataChannel_SaveRateOfChangeDataChannel(request: EvolveSaveRateOfChangeDataChannelRequest, api_version?: string | null | undefined): Promise<EvolveSaveRateOfChangeDataChannelResponse>;
    saveTotalizedDataChannel_SaveTotalizedDataChannel(request: EvolveSaveTotalizedDataChannelRequest, api_version?: string | null | undefined): Promise<EvolveSaveTotalizedDataChannelResponse>;
    saveVirtualChannel_SaveVirtualChannel(request: EvolveSaveVirtualChannelRequest, api_version?: string | null | undefined): Promise<EvolveSaveVirtualChannelResponse>;
    updateDataChannelSetToRtuChannelMaster_UpdateDataChannelSetToRtuChannelMaster(request: EvolveUpdateDataChannelSetToRtuChannelMasterRequest, api_version?: string | null | undefined): Promise<EvolveUpdateDataChannelSetToRtuChannelMasterResponse>;
    validateDataChannelEventRule_ValidateDataChannelEventRule(request: EvolveValidateDataChannelEventRuleRequest, api_version?: string | null | undefined): Promise<EvolveValidateDataChannelEventRuleResponse>;
    validateVirtualChannelFormula_ValidateVirtualChannelFormula(request: EvolveValidateVirtualChannelFormulaRequest, api_version?: string | null | undefined): Promise<EvolveValidateVirtualChannelFormulaResponse>;
    /**
     * Add Analog Data Channel
     * @param api_version (optional) 
     */
    addAnalogDataChannel_AddAnalogDataChannel(request: EvolveAddAnalogDataChannelRequest, api_version?: string | null | undefined): Promise<EvolveAddAnalogDataChannelResponse>;
    /**
     * Add Diagnostic Data Channel
     * @param api_version (optional) 
     */
    addDiagnosticDataChannel_AddDiagnosticDataChannel(request: EvolveAddDiagnosticDataChannelRequest, api_version?: string | null | undefined): Promise<EvolveAddDiagnosticDataChannelResponse>;
    /**
     * Add Digital Data Channel
     * @param api_version (optional) 
     */
    addDigitalDataChannel_AddDigitalDataChannel(request: EvolveAddDigitalDataChannelRequest, api_version?: string | null | undefined): Promise<EvolveAddDigitalDataChannelResponse>;
    /**
     * Add Totalizer Data Channel
     * @param api_version (optional) 
     */
    addTotalizerDataChannel_AddTotalizerDataChannel(request: EvolveAddTotalizerDataChannelRequest, api_version?: string | null | undefined): Promise<EvolveAddTotalizerDataChannelResponse>;
    /**
     * Add Totalizer Data Channel
     * @param api_version (optional) 
     */
    addVirtualDataChannel_AddVirtualDataChannel(request: EvolveAddVirtualDataChannelRequest, api_version?: string | null | undefined): Promise<EvolveAddVirtualDataChannelResponse>;
    /**
     * Delete Data channels.
     * @param api_version (optional) 
     */
    deleteDataChannel_DeleteDataChannel(request: EvolveDeleteDataChannelRequest, api_version?: string | null | undefined): Promise<void>;
    /**
     * Gets event info by data channel id.
     * @param api_version (optional) 
     */
    getDataChannelEventsInfo_GetDataChannelEventsInfo(req: EvolveGetDataChannelEventsInfoRequest, api_version?: string | null | undefined): Promise<EvolveGetDataChannelEventsInfoResponse>;
    retrieveDataChannelEditDetailsById_RetrieveDataChannelEditDetailsById(request: EvolveRetrieveDataChannelEditDetailsByIdRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveDataChannelEditDetailsByIdResponse>;
    /**
     * Validate analog data channel sub set parameters
     * @param api_version (optional) 
     */
    validateAnalogDataChannel_ValidateAnalogDataChannel(request: EvolveValidateAnalogDataChannelRequest, api_version?: string | null | undefined): Promise<void>;
    /**
     * Validate digital data channel sub set parameters
     * @param api_version (optional) 
     */
    validateDigitalDataChannel_ValidateDigitalDataChannel(request: EvolveValidateDigitalDataChannelRequest, api_version?: string | null | undefined): Promise<void>;
    /**
     * Validate Totalizer data channel sub set parameters
     * @param api_version (optional) 
     */
    validateTotalizerDataChannel_ValidateTotalizerDataChannel(request: EvolveValidateTotalizerDataChannelRequest, api_version?: string | null | undefined): Promise<void>;
    /**
     * Validate Virtual data channel sub set parameters
     * @param api_version (optional) 
     */
    validateVirtualDataChannel_ValidateVirtualDataChannel(request: EvolveValidateVirtualDataChannelRequest, api_version?: string | null | undefined): Promise<void>;
    /**
     * Validate Virtual channel formula
     * @param api_version (optional) 
     */
    validateVirtualDataChannelFormula_ValidateVirtualDataChannelFormula(request: EvolveValidateVirtualChannelFormulaRequest2, api_version?: string | null | undefined): Promise<FileResponse>;
    /**
     * Level DataChannel load default values form the template
     * @param api_version (optional) 
     */
    levelDataChannelLoadDefaultValues_LevelDataChannelLoadDefaultValues(request: EvolveLevelDataChannelLoadDefaultValuesRequest, api_version?: string | null | undefined): Promise<EvolveLevelDataChannelLoadDefaultValuesResponse>;
    /**
     * Retrieve Level DataChannel General Info
     * @param api_version (optional) 
     */
    retrieveEditLevelDataChannelInfo_RetrieveEditLevelDataChannelInfo(request: EvolveRetrieveEditLevelDataChannelInfoRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveEditLevelDataChannelInfoResponse>;
    /**
     * Retrieve Level DataChannel General Info
     * @param api_version (optional) 
     */
    retrieveLevelDataChannelGeneralInfo_RetrieveLevelDataChannelGeneralInfo(request: EvolveRetrieveEditLevelDataChannelInfoRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveEditLevelDataChannelInfoResponse>;
    /**
     * Save Level DataChannel General Info
     * @param api_version (optional) 
     */
    saveEditLevelDataChannelInfo_SaveEditLevelDataChannelInfo(request: EvolveSaveEditLevelDataChannelInfoRequest, api_version?: string | null | undefined): Promise<EvolveSaveEditLevelDataChannelInfoResponse>;
    /**
     * Save Level DataChannel calibration Info
     * @param api_version (optional) 
     */
    saveLevelDataChannelCalibrationInfo_SaveLevelDataChannelCalibrationInfo(request: EvolveSaveLevelDataChannelCalibrationInfoRequest, api_version?: string | null | undefined): Promise<EvolveSaveLevelDataChannelCalibrationInfoResponse>;
}

export class DataChannelService implements IDataChannelService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    deleteDeliveryScheduleById_DeleteDeliveryScheduleById(request: EvolveDeleteDeliveryScheduleByIdRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/DeleteDeliveryScheduleById";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteDeliveryScheduleById_DeleteDeliveryScheduleById(_response);
        });
    }

    protected processDeleteDeliveryScheduleById_DeleteDeliveryScheduleById(response: AxiosResponse): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    retrieveDataChannelGraphInfoByOptions_RetrieveDataChannelGraphInfoByOptions(request: EvolveRetrieveDataChannelGraphInfoByOptionsRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/RetrieveDataChannelGraphInfoByOptions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveDataChannelGraphInfoByOptions_RetrieveDataChannelGraphInfoByOptions(_response);
        });
    }

    protected processRetrieveDataChannelGraphInfoByOptions_RetrieveDataChannelGraphInfoByOptions(response: AxiosResponse): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    retrieveDeliveryScheduleAmountsByOptions_RetrieveDeliveryScheduleAmountsByOptions(request: EvolveRetrieveDeliveryScheduleAmountsByOptionsRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/RetrieveDeliveryScheduleAmountsByOptions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveDeliveryScheduleAmountsByOptions_RetrieveDeliveryScheduleAmountsByOptions(_response);
        });
    }

    protected processRetrieveDeliveryScheduleAmountsByOptions_RetrieveDeliveryScheduleAmountsByOptions(response: AxiosResponse): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    retrieveDeliveryScheduleEditComponentsById_RetrieveDeliveryScheduleEditComponentsById(request: EvolveRetrieveDeliveryScheduleEditComponentsByIdRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/RetrieveDeliveryScheduleEditComponentsById";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveDeliveryScheduleEditComponentsById_RetrieveDeliveryScheduleEditComponentsById(_response);
        });
    }

    protected processRetrieveDeliveryScheduleEditComponentsById_RetrieveDeliveryScheduleEditComponentsById(response: AxiosResponse): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    retrieveDeliveryScheduleInfoRecordsByOptions_RetrieveDeliveryScheduleInfoRecordsByOptions(request: EvolveRetrieveDeliveryScheduleInfoRecordsByOptionsRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/RetrieveDeliveryScheduleInfoRecordsByOptions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveDeliveryScheduleInfoRecordsByOptions_RetrieveDeliveryScheduleInfoRecordsByOptions(_response);
        });
    }

    protected processRetrieveDeliveryScheduleInfoRecordsByOptions_RetrieveDeliveryScheduleInfoRecordsByOptions(response: AxiosResponse): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    saveDeliverySchedule_SaveDeliverySchedule(request: EvolveSaveDeliveryScheduleRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/SaveDeliverySchedule";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSaveDeliverySchedule_SaveDeliverySchedule(_response);
        });
    }

    protected processSaveDeliverySchedule_SaveDeliverySchedule(response: AxiosResponse): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    /**
     * Get Data Channel Info By Id And UOM Display Type
     * @param api_version (optional) 
     */
    getDataChannelInfoByIdAndUOMDisplayType_GetDataChannelInfoByIdAndUOMDisplayType(request: EvolveGetDataChannelInfoByIdAndUOMDisplayTypeRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveGetDataChannelInfoByIdAndUOMDisplayTypeResponse> {
        let url_ = this.baseUrl + "/GetDataChannelInfoByIdAndUOMDisplayType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetDataChannelInfoByIdAndUOMDisplayType_GetDataChannelInfoByIdAndUOMDisplayType(_response);
        });
    }

    protected processGetDataChannelInfoByIdAndUOMDisplayType_GetDataChannelInfoByIdAndUOMDisplayType(response: AxiosResponse): Promise<EvolveGetDataChannelInfoByIdAndUOMDisplayTypeResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveGetDataChannelInfoByIdAndUOMDisplayTypeResponse.fromJS(resultData200);
            return Promise.resolve<EvolveGetDataChannelInfoByIdAndUOMDisplayTypeResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveGetDataChannelInfoByIdAndUOMDisplayTypeResponse>(<any>null);
    }

    /**
     * Gets data channels by domain id and user id.
     * @param api_version (optional) 
     */
    getDataChannelsByDomainIdAndUserId_GetDataChannelsByDomainIdAndUserId(req: EvolveGetDataChannelsByDomainIdAndUserIdRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveGetDataChannelsByDomainIdAndUserIdResponse> {
        let url_ = this.baseUrl + "/GetDataChannelsByDomainIdAndUserId";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetDataChannelsByDomainIdAndUserId_GetDataChannelsByDomainIdAndUserId(_response);
        });
    }

    protected processGetDataChannelsByDomainIdAndUserId_GetDataChannelsByDomainIdAndUserId(response: AxiosResponse): Promise<EvolveGetDataChannelsByDomainIdAndUserIdResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveGetDataChannelsByDomainIdAndUserIdResponse.fromJS(resultData200);
            return Promise.resolve<EvolveGetDataChannelsByDomainIdAndUserIdResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveGetDataChannelsByDomainIdAndUserIdResponse>(<any>null);
    }

    /**
     * Get's days remaining until next inventory state for data channel.
     * @param api_version (optional) 
     */
    getDaysRemainingUntilNextInventoryState_GetDaysRemainingUntilNextInventoryState(request: EvolveGetDaysRemainingUntilNextInventoryStateRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/GetDaysRemainingUntilNextInventoryState";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetDaysRemainingUntilNextInventoryState_GetDaysRemainingUntilNextInventoryState(_response);
        });
    }

    protected processGetDaysRemainingUntilNextInventoryState_GetDaysRemainingUntilNextInventoryState(response: AxiosResponse): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    dataChannel_GetDataChannel(dataChannelId: string, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<DataChannelDTO> {
        let url_ = this.baseUrl + "/DataChannel/{dataChannelId}/profile";
        if (dataChannelId === undefined || dataChannelId === null)
            throw new Error("The parameter 'dataChannelId' must be defined.");
        url_ = url_.replace("{dataChannelId}", encodeURIComponent("" + dataChannelId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDataChannel_GetDataChannel(_response);
        });
    }

    protected processDataChannel_GetDataChannel(response: AxiosResponse): Promise<DataChannelDTO> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DataChannelDTO.fromJS(resultData200);
            return Promise.resolve<DataChannelDTO>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DataChannelDTO>(<any>null);
    }

    dataChannel_ConvertUOMParams(dataChannelId: string, chosenUnitTypeId?: UnitTypeEnum | null | undefined, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<UOMParamsDTO> {
        let url_ = this.baseUrl + "/DataChannel/{dataChannelId}/conversion?";
        if (dataChannelId === undefined || dataChannelId === null)
            throw new Error("The parameter 'dataChannelId' must be defined.");
        url_ = url_.replace("{dataChannelId}", encodeURIComponent("" + dataChannelId));
        if (chosenUnitTypeId !== undefined && chosenUnitTypeId !== null)
            url_ += "chosenUnitTypeId=" + encodeURIComponent("" + chosenUnitTypeId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDataChannel_ConvertUOMParams(_response);
        });
    }

    protected processDataChannel_ConvertUOMParams(response: AxiosResponse): Promise<UOMParamsDTO> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UOMParamsDTO.fromJS(resultData200);
            return Promise.resolve<UOMParamsDTO>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UOMParamsDTO>(<any>null);
    }

    dataChannel_GetForecasts(dataChannelId: string, chosenUnitTypeId?: UnitTypeEnum | null | undefined, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<ForecastDTO> {
        let url_ = this.baseUrl + "/DataChannel/{dataChannelId}/forecasts?";
        if (dataChannelId === undefined || dataChannelId === null)
            throw new Error("The parameter 'dataChannelId' must be defined.");
        url_ = url_.replace("{dataChannelId}", encodeURIComponent("" + dataChannelId));
        if (chosenUnitTypeId !== undefined && chosenUnitTypeId !== null)
            url_ += "chosenUnitTypeId=" + encodeURIComponent("" + chosenUnitTypeId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDataChannel_GetForecasts(_response);
        });
    }

    protected processDataChannel_GetForecasts(response: AxiosResponse): Promise<ForecastDTO> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ForecastDTO.fromJS(resultData200);
            return Promise.resolve<ForecastDTO>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ForecastDTO>(<any>null);
    }

    dataChannel_RetrieveDataChannel(dataChannelId: string, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<DataChannelReportDTO> {
        let url_ = this.baseUrl + "/DataChannel/{dataChannelId}";
        if (dataChannelId === undefined || dataChannelId === null)
            throw new Error("The parameter 'dataChannelId' must be defined.");
        url_ = url_.replace("{dataChannelId}", encodeURIComponent("" + dataChannelId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDataChannel_RetrieveDataChannel(_response);
        });
    }

    protected processDataChannel_RetrieveDataChannel(response: AxiosResponse): Promise<DataChannelReportDTO> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DataChannelReportDTO.fromJS(resultData200);
            return Promise.resolve<DataChannelReportDTO>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DataChannelReportDTO>(<any>null);
    }

    dataChannel_SaveGeneralInfo(dataChannel: DataChannelGeneralInfoDTO, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/DataChannel/SaveGeneralInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dataChannel);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDataChannel_SaveGeneralInfo(_response);
        });
    }

    protected processDataChannel_SaveGeneralInfo(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    dataChannel_GetPublishedComments(publishedDomainId: string, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<DataChannelPublishedCommentsDTO[]> {
        let url_ = this.baseUrl + "/DataChannel/{publishedDomainId}/publishedComments";
        if (publishedDomainId === undefined || publishedDomainId === null)
            throw new Error("The parameter 'publishedDomainId' must be defined.");
        url_ = url_.replace("{publishedDomainId}", encodeURIComponent("" + publishedDomainId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDataChannel_GetPublishedComments(_response);
        });
    }

    protected processDataChannel_GetPublishedComments(response: AxiosResponse): Promise<DataChannelPublishedCommentsDTO[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DataChannelPublishedCommentsDTO.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<DataChannelPublishedCommentsDTO[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DataChannelPublishedCommentsDTO[]>(<any>null);
    }

    dataChannel_SaveSensorInfo(dataChannel: DataChannelSensorInfoDTO, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/DataChannel/SaveSensorInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dataChannel);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDataChannel_SaveSensorInfo(_response);
        });
    }

    protected processDataChannel_SaveSensorInfo(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    dataChannel_SavePressureTankAndSensorConfig(tankAndSensor: DataChannelTankAndSensorConfigDTO, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/DataChannel/savePressureTankAndSensorConfig";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(tankAndSensor);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDataChannel_SavePressureTankAndSensorConfig(_response);
        });
    }

    protected processDataChannel_SavePressureTankAndSensorConfig(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    dataChannel_SaveTankAndSensorConfig(tankAndSensor: DataChannelTankAndSensorConfigDTO, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/DataChannel/saveTankAndSensorConfig";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(tankAndSensor);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDataChannel_SaveTankAndSensorConfig(_response);
        });
    }

    protected processDataChannel_SaveTankAndSensorConfig(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    dataChannel_GetRawUnits(api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<DataChannelRawUnitsDTO> {
        let url_ = this.baseUrl + "/DataChannel/rawUnits";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDataChannel_GetRawUnits(_response);
        });
    }

    protected processDataChannel_GetRawUnits(response: AxiosResponse): Promise<DataChannelRawUnitsDTO> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DataChannelRawUnitsDTO.fromJS(resultData200);
            return Promise.resolve<DataChannelRawUnitsDTO>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DataChannelRawUnitsDTO>(<any>null);
    }

    dataChannel_GetScaledUnits(dataChannelId: string, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<DataChannelScaledUnitsDTO> {
        let url_ = this.baseUrl + "/DataChannel/{dataChannelId}/scaledUnits";
        if (dataChannelId === undefined || dataChannelId === null)
            throw new Error("The parameter 'dataChannelId' must be defined.");
        url_ = url_.replace("{dataChannelId}", encodeURIComponent("" + dataChannelId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDataChannel_GetScaledUnits(_response);
        });
    }

    protected processDataChannel_GetScaledUnits(response: AxiosResponse): Promise<DataChannelScaledUnitsDTO> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DataChannelScaledUnitsDTO.fromJS(resultData200);
            return Promise.resolve<DataChannelScaledUnitsDTO>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DataChannelScaledUnitsDTO>(<any>null);
    }

    /**
     * Save tank and sensor information
     * @param tankSetup Tank and sensor profile.
     * @param api_version (optional) 
     * @return true
     */
    dataChannel_SaveTankSetupInfo(tankSetup: DataChannelSaveTankSetupInfoDTO, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/DataChannel/saveTankSetupInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(tankSetup);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDataChannel_SaveTankSetupInfo(_response);
        });
    }

    protected processDataChannel_SaveTankSetupInfo(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    dataChannel_ConvertVolumetricValue(volConversion: DataChannelVolumetricValueConversionDTO, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<number> {
        let url_ = this.baseUrl + "/DataChannel/convertVolumetricValue";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(volConversion);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDataChannel_ConvertVolumetricValue(_response);
        });
    }

    protected processDataChannel_ConvertVolumetricValue(response: AxiosResponse): Promise<number> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<number>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<number>(<any>null);
    }

    /**
     * Save DataChannel Site Integration profile.

    This API is called to save DataChannel changes to the site integration profile.
     * @param dataChannelInfo DataChannel site integration profile data.
     * @param api_version (optional) 
     * @return HTTP:200 - boolean indicating if change was saved.
     */
    dataChannel_SaveSiteIntegrationProfile(dataChannelInfo: CustomSiteIntegration1DataChannelDTO, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/DataChannel/siteintegration/profile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dataChannelInfo);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDataChannel_SaveSiteIntegrationProfile(_response);
        });
    }

    protected processDataChannel_SaveSiteIntegrationProfile(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    dataChannel_SaveForcastDeliveryInfo(forecastDeliveryInfo: DataChannelSaveForecastDeliveryInfoDTO, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/DataChannel/saveForecastDeliveryInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(forecastDeliveryInfo);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDataChannel_SaveForcastDeliveryInfo(_response);
        });
    }

    protected processDataChannel_SaveForcastDeliveryInfo(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    /**
     * Save integration profile
     * @param integrationInfo Integration profile
     * @param api_version (optional) 
     */
    dataChannel_SaveIntegrationProfileInfo(integrationInfo: DataChannelSaveIntegrationProfileCollectionDTO, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/DataChannel/saveIntegrationProfileInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(integrationInfo);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDataChannel_SaveIntegrationProfileInfo(_response);
        });
    }

    protected processDataChannel_SaveIntegrationProfileInfo(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorRecordResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    dataChannel_GetDisplayUnits(unitConversionModeId: UnitConversionModeEnum, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<DataChannelDisplayUnitsDTO> {
        let url_ = this.baseUrl + "/DataChannel/{unitConversionModeId}/displayUnits";
        if (unitConversionModeId === undefined || unitConversionModeId === null)
            throw new Error("The parameter 'unitConversionModeId' must be defined.");
        url_ = url_.replace("{unitConversionModeId}", encodeURIComponent("" + unitConversionModeId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDataChannel_GetDisplayUnits(_response);
        });
    }

    protected processDataChannel_GetDisplayUnits(response: AxiosResponse): Promise<DataChannelDisplayUnitsDTO> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DataChannelDisplayUnitsDTO.fromJS(resultData200);
            return Promise.resolve<DataChannelDisplayUnitsDTO>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DataChannelDisplayUnitsDTO>(<any>null);
    }

    dataChannel_GetFtpDomains(api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<DataChannelFtpDomainsDTO> {
        let url_ = this.baseUrl + "/DataChannel/ftpDomains";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDataChannel_GetFtpDomains(_response);
        });
    }

    protected processDataChannel_GetFtpDomains(response: AxiosResponse): Promise<DataChannelFtpDomainsDTO> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DataChannelFtpDomainsDTO.fromJS(resultData200);
            return Promise.resolve<DataChannelFtpDomainsDTO>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DataChannelFtpDomainsDTO>(<any>null);
    }

    /**
     * Save manul reading
     * @param dataChannelId System unique identifier for the data channel
     * @param reading Sendor reading
     * @param api_version (optional) 
     * @return true
     */
    dataChannel_SaveManualReading(dataChannelId: string, reading: DataChannelManualReadingDTO, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/DataChannel/{dataChannelId}/reading/manual";
        if (dataChannelId === undefined || dataChannelId === null)
            throw new Error("The parameter 'dataChannelId' must be defined.");
        url_ = url_.replace("{dataChannelId}", encodeURIComponent("" + dataChannelId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(reading);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDataChannel_SaveManualReading(_response);
        });
    }

    protected processDataChannel_SaveManualReading(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    /**
     * Generate scaling map
     * @param tankAndSensorConfig Data channel tank and sensor configuration.
     * @param api_version (optional) 
     * @return DataChannelTankDimensionsMapPointDTO[]
     */
    dataChannel_GenerateScalingMap(tankAndSensorConfig: GenerateScalingMapDTO, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<DataChannelTankDimensionsMapPointDTO[]> {
        let url_ = this.baseUrl + "/DataChannel/tankdimensions/newscalingmap";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(tankAndSensorConfig);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDataChannel_GenerateScalingMap(_response);
        });
    }

    protected processDataChannel_GenerateScalingMap(response: AxiosResponse): Promise<DataChannelTankDimensionsMapPointDTO[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DataChannelTankDimensionsMapPointDTO.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<DataChannelTankDimensionsMapPointDTO[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DataChannelTankDimensionsMapPointDTO[]>(<any>null);
    }

    dataChannel_GenerateDataChannelMapPoints(dataChannelId: string, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<DataChannelTankDimensionsMapPointDTO[]> {
        let url_ = this.baseUrl + "/DataChannel/{dataChannelId}/tankdimensions/newmappoints";
        if (dataChannelId === undefined || dataChannelId === null)
            throw new Error("The parameter 'dataChannelId' must be defined.");
        url_ = url_.replace("{dataChannelId}", encodeURIComponent("" + dataChannelId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDataChannel_GenerateDataChannelMapPoints(_response);
        });
    }

    protected processDataChannel_GenerateDataChannelMapPoints(response: AxiosResponse): Promise<DataChannelTankDimensionsMapPointDTO[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DataChannelTankDimensionsMapPointDTO.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<DataChannelTankDimensionsMapPointDTO[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DataChannelTankDimensionsMapPointDTO[]>(<any>null);
    }

    /**
     * Save digital setup panel
     * @param digitalSetup Digital Setup information
     * @param api_version (optional) 
     * @return true
     */
    dataChannel_SaveDigitalSetupInfo(digitalSetup: DataChannelSaveDigitalSetupInfoDTO, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/DataChannel/saveDigitalSetupInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(digitalSetup);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDataChannel_SaveDigitalSetupInfo(_response);
        });
    }

    protected processDataChannel_SaveDigitalSetupInfo(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    deleteDataChannelReadingsByDateRange_DeleteDataChannelReadingsByDateRange(request: EvolveDeleteDataChannelReadingsByDateRangeRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveDeleteDataChannelReadingsByDateRangeResponse> {
        let url_ = this.baseUrl + "/DeleteDataChannelReadingsByDateRange";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteDataChannelReadingsByDateRange_DeleteDataChannelReadingsByDateRange(_response);
        });
    }

    protected processDeleteDataChannelReadingsByDateRange_DeleteDataChannelReadingsByDateRange(response: AxiosResponse): Promise<EvolveDeleteDataChannelReadingsByDateRangeResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveDeleteDataChannelReadingsByDateRangeResponse.fromJS(resultData200);
            return Promise.resolve<EvolveDeleteDataChannelReadingsByDateRangeResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveDeleteDataChannelReadingsByDateRangeResponse>(<any>null);
    }

    deleteDataChannelsByIdList_DeleteDataChannelsByIdList(request: EvolveDeleteDataChannelsByIdListRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveDeleteDataChannelsByIdListResponse> {
        let url_ = this.baseUrl + "/DeleteDataChannelsByIdList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteDataChannelsByIdList_DeleteDataChannelsByIdList(_response);
        });
    }

    protected processDeleteDataChannelsByIdList_DeleteDataChannelsByIdList(response: AxiosResponse): Promise<EvolveDeleteDataChannelsByIdListResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveDeleteDataChannelsByIdListResponse.fromJS(resultData200);
            return Promise.resolve<EvolveDeleteDataChannelsByIdListResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveDeleteDataChannelsByIdListResponse>(<any>null);
    }

    executeRescaleDataChannelReadingsByDateRange_ExecuteRescaleDataChannelReadingsByDateRange(request: EvolveExecuteRescaleDataChannelReadingsByDateRangeRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveExecuteRescaleDataChannelReadingsByDateRangeResponse> {
        let url_ = this.baseUrl + "/ExecuteRescaleDataChannelReadingsByDateRange";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processExecuteRescaleDataChannelReadingsByDateRange_ExecuteRescaleDataChannelReadingsByDateRange(_response);
        });
    }

    protected processExecuteRescaleDataChannelReadingsByDateRange_ExecuteRescaleDataChannelReadingsByDateRange(response: AxiosResponse): Promise<EvolveExecuteRescaleDataChannelReadingsByDateRangeResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveExecuteRescaleDataChannelReadingsByDateRangeResponse.fromJS(resultData200);
            return Promise.resolve<EvolveExecuteRescaleDataChannelReadingsByDateRangeResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveExecuteRescaleDataChannelReadingsByDateRangeResponse>(<any>null);
    }

    recalculateTotalizedDataChannelReadingsById_RecalculateTotalizedDataChannelReadingsById(request: EvolveRecalculateTotalizedDataChannelReadingsByIdRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRecalculateTotalizedDataChannelReadingsByIdResponse> {
        let url_ = this.baseUrl + "/RecalculateTotalizedDataChannelReadingsById";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRecalculateTotalizedDataChannelReadingsById_RecalculateTotalizedDataChannelReadingsById(_response);
        });
    }

    protected processRecalculateTotalizedDataChannelReadingsById_RecalculateTotalizedDataChannelReadingsById(response: AxiosResponse): Promise<EvolveRecalculateTotalizedDataChannelReadingsByIdResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRecalculateTotalizedDataChannelReadingsByIdResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRecalculateTotalizedDataChannelReadingsByIdResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRecalculateTotalizedDataChannelReadingsByIdResponse>(<any>null);
    }

    retrieveDataChannelEditComponentsById_RetrieveDataChannelEditComponentsById(request: EvolveRetrieveDataChannelEditComponentsByIdRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/RetrieveDataChannelEditComponentsById";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveDataChannelEditComponentsById_RetrieveDataChannelEditComponentsById(_response);
        });
    }

    protected processRetrieveDataChannelEditComponentsById_RetrieveDataChannelEditComponentsById(response: AxiosResponse): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    retrieveDataChannelInfoRecordById_RetrieveDataChannelInfoRecordById(request: EvolveRetrieveDataChannelInfoRecordByIdRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveDataChannelInfoRecordByIdResponse> {
        let url_ = this.baseUrl + "/RetrieveDataChannelInfoRecordById";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveDataChannelInfoRecordById_RetrieveDataChannelInfoRecordById(_response);
        });
    }

    protected processRetrieveDataChannelInfoRecordById_RetrieveDataChannelInfoRecordById(response: AxiosResponse): Promise<EvolveRetrieveDataChannelInfoRecordByIdResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveDataChannelInfoRecordByIdResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveDataChannelInfoRecordByIdResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveDataChannelInfoRecordByIdResponse>(<any>null);
    }

    retrieveDataChannelInfoRecordsByOptions_RetrieveDataChannelInfoRecordsByOptions(request: EvolveRetrieveDataChannelInfoRecordsByOptionsRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveDataChannelInfoRecordsByOptionsResponse> {
        let url_ = this.baseUrl + "/RetrieveDataChannelInfoRecordsByOptions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveDataChannelInfoRecordsByOptions_RetrieveDataChannelInfoRecordsByOptions(_response);
        });
    }

    protected processRetrieveDataChannelInfoRecordsByOptions_RetrieveDataChannelInfoRecordsByOptions(response: AxiosResponse): Promise<EvolveRetrieveDataChannelInfoRecordsByOptionsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveDataChannelInfoRecordsByOptionsResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveDataChannelInfoRecordsByOptionsResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveDataChannelInfoRecordsByOptionsResponse>(<any>null);
    }

    retrieveDataChannelReversePollDetailByRtuChannelId_RetrieveDataChannelReversePollDetailByRtuChannelId(request: EvolveRetrieveDataChannelReversePollDetailByRtuChannelIdRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveDataChannelReversePollDetailByRtuChannelIdResponse> {
        let url_ = this.baseUrl + "/RetrieveDataChannelReversePollDetailByRtuChannelId";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveDataChannelReversePollDetailByRtuChannelId_RetrieveDataChannelReversePollDetailByRtuChannelId(_response);
        });
    }

    protected processRetrieveDataChannelReversePollDetailByRtuChannelId_RetrieveDataChannelReversePollDetailByRtuChannelId(response: AxiosResponse): Promise<EvolveRetrieveDataChannelReversePollDetailByRtuChannelIdResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveDataChannelReversePollDetailByRtuChannelIdResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveDataChannelReversePollDetailByRtuChannelIdResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveDataChannelReversePollDetailByRtuChannelIdResponse>(<any>null);
    }

    retrievePublishedDataChannelSearchInfoListByComments_RetrievePublishedDataChannelSearchInfoListByComments(request: EvolveRetrievePublishedDataChannelSearchInfoListByCommentsRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrievePublishedDataChannelSearchInfoListByCommentsResponse> {
        let url_ = this.baseUrl + "/RetrievePublishedDataChannelSearchInfoListByComments";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrievePublishedDataChannelSearchInfoListByComments_RetrievePublishedDataChannelSearchInfoListByComments(_response);
        });
    }

    protected processRetrievePublishedDataChannelSearchInfoListByComments_RetrievePublishedDataChannelSearchInfoListByComments(response: AxiosResponse): Promise<EvolveRetrievePublishedDataChannelSearchInfoListByCommentsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrievePublishedDataChannelSearchInfoListByCommentsResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrievePublishedDataChannelSearchInfoListByCommentsResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrievePublishedDataChannelSearchInfoListByCommentsResponse>(<any>null);
    }

    retrieveRateOfChangeDataChannelEditComponentsById_RetrieveRateOfChangeDataChannelEditComponentsById(request: EvolveRetrieveRateOfChangeDataChannelEditComponentsByIdRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveRateOfChangeDataChannelEditComponentsByIdResponse> {
        let url_ = this.baseUrl + "/RetrieveRateOfChangeDataChannelEditComponentsById";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveRateOfChangeDataChannelEditComponentsById_RetrieveRateOfChangeDataChannelEditComponentsById(_response);
        });
    }

    protected processRetrieveRateOfChangeDataChannelEditComponentsById_RetrieveRateOfChangeDataChannelEditComponentsById(response: AxiosResponse): Promise<EvolveRetrieveRateOfChangeDataChannelEditComponentsByIdResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveRateOfChangeDataChannelEditComponentsByIdResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveRateOfChangeDataChannelEditComponentsByIdResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveRateOfChangeDataChannelEditComponentsByIdResponse>(<any>null);
    }

    retrieveSourceDataChannelDefaultsById_RetrieveSourceDataChannelDefaultsById(request: EvolveRetrieveSourceDataChannelDefaultsByIdRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveSourceDataChannelDefaultsByIdResponse> {
        let url_ = this.baseUrl + "/RetrieveSourceDataChannelDefaultsById";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveSourceDataChannelDefaultsById_RetrieveSourceDataChannelDefaultsById(_response);
        });
    }

    protected processRetrieveSourceDataChannelDefaultsById_RetrieveSourceDataChannelDefaultsById(response: AxiosResponse): Promise<EvolveRetrieveSourceDataChannelDefaultsByIdResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveSourceDataChannelDefaultsByIdResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveSourceDataChannelDefaultsByIdResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveSourceDataChannelDefaultsByIdResponse>(<any>null);
    }

    retrieveTotalizedDataChannelEditComponentsById_RetrieveTotalizedDataChannelEditComponentsById(request: EvolveRetrieveTotalizedDataChannelEditComponentsByIdRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveTotalizedDataChannelEditComponentsByIdResponse> {
        let url_ = this.baseUrl + "/RetrieveTotalizedDataChannelEditComponentsById";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveTotalizedDataChannelEditComponentsById_RetrieveTotalizedDataChannelEditComponentsById(_response);
        });
    }

    protected processRetrieveTotalizedDataChannelEditComponentsById_RetrieveTotalizedDataChannelEditComponentsById(response: AxiosResponse): Promise<EvolveRetrieveTotalizedDataChannelEditComponentsByIdResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveTotalizedDataChannelEditComponentsByIdResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveTotalizedDataChannelEditComponentsByIdResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveTotalizedDataChannelEditComponentsByIdResponse>(<any>null);
    }

    retrieveVirtualChannelEditComponentsById_RetrieveVirtualChannelEditComponentsById(request: EvolveRetrieveVirtualChannelEditComponentsByIdRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveVirtualChannelEditComponentsByIdResponse> {
        let url_ = this.baseUrl + "/RetrieveVirtualChannelEditComponentsById";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveVirtualChannelEditComponentsById_RetrieveVirtualChannelEditComponentsById(_response);
        });
    }

    protected processRetrieveVirtualChannelEditComponentsById_RetrieveVirtualChannelEditComponentsById(response: AxiosResponse): Promise<EvolveRetrieveVirtualChannelEditComponentsByIdResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveVirtualChannelEditComponentsByIdResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveVirtualChannelEditComponentsByIdResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveVirtualChannelEditComponentsByIdResponse>(<any>null);
    }

    saveDataChannel_SaveDataChannel(request: EvolveSaveDataChannelRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveSaveDataChannelResponse> {
        let url_ = this.baseUrl + "/SaveDataChannel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSaveDataChannel_SaveDataChannel(_response);
        });
    }

    protected processSaveDataChannel_SaveDataChannel(response: AxiosResponse): Promise<EvolveSaveDataChannelResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveSaveDataChannelResponse.fromJS(resultData200);
            return Promise.resolve<EvolveSaveDataChannelResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveSaveDataChannelResponse>(<any>null);
    }

    saveRateOfChangeDataChannel_SaveRateOfChangeDataChannel(request: EvolveSaveRateOfChangeDataChannelRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveSaveRateOfChangeDataChannelResponse> {
        let url_ = this.baseUrl + "/SaveRateOfChangeDataChannel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSaveRateOfChangeDataChannel_SaveRateOfChangeDataChannel(_response);
        });
    }

    protected processSaveRateOfChangeDataChannel_SaveRateOfChangeDataChannel(response: AxiosResponse): Promise<EvolveSaveRateOfChangeDataChannelResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveSaveRateOfChangeDataChannelResponse.fromJS(resultData200);
            return Promise.resolve<EvolveSaveRateOfChangeDataChannelResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveSaveRateOfChangeDataChannelResponse>(<any>null);
    }

    saveTotalizedDataChannel_SaveTotalizedDataChannel(request: EvolveSaveTotalizedDataChannelRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveSaveTotalizedDataChannelResponse> {
        let url_ = this.baseUrl + "/SaveTotalizedDataChannel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSaveTotalizedDataChannel_SaveTotalizedDataChannel(_response);
        });
    }

    protected processSaveTotalizedDataChannel_SaveTotalizedDataChannel(response: AxiosResponse): Promise<EvolveSaveTotalizedDataChannelResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveSaveTotalizedDataChannelResponse.fromJS(resultData200);
            return Promise.resolve<EvolveSaveTotalizedDataChannelResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveSaveTotalizedDataChannelResponse>(<any>null);
    }

    saveVirtualChannel_SaveVirtualChannel(request: EvolveSaveVirtualChannelRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveSaveVirtualChannelResponse> {
        let url_ = this.baseUrl + "/SaveVirtualChannel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSaveVirtualChannel_SaveVirtualChannel(_response);
        });
    }

    protected processSaveVirtualChannel_SaveVirtualChannel(response: AxiosResponse): Promise<EvolveSaveVirtualChannelResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveSaveVirtualChannelResponse.fromJS(resultData200);
            return Promise.resolve<EvolveSaveVirtualChannelResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveSaveVirtualChannelResponse>(<any>null);
    }

    updateDataChannelSetToRtuChannelMaster_UpdateDataChannelSetToRtuChannelMaster(request: EvolveUpdateDataChannelSetToRtuChannelMasterRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveUpdateDataChannelSetToRtuChannelMasterResponse> {
        let url_ = this.baseUrl + "/UpdateDataChannelSetToRtuChannelMaster";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUpdateDataChannelSetToRtuChannelMaster_UpdateDataChannelSetToRtuChannelMaster(_response);
        });
    }

    protected processUpdateDataChannelSetToRtuChannelMaster_UpdateDataChannelSetToRtuChannelMaster(response: AxiosResponse): Promise<EvolveUpdateDataChannelSetToRtuChannelMasterResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveUpdateDataChannelSetToRtuChannelMasterResponse.fromJS(resultData200);
            return Promise.resolve<EvolveUpdateDataChannelSetToRtuChannelMasterResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveUpdateDataChannelSetToRtuChannelMasterResponse>(<any>null);
    }

    validateDataChannelEventRule_ValidateDataChannelEventRule(request: EvolveValidateDataChannelEventRuleRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveValidateDataChannelEventRuleResponse> {
        let url_ = this.baseUrl + "/ValidateDataChannelEventRule";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processValidateDataChannelEventRule_ValidateDataChannelEventRule(_response);
        });
    }

    protected processValidateDataChannelEventRule_ValidateDataChannelEventRule(response: AxiosResponse): Promise<EvolveValidateDataChannelEventRuleResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveValidateDataChannelEventRuleResponse.fromJS(resultData200);
            return Promise.resolve<EvolveValidateDataChannelEventRuleResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveValidateDataChannelEventRuleResponse>(<any>null);
    }

    validateVirtualChannelFormula_ValidateVirtualChannelFormula(request: EvolveValidateVirtualChannelFormulaRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveValidateVirtualChannelFormulaResponse> {
        let url_ = this.baseUrl + "/ValidateVirtualChannelFormula";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processValidateVirtualChannelFormula_ValidateVirtualChannelFormula(_response);
        });
    }

    protected processValidateVirtualChannelFormula_ValidateVirtualChannelFormula(response: AxiosResponse): Promise<EvolveValidateVirtualChannelFormulaResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveValidateVirtualChannelFormulaResponse.fromJS(resultData200);
            return Promise.resolve<EvolveValidateVirtualChannelFormulaResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveValidateVirtualChannelFormulaResponse>(<any>null);
    }

    /**
     * Add Analog Data Channel
     * @param api_version (optional) 
     */
    addAnalogDataChannel_AddAnalogDataChannel(request: EvolveAddAnalogDataChannelRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveAddAnalogDataChannelResponse> {
        let url_ = this.baseUrl + "/AddAnalogDataChannel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAddAnalogDataChannel_AddAnalogDataChannel(_response);
        });
    }

    protected processAddAnalogDataChannel_AddAnalogDataChannel(response: AxiosResponse): Promise<EvolveAddAnalogDataChannelResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 201) {
            const _responseText = response.data;
            let result201: any = null;
            let resultData201  = _responseText;
            result201 = EvolveAddAnalogDataChannelResponse.fromJS(resultData201);
            return Promise.resolve<EvolveAddAnalogDataChannelResponse>(result201);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = EvolveProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveAddAnalogDataChannelResponse>(<any>null);
    }

    /**
     * Add Diagnostic Data Channel
     * @param api_version (optional) 
     */
    addDiagnosticDataChannel_AddDiagnosticDataChannel(request: EvolveAddDiagnosticDataChannelRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveAddDiagnosticDataChannelResponse> {
        let url_ = this.baseUrl + "/AddDiagnosticDataChannel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAddDiagnosticDataChannel_AddDiagnosticDataChannel(_response);
        });
    }

    protected processAddDiagnosticDataChannel_AddDiagnosticDataChannel(response: AxiosResponse): Promise<EvolveAddDiagnosticDataChannelResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 201) {
            const _responseText = response.data;
            let result201: any = null;
            let resultData201  = _responseText;
            result201 = EvolveAddDiagnosticDataChannelResponse.fromJS(resultData201);
            return Promise.resolve<EvolveAddDiagnosticDataChannelResponse>(result201);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = EvolveProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);

        } else if (status === 401) {
            const _responseText = response.data;
            let result401: any = null;
            let resultData401  = _responseText;
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("A server side error occurred.", status, _responseText, _headers, result401);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveAddDiagnosticDataChannelResponse>(<any>null);
    }

    /**
     * Add Digital Data Channel
     * @param api_version (optional) 
     */
    addDigitalDataChannel_AddDigitalDataChannel(request: EvolveAddDigitalDataChannelRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveAddDigitalDataChannelResponse> {
        let url_ = this.baseUrl + "/AddDigitalDataChannel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAddDigitalDataChannel_AddDigitalDataChannel(_response);
        });
    }

    protected processAddDigitalDataChannel_AddDigitalDataChannel(response: AxiosResponse): Promise<EvolveAddDigitalDataChannelResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 201) {
            const _responseText = response.data;
            let result201: any = null;
            let resultData201  = _responseText;
            result201 = EvolveAddDigitalDataChannelResponse.fromJS(resultData201);
            return Promise.resolve<EvolveAddDigitalDataChannelResponse>(result201);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = EvolveProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveAddDigitalDataChannelResponse>(<any>null);
    }

    /**
     * Add Totalizer Data Channel
     * @param api_version (optional) 
     */
    addTotalizerDataChannel_AddTotalizerDataChannel(request: EvolveAddTotalizerDataChannelRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveAddTotalizerDataChannelResponse> {
        let url_ = this.baseUrl + "/AddTotalizerDataChannel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAddTotalizerDataChannel_AddTotalizerDataChannel(_response);
        });
    }

    protected processAddTotalizerDataChannel_AddTotalizerDataChannel(response: AxiosResponse): Promise<EvolveAddTotalizerDataChannelResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 201) {
            const _responseText = response.data;
            let result201: any = null;
            let resultData201  = _responseText;
            result201 = EvolveAddTotalizerDataChannelResponse.fromJS(resultData201);
            return Promise.resolve<EvolveAddTotalizerDataChannelResponse>(result201);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = EvolveProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveAddTotalizerDataChannelResponse>(<any>null);
    }

    /**
     * Add Totalizer Data Channel
     * @param api_version (optional) 
     */
    addVirtualDataChannel_AddVirtualDataChannel(request: EvolveAddVirtualDataChannelRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveAddVirtualDataChannelResponse> {
        let url_ = this.baseUrl + "/AddVirtualDataChannel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAddVirtualDataChannel_AddVirtualDataChannel(_response);
        });
    }

    protected processAddVirtualDataChannel_AddVirtualDataChannel(response: AxiosResponse): Promise<EvolveAddVirtualDataChannelResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 201) {
            const _responseText = response.data;
            let result201: any = null;
            let resultData201  = _responseText;
            result201 = EvolveAddVirtualDataChannelResponse.fromJS(resultData201);
            return Promise.resolve<EvolveAddVirtualDataChannelResponse>(result201);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = EvolveProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveAddVirtualDataChannelResponse>(<any>null);
    }

    /**
     * Delete Data channels.
     * @param api_version (optional) 
     */
    deleteDataChannel_DeleteDataChannel(request: EvolveDeleteDataChannelRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/DeleteDataChannel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteDataChannel_DeleteDataChannel(_response);
        });
    }

    protected processDeleteDataChannel_DeleteDataChannel(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = EvolveProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Gets event info by data channel id.
     * @param api_version (optional) 
     */
    getDataChannelEventsInfo_GetDataChannelEventsInfo(req: EvolveGetDataChannelEventsInfoRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveGetDataChannelEventsInfoResponse> {
        let url_ = this.baseUrl + "/GetDataChannelEventsInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetDataChannelEventsInfo_GetDataChannelEventsInfo(_response);
        });
    }

    protected processGetDataChannelEventsInfo_GetDataChannelEventsInfo(response: AxiosResponse): Promise<EvolveGetDataChannelEventsInfoResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveGetDataChannelEventsInfoResponse.fromJS(resultData200);
            return Promise.resolve<EvolveGetDataChannelEventsInfoResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 403) {
            const _responseText = response.data;
            let result403: any = null;
            let resultData403  = _responseText;
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("A server side error occurred.", status, _responseText, _headers, result403);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveGetDataChannelEventsInfoResponse>(<any>null);
    }

    retrieveDataChannelEditDetailsById_RetrieveDataChannelEditDetailsById(request: EvolveRetrieveDataChannelEditDetailsByIdRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveDataChannelEditDetailsByIdResponse> {
        let url_ = this.baseUrl + "/RetrieveDataChannelEditDetailsById";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveDataChannelEditDetailsById_RetrieveDataChannelEditDetailsById(_response);
        });
    }

    protected processRetrieveDataChannelEditDetailsById_RetrieveDataChannelEditDetailsById(response: AxiosResponse): Promise<EvolveRetrieveDataChannelEditDetailsByIdResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveDataChannelEditDetailsByIdResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveDataChannelEditDetailsByIdResponse>(result200);

        } else if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveDataChannelEditDetailsByIdResponse>(<any>null);
    }

    /**
     * Validate analog data channel sub set parameters
     * @param api_version (optional) 
     */
    validateAnalogDataChannel_ValidateAnalogDataChannel(request: EvolveValidateAnalogDataChannelRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/ValidateAnalogDataChannel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processValidateAnalogDataChannel_ValidateAnalogDataChannel(_response);
        });
    }

    protected processValidateAnalogDataChannel_ValidateAnalogDataChannel(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = EvolveProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Validate digital data channel sub set parameters
     * @param api_version (optional) 
     */
    validateDigitalDataChannel_ValidateDigitalDataChannel(request: EvolveValidateDigitalDataChannelRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/ValidateDigitalDataChannel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processValidateDigitalDataChannel_ValidateDigitalDataChannel(_response);
        });
    }

    protected processValidateDigitalDataChannel_ValidateDigitalDataChannel(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = EvolveProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Validate Totalizer data channel sub set parameters
     * @param api_version (optional) 
     */
    validateTotalizerDataChannel_ValidateTotalizerDataChannel(request: EvolveValidateTotalizerDataChannelRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/ValidateTotalizerDataChannel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processValidateTotalizerDataChannel_ValidateTotalizerDataChannel(_response);
        });
    }

    protected processValidateTotalizerDataChannel_ValidateTotalizerDataChannel(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = EvolveProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Validate Virtual data channel sub set parameters
     * @param api_version (optional) 
     */
    validateVirtualDataChannel_ValidateVirtualDataChannel(request: EvolveValidateVirtualDataChannelRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/ValidateVirtualDataChannel";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processValidateVirtualDataChannel_ValidateVirtualDataChannel(_response);
        });
    }

    protected processValidateVirtualDataChannel_ValidateVirtualDataChannel(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = EvolveProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Validate Virtual channel formula
     * @param api_version (optional) 
     */
    validateVirtualDataChannelFormula_ValidateVirtualDataChannelFormula(request: EvolveValidateVirtualChannelFormulaRequest2, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/ValidateVirtualDataChannelFormula";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processValidateVirtualDataChannelFormula_ValidateVirtualDataChannelFormula(_response);
        });
    }

    protected processValidateVirtualDataChannelFormula_ValidateVirtualDataChannelFormula(response: AxiosResponse): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    /**
     * Level DataChannel load default values form the template
     * @param api_version (optional) 
     */
    levelDataChannelLoadDefaultValues_LevelDataChannelLoadDefaultValues(request: EvolveLevelDataChannelLoadDefaultValuesRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveLevelDataChannelLoadDefaultValuesResponse> {
        let url_ = this.baseUrl + "/LevelDataChannelLoadDefaultValues";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLevelDataChannelLoadDefaultValues_LevelDataChannelLoadDefaultValues(_response);
        });
    }

    protected processLevelDataChannelLoadDefaultValues_LevelDataChannelLoadDefaultValues(response: AxiosResponse): Promise<EvolveLevelDataChannelLoadDefaultValuesResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveLevelDataChannelLoadDefaultValuesResponse.fromJS(resultData200);
            return Promise.resolve<EvolveLevelDataChannelLoadDefaultValuesResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = EvolveProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveLevelDataChannelLoadDefaultValuesResponse>(<any>null);
    }

    /**
     * Retrieve Level DataChannel General Info
     * @param api_version (optional) 
     */
    retrieveEditLevelDataChannelInfo_RetrieveEditLevelDataChannelInfo(request: EvolveRetrieveEditLevelDataChannelInfoRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveEditLevelDataChannelInfoResponse> {
        let url_ = this.baseUrl + "/RetrieveEditLevelDataChannelInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveEditLevelDataChannelInfo_RetrieveEditLevelDataChannelInfo(_response);
        });
    }

    protected processRetrieveEditLevelDataChannelInfo_RetrieveEditLevelDataChannelInfo(response: AxiosResponse): Promise<EvolveRetrieveEditLevelDataChannelInfoResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveEditLevelDataChannelInfoResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveEditLevelDataChannelInfoResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveEditLevelDataChannelInfoResponse>(<any>null);
    }

    /**
     * Retrieve Level DataChannel General Info
     * @param api_version (optional) 
     */
    retrieveLevelDataChannelGeneralInfo_RetrieveLevelDataChannelGeneralInfo(request: EvolveRetrieveEditLevelDataChannelInfoRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveEditLevelDataChannelInfoResponse> {
        let url_ = this.baseUrl + "/RetrieveLevelDataChannelGeneralInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveLevelDataChannelGeneralInfo_RetrieveLevelDataChannelGeneralInfo(_response);
        });
    }

    protected processRetrieveLevelDataChannelGeneralInfo_RetrieveLevelDataChannelGeneralInfo(response: AxiosResponse): Promise<EvolveRetrieveEditLevelDataChannelInfoResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveEditLevelDataChannelInfoResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveEditLevelDataChannelInfoResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveEditLevelDataChannelInfoResponse>(<any>null);
    }

    /**
     * Save Level DataChannel General Info
     * @param api_version (optional) 
     */
    saveEditLevelDataChannelInfo_SaveEditLevelDataChannelInfo(request: EvolveSaveEditLevelDataChannelInfoRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveSaveEditLevelDataChannelInfoResponse> {
        let url_ = this.baseUrl + "/SaveEditLevelDataChannelInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSaveEditLevelDataChannelInfo_SaveEditLevelDataChannelInfo(_response);
        });
    }

    protected processSaveEditLevelDataChannelInfo_SaveEditLevelDataChannelInfo(response: AxiosResponse): Promise<EvolveSaveEditLevelDataChannelInfoResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveSaveEditLevelDataChannelInfoResponse.fromJS(resultData200);
            return Promise.resolve<EvolveSaveEditLevelDataChannelInfoResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = EvolveProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveSaveEditLevelDataChannelInfoResponse>(<any>null);
    }

    /**
     * Save Level DataChannel calibration Info
     * @param api_version (optional) 
     */
    saveLevelDataChannelCalibrationInfo_SaveLevelDataChannelCalibrationInfo(request: EvolveSaveLevelDataChannelCalibrationInfoRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveSaveLevelDataChannelCalibrationInfoResponse> {
        let url_ = this.baseUrl + "/SaveLevelDataChannelCalibrationInfo";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSaveLevelDataChannelCalibrationInfo_SaveLevelDataChannelCalibrationInfo(_response);
        });
    }

    protected processSaveLevelDataChannelCalibrationInfo_SaveLevelDataChannelCalibrationInfo(response: AxiosResponse): Promise<EvolveSaveLevelDataChannelCalibrationInfoResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveSaveLevelDataChannelCalibrationInfoResponse.fromJS(resultData200);
            return Promise.resolve<EvolveSaveLevelDataChannelCalibrationInfoResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = EvolveProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveSaveLevelDataChannelCalibrationInfoResponse>(<any>null);
    }
}

export interface IUserDetailsService {
    /**
     * Note: This endpoint is should be retained although it is not used by the Transcend frontend
     * @param api_version (optional) 
     */
    userDetails_GetUserContextInfo(api_version?: string | null | undefined): Promise<void>;
    /**
     * Checks for existence of distributed cache for the user attempting to use the site.
     * @param api_version (optional) 
     */
    userDetails_Probe(req: EvolveProbeRequest, api_version?: string | null | undefined): Promise<void>;
    /**
     * Removes distributed cache value when user logs out and clears the session.
     * @param api_version (optional) 
     */
    userDetails_Logout(req: EvolveLogoutRequest, api_version?: string | null | undefined): Promise<void>;
}

export class UserDetailsService implements IUserDetailsService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    /**
     * Note: This endpoint is should be retained although it is not used by the Transcend frontend
     * @param api_version (optional) 
     */
    userDetails_GetUserContextInfo(api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/UserDetails/usercontextinfo";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUserDetails_GetUserContextInfo(_response);
        });
    }

    protected processUserDetails_GetUserContextInfo(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Checks for existence of distributed cache for the user attempting to use the site.
     * @param api_version (optional) 
     */
    userDetails_Probe(req: EvolveProbeRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/UserDetails/probe";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUserDetails_Probe(_response);
        });
    }

    protected processUserDetails_Probe(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }

    /**
     * Removes distributed cache value when user logs out and clears the session.
     * @param api_version (optional) 
     */
    userDetails_Logout(req: EvolveLogoutRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/UserDetails/logout";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUserDetails_Logout(_response);
        });
    }

    protected processUserDetails_Logout(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(<any>null);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(<any>null);
    }
}

export interface IUnitTypeService {
    /**
     * Gets all the unit types from the unit types table.
     * @param api_version (optional) 
     */
    getUnitTypes_GetUnitTypes(req: EvolveGetUnitTypesRequest, api_version?: string | null | undefined): Promise<EvolveGetUnitTypesResponse>;
}

export class UnitTypeService implements IUnitTypeService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    /**
     * Gets all the unit types from the unit types table.
     * @param api_version (optional) 
     */
    getUnitTypes_GetUnitTypes(req: EvolveGetUnitTypesRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveGetUnitTypesResponse> {
        let url_ = this.baseUrl + "/GetUnitTypes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetUnitTypes_GetUnitTypes(_response);
        });
    }

    protected processGetUnitTypes_GetUnitTypes(response: AxiosResponse): Promise<EvolveGetUnitTypesResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveGetUnitTypesResponse.fromJS(resultData200);
            return Promise.resolve<EvolveGetUnitTypesResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveGetUnitTypesResponse>(<any>null);
    }
}

export interface IInventoryStatesService {
    /**
     * Gets inventory States available for a given domain and user.
     * @param api_version (optional) 
     */
    getAvailableInventoryStatesWithDomainDefault_GetAvailableInventoryStatesWithDomainDefault(request: EvolveGetAvailableInventoryStatesWithDomainDefaultRequest, api_version?: string | null | undefined): Promise<EvolveGetAvailableInventoryStatesWithDomainDefaultResponse>;
    /**
     * Gets inventory States Service for a given domain and user.
     * @param api_version (optional) 
     */
    getInventoryStatesByDomainIdAndUserId_GetInventoryStatesByDomainIdAndUserId(req: EvolveGetInventoryStatesByDomainIdAndUserIdRequest, api_version?: string | null | undefined): Promise<EvolveGetInventoryStatesByDomainIdAndUserIdResponse>;
}

export class InventoryStatesService implements IInventoryStatesService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    /**
     * Gets inventory States available for a given domain and user.
     * @param api_version (optional) 
     */
    getAvailableInventoryStatesWithDomainDefault_GetAvailableInventoryStatesWithDomainDefault(request: EvolveGetAvailableInventoryStatesWithDomainDefaultRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveGetAvailableInventoryStatesWithDomainDefaultResponse> {
        let url_ = this.baseUrl + "/GetAvailableInventoryStatesWithDomainDefault";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAvailableInventoryStatesWithDomainDefault_GetAvailableInventoryStatesWithDomainDefault(_response);
        });
    }

    protected processGetAvailableInventoryStatesWithDomainDefault_GetAvailableInventoryStatesWithDomainDefault(response: AxiosResponse): Promise<EvolveGetAvailableInventoryStatesWithDomainDefaultResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveGetAvailableInventoryStatesWithDomainDefaultResponse.fromJS(resultData200);
            return Promise.resolve<EvolveGetAvailableInventoryStatesWithDomainDefaultResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveGetAvailableInventoryStatesWithDomainDefaultResponse>(<any>null);
    }

    /**
     * Gets inventory States Service for a given domain and user.
     * @param api_version (optional) 
     */
    getInventoryStatesByDomainIdAndUserId_GetInventoryStatesByDomainIdAndUserId(req: EvolveGetInventoryStatesByDomainIdAndUserIdRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveGetInventoryStatesByDomainIdAndUserIdResponse> {
        let url_ = this.baseUrl + "/GetInventoryStatesByDomainIdAndUserId";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetInventoryStatesByDomainIdAndUserId_GetInventoryStatesByDomainIdAndUserId(_response);
        });
    }

    protected processGetInventoryStatesByDomainIdAndUserId_GetInventoryStatesByDomainIdAndUserId(response: AxiosResponse): Promise<EvolveGetInventoryStatesByDomainIdAndUserIdResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveGetInventoryStatesByDomainIdAndUserIdResponse.fromJS(resultData200);
            return Promise.resolve<EvolveGetInventoryStatesByDomainIdAndUserIdResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveGetInventoryStatesByDomainIdAndUserIdResponse>(<any>null);
    }
}

export interface IDashboardService {
    /**
     * Gets current Active Inventory Level Events
    and the domain default event status
     * @param api_version (optional) 
     */
    getActiveInventoryLevelEventsByDomainIdAndProductId_GetActiveInventoryLevelEventTotalsByDomainIdAndProductId(request: EvolveGetActiveInventoryLevelEventsByDomainIdAndProductIdRequest, api_version?: string | null | undefined): Promise<EvolveGetActiveInventoryLevelEventsByDomainIdAndProductIdResponse>;
    /**
     * Gets current Active Inventory Level Events
    and the domain default event status
     * @param api_version (optional) 
     */
    getActiveInventoryLevelEvents_GetActiveInventoryLevelEvents(request: EvolveGetActiveInventoryLevelEventsRequest, api_version?: string | null | undefined): Promise<EvolveGetActiveInventoryLevelEventsResponse>;
    /**
     * Gets current Active Inventory Level Events.
     * @param api_version (optional) 
     */
    getActiveNonInventoryEvents_GetActiveNonInventoryEvents(request: EvolveGetActiveNonInventoryEventsRequest, api_version?: string | null | undefined): Promise<FileResponse>;
    /**
     * Gets all the unit types from the unit types table.
     * @param api_version (optional) 
     */
    getAssetTypes_GetAssetTypes(req: EvolveGetAssetTypesRequest, api_version?: string | null | undefined): Promise<FileResponse>;
    /**
     * Gets the delivery performance by domain id, year, and month.
     * @param api_version (optional) 
     */
    getDeliveryPerformanceByDomainIdAndProductIds_GetDeliveryPerformanceByDomainIdAndProductIds(request: EvolveGetDeliveryPerformanceByDomainIdAndProductIdsRequest, api_version?: string | null | undefined): Promise<EvolveGetDeliveryPerformanceByDomainIdAndProductIdsResponse>;
    /**
     * Gets Historical Active Inventory Level Events
     * @param api_version (optional) 
     */
    getHistoricalActiveEvents_GetHistoricalActiveEvents(req: EvolveGetHistoricalActiveEventsRequest, api_version?: string | null | undefined): Promise<EvolveGetHistoricalActiveEventsResponse>;
    /**
     * Gets Historical Active Inventory Level Events
     * @param api_version (optional) 
     */
    getHistoricalActiveInventoryLevelEvents_GetHistoricalActiveInventoryLevelEvents(req: EvolveGetHistoricalActiveInventoryLevelEventsRequest, api_version?: string | null | undefined): Promise<FileResponse>;
    /**
     * Gets Historical Active Inventory Level Events
     * @param api_version (optional) 
     */
    getHistoricalActiveNonInventoryEvents_GetHistoricalActiveEvents(req: EvolveGetHistoricalActiveNonInventoryEventsRequest, api_version?: string | null | undefined): Promise<FileResponse>;
    /**
     * Gets all the unit types from the unit types table.
     * @param api_version (optional) 
     */
    getProductsByDomainId_GetProductsByDomainId(req: EvolveGetProductsByDomainIdRequest, api_version?: string | null | undefined): Promise<EvolveGetProductsByDomainIdResponse>;
}

export class DashboardService implements IDashboardService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    /**
     * Gets current Active Inventory Level Events
    and the domain default event status
     * @param api_version (optional) 
     */
    getActiveInventoryLevelEventsByDomainIdAndProductId_GetActiveInventoryLevelEventTotalsByDomainIdAndProductId(request: EvolveGetActiveInventoryLevelEventsByDomainIdAndProductIdRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveGetActiveInventoryLevelEventsByDomainIdAndProductIdResponse> {
        let url_ = this.baseUrl + "/GetActiveInventoryLevelEventsByDomainIdAndProductId";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetActiveInventoryLevelEventsByDomainIdAndProductId_GetActiveInventoryLevelEventTotalsByDomainIdAndProductId(_response);
        });
    }

    protected processGetActiveInventoryLevelEventsByDomainIdAndProductId_GetActiveInventoryLevelEventTotalsByDomainIdAndProductId(response: AxiosResponse): Promise<EvolveGetActiveInventoryLevelEventsByDomainIdAndProductIdResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveGetActiveInventoryLevelEventsByDomainIdAndProductIdResponse.fromJS(resultData200);
            return Promise.resolve<EvolveGetActiveInventoryLevelEventsByDomainIdAndProductIdResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveGetActiveInventoryLevelEventsByDomainIdAndProductIdResponse>(<any>null);
    }

    /**
     * Gets current Active Inventory Level Events
    and the domain default event status
     * @param api_version (optional) 
     */
    getActiveInventoryLevelEvents_GetActiveInventoryLevelEvents(request: EvolveGetActiveInventoryLevelEventsRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveGetActiveInventoryLevelEventsResponse> {
        let url_ = this.baseUrl + "/GetActiveInventoryLevelEvents";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetActiveInventoryLevelEvents_GetActiveInventoryLevelEvents(_response);
        });
    }

    protected processGetActiveInventoryLevelEvents_GetActiveInventoryLevelEvents(response: AxiosResponse): Promise<EvolveGetActiveInventoryLevelEventsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveGetActiveInventoryLevelEventsResponse.fromJS(resultData200);
            return Promise.resolve<EvolveGetActiveInventoryLevelEventsResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveGetActiveInventoryLevelEventsResponse>(<any>null);
    }

    /**
     * Gets current Active Inventory Level Events.
     * @param api_version (optional) 
     */
    getActiveNonInventoryEvents_GetActiveNonInventoryEvents(request: EvolveGetActiveNonInventoryEventsRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/GetActiveNonInventoryEvents";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetActiveNonInventoryEvents_GetActiveNonInventoryEvents(_response);
        });
    }

    protected processGetActiveNonInventoryEvents_GetActiveNonInventoryEvents(response: AxiosResponse): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    /**
     * Gets all the unit types from the unit types table.
     * @param api_version (optional) 
     */
    getAssetTypes_GetAssetTypes(req: EvolveGetAssetTypesRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/GetAssetTypes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAssetTypes_GetAssetTypes(_response);
        });
    }

    protected processGetAssetTypes_GetAssetTypes(response: AxiosResponse): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    /**
     * Gets the delivery performance by domain id, year, and month.
     * @param api_version (optional) 
     */
    getDeliveryPerformanceByDomainIdAndProductIds_GetDeliveryPerformanceByDomainIdAndProductIds(request: EvolveGetDeliveryPerformanceByDomainIdAndProductIdsRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveGetDeliveryPerformanceByDomainIdAndProductIdsResponse> {
        let url_ = this.baseUrl + "/GetDeliveryPerformanceByDomainIdAndProductIds";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetDeliveryPerformanceByDomainIdAndProductIds_GetDeliveryPerformanceByDomainIdAndProductIds(_response);
        });
    }

    protected processGetDeliveryPerformanceByDomainIdAndProductIds_GetDeliveryPerformanceByDomainIdAndProductIds(response: AxiosResponse): Promise<EvolveGetDeliveryPerformanceByDomainIdAndProductIdsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveGetDeliveryPerformanceByDomainIdAndProductIdsResponse.fromJS(resultData200);
            return Promise.resolve<EvolveGetDeliveryPerformanceByDomainIdAndProductIdsResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveGetDeliveryPerformanceByDomainIdAndProductIdsResponse>(<any>null);
    }

    /**
     * Gets Historical Active Inventory Level Events
     * @param api_version (optional) 
     */
    getHistoricalActiveEvents_GetHistoricalActiveEvents(req: EvolveGetHistoricalActiveEventsRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveGetHistoricalActiveEventsResponse> {
        let url_ = this.baseUrl + "/GetHistoricalActiveEvents";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetHistoricalActiveEvents_GetHistoricalActiveEvents(_response);
        });
    }

    protected processGetHistoricalActiveEvents_GetHistoricalActiveEvents(response: AxiosResponse): Promise<EvolveGetHistoricalActiveEventsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveGetHistoricalActiveEventsResponse.fromJS(resultData200);
            return Promise.resolve<EvolveGetHistoricalActiveEventsResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveGetHistoricalActiveEventsResponse>(<any>null);
    }

    /**
     * Gets Historical Active Inventory Level Events
     * @param api_version (optional) 
     */
    getHistoricalActiveInventoryLevelEvents_GetHistoricalActiveInventoryLevelEvents(req: EvolveGetHistoricalActiveInventoryLevelEventsRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/GetHistoricalActiveInventoryLevelEvents";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetHistoricalActiveInventoryLevelEvents_GetHistoricalActiveInventoryLevelEvents(_response);
        });
    }

    protected processGetHistoricalActiveInventoryLevelEvents_GetHistoricalActiveInventoryLevelEvents(response: AxiosResponse): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    /**
     * Gets Historical Active Inventory Level Events
     * @param api_version (optional) 
     */
    getHistoricalActiveNonInventoryEvents_GetHistoricalActiveEvents(req: EvolveGetHistoricalActiveNonInventoryEventsRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/GetHistoricalActiveNonInventoryEvents";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetHistoricalActiveNonInventoryEvents_GetHistoricalActiveEvents(_response);
        });
    }

    protected processGetHistoricalActiveNonInventoryEvents_GetHistoricalActiveEvents(response: AxiosResponse): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data]), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(<any>null);
    }

    /**
     * Gets all the unit types from the unit types table.
     * @param api_version (optional) 
     */
    getProductsByDomainId_GetProductsByDomainId(req: EvolveGetProductsByDomainIdRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveGetProductsByDomainIdResponse> {
        let url_ = this.baseUrl + "/GetProductsByDomainId";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(req);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetProductsByDomainId_GetProductsByDomainId(_response);
        });
    }

    protected processGetProductsByDomainId_GetProductsByDomainId(response: AxiosResponse): Promise<EvolveGetProductsByDomainIdResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveGetProductsByDomainIdResponse.fromJS(resultData200);
            return Promise.resolve<EvolveGetProductsByDomainIdResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveGetProductsByDomainIdResponse>(<any>null);
    }
}

export interface IMessageTemplateService {
    messageTemplate_GetAutoComplete(domainId?: string | undefined, searchExpression?: string | null | undefined, api_version?: string | null | undefined): Promise<DropDownListDtoOfLong[]>;
    messageTemplate_GetList(domainId?: string | undefined, api_version?: string | null | undefined): Promise<MessageTemplate_SummaryDto[]>;
    messageTemplate_Save(messageTemplate: MessageTemplateDto, api_version?: string | null | undefined): Promise<MessageTemplateDto>;
    messageTemplate_Delete(messageTemplateIds?: number[] | null | undefined, api_version?: string | null | undefined): Promise<boolean>;
    messageTemplate_GetMessageTemplateFields(domainId?: string | undefined, api_version?: string | null | undefined): Promise<DropDownListDtoOfString[]>;
    messageTemplate_Get(templateId: number, api_version?: string | null | undefined): Promise<MessageTemplateDto>;
}

export class MessageTemplateService implements IMessageTemplateService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    messageTemplate_GetAutoComplete(domainId?: string | undefined, searchExpression?: string | null | undefined, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<DropDownListDtoOfLong[]> {
        let url_ = this.baseUrl + "/MessageTemplate/autoComplete?";
        if (domainId === null)
            throw new Error("The parameter 'domainId' cannot be null.");
        else if (domainId !== undefined)
            url_ += "domainId=" + encodeURIComponent("" + domainId) + "&";
        if (searchExpression !== undefined && searchExpression !== null)
            url_ += "searchExpression=" + encodeURIComponent("" + searchExpression) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMessageTemplate_GetAutoComplete(_response);
        });
    }

    protected processMessageTemplate_GetAutoComplete(response: AxiosResponse): Promise<DropDownListDtoOfLong[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DropDownListDtoOfLong.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<DropDownListDtoOfLong[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DropDownListDtoOfLong[]>(<any>null);
    }

    messageTemplate_GetList(domainId?: string | undefined, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<MessageTemplate_SummaryDto[]> {
        let url_ = this.baseUrl + "/MessageTemplate?";
        if (domainId === null)
            throw new Error("The parameter 'domainId' cannot be null.");
        else if (domainId !== undefined)
            url_ += "domainId=" + encodeURIComponent("" + domainId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMessageTemplate_GetList(_response);
        });
    }

    protected processMessageTemplate_GetList(response: AxiosResponse): Promise<MessageTemplate_SummaryDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MessageTemplate_SummaryDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<MessageTemplate_SummaryDto[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MessageTemplate_SummaryDto[]>(<any>null);
    }

    messageTemplate_Save(messageTemplate: MessageTemplateDto, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<MessageTemplateDto> {
        let url_ = this.baseUrl + "/MessageTemplate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(messageTemplate);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMessageTemplate_Save(_response);
        });
    }

    protected processMessageTemplate_Save(response: AxiosResponse): Promise<MessageTemplateDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MessageTemplateDto.fromJS(resultData200);
            return Promise.resolve<MessageTemplateDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MessageTemplateDto>(<any>null);
    }

    messageTemplate_Delete(messageTemplateIds?: number[] | null | undefined, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/MessageTemplate?";
        if (messageTemplateIds !== undefined && messageTemplateIds !== null)
            messageTemplateIds && messageTemplateIds.forEach(item => { url_ += "messageTemplateIds=" + encodeURIComponent("" + item) + "&"; });
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMessageTemplate_Delete(_response);
        });
    }

    protected processMessageTemplate_Delete(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    messageTemplate_GetMessageTemplateFields(domainId?: string | undefined, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<DropDownListDtoOfString[]> {
        let url_ = this.baseUrl + "/MessageTemplate/fields?";
        if (domainId === null)
            throw new Error("The parameter 'domainId' cannot be null.");
        else if (domainId !== undefined)
            url_ += "domainId=" + encodeURIComponent("" + domainId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMessageTemplate_GetMessageTemplateFields(_response);
        });
    }

    protected processMessageTemplate_GetMessageTemplateFields(response: AxiosResponse): Promise<DropDownListDtoOfString[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DropDownListDtoOfString.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<DropDownListDtoOfString[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DropDownListDtoOfString[]>(<any>null);
    }

    messageTemplate_Get(templateId: number, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<MessageTemplateDto> {
        let url_ = this.baseUrl + "/MessageTemplate/{templateId}";
        if (templateId === undefined || templateId === null)
            throw new Error("The parameter 'templateId' must be defined.");
        url_ = url_.replace("{templateId}", encodeURIComponent("" + templateId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMessageTemplate_Get(_response);
        });
    }

    protected processMessageTemplate_Get(response: AxiosResponse): Promise<MessageTemplateDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = MessageTemplateDto.fromJS(resultData200);
            return Promise.resolve<MessageTemplateDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<MessageTemplateDto>(<any>null);
    }
}

export interface IInstallationHistoryService {
    installationHistory_GetDeviceInstallationHistoryList(fromStartDate?: Date | null | undefined, toStartDate?: Date | null | undefined, assetDescription?: string | null | undefined, city?: string | null | undefined, customerName?: string | null | undefined, deviceId?: string | null | undefined, domainName?: string | null | undefined, installState?: string | null | undefined, productName?: string | null | undefined, technicianName?: string | null | undefined, pageNumber?: number | undefined, pageSize?: number | undefined, api_version?: string | null | undefined): Promise<GetInstallationHistoryListResponseDto>;
}

export class InstallationHistoryService implements IInstallationHistoryService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    installationHistory_GetDeviceInstallationHistoryList(fromStartDate?: Date | null | undefined, toStartDate?: Date | null | undefined, assetDescription?: string | null | undefined, city?: string | null | undefined, customerName?: string | null | undefined, deviceId?: string | null | undefined, domainName?: string | null | undefined, installState?: string | null | undefined, productName?: string | null | undefined, technicianName?: string | null | undefined, pageNumber?: number | undefined, pageSize?: number | undefined, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<GetInstallationHistoryListResponseDto> {
        let url_ = this.baseUrl + "/InstallationHistory?";
        if (fromStartDate !== undefined && fromStartDate !== null)
            url_ += "FromStartDate=" + encodeURIComponent(fromStartDate ? "" + fromStartDate.toJSON() : "") + "&";
        if (toStartDate !== undefined && toStartDate !== null)
            url_ += "ToStartDate=" + encodeURIComponent(toStartDate ? "" + toStartDate.toJSON() : "") + "&";
        if (assetDescription !== undefined && assetDescription !== null)
            url_ += "AssetDescription=" + encodeURIComponent("" + assetDescription) + "&";
        if (city !== undefined && city !== null)
            url_ += "City=" + encodeURIComponent("" + city) + "&";
        if (customerName !== undefined && customerName !== null)
            url_ += "CustomerName=" + encodeURIComponent("" + customerName) + "&";
        if (deviceId !== undefined && deviceId !== null)
            url_ += "DeviceId=" + encodeURIComponent("" + deviceId) + "&";
        if (domainName !== undefined && domainName !== null)
            url_ += "DomainName=" + encodeURIComponent("" + domainName) + "&";
        if (installState !== undefined && installState !== null)
            url_ += "InstallState=" + encodeURIComponent("" + installState) + "&";
        if (productName !== undefined && productName !== null)
            url_ += "ProductName=" + encodeURIComponent("" + productName) + "&";
        if (technicianName !== undefined && technicianName !== null)
            url_ += "TechnicianName=" + encodeURIComponent("" + technicianName) + "&";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processInstallationHistory_GetDeviceInstallationHistoryList(_response);
        });
    }

    protected processInstallationHistory_GetDeviceInstallationHistoryList(response: AxiosResponse): Promise<GetInstallationHistoryListResponseDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GetInstallationHistoryListResponseDto.fromJS(resultData200);
            return Promise.resolve<GetInstallationHistoryListResponseDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetInstallationHistoryListResponseDto>(<any>null);
    }
}

export interface IEventRuleGroupService {
    /**
     * SearchForEventRuleGroups
     * @param filterText (optional) Filter result based on Event Rule Group description text
     * @param api_version (optional) 
     */
    eventRuleGroup_RetrieveEventRuleListForDomain(filterText?: string | null | undefined, api_version?: string | null | undefined): Promise<EventRuleGroupListItemDto[]>;
    /**
     * template
                GetEventRulesTemplate
     * @param api_version (optional) 
     */
    eventRuleGroup_RetrieveEventRuleGroups(dataChannelId: string, eventRuleGroupId: number, api_version?: string | null | undefined): Promise<DataChannelEventRulesDTO>;
}

export class EventRuleGroupService implements IEventRuleGroupService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    /**
     * SearchForEventRuleGroups
     * @param filterText (optional) Filter result based on Event Rule Group description text
     * @param api_version (optional) 
     */
    eventRuleGroup_RetrieveEventRuleListForDomain(filterText?: string | null | undefined, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EventRuleGroupListItemDto[]> {
        let url_ = this.baseUrl + "/EventRuleGroup/list?";
        if (filterText !== undefined && filterText !== null)
            url_ += "contains=" + encodeURIComponent("" + filterText) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processEventRuleGroup_RetrieveEventRuleListForDomain(_response);
        });
    }

    protected processEventRuleGroup_RetrieveEventRuleListForDomain(response: AxiosResponse): Promise<EventRuleGroupListItemDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(EventRuleGroupListItemDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<EventRuleGroupListItemDto[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EventRuleGroupListItemDto[]>(<any>null);
    }

    /**
     * template
                GetEventRulesTemplate
     * @param api_version (optional) 
     */
    eventRuleGroup_RetrieveEventRuleGroups(dataChannelId: string, eventRuleGroupId: number, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<DataChannelEventRulesDTO> {
        let url_ = this.baseUrl + "/EventRuleGroup/{eventRuleGroupId}/datachannel/{dataChannelId}";
        if (dataChannelId === undefined || dataChannelId === null)
            throw new Error("The parameter 'dataChannelId' must be defined.");
        url_ = url_.replace("{dataChannelId}", encodeURIComponent("" + dataChannelId));
        if (eventRuleGroupId === undefined || eventRuleGroupId === null)
            throw new Error("The parameter 'eventRuleGroupId' must be defined.");
        url_ = url_.replace("{eventRuleGroupId}", encodeURIComponent("" + eventRuleGroupId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processEventRuleGroup_RetrieveEventRuleGroups(_response);
        });
    }

    protected processEventRuleGroup_RetrieveEventRuleGroups(response: AxiosResponse): Promise<DataChannelEventRulesDTO> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DataChannelEventRulesDTO.fromJS(resultData200);
            return Promise.resolve<DataChannelEventRulesDTO>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DataChannelEventRulesDTO>(<any>null);
    }
}

export interface IDomainAssetGroupService {
    domainAssetGroup_GetAccessibleDomainsAndRole(effecitveDomainId: string, api_version?: string | null | undefined): Promise<DomainAssetGroupsDTO[]>;
}

export class DomainAssetGroupService implements IDomainAssetGroupService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    domainAssetGroup_GetAccessibleDomainsAndRole(effecitveDomainId: string, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<DomainAssetGroupsDTO[]> {
        let url_ = this.baseUrl + "/DomainAssetGroup/{effecitveDomainId}/AccessibleDomainsAndAssetGroup";
        if (effecitveDomainId === undefined || effecitveDomainId === null)
            throw new Error("The parameter 'effecitveDomainId' must be defined.");
        url_ = url_.replace("{effecitveDomainId}", encodeURIComponent("" + effecitveDomainId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDomainAssetGroup_GetAccessibleDomainsAndRole(_response);
        });
    }

    protected processDomainAssetGroup_GetAccessibleDomainsAndRole(response: AxiosResponse): Promise<DomainAssetGroupsDTO[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DomainAssetGroupsDTO.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<DomainAssetGroupsDTO[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DomainAssetGroupsDTO[]>(<any>null);
    }
}

export interface IDomainService {
    domain_FindPublishedDomains(api_version?: string | null | undefined): Promise<DomainInfoDto[]>;
    /**
     * Retrieve domain records for the parent domain
     * @param domainId Parent domain Id
     * @param api_version (optional) 
     */
    domain_RetrieveDomainInfoRecordsByParentDomainId(domainId: string, api_version?: string | null | undefined): Promise<DomainInfoReportDto[]>;
    /**
     * Retrieve Integration Domain By User Effective Domain
     * @param api_version (optional) 
     */
    retrieveIntegrationDomainByUserEffectiveDomain_RetrieveIntegrationDomainByUserEffectiveDomain(api_version?: string | null | undefined): Promise<EvolveRetrieveIntegrationDomainByUserEffectiveDomainResponse>;
}

export class DomainService implements IDomainService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    domain_FindPublishedDomains(api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<DomainInfoDto[]> {
        let url_ = this.baseUrl + "/Domain/FindPublishedDomains";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDomain_FindPublishedDomains(_response);
        });
    }

    protected processDomain_FindPublishedDomains(response: AxiosResponse): Promise<DomainInfoDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DomainInfoDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<DomainInfoDto[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DomainInfoDto[]>(<any>null);
    }

    /**
     * Retrieve domain records for the parent domain
     * @param domainId Parent domain Id
     * @param api_version (optional) 
     */
    domain_RetrieveDomainInfoRecordsByParentDomainId(domainId: string, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<DomainInfoReportDto[]> {
        let url_ = this.baseUrl + "/Domain/{domainId}/domains";
        if (domainId === undefined || domainId === null)
            throw new Error("The parameter 'domainId' must be defined.");
        url_ = url_.replace("{domainId}", encodeURIComponent("" + domainId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDomain_RetrieveDomainInfoRecordsByParentDomainId(_response);
        });
    }

    protected processDomain_RetrieveDomainInfoRecordsByParentDomainId(response: AxiosResponse): Promise<DomainInfoReportDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DomainInfoReportDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<DomainInfoReportDto[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DomainInfoReportDto[]>(<any>null);
    }

    /**
     * Retrieve Integration Domain By User Effective Domain
     * @param api_version (optional) 
     */
    retrieveIntegrationDomainByUserEffectiveDomain_RetrieveIntegrationDomainByUserEffectiveDomain(api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveIntegrationDomainByUserEffectiveDomainResponse> {
        let url_ = this.baseUrl + "/RetrieveIntegrationDomainByUserEffectiveDomain";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveIntegrationDomainByUserEffectiveDomain_RetrieveIntegrationDomainByUserEffectiveDomain(_response);
        });
    }

    protected processRetrieveIntegrationDomainByUserEffectiveDomain_RetrieveIntegrationDomainByUserEffectiveDomain(response: AxiosResponse): Promise<EvolveRetrieveIntegrationDomainByUserEffectiveDomainResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveIntegrationDomainByUserEffectiveDomainResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveIntegrationDomainByUserEffectiveDomainResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveIntegrationDomainByUserEffectiveDomainResponse>(<any>null);
    }
}

export interface IDomainNotesService {
    domainNotes_GetByDomainId(domainId: string, api_version?: string | null | undefined): Promise<DomainNotesDto>;
    domainNotes_UpdateDomainNotes(updateDomainNotesRequest: UpdateDomainNotesRequest, api_version?: string | null | undefined): Promise<UpdateDomainNotesResponse>;
}

export class DomainNotesService implements IDomainNotesService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    domainNotes_GetByDomainId(domainId: string, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<DomainNotesDto> {
        let url_ = this.baseUrl + "/DomainNotes/{domainId}";
        if (domainId === undefined || domainId === null)
            throw new Error("The parameter 'domainId' must be defined.");
        url_ = url_.replace("{domainId}", encodeURIComponent("" + domainId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDomainNotes_GetByDomainId(_response);
        });
    }

    protected processDomainNotes_GetByDomainId(response: AxiosResponse): Promise<DomainNotesDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DomainNotesDto.fromJS(resultData200);
            return Promise.resolve<DomainNotesDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DomainNotesDto>(<any>null);
    }

    domainNotes_UpdateDomainNotes(updateDomainNotesRequest: UpdateDomainNotesRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<UpdateDomainNotesResponse> {
        let url_ = this.baseUrl + "/DomainNotes";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(updateDomainNotesRequest);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDomainNotes_UpdateDomainNotes(_response);
        });
    }

    protected processDomainNotes_UpdateDomainNotes(response: AxiosResponse): Promise<UpdateDomainNotesResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UpdateDomainNotesResponse.fromJS(resultData200);
            return Promise.resolve<UpdateDomainNotesResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UpdateDomainNotesResponse>(<any>null);
    }
}

export interface IDomainRoleService {
    domainRole_GetAccessibleDomainsAndRole(effectiveDomainId: string, api_version?: string | null | undefined): Promise<DomainUserRolesDTO[]>;
}

export class DomainRoleService implements IDomainRoleService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    domainRole_GetAccessibleDomainsAndRole(effectiveDomainId: string, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<DomainUserRolesDTO[]> {
        let url_ = this.baseUrl + "/DomainRole/{effectiveDomainId}/AccessibleDomainsAndRoles";
        if (effectiveDomainId === undefined || effectiveDomainId === null)
            throw new Error("The parameter 'effectiveDomainId' must be defined.");
        url_ = url_.replace("{effectiveDomainId}", encodeURIComponent("" + effectiveDomainId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDomainRole_GetAccessibleDomainsAndRole(_response);
        });
    }

    protected processDomainRole_GetAccessibleDomainsAndRole(response: AxiosResponse): Promise<DomainUserRolesDTO[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DomainUserRolesDTO.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<DomainUserRolesDTO[]>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            let result401: any = null;
            let resultData401  = _responseText;
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("A server side error occurred.", status, _responseText, _headers, result401);

        } else if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DomainUserRolesDTO[]>(<any>null);
    }
}

export interface IDeliveryScheduleService {
    /**
     * Delete a scheduled delivery
     * @param deliveryScheduledId Delivery identifier
     * @param api_version (optional) 
     * @return true = successful
     */
    deliverySchedule_DeleteScheduledDelivery(deliveryScheduledId: string, api_version?: string | null | undefined): Promise<boolean>;
    /**
     * Save a scheduled delivery
     * @param scheduledDelivery Delivery parameters
     * @param api_version (optional) 
     * @return true = successful
     */
    deliverySchedule_SaveScheduledDelivery(scheduledDelivery: ScheduledDeliveryDto, api_version?: string | null | undefined): Promise<boolean>;
    /**
     * Retrieve scheduled deliveries
     * @param dataChannelId System unique identifier for the data channel
     * @param beginDate (optional) Search begin date
     * @param endDate (optional) Search end date
     * @param api_version (optional) 
     */
    deliverySchedule_RetrieveScheduledDeliveries(dataChannelId: string, beginDate?: Date | undefined, endDate?: Date | undefined, api_version?: string | null | undefined): Promise<ScheduledDeliveryDto[]>;
}

export class DeliveryScheduleService implements IDeliveryScheduleService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    /**
     * Delete a scheduled delivery
     * @param deliveryScheduledId Delivery identifier
     * @param api_version (optional) 
     * @return true = successful
     */
    deliverySchedule_DeleteScheduledDelivery(deliveryScheduledId: string, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/DeliverySchedule/{deliveryScheduledId}";
        if (deliveryScheduledId === undefined || deliveryScheduledId === null)
            throw new Error("The parameter 'deliveryScheduledId' must be defined.");
        url_ = url_.replace("{deliveryScheduledId}", encodeURIComponent("" + deliveryScheduledId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeliverySchedule_DeleteScheduledDelivery(_response);
        });
    }

    protected processDeliverySchedule_DeleteScheduledDelivery(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    /**
     * Save a scheduled delivery
     * @param scheduledDelivery Delivery parameters
     * @param api_version (optional) 
     * @return true = successful
     */
    deliverySchedule_SaveScheduledDelivery(scheduledDelivery: ScheduledDeliveryDto, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/DeliverySchedule";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(scheduledDelivery);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "PUT",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeliverySchedule_SaveScheduledDelivery(_response);
        });
    }

    protected processDeliverySchedule_SaveScheduledDelivery(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    /**
     * Retrieve scheduled deliveries
     * @param dataChannelId System unique identifier for the data channel
     * @param beginDate (optional) Search begin date
     * @param endDate (optional) Search end date
     * @param api_version (optional) 
     */
    deliverySchedule_RetrieveScheduledDeliveries(dataChannelId: string, beginDate?: Date | undefined, endDate?: Date | undefined, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<ScheduledDeliveryDto[]> {
        let url_ = this.baseUrl + "/DeliverySchedule/DataChannel/{dataChannelId}?";
        if (dataChannelId === undefined || dataChannelId === null)
            throw new Error("The parameter 'dataChannelId' must be defined.");
        url_ = url_.replace("{dataChannelId}", encodeURIComponent("" + dataChannelId));
        if (beginDate === null)
            throw new Error("The parameter 'beginDate' cannot be null.");
        else if (beginDate !== undefined)
            url_ += "begin_date=" + encodeURIComponent(beginDate ? "" + beginDate.toJSON() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "end_date=" + encodeURIComponent(endDate ? "" + endDate.toJSON() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeliverySchedule_RetrieveScheduledDeliveries(_response);
        });
    }

    protected processDeliverySchedule_RetrieveScheduledDeliveries(response: AxiosResponse): Promise<ScheduledDeliveryDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ScheduledDeliveryDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<ScheduledDeliveryDto[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ScheduledDeliveryDto[]>(<any>null);
    }
}

export interface IDataChannelEventRuleService {
    /**
     * Retrieve DataChannel Roster ids for an Event Rule.
     * @param dataChannelEventRuleId Unique identifier for a DataChannel event rule.
     * @param api_version (optional) 
     * @return All Roster ids for a DataChannel event rule
     */
    dataChannelEventRule_GetRosters(dataChannelEventRuleId: number, api_version?: string | null | undefined): Promise<DropDownListDtoOfLong[]>;
    /**
     * Save DataChannel Roster ids for an Event Rule.
     * @param dataChannelEventRuleId Unique identifier for a DataChannel event rule.
     * @param rosterIds Unique roster identifiers.
     * @param api_version (optional) 
     * @return All Roster ids for a DataChannel event rule in the database.
     */
    dataChannelEventRule_SaveRosters(dataChannelEventRuleId: number, rosterIds: number[], api_version?: string | null | undefined): Promise<string>;
    /**
     * Retrieve DataChannel event rules for an Asset.
     * @param assetId Unique identifier for the Asset.
     * @param api_version (optional) 
     * @return All event rules for the DataChannel stored in the database.
     */
    dataChannelEventRule_RetrieveEventRulesForAsset(assetId: string, api_version?: string | null | undefined): Promise<QuickEditEventsDto[]>;
    /**
     * Save DataChannel Event Rules for an Asset.
     * @param assetId Unique identifier for the Asset.
     * @param eventRules All event rules for the DataChannel associated with an Asset.
     * @param api_version (optional) 
     * @return All event rules for the DataChannel stored in the database.
     */
    dataChannelEventRule_SaveEventRulesForAsset(assetId: string, eventRules: QuickEditEventsDto[], api_version?: string | null | undefined): Promise<QuickEditEventsDto[]>;
    /**
     * Retrieve DataChannel event rules for a DataChannel.
     * @param dataChannelId Unique identifier for a DataChannel.
     * @param api_version (optional) 
     * @return All event rules for the DataChannel stored in the database.
     */
    dataChannelEventRule_RetrieveEventRulesForDataChennel(dataChannelId: string, api_version?: string | null | undefined): Promise<DataChannelEventRulesDTO>;
    /**
     * Save DataChannel event rules for a DataChannel.
     * @param dataChannelId Unique identifier for a DataChannel.
     * @param eventRules The body contains a DataChannelEventRulesDTO structure holding the event rules.
     * @param api_version (optional) 
     * @return All event rules for the DataChannel stored in the database.
     */
    dataChannelEventRule_SaveEventRulesForDataChennel(dataChannelId: string, eventRules: DataChannelEventRulesDTO, api_version?: string | null | undefined): Promise<boolean>;
    /**
     * Save QuickEdit Event Rules for a DataChannel.
     * @param dataChannelId Unique identifier for the Asset.
     * @param eventRules Changed event rules for a DataChannel.
     * @param api_version (optional) 
     * @return true
     */
    dataChannelEventRule_SaveEventRulesForDataChannel(dataChannelId: string, eventRules: QuickEditEventsDto, api_version?: string | null | undefined): Promise<boolean>;
}

export class DataChannelEventRuleService implements IDataChannelEventRuleService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    /**
     * Retrieve DataChannel Roster ids for an Event Rule.
     * @param dataChannelEventRuleId Unique identifier for a DataChannel event rule.
     * @param api_version (optional) 
     * @return All Roster ids for a DataChannel event rule
     */
    dataChannelEventRule_GetRosters(dataChannelEventRuleId: number, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<DropDownListDtoOfLong[]> {
        let url_ = this.baseUrl + "/DataChannelEventRule/{dataChannelEventRuleId}/Rosters";
        if (dataChannelEventRuleId === undefined || dataChannelEventRuleId === null)
            throw new Error("The parameter 'dataChannelEventRuleId' must be defined.");
        url_ = url_.replace("{dataChannelEventRuleId}", encodeURIComponent("" + dataChannelEventRuleId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDataChannelEventRule_GetRosters(_response);
        });
    }

    protected processDataChannelEventRule_GetRosters(response: AxiosResponse): Promise<DropDownListDtoOfLong[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DropDownListDtoOfLong.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<DropDownListDtoOfLong[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorRecordResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DropDownListDtoOfLong[]>(<any>null);
    }

    /**
     * Save DataChannel Roster ids for an Event Rule.
     * @param dataChannelEventRuleId Unique identifier for a DataChannel event rule.
     * @param rosterIds Unique roster identifiers.
     * @param api_version (optional) 
     * @return All Roster ids for a DataChannel event rule in the database.
     */
    dataChannelEventRule_SaveRosters(dataChannelEventRuleId: number, rosterIds: number[], api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<string> {
        let url_ = this.baseUrl + "/DataChannelEventRule/{dataChannelEventRuleId}/Rosters";
        if (dataChannelEventRuleId === undefined || dataChannelEventRuleId === null)
            throw new Error("The parameter 'dataChannelEventRuleId' must be defined.");
        url_ = url_.replace("{dataChannelEventRuleId}", encodeURIComponent("" + dataChannelEventRuleId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(rosterIds);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDataChannelEventRule_SaveRosters(_response);
        });
    }

    protected processDataChannelEventRule_SaveRosters(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<string>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorRecordResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(<any>null);
    }

    /**
     * Retrieve DataChannel event rules for an Asset.
     * @param assetId Unique identifier for the Asset.
     * @param api_version (optional) 
     * @return All event rules for the DataChannel stored in the database.
     */
    dataChannelEventRule_RetrieveEventRulesForAsset(assetId: string, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<QuickEditEventsDto[]> {
        let url_ = this.baseUrl + "/DataChannelEventRule/asset/{assetId}";
        if (assetId === undefined || assetId === null)
            throw new Error("The parameter 'assetId' must be defined.");
        url_ = url_.replace("{assetId}", encodeURIComponent("" + assetId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDataChannelEventRule_RetrieveEventRulesForAsset(_response);
        });
    }

    protected processDataChannelEventRule_RetrieveEventRulesForAsset(response: AxiosResponse): Promise<QuickEditEventsDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(QuickEditEventsDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<QuickEditEventsDto[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorRecordResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QuickEditEventsDto[]>(<any>null);
    }

    /**
     * Save DataChannel Event Rules for an Asset.
     * @param assetId Unique identifier for the Asset.
     * @param eventRules All event rules for the DataChannel associated with an Asset.
     * @param api_version (optional) 
     * @return All event rules for the DataChannel stored in the database.
     */
    dataChannelEventRule_SaveEventRulesForAsset(assetId: string, eventRules: QuickEditEventsDto[], api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<QuickEditEventsDto[]> {
        let url_ = this.baseUrl + "/DataChannelEventRule/asset/{assetId}";
        if (assetId === undefined || assetId === null)
            throw new Error("The parameter 'assetId' must be defined.");
        url_ = url_.replace("{assetId}", encodeURIComponent("" + assetId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(eventRules);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDataChannelEventRule_SaveEventRulesForAsset(_response);
        });
    }

    protected processDataChannelEventRule_SaveEventRulesForAsset(response: AxiosResponse): Promise<QuickEditEventsDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(QuickEditEventsDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<QuickEditEventsDto[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorRecordResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<QuickEditEventsDto[]>(<any>null);
    }

    /**
     * Retrieve DataChannel event rules for a DataChannel.
     * @param dataChannelId Unique identifier for a DataChannel.
     * @param api_version (optional) 
     * @return All event rules for the DataChannel stored in the database.
     */
    dataChannelEventRule_RetrieveEventRulesForDataChennel(dataChannelId: string, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<DataChannelEventRulesDTO> {
        let url_ = this.baseUrl + "/DataChannelEventRule/{dataChannelId}";
        if (dataChannelId === undefined || dataChannelId === null)
            throw new Error("The parameter 'dataChannelId' must be defined.");
        url_ = url_.replace("{dataChannelId}", encodeURIComponent("" + dataChannelId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDataChannelEventRule_RetrieveEventRulesForDataChennel(_response);
        });
    }

    protected processDataChannelEventRule_RetrieveEventRulesForDataChennel(response: AxiosResponse): Promise<DataChannelEventRulesDTO> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DataChannelEventRulesDTO.fromJS(resultData200);
            return Promise.resolve<DataChannelEventRulesDTO>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorRecordResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DataChannelEventRulesDTO>(<any>null);
    }

    /**
     * Save DataChannel event rules for a DataChannel.
     * @param dataChannelId Unique identifier for a DataChannel.
     * @param eventRules The body contains a DataChannelEventRulesDTO structure holding the event rules.
     * @param api_version (optional) 
     * @return All event rules for the DataChannel stored in the database.
     */
    dataChannelEventRule_SaveEventRulesForDataChennel(dataChannelId: string, eventRules: DataChannelEventRulesDTO, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/DataChannelEventRule/{dataChannelId}";
        if (dataChannelId === undefined || dataChannelId === null)
            throw new Error("The parameter 'dataChannelId' must be defined.");
        url_ = url_.replace("{dataChannelId}", encodeURIComponent("" + dataChannelId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(eventRules);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDataChannelEventRule_SaveEventRulesForDataChennel(_response);
        });
    }

    protected processDataChannelEventRule_SaveEventRulesForDataChennel(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorRecordResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    /**
     * Save QuickEdit Event Rules for a DataChannel.
     * @param dataChannelId Unique identifier for the Asset.
     * @param eventRules Changed event rules for a DataChannel.
     * @param api_version (optional) 
     * @return true
     */
    dataChannelEventRule_SaveEventRulesForDataChannel(dataChannelId: string, eventRules: QuickEditEventsDto, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/DataChannelEventRule/{dataChannelId}/quickedit";
        if (dataChannelId === undefined || dataChannelId === null)
            throw new Error("The parameter 'dataChannelId' must be defined.");
        url_ = url_.replace("{dataChannelId}", encodeURIComponent("" + dataChannelId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(eventRules);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDataChannelEventRule_SaveEventRulesForDataChannel(_response);
        });
    }

    protected processDataChannelEventRule_SaveEventRulesForDataChannel(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorRecordResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }
}

export interface IGetDataChannelReadingsService {
    getDataChannelReadings_GetReadings(dataChannelId: string, startDate?: Date | null | undefined, endDate?: Date | null | undefined, chosenUnitTypeId?: UnitTypeEnum | null | undefined, isSummarizeLargeReadings?: boolean | null | undefined, api_version?: string | null | undefined): Promise<ReadingDTO[]>;
    getDataChannelReadings_GetDataChannelReadings(dataChannelId: string, startDate?: Date | null | undefined, endDate?: Date | null | undefined, chosenUnitTypeId?: UnitTypeEnum | null | undefined, isSummarizeLargeReadings?: boolean | null | undefined, api_version?: string | null | undefined): Promise<TableStorageReadingsRetrievalResponse>;
}

export class GetDataChannelReadingsService implements IGetDataChannelReadingsService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    getDataChannelReadings_GetReadings(dataChannelId: string, startDate?: Date | null | undefined, endDate?: Date | null | undefined, chosenUnitTypeId?: UnitTypeEnum | null | undefined, isSummarizeLargeReadings?: boolean | null | undefined, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<ReadingDTO[]> {
        let url_ = this.baseUrl + "/DataChannel/{dataChannelId}/readings?";
        if (dataChannelId === undefined || dataChannelId === null)
            throw new Error("The parameter 'dataChannelId' must be defined.");
        url_ = url_.replace("{dataChannelId}", encodeURIComponent("" + dataChannelId));
        if (startDate !== undefined && startDate !== null)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toJSON() : "") + "&";
        if (endDate !== undefined && endDate !== null)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toJSON() : "") + "&";
        if (chosenUnitTypeId !== undefined && chosenUnitTypeId !== null)
            url_ += "chosenUnitTypeId=" + encodeURIComponent("" + chosenUnitTypeId) + "&";
        if (isSummarizeLargeReadings !== undefined && isSummarizeLargeReadings !== null)
            url_ += "isSummarizeLargeReadings=" + encodeURIComponent("" + isSummarizeLargeReadings) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetDataChannelReadings_GetReadings(_response);
        });
    }

    protected processGetDataChannelReadings_GetReadings(response: AxiosResponse): Promise<ReadingDTO[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ReadingDTO.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<ReadingDTO[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ReadingDTO[]>(<any>null);
    }

    getDataChannelReadings_GetDataChannelReadings(dataChannelId: string, startDate?: Date | null | undefined, endDate?: Date | null | undefined, chosenUnitTypeId?: UnitTypeEnum | null | undefined, isSummarizeLargeReadings?: boolean | null | undefined, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<TableStorageReadingsRetrievalResponse> {
        let url_ = this.baseUrl + "/DataChannel/{dataChannelId}/dataChannelReadings?";
        if (dataChannelId === undefined || dataChannelId === null)
            throw new Error("The parameter 'dataChannelId' must be defined.");
        url_ = url_.replace("{dataChannelId}", encodeURIComponent("" + dataChannelId));
        if (startDate !== undefined && startDate !== null)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toJSON() : "") + "&";
        if (endDate !== undefined && endDate !== null)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toJSON() : "") + "&";
        if (chosenUnitTypeId !== undefined && chosenUnitTypeId !== null)
            url_ += "chosenUnitTypeId=" + encodeURIComponent("" + chosenUnitTypeId) + "&";
        if (isSummarizeLargeReadings !== undefined && isSummarizeLargeReadings !== null)
            url_ += "isSummarizeLargeReadings=" + encodeURIComponent("" + isSummarizeLargeReadings) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetDataChannelReadings_GetDataChannelReadings(_response);
        });
    }

    protected processGetDataChannelReadings_GetDataChannelReadings(response: AxiosResponse): Promise<TableStorageReadingsRetrievalResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = TableStorageReadingsRetrievalResponse.fromJS(resultData200);
            return Promise.resolve<TableStorageReadingsRetrievalResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TableStorageReadingsRetrievalResponse>(<any>null);
    }
}

export interface IHistoricalReadingsService {
    historicalReadings_Get(dataChannelId: string, startDate: Date, endDate: Date, uomId: UnitTypeEnum | null, api_version?: string | null | undefined): Promise<DataChannelReadingDTO>;
}

export class HistoricalReadingsService implements IHistoricalReadingsService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    historicalReadings_Get(dataChannelId: string, startDate: Date, endDate: Date, uomId: UnitTypeEnum | null, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<DataChannelReadingDTO> {
        let url_ = this.baseUrl + "/HistoricalReadings/{dataChannelId}/{startDate}/{endDate}/{uomId}";
        if (dataChannelId === undefined || dataChannelId === null)
            throw new Error("The parameter 'dataChannelId' must be defined.");
        url_ = url_.replace("{dataChannelId}", encodeURIComponent("" + dataChannelId));
        if (startDate === undefined || startDate === null)
            throw new Error("The parameter 'startDate' must be defined.");
        url_ = url_.replace("{startDate}", encodeURIComponent(startDate ? "" + startDate.toISOString() : "null"));
        if (endDate === undefined || endDate === null)
            throw new Error("The parameter 'endDate' must be defined.");
        url_ = url_.replace("{endDate}", encodeURIComponent(endDate ? "" + endDate.toISOString() : "null"));
        if (uomId === undefined || uomId === null)
            throw new Error("The parameter 'uomId' must be defined.");
        url_ = url_.replace("{uomId}", encodeURIComponent("" + uomId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processHistoricalReadings_Get(_response);
        });
    }

    protected processHistoricalReadings_Get(response: AxiosResponse): Promise<DataChannelReadingDTO> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DataChannelReadingDTO.fromJS(resultData200);
            return Promise.resolve<DataChannelReadingDTO>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DataChannelReadingDTO>(<any>null);
    }
}

export interface ILocationReadingService {
    locationReading_GetLocationReadings(dataChannelId: string, startDate?: Date | undefined, endDate?: Date | undefined, movementResolutionInMeters?: number | undefined, api_version?: string | null | undefined): Promise<GpsLocationReadingsDTO>;
    locationReading_GetLastKnownLocation(dataChannelId: string, api_version?: string | null | undefined): Promise<GpsLocationDTO>;
}

export class LocationReadingService implements ILocationReadingService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    locationReading_GetLocationReadings(dataChannelId: string, startDate?: Date | undefined, endDate?: Date | undefined, movementResolutionInMeters?: number | undefined, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<GpsLocationReadingsDTO> {
        let url_ = this.baseUrl + "/LocationReading/{dataChannelId}/locationreadings?";
        if (dataChannelId === undefined || dataChannelId === null)
            throw new Error("The parameter 'dataChannelId' must be defined.");
        url_ = url_.replace("{dataChannelId}", encodeURIComponent("" + dataChannelId));
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toJSON() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toJSON() : "") + "&";
        if (movementResolutionInMeters === null)
            throw new Error("The parameter 'movementResolutionInMeters' cannot be null.");
        else if (movementResolutionInMeters !== undefined)
            url_ += "movementResolutionInMeters=" + encodeURIComponent("" + movementResolutionInMeters) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLocationReading_GetLocationReadings(_response);
        });
    }

    protected processLocationReading_GetLocationReadings(response: AxiosResponse): Promise<GpsLocationReadingsDTO> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GpsLocationReadingsDTO.fromJS(resultData200);
            return Promise.resolve<GpsLocationReadingsDTO>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GpsLocationReadingsDTO>(<any>null);
    }

    locationReading_GetLastKnownLocation(dataChannelId: string, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<GpsLocationDTO> {
        let url_ = this.baseUrl + "/LocationReading/{dataChannelId}/lastKnownLocation";
        if (dataChannelId === undefined || dataChannelId === null)
            throw new Error("The parameter 'dataChannelId' must be defined.");
        url_ = url_.replace("{dataChannelId}", encodeURIComponent("" + dataChannelId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLocationReading_GetLastKnownLocation(_response);
        });
    }

    protected processLocationReading_GetLastKnownLocation(response: AxiosResponse): Promise<GpsLocationDTO> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GpsLocationDTO.fromJS(resultData200);
            return Promise.resolve<GpsLocationDTO>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GpsLocationDTO>(<any>null);
    }
}

export interface IAuthenticationService {
    authentication_GetAuthenticationProvidersForDomain(api_version?: string | null | undefined): Promise<GetAuthenticationProviderForDomainResponse>;
    authentication_UpdateUserAuthenticationProvider(userAuthenticationDto: UserAuthenticationDto, api_version?: string | null | undefined): Promise<UserAuthenticationDto>;
    authentication_GetUserId(api_version?: string | null | undefined): Promise<string>;
    authentication_GetUserAuthenticationProvider(usernameOrEmail: string | null, api_version?: string | null | undefined): Promise<GetUserAuthenticationProviderDto>;
    authentication_ForceUpdatePassword(passwordDTO: ForceUpdatePasswordDto, api_version?: string | null | undefined): Promise<boolean>;
    authentication_VerifyPasswordStrength(passwordDTO: PasswordDto, api_version?: string | null | undefined): Promise<PasswordStrengthDto>;
    authentication_ForgotPassword(forgotPasswordDTO: ForgotPasswordDto, api_version?: string | null | undefined): Promise<GetUserAuthenticationProviderDto>;
    authentication_ValidateResetPasswordToken(token: string, api_version?: string | null | undefined): Promise<boolean>;
    authentication_ResetPassword(resetPasswordDTO: ResetPasswordDto, api_version?: string | null | undefined): Promise<boolean>;
}

export class AuthenticationService implements IAuthenticationService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    authentication_GetAuthenticationProvidersForDomain(api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<GetAuthenticationProviderForDomainResponse> {
        let url_ = this.baseUrl + "/Authentication/domain/identityprovider";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAuthentication_GetAuthenticationProvidersForDomain(_response);
        });
    }

    protected processAuthentication_GetAuthenticationProvidersForDomain(response: AxiosResponse): Promise<GetAuthenticationProviderForDomainResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GetAuthenticationProviderForDomainResponse.fromJS(resultData200);
            return Promise.resolve<GetAuthenticationProviderForDomainResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetAuthenticationProviderForDomainResponse>(<any>null);
    }

    authentication_UpdateUserAuthenticationProvider(userAuthenticationDto: UserAuthenticationDto, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<UserAuthenticationDto> {
        let url_ = this.baseUrl + "/Authentication/user/provider";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(userAuthenticationDto);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAuthentication_UpdateUserAuthenticationProvider(_response);
        });
    }

    protected processAuthentication_UpdateUserAuthenticationProvider(response: AxiosResponse): Promise<UserAuthenticationDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UserAuthenticationDto.fromJS(resultData200);
            return Promise.resolve<UserAuthenticationDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserAuthenticationDto>(<any>null);
    }

    authentication_GetUserId(api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<string> {
        let url_ = this.baseUrl + "/Authentication/cookie/GetUserId";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAuthentication_GetUserId(_response);
        });
    }

    protected processAuthentication_GetUserId(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<string>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(<any>null);
    }

    authentication_GetUserAuthenticationProvider(usernameOrEmail: string | null, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<GetUserAuthenticationProviderDto> {
        let url_ = this.baseUrl + "/Authentication/profile/{usernameOrEmail}";
        if (usernameOrEmail === undefined || usernameOrEmail === null)
            throw new Error("The parameter 'usernameOrEmail' must be defined.");
        url_ = url_.replace("{usernameOrEmail}", encodeURIComponent("" + usernameOrEmail));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAuthentication_GetUserAuthenticationProvider(_response);
        });
    }

    protected processAuthentication_GetUserAuthenticationProvider(response: AxiosResponse): Promise<GetUserAuthenticationProviderDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GetUserAuthenticationProviderDto.fromJS(resultData200);
            return Promise.resolve<GetUserAuthenticationProviderDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetUserAuthenticationProviderDto>(<any>null);
    }

    authentication_ForceUpdatePassword(passwordDTO: ForceUpdatePasswordDto, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/Authentication/password/forceupdate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(passwordDTO);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAuthentication_ForceUpdatePassword(_response);
        });
    }

    protected processAuthentication_ForceUpdatePassword(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    authentication_VerifyPasswordStrength(passwordDTO: PasswordDto, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<PasswordStrengthDto> {
        let url_ = this.baseUrl + "/Authentication/password/strength";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(passwordDTO);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAuthentication_VerifyPasswordStrength(_response);
        });
    }

    protected processAuthentication_VerifyPasswordStrength(response: AxiosResponse): Promise<PasswordStrengthDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PasswordStrengthDto.fromJS(resultData200);
            return Promise.resolve<PasswordStrengthDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PasswordStrengthDto>(<any>null);
    }

    authentication_ForgotPassword(forgotPasswordDTO: ForgotPasswordDto, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<GetUserAuthenticationProviderDto> {
        let url_ = this.baseUrl + "/Authentication/password/forgot";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(forgotPasswordDTO);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAuthentication_ForgotPassword(_response);
        });
    }

    protected processAuthentication_ForgotPassword(response: AxiosResponse): Promise<GetUserAuthenticationProviderDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GetUserAuthenticationProviderDto.fromJS(resultData200);
            return Promise.resolve<GetUserAuthenticationProviderDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetUserAuthenticationProviderDto>(<any>null);
    }

    authentication_ValidateResetPasswordToken(token: string, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/Authentication/password/validateResetPasswordToken/{token}";
        if (token === undefined || token === null)
            throw new Error("The parameter 'token' must be defined.");
        url_ = url_.replace("{token}", encodeURIComponent("" + token));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAuthentication_ValidateResetPasswordToken(_response);
        });
    }

    protected processAuthentication_ValidateResetPasswordToken(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    authentication_ResetPassword(resetPasswordDTO: ResetPasswordDto, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/Authentication/password/reset";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(resetPasswordDTO);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAuthentication_ResetPassword(_response);
        });
    }

    protected processAuthentication_ResetPassword(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }
}

export interface IAssetsService {
    /**
     * Asset Navigator query
     * @param searchOptions Same search options used by Get Asset Summary.
     * @param api_version (optional) 
     */
    assets_RetrieveAssetNavigationListByOptionsResult(searchOptions: AssetNavSearchOptionsDto, api_version?: string | null | undefined): Promise<TupleOfIntegerAndListOfAssetNavItemDto>;
    /**
     * Get asset watch list
     * @param api_version (optional) 
     */
    assets_RetrieveNavigatorWatchList(api_version?: string | null | undefined): Promise<TupleOfIntegerAndListOfAssetNavItemDto>;
}

export class AssetsService implements IAssetsService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    /**
     * Asset Navigator query
     * @param searchOptions Same search options used by Get Asset Summary.
     * @param api_version (optional) 
     */
    assets_RetrieveAssetNavigationListByOptionsResult(searchOptions: AssetNavSearchOptionsDto, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<TupleOfIntegerAndListOfAssetNavItemDto> {
        let url_ = this.baseUrl + "/Assets/NavigatorList";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(searchOptions);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAssets_RetrieveAssetNavigationListByOptionsResult(_response);
        });
    }

    protected processAssets_RetrieveAssetNavigationListByOptionsResult(response: AxiosResponse): Promise<TupleOfIntegerAndListOfAssetNavItemDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = TupleOfIntegerAndListOfAssetNavItemDto.fromJS(resultData200);
            return Promise.resolve<TupleOfIntegerAndListOfAssetNavItemDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TupleOfIntegerAndListOfAssetNavItemDto>(<any>null);
    }

    /**
     * Get asset watch list
     * @param api_version (optional) 
     */
    assets_RetrieveNavigatorWatchList(api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<TupleOfIntegerAndListOfAssetNavItemDto> {
        let url_ = this.baseUrl + "/Assets/NavigatorWatchList";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAssets_RetrieveNavigatorWatchList(_response);
        });
    }

    protected processAssets_RetrieveNavigatorWatchList(response: AxiosResponse): Promise<TupleOfIntegerAndListOfAssetNavItemDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = TupleOfIntegerAndListOfAssetNavItemDto.fromJS(resultData200);
            return Promise.resolve<TupleOfIntegerAndListOfAssetNavItemDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<TupleOfIntegerAndListOfAssetNavItemDto>(<any>null);
    }
}

export interface IChartService {
    chart_GetDataChannelsByAssetId(assetId: string, api_version?: string | null | undefined): Promise<ChartDataChannelDto[]>;
    chart_GetChartsByAssetId(assetId: string, api_version?: string | null | undefined): Promise<ChartDto>;
    chart_GetChart(chartId: number, api_version?: string | null | undefined): Promise<UserChartDto>;
    chart_DeleteChart(chartId: number, api_version?: string | null | undefined): Promise<boolean>;
    chart_Save(chartDTO: UserChartDto, api_version?: string | null | undefined): Promise<UserChartDto>;
}

export class ChartService implements IChartService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    chart_GetDataChannelsByAssetId(assetId: string, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<ChartDataChannelDto[]> {
        let url_ = this.baseUrl + "/Chart/asset/{assetId}/GetDataChannels";
        if (assetId === undefined || assetId === null)
            throw new Error("The parameter 'assetId' must be defined.");
        url_ = url_.replace("{assetId}", encodeURIComponent("" + assetId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processChart_GetDataChannelsByAssetId(_response);
        });
    }

    protected processChart_GetDataChannelsByAssetId(response: AxiosResponse): Promise<ChartDataChannelDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ChartDataChannelDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<ChartDataChannelDto[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ChartDataChannelDto[]>(<any>null);
    }

    chart_GetChartsByAssetId(assetId: string, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<ChartDto> {
        let url_ = this.baseUrl + "/Chart/asset/{assetId}/GetCharts";
        if (assetId === undefined || assetId === null)
            throw new Error("The parameter 'assetId' must be defined.");
        url_ = url_.replace("{assetId}", encodeURIComponent("" + assetId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processChart_GetChartsByAssetId(_response);
        });
    }

    protected processChart_GetChartsByAssetId(response: AxiosResponse): Promise<ChartDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ChartDto.fromJS(resultData200);
            return Promise.resolve<ChartDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ChartDto>(<any>null);
    }

    chart_GetChart(chartId: number, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<UserChartDto> {
        let url_ = this.baseUrl + "/Chart/{chartId}";
        if (chartId === undefined || chartId === null)
            throw new Error("The parameter 'chartId' must be defined.");
        url_ = url_.replace("{chartId}", encodeURIComponent("" + chartId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processChart_GetChart(_response);
        });
    }

    protected processChart_GetChart(response: AxiosResponse): Promise<UserChartDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UserChartDto.fromJS(resultData200);
            return Promise.resolve<UserChartDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserChartDto>(<any>null);
    }

    chart_DeleteChart(chartId: number, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/Chart/{chartId}";
        if (chartId === undefined || chartId === null)
            throw new Error("The parameter 'chartId' must be defined.");
        url_ = url_.replace("{chartId}", encodeURIComponent("" + chartId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processChart_DeleteChart(_response);
        });
    }

    protected processChart_DeleteChart(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }

    chart_Save(chartDTO: UserChartDto, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<UserChartDto> {
        let url_ = this.baseUrl + "/Chart";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(chartDTO);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processChart_Save(_response);
        });
    }

    protected processChart_Save(response: AxiosResponse): Promise<UserChartDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UserChartDto.fromJS(resultData200);
            return Promise.resolve<UserChartDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UserChartDto>(<any>null);
    }
}

export interface IChartDefaultService {
    chartDefault_GetChartDefaultTagList(assetSubTypeId: number, api_version?: string | null | undefined): Promise<AvailableTagBase[]>;
    chartDefault_GetChartDefaultList(api_version?: string | null | undefined): Promise<ChartDefaultDto[]>;
    chartDefault_Save(chartDefaultDTO: ChartDefaultDto, api_version?: string | null | undefined): Promise<ChartDefaultDto>;
    chartDefault_GetChartDefault(chartDefaultId: number, api_version?: string | null | undefined): Promise<ChartDefaultDto>;
    chartDefault_DeleteChart(chartDefaultId: number, api_version?: string | null | undefined): Promise<boolean>;
}

export class ChartDefaultService implements IChartDefaultService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    chartDefault_GetChartDefaultTagList(assetSubTypeId: number, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<AvailableTagBase[]> {
        let url_ = this.baseUrl + "/ChartDefault/tags/{assetSubTypeId}";
        if (assetSubTypeId === undefined || assetSubTypeId === null)
            throw new Error("The parameter 'assetSubTypeId' must be defined.");
        url_ = url_.replace("{assetSubTypeId}", encodeURIComponent("" + assetSubTypeId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processChartDefault_GetChartDefaultTagList(_response);
        });
    }

    protected processChartDefault_GetChartDefaultTagList(response: AxiosResponse): Promise<AvailableTagBase[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AvailableTagBase.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<AvailableTagBase[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AvailableTagBase[]>(<any>null);
    }

    chartDefault_GetChartDefaultList(api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<ChartDefaultDto[]> {
        let url_ = this.baseUrl + "/ChartDefault";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processChartDefault_GetChartDefaultList(_response);
        });
    }

    protected processChartDefault_GetChartDefaultList(response: AxiosResponse): Promise<ChartDefaultDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ChartDefaultDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<ChartDefaultDto[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ChartDefaultDto[]>(<any>null);
    }

    chartDefault_Save(chartDefaultDTO: ChartDefaultDto, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<ChartDefaultDto> {
        let url_ = this.baseUrl + "/ChartDefault";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(chartDefaultDTO);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processChartDefault_Save(_response);
        });
    }

    protected processChartDefault_Save(response: AxiosResponse): Promise<ChartDefaultDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ChartDefaultDto.fromJS(resultData200);
            return Promise.resolve<ChartDefaultDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ChartDefaultDto>(<any>null);
    }

    chartDefault_GetChartDefault(chartDefaultId: number, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<ChartDefaultDto> {
        let url_ = this.baseUrl + "/ChartDefault/{chartDefaultId}";
        if (chartDefaultId === undefined || chartDefaultId === null)
            throw new Error("The parameter 'chartDefaultId' must be defined.");
        url_ = url_.replace("{chartDefaultId}", encodeURIComponent("" + chartDefaultId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processChartDefault_GetChartDefault(_response);
        });
    }

    protected processChartDefault_GetChartDefault(response: AxiosResponse): Promise<ChartDefaultDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ChartDefaultDto.fromJS(resultData200);
            return Promise.resolve<ChartDefaultDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ChartDefaultDto>(<any>null);
    }

    chartDefault_DeleteChart(chartDefaultId: number, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/ChartDefault/{chartDefaultId}";
        if (chartDefaultId === undefined || chartDefaultId === null)
            throw new Error("The parameter 'chartDefaultId' must be defined.");
        url_ = url_.replace("{chartDefaultId}", encodeURIComponent("" + chartDefaultId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processChartDefault_DeleteChart(_response);
        });
    }

    protected processChartDefault_DeleteChart(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }
}

export interface IFreezerAssetService {
    freezerAsset_GetSiteAssetSummary(api_version?: string | null | undefined): Promise<GetSiteAssetSummaryDto[]>;
    freezerAsset_GetBulkTankTagList(siteId: string, api_version?: string | null | undefined): Promise<AvailableTagBase[]>;
    freezerAsset_GetFreezerDetail(freezerId: string, startDate?: Date | undefined, endDate?: Date | undefined, api_version?: string | null | undefined): Promise<GetFreezerDetailDto>;
    freezerAsset_GetFreezerTimeSeries(freezerId: string, startDate?: Date | undefined, endDate?: Date | undefined, tags?: string | null | undefined, numberOfBuckets?: number | undefined, aggregation?: string | null | undefined, api_version?: string | null | undefined): Promise<FreezerTimeSeriesModel[]>;
}

export class FreezerAssetService implements IFreezerAssetService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    freezerAsset_GetSiteAssetSummary(api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<GetSiteAssetSummaryDto[]> {
        let url_ = this.baseUrl + "/FreezerAsset/SiteAssetSummary";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFreezerAsset_GetSiteAssetSummary(_response);
        });
    }

    protected processFreezerAsset_GetSiteAssetSummary(response: AxiosResponse): Promise<GetSiteAssetSummaryDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetSiteAssetSummaryDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<GetSiteAssetSummaryDto[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetSiteAssetSummaryDto[]>(<any>null);
    }

    freezerAsset_GetBulkTankTagList(siteId: string, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<AvailableTagBase[]> {
        let url_ = this.baseUrl + "/FreezerAsset/tags/site/{siteId}";
        if (siteId === undefined || siteId === null)
            throw new Error("The parameter 'siteId' must be defined.");
        url_ = url_.replace("{siteId}", encodeURIComponent("" + siteId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFreezerAsset_GetBulkTankTagList(_response);
        });
    }

    protected processFreezerAsset_GetBulkTankTagList(response: AxiosResponse): Promise<AvailableTagBase[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AvailableTagBase.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<AvailableTagBase[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AvailableTagBase[]>(<any>null);
    }

    freezerAsset_GetFreezerDetail(freezerId: string, startDate?: Date | undefined, endDate?: Date | undefined, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<GetFreezerDetailDto> {
        let url_ = this.baseUrl + "/FreezerAsset/freezer/{freezerId}/detail?";
        if (freezerId === undefined || freezerId === null)
            throw new Error("The parameter 'freezerId' must be defined.");
        url_ = url_.replace("{freezerId}", encodeURIComponent("" + freezerId));
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toJSON() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toJSON() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFreezerAsset_GetFreezerDetail(_response);
        });
    }

    protected processFreezerAsset_GetFreezerDetail(response: AxiosResponse): Promise<GetFreezerDetailDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GetFreezerDetailDto.fromJS(resultData200);
            return Promise.resolve<GetFreezerDetailDto>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetFreezerDetailDto>(<any>null);
    }

    freezerAsset_GetFreezerTimeSeries(freezerId: string, startDate?: Date | undefined, endDate?: Date | undefined, tags?: string | null | undefined, numberOfBuckets?: number | undefined, aggregation?: string | null | undefined, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<FreezerTimeSeriesModel[]> {
        let url_ = this.baseUrl + "/FreezerAsset/freezer/{freezerId}/timeseries?";
        if (freezerId === undefined || freezerId === null)
            throw new Error("The parameter 'freezerId' must be defined.");
        url_ = url_.replace("{freezerId}", encodeURIComponent("" + freezerId));
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toJSON() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toJSON() : "") + "&";
        if (tags !== undefined && tags !== null)
            url_ += "tags=" + encodeURIComponent("" + tags) + "&";
        if (numberOfBuckets === null)
            throw new Error("The parameter 'numberOfBuckets' cannot be null.");
        else if (numberOfBuckets !== undefined)
            url_ += "numberOfBuckets=" + encodeURIComponent("" + numberOfBuckets) + "&";
        if (aggregation !== undefined && aggregation !== null)
            url_ += "aggregation=" + encodeURIComponent("" + aggregation) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFreezerAsset_GetFreezerTimeSeries(_response);
        });
    }

    protected processFreezerAsset_GetFreezerTimeSeries(response: AxiosResponse): Promise<FreezerTimeSeriesModel[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(FreezerTimeSeriesModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<FreezerTimeSeriesModel[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FreezerTimeSeriesModel[]>(<any>null);
    }
}

export interface IFreezerSiteService {
    freezerSite_GetSiteDetailById(siteId: string, startDate?: Date | undefined, endDate?: Date | undefined, api_version?: string | null | undefined): Promise<GetSiteDetailByIdDto>;
}

export class FreezerSiteService implements IFreezerSiteService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    freezerSite_GetSiteDetailById(siteId: string, startDate?: Date | undefined, endDate?: Date | undefined, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<GetSiteDetailByIdDto> {
        let url_ = this.baseUrl + "/FreezerSite/site/{siteId}/detail?";
        if (siteId === undefined || siteId === null)
            throw new Error("The parameter 'siteId' must be defined.");
        url_ = url_.replace("{siteId}", encodeURIComponent("" + siteId));
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toJSON() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toJSON() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processFreezerSite_GetSiteDetailById(_response);
        });
    }

    protected processFreezerSite_GetSiteDetailById(response: AxiosResponse): Promise<GetSiteDetailByIdDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GetSiteDetailByIdDto.fromJS(resultData200);
            return Promise.resolve<GetSiteDetailByIdDto>(result200);

        } else if (status === 404) {
            const _responseText = response.data;
            let result404: any = null;
            let resultData404  = _responseText;
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetSiteDetailByIdDto>(<any>null);
    }
}

export interface IGeoAreaCategoryService {
    geoAreaCategory_GetList(api_version?: string | null | undefined): Promise<GeoAreaCategory_SummaryDto[]>;
}

export class GeoAreaCategoryService implements IGeoAreaCategoryService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    geoAreaCategory_GetList(api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<GeoAreaCategory_SummaryDto[]> {
        let url_ = this.baseUrl + "/GeoAreaCategory";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGeoAreaCategory_GetList(_response);
        });
    }

    protected processGeoAreaCategory_GetList(response: AxiosResponse): Promise<GeoAreaCategory_SummaryDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GeoAreaCategory_SummaryDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<GeoAreaCategory_SummaryDto[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GeoAreaCategory_SummaryDto[]>(<any>null);
    }
}

export interface IGeoAreaService {
    geoArea_GetList(api_version?: string | null | undefined): Promise<GeoAreaDto[]>;
    geoArea_Save(geoAreaDTO: GeoAreaDto, api_version?: string | null | undefined): Promise<GeoAreaDto>;
    geoArea_Get(id: number, api_version?: string | null | undefined): Promise<GeoAreaDto>;
    geoArea_Delete(id: number, api_version?: string | null | undefined): Promise<boolean>;
}

export class GeoAreaService implements IGeoAreaService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    geoArea_GetList(api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<GeoAreaDto[]> {
        let url_ = this.baseUrl + "/GeoArea";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGeoArea_GetList(_response);
        });
    }

    protected processGeoArea_GetList(response: AxiosResponse): Promise<GeoAreaDto[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GeoAreaDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<GeoAreaDto[]>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GeoAreaDto[]>(<any>null);
    }

    geoArea_Save(geoAreaDTO: GeoAreaDto, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<GeoAreaDto> {
        let url_ = this.baseUrl + "/GeoArea";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(geoAreaDTO);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGeoArea_Save(_response);
        });
    }

    protected processGeoArea_Save(response: AxiosResponse): Promise<GeoAreaDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GeoAreaDto.fromJS(resultData200);
            return Promise.resolve<GeoAreaDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GeoAreaDto>(<any>null);
    }

    geoArea_Get(id: number, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<GeoAreaDto> {
        let url_ = this.baseUrl + "/GeoArea/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGeoArea_Get(_response);
        });
    }

    protected processGeoArea_Get(response: AxiosResponse): Promise<GeoAreaDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GeoAreaDto.fromJS(resultData200);
            return Promise.resolve<GeoAreaDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GeoAreaDto>(<any>null);
    }

    geoArea_Delete(id: number, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/GeoArea/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "DELETE",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGeoArea_Delete(_response);
        });
    }

    protected processGeoArea_Delete(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }
}

export interface IUsageRateService {
    /**
     * Get Usage Rate Summary report for an Asset
     * @param assetId Unique identifier for an asset
     * @param api_version (optional) 
     */
    usageRate_GetUsageRateSummaryReport(assetId: string, api_version?: string | null | undefined): Promise<UsageRateSummaryDto>;
}

export class UsageRateService implements IUsageRateService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    /**
     * Get Usage Rate Summary report for an Asset
     * @param assetId Unique identifier for an asset
     * @param api_version (optional) 
     */
    usageRate_GetUsageRateSummaryReport(assetId: string, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<UsageRateSummaryDto> {
        let url_ = this.baseUrl + "/UsageRate/{assetId}/summary";
        if (assetId === undefined || assetId === null)
            throw new Error("The parameter 'assetId' must be defined.");
        url_ = url_.replace("{assetId}", encodeURIComponent("" + assetId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUsageRate_GetUsageRateSummaryReport(_response);
        });
    }

    protected processUsageRate_GetUsageRateSummaryReport(response: AxiosResponse): Promise<UsageRateSummaryDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = UsageRateSummaryDto.fromJS(resultData200);
            return Promise.resolve<UsageRateSummaryDto>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            if (Array.isArray(resultData400)) {
                result400 = [] as any;
                for (let item of resultData400)
                    result400!.push(ErrorRecordResponseModel.fromJS(item));
            }
            else {
                result400 = <any>null;
            }
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<UsageRateSummaryDto>(<any>null);
    }
}

export interface IStrappingChartService {
    /**
     * Generates strapping Chart points from tank dimensions.
     * @param api_version (optional) 
     */
    generateStrappingChart_GenerateStrappingChart(request: EvolveGenerateStrappingChartRequest, api_version?: string | null | undefined): Promise<EvolveGenerateStrappingChartResponse>;
}

export class StrappingChartService implements IStrappingChartService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    /**
     * Generates strapping Chart points from tank dimensions.
     * @param api_version (optional) 
     */
    generateStrappingChart_GenerateStrappingChart(request: EvolveGenerateStrappingChartRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveGenerateStrappingChartResponse> {
        let url_ = this.baseUrl + "/GenerateStrappingChart";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGenerateStrappingChart_GenerateStrappingChart(_response);
        });
    }

    protected processGenerateStrappingChart_GenerateStrappingChart(response: AxiosResponse): Promise<EvolveGenerateStrappingChartResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveGenerateStrappingChartResponse.fromJS(resultData200);
            return Promise.resolve<EvolveGenerateStrappingChartResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveGenerateStrappingChartResponse>(<any>null);
    }
}

export interface IUnitQuantityTypeService {
    /**
     * Get's all the unit Quantity types from the DB.
     * @param api_version (optional) 
     */
    getUnitQuantityTypes_GetUnitQuantityTypes(api_version?: string | null | undefined): Promise<EvolveGetUnitQuantityTypesResponse>;
}

export class UnitQuantityTypeService implements IUnitQuantityTypeService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    /**
     * Get's all the unit Quantity types from the DB.
     * @param api_version (optional) 
     */
    getUnitQuantityTypes_GetUnitQuantityTypes(api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveGetUnitQuantityTypesResponse> {
        let url_ = this.baseUrl + "/GetUnitQuantityTypes";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetUnitQuantityTypes_GetUnitQuantityTypes(_response);
        });
    }

    protected processGetUnitQuantityTypes_GetUnitQuantityTypes(response: AxiosResponse): Promise<EvolveGetUnitQuantityTypesResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveGetUnitQuantityTypesResponse.fromJS(resultData200);
            return Promise.resolve<EvolveGetUnitQuantityTypesResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveGetUnitQuantityTypesResponse>(<any>null);
    }
}

export interface IReportService {
    /**
     * Retrieve Quick Asset Create Report By Options.
     * @param api_version (optional) 
     */
    retrieveQuickAssetCreateReportByOptions_RetrieveQuickAssetCreateReportByOptions(request: EvolveRetrieveQuickAssetCreateReportRequest, api_version?: string | null | undefined): Promise<EvolveRetrieveQuickAssetCreateReportResponse>;
    /**
     * Retrieve Quick Asset Create Helium ISO Report Details
     * @param api_version (optional) 
     */
    retrieveQuickHeliumISOCreateReportDetails_RetrieveQuickAssetCreateHeliumISOReportDetails(request: EvolveQuickHeliumISOCreateReportDetailsRequest, api_version?: string | null | undefined): Promise<EvolveQuickHeliumISOCreateReportDetailsResponse>;
}

export class ReportService implements IReportService {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://api-test.transcend.anova.com";

    }

    /**
     * Retrieve Quick Asset Create Report By Options.
     * @param api_version (optional) 
     */
    retrieveQuickAssetCreateReportByOptions_RetrieveQuickAssetCreateReportByOptions(request: EvolveRetrieveQuickAssetCreateReportRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveRetrieveQuickAssetCreateReportResponse> {
        let url_ = this.baseUrl + "/RetrieveQuickAssetCreateReportByOptions";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveQuickAssetCreateReportByOptions_RetrieveQuickAssetCreateReportByOptions(_response);
        });
    }

    protected processRetrieveQuickAssetCreateReportByOptions_RetrieveQuickAssetCreateReportByOptions(response: AxiosResponse): Promise<EvolveRetrieveQuickAssetCreateReportResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveRetrieveQuickAssetCreateReportResponse.fromJS(resultData200);
            return Promise.resolve<EvolveRetrieveQuickAssetCreateReportResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveRetrieveQuickAssetCreateReportResponse>(<any>null);
    }

    /**
     * Retrieve Quick Asset Create Helium ISO Report Details
     * @param api_version (optional) 
     */
    retrieveQuickHeliumISOCreateReportDetails_RetrieveQuickAssetCreateHeliumISOReportDetails(request: EvolveQuickHeliumISOCreateReportDetailsRequest, api_version?: string | null | undefined , cancelToken?: CancelToken | undefined): Promise<EvolveQuickHeliumISOCreateReportDetailsResponse> {
        let url_ = this.baseUrl + "/RetrieveQuickHeliumISOCreateReportDetails";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "api-version": api_version !== undefined && api_version !== null ? "" + api_version : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRetrieveQuickHeliumISOCreateReportDetails_RetrieveQuickAssetCreateHeliumISOReportDetails(_response);
        });
    }

    protected processRetrieveQuickHeliumISOCreateReportDetails_RetrieveQuickAssetCreateHeliumISOReportDetails(response: AxiosResponse): Promise<EvolveQuickHeliumISOCreateReportDetailsResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = EvolveQuickHeliumISOCreateReportDetailsResponse.fromJS(resultData200);
            return Promise.resolve<EvolveQuickHeliumISOCreateReportDetailsResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<EvolveQuickHeliumISOCreateReportDetailsResponse>(<any>null);
    }
}

export class GetTimeoutRelatedValuesResponse {
    distributedSessionValuesResponse?: DistributedSessionResponseValues | null;
    userDomainId?: string;
    defaultTimeoutExpiryMinutes?: number;
    userTimeoutExpiryMinutes?: number;
    domainTimeoutExpiryMinutes?: number;

    init(_data?: any) {
        if (_data) {
            this.distributedSessionValuesResponse = _data["distributedSessionValuesResponse"] ? DistributedSessionResponseValues.fromJS(_data["distributedSessionValuesResponse"]) : <any>null;
            this.userDomainId = _data["userDomainId"] !== undefined ? _data["userDomainId"] : <any>null;
            this.defaultTimeoutExpiryMinutes = _data["defaultTimeoutExpiryMinutes"] !== undefined ? _data["defaultTimeoutExpiryMinutes"] : <any>null;
            this.userTimeoutExpiryMinutes = _data["userTimeoutExpiryMinutes"] !== undefined ? _data["userTimeoutExpiryMinutes"] : <any>null;
            this.domainTimeoutExpiryMinutes = _data["domainTimeoutExpiryMinutes"] !== undefined ? _data["domainTimeoutExpiryMinutes"] : <any>null;
        }
    }

    static fromJS(data: any): GetTimeoutRelatedValuesResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetTimeoutRelatedValuesResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["distributedSessionValuesResponse"] = this.distributedSessionValuesResponse ? this.distributedSessionValuesResponse.toJSON() : <any>null;
        data["userDomainId"] = this.userDomainId !== undefined ? this.userDomainId : <any>null;
        data["defaultTimeoutExpiryMinutes"] = this.defaultTimeoutExpiryMinutes !== undefined ? this.defaultTimeoutExpiryMinutes : <any>null;
        data["userTimeoutExpiryMinutes"] = this.userTimeoutExpiryMinutes !== undefined ? this.userTimeoutExpiryMinutes : <any>null;
        data["domainTimeoutExpiryMinutes"] = this.domainTimeoutExpiryMinutes !== undefined ? this.domainTimeoutExpiryMinutes : <any>null;
        return data;
    }
}

export class DistributedSessionResponseValues {
    userId?: string;
    isUsingB2cAuthentication?: boolean;
    username?: string | null;
    effectiveDomainId?: string;
    applicationTimeoutUtc?: Date;
    applicationTimeoutRenewalMinutes?: number;

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.isUsingB2cAuthentication = _data["isUsingB2cAuthentication"] !== undefined ? _data["isUsingB2cAuthentication"] : <any>null;
            this.username = _data["username"] !== undefined ? _data["username"] : <any>null;
            this.effectiveDomainId = _data["effectiveDomainId"] !== undefined ? _data["effectiveDomainId"] : <any>null;
            this.applicationTimeoutUtc = _data["applicationTimeoutUtc"] ? new Date(_data["applicationTimeoutUtc"].toString()) : <any>null;
            this.applicationTimeoutRenewalMinutes = _data["applicationTimeoutRenewalMinutes"] !== undefined ? _data["applicationTimeoutRenewalMinutes"] : <any>null;
        }
    }

    static fromJS(data: any): DistributedSessionResponseValues {
        data = typeof data === 'object' ? data : {};
        let result = new DistributedSessionResponseValues();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["isUsingB2cAuthentication"] = this.isUsingB2cAuthentication !== undefined ? this.isUsingB2cAuthentication : <any>null;
        data["username"] = this.username !== undefined ? this.username : <any>null;
        data["effectiveDomainId"] = this.effectiveDomainId !== undefined ? this.effectiveDomainId : <any>null;
        data["applicationTimeoutUtc"] = this.applicationTimeoutUtc ? this.applicationTimeoutUtc.toISOString() : <any>null;
        data["applicationTimeoutRenewalMinutes"] = this.applicationTimeoutRenewalMinutes !== undefined ? this.applicationTimeoutRenewalMinutes : <any>null;
        return data;
    }
}

export class TankDimensionInfoDto {
    id?: string;
    description?: string | null;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
        }
    }

    static fromJS(data: any): TankDimensionInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new TankDimensionInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        return data;
    }
}

export class ErrorResponseModel {
    propertyName?: string | null;
    reasonCodeTypeId?: ReasonCodeEnum;
    errorMessage?: string | null;
    param?: string[] | null;

    init(_data?: any) {
        if (_data) {
            this.propertyName = _data["propertyName"] !== undefined ? _data["propertyName"] : <any>null;
            this.reasonCodeTypeId = _data["reasonCodeTypeId"] !== undefined ? _data["reasonCodeTypeId"] : <any>null;
            this.errorMessage = _data["errorMessage"] !== undefined ? _data["errorMessage"] : <any>null;
            if (Array.isArray(_data["param"])) {
                this.param = [] as any;
                for (let item of _data["param"])
                    this.param!.push(item);
            }
            else {
                this.param = <any>null;
            }
        }
    }

    static fromJS(data: any): ErrorResponseModel {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorResponseModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["propertyName"] = this.propertyName !== undefined ? this.propertyName : <any>null;
        data["reasonCodeTypeId"] = this.reasonCodeTypeId !== undefined ? this.reasonCodeTypeId : <any>null;
        data["errorMessage"] = this.errorMessage !== undefined ? this.errorMessage : <any>null;
        if (Array.isArray(this.param)) {
            data["param"] = [];
            for (let item of this.param)
                data["param"].push(item);
        }
        return data;
    }
}

export enum ReasonCodeEnum {
    RequiredField = 1,
    OutOfRange = 2,
    ValueToLarge = 3,
    ValueToSmall = 4,
    RecordAlreadyExists = 5,
    NotFound = 6,
    InvalidPassword = 7,
    UnAuthorized = 8,
    ForgotPasswordMultipleUserRecordsFound = 9,
    InputTooLong = 10,
    AlphaNumericOnly = 11,
    LettersOnly = 12,
    Invalid = 13,
    MaximumAttemptsExceeded = 14,
    NotUnique = 17,
    DomainParamMustMatchContextEffectiveDomainId = 18,
    InvalidEffectiveDomainForRequestingUser = 19,
    UpdateFailedDueToConcurrencyIssue = 20,
    DigitsOnly = 21,
    Reading_FutureDated = 100,
    RosterUser_CommunicationMissing = 200,
    RosterUser_MissingEmailAddress = 201,
    RosterUser_MissingEmailToPhoneAddress = 202,
    RosterUser_UserDoesNotExist = 203,
    CustomIntegration_MainTankAlreadyDefined = 250,
    DataChannelEventRule_MaxTankHeight_OutOfRange = 300,
    DataChannelEventRule_ScaledMax_OutOfRange = 301,
    DataChannelEventRule_ValueConvertUsageRateError = 303,
    DataChannelEventRule_NoDataChannelEventRules = 304,
    DataChannelEventRule_DuplicateSetPoints = 305,
    DataChannelScaling_RawUnitsAtScaledMinMatchMap = 350,
    DataChannelScaling_RawUnitsAtScaledMaxMatchMap = 351,
    DataChannelScaling_ScaledMinMatchMap = 352,
    DataChannelScaling_ScaledMaxMatchMap = 353,
    DataChannel_LinkedToResource = 370,
    ProblemReport_PrimaryChannel = 400,
    ProblemReport_AtleaseOneChannel = 401,
    DeliverySchedule_ScheduledTimeMustBeInTheFuture = 450,
    DeliverySchedule_MaxDeliveriesExceeded = 451,
    ChartDefault_SortIndexAlreadyExist = 501,
    ChartDefault_DuplicateChartName = 502,
    ChartDefault_AtLeastOneParameter = 503,
    Authentication_EmailAddressNotUnique = 600,
    Authentication_EmailAddressNotUniqueForProviderUpdate = 601,
    Authentication_EmailAddressEmptyForProviderUpdate = 602,
    Authentication_UserNameExistsAsEmailAddress = 604,
    Authentication_UserNameAlreadyExists = 605,
    Authentication_DeletedUserNameAlreadyExists = 606,
    DigitalDataChannel_LimitRange = 700,
    DigitalDataChannel_StateTextNotUnique = 701,
}

export class TagDto {
    tagId?: number;
    domainId?: string;
    name?: string | null;
    isSystemTag?: boolean;

    init(_data?: any) {
        if (_data) {
            this.tagId = _data["tagId"] !== undefined ? _data["tagId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.isSystemTag = _data["isSystemTag"] !== undefined ? _data["isSystemTag"] : <any>null;
        }
    }

    static fromJS(data: any): TagDto {
        data = typeof data === 'object' ? data : {};
        let result = new TagDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tagId"] = this.tagId !== undefined ? this.tagId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["isSystemTag"] = this.isSystemTag !== undefined ? this.isSystemTag : <any>null;
        return data;
    }
}

export class SiteInfoDto {
    id?: string;
    domainId?: string;
    domainName?: string | null;
    customerName?: string | null;
    address1?: string | null;
    address2?: string | null;
    address3?: string | null;
    city?: string | null;
    state?: string | null;
    country?: string | null;
    siteNumber?: string | null;
    searchStatus?: SiteNumberSearchStatusTypeEnum | null;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.domainName = _data["domainName"] !== undefined ? _data["domainName"] : <any>null;
            this.customerName = _data["customerName"] !== undefined ? _data["customerName"] : <any>null;
            this.address1 = _data["address1"] !== undefined ? _data["address1"] : <any>null;
            this.address2 = _data["address2"] !== undefined ? _data["address2"] : <any>null;
            this.address3 = _data["address3"] !== undefined ? _data["address3"] : <any>null;
            this.city = _data["city"] !== undefined ? _data["city"] : <any>null;
            this.state = _data["state"] !== undefined ? _data["state"] : <any>null;
            this.country = _data["country"] !== undefined ? _data["country"] : <any>null;
            this.siteNumber = _data["siteNumber"] !== undefined ? _data["siteNumber"] : <any>null;
            this.searchStatus = _data["searchStatus"] !== undefined ? _data["searchStatus"] : <any>null;
        }
    }

    static fromJS(data: any): SiteInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new SiteInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["domainName"] = this.domainName !== undefined ? this.domainName : <any>null;
        data["customerName"] = this.customerName !== undefined ? this.customerName : <any>null;
        data["address1"] = this.address1 !== undefined ? this.address1 : <any>null;
        data["address2"] = this.address2 !== undefined ? this.address2 : <any>null;
        data["address3"] = this.address3 !== undefined ? this.address3 : <any>null;
        data["city"] = this.city !== undefined ? this.city : <any>null;
        data["state"] = this.state !== undefined ? this.state : <any>null;
        data["country"] = this.country !== undefined ? this.country : <any>null;
        data["siteNumber"] = this.siteNumber !== undefined ? this.siteNumber : <any>null;
        data["searchStatus"] = this.searchStatus !== undefined ? this.searchStatus : <any>null;
        return data;
    }
}

export enum SiteNumberSearchStatusTypeEnum {
    RecordNotFound = 0,
    FromCurrentDomain = 1,
    FromOtherDomainInUse = 2,
    FromOtherDomainNotInUse = 3,
    FromExternalSystem = 4,
    FromExternalSystemInactive = 5,
    ExternalServiceNotAvailable = 99,
}

export class SiteDto {
    id?: string;
    domainId?: string;
    domainName?: string | null;
    name?: string | null;
    customerName?: string | null;
    timeZoneName?: string | null;
    timeZoneId?: number | null;
    contactName?: string | null;
    contactPhone?: string | null;
    notes?: string | null;
    status?: number | null;
    latitude?: number | null;
    longitude?: number | null;
    address1?: string | null;
    address2?: string | null;
    address3?: string | null;
    city?: string | null;
    state?: string | null;
    postalCode?: string | null;
    country?: string | null;
    isDeleted?: boolean | null;
    description?: string | null;
    siteNumber?: string | null;
    companyName?: string | null;
    isReadOnly?: boolean;
    isFromExternalSource?: boolean;
    productClass?: string | null;
    apciisLbshellSubscriber?: boolean;
    isGeoCodeManual?: boolean;
    geoAreaId?: number | null;
    searchStatus?: SiteNumberSearchStatusTypeEnum | null;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.domainName = _data["domainName"] !== undefined ? _data["domainName"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.customerName = _data["customerName"] !== undefined ? _data["customerName"] : <any>null;
            this.timeZoneName = _data["timeZoneName"] !== undefined ? _data["timeZoneName"] : <any>null;
            this.timeZoneId = _data["timeZoneId"] !== undefined ? _data["timeZoneId"] : <any>null;
            this.contactName = _data["contactName"] !== undefined ? _data["contactName"] : <any>null;
            this.contactPhone = _data["contactPhone"] !== undefined ? _data["contactPhone"] : <any>null;
            this.notes = _data["notes"] !== undefined ? _data["notes"] : <any>null;
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
            this.latitude = _data["latitude"] !== undefined ? _data["latitude"] : <any>null;
            this.longitude = _data["longitude"] !== undefined ? _data["longitude"] : <any>null;
            this.address1 = _data["address1"] !== undefined ? _data["address1"] : <any>null;
            this.address2 = _data["address2"] !== undefined ? _data["address2"] : <any>null;
            this.address3 = _data["address3"] !== undefined ? _data["address3"] : <any>null;
            this.city = _data["city"] !== undefined ? _data["city"] : <any>null;
            this.state = _data["state"] !== undefined ? _data["state"] : <any>null;
            this.postalCode = _data["postalCode"] !== undefined ? _data["postalCode"] : <any>null;
            this.country = _data["country"] !== undefined ? _data["country"] : <any>null;
            this.isDeleted = _data["isDeleted"] !== undefined ? _data["isDeleted"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.siteNumber = _data["siteNumber"] !== undefined ? _data["siteNumber"] : <any>null;
            this.companyName = _data["companyName"] !== undefined ? _data["companyName"] : <any>null;
            this.isReadOnly = _data["isReadOnly"] !== undefined ? _data["isReadOnly"] : <any>null;
            this.isFromExternalSource = _data["isFromExternalSource"] !== undefined ? _data["isFromExternalSource"] : <any>null;
            this.productClass = _data["productClass"] !== undefined ? _data["productClass"] : <any>null;
            this.apciisLbshellSubscriber = _data["apciisLbshellSubscriber"] !== undefined ? _data["apciisLbshellSubscriber"] : <any>null;
            this.isGeoCodeManual = _data["isGeoCodeManual"] !== undefined ? _data["isGeoCodeManual"] : <any>null;
            this.geoAreaId = _data["geoAreaId"] !== undefined ? _data["geoAreaId"] : <any>null;
            this.searchStatus = _data["searchStatus"] !== undefined ? _data["searchStatus"] : <any>null;
        }
    }

    static fromJS(data: any): SiteDto {
        data = typeof data === 'object' ? data : {};
        let result = new SiteDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["domainName"] = this.domainName !== undefined ? this.domainName : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["customerName"] = this.customerName !== undefined ? this.customerName : <any>null;
        data["timeZoneName"] = this.timeZoneName !== undefined ? this.timeZoneName : <any>null;
        data["timeZoneId"] = this.timeZoneId !== undefined ? this.timeZoneId : <any>null;
        data["contactName"] = this.contactName !== undefined ? this.contactName : <any>null;
        data["contactPhone"] = this.contactPhone !== undefined ? this.contactPhone : <any>null;
        data["notes"] = this.notes !== undefined ? this.notes : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["latitude"] = this.latitude !== undefined ? this.latitude : <any>null;
        data["longitude"] = this.longitude !== undefined ? this.longitude : <any>null;
        data["address1"] = this.address1 !== undefined ? this.address1 : <any>null;
        data["address2"] = this.address2 !== undefined ? this.address2 : <any>null;
        data["address3"] = this.address3 !== undefined ? this.address3 : <any>null;
        data["city"] = this.city !== undefined ? this.city : <any>null;
        data["state"] = this.state !== undefined ? this.state : <any>null;
        data["postalCode"] = this.postalCode !== undefined ? this.postalCode : <any>null;
        data["country"] = this.country !== undefined ? this.country : <any>null;
        data["isDeleted"] = this.isDeleted !== undefined ? this.isDeleted : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["siteNumber"] = this.siteNumber !== undefined ? this.siteNumber : <any>null;
        data["companyName"] = this.companyName !== undefined ? this.companyName : <any>null;
        data["isReadOnly"] = this.isReadOnly !== undefined ? this.isReadOnly : <any>null;
        data["isFromExternalSource"] = this.isFromExternalSource !== undefined ? this.isFromExternalSource : <any>null;
        data["productClass"] = this.productClass !== undefined ? this.productClass : <any>null;
        data["apciisLbshellSubscriber"] = this.apciisLbshellSubscriber !== undefined ? this.apciisLbshellSubscriber : <any>null;
        data["isGeoCodeManual"] = this.isGeoCodeManual !== undefined ? this.isGeoCodeManual : <any>null;
        data["geoAreaId"] = this.geoAreaId !== undefined ? this.geoAreaId : <any>null;
        data["searchStatus"] = this.searchStatus !== undefined ? this.searchStatus : <any>null;
        return data;
    }
}

export class RetrieveTreeNodeInfoListBranchByParentNodeResponse {
    retrieveTreeNodeInfoListBranchByParentNodeResult?: RetrieveTreeNodeInfoListResult | null;

    init(_data?: any) {
        if (_data) {
            this.retrieveTreeNodeInfoListBranchByParentNodeResult = _data["retrieveTreeNodeInfoListBranchByParentNodeResult"] ? RetrieveTreeNodeInfoListResult.fromJS(_data["retrieveTreeNodeInfoListBranchByParentNodeResult"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveTreeNodeInfoListBranchByParentNodeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveTreeNodeInfoListBranchByParentNodeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["retrieveTreeNodeInfoListBranchByParentNodeResult"] = this.retrieveTreeNodeInfoListBranchByParentNodeResult ? this.retrieveTreeNodeInfoListBranchByParentNodeResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveRetrieveTreeNodeInfoListBranchByParentNodeResponse extends RetrieveTreeNodeInfoListBranchByParentNodeResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveTreeNodeInfoListBranchByParentNodeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveTreeNodeInfoListBranchByParentNodeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class BaseListResultOfTreeNodeInfo {
    records?: TreeNodeInfo[] | null;
    totalRecords?: number | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["records"])) {
                this.records = [] as any;
                for (let item of _data["records"])
                    this.records!.push(TreeNodeInfo.fromJS(item));
            }
            else {
                this.records = <any>null;
            }
            this.totalRecords = _data["totalRecords"] !== undefined ? _data["totalRecords"] : <any>null;
        }
    }

    static fromJS(data: any): BaseListResultOfTreeNodeInfo {
        data = typeof data === 'object' ? data : {};
        let result = new BaseListResultOfTreeNodeInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.records)) {
            data["records"] = [];
            for (let item of this.records)
                data["records"].push(item.toJSON());
        }
        data["totalRecords"] = this.totalRecords !== undefined ? this.totalRecords : <any>null;
        return data;
    }
}

export class RetrieveTreeNodeInfoListResult extends BaseListResultOfTreeNodeInfo {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): RetrieveTreeNodeInfoListResult {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveTreeNodeInfoListResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class TreeNodeInfo {
    name?: string | null;
    nodeType?: TreeNodeType;
    watchListType?: WatchListType | null;
    breadCrumb?: string | null;
    delimitedFavouriteInfo?: string | null;
    level?: number;
    navigationDomainId?: string;
    isDefaultTreeNode?: boolean;
    levelTypes?: string | null;
    searchExpression?: string | null;
    dataChannelTypes?: DataChannelType[] | null;
    treeNodeList?: TreeNodeInfo[] | null;
    guidItemId?: string | null;
    intItemId?: number | null;
    isLoaded?: boolean;
    isDefault?: boolean;

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.nodeType = _data["nodeType"] !== undefined ? _data["nodeType"] : <any>null;
            this.watchListType = _data["watchListType"] !== undefined ? _data["watchListType"] : <any>null;
            this.breadCrumb = _data["breadCrumb"] !== undefined ? _data["breadCrumb"] : <any>null;
            this.delimitedFavouriteInfo = _data["delimitedFavouriteInfo"] !== undefined ? _data["delimitedFavouriteInfo"] : <any>null;
            this.level = _data["level"] !== undefined ? _data["level"] : <any>null;
            this.navigationDomainId = _data["navigationDomainId"] !== undefined ? _data["navigationDomainId"] : <any>null;
            this.isDefaultTreeNode = _data["isDefaultTreeNode"] !== undefined ? _data["isDefaultTreeNode"] : <any>null;
            this.levelTypes = _data["levelTypes"] !== undefined ? _data["levelTypes"] : <any>null;
            this.searchExpression = _data["searchExpression"] !== undefined ? _data["searchExpression"] : <any>null;
            if (Array.isArray(_data["dataChannelTypes"])) {
                this.dataChannelTypes = [] as any;
                for (let item of _data["dataChannelTypes"])
                    this.dataChannelTypes!.push(item);
            }
            else {
                this.dataChannelTypes = <any>null;
            }
            if (Array.isArray(_data["treeNodeList"])) {
                this.treeNodeList = [] as any;
                for (let item of _data["treeNodeList"])
                    this.treeNodeList!.push(TreeNodeInfo.fromJS(item));
            }
            else {
                this.treeNodeList = <any>null;
            }
            this.guidItemId = _data["guidItemId"] !== undefined ? _data["guidItemId"] : <any>null;
            this.intItemId = _data["intItemId"] !== undefined ? _data["intItemId"] : <any>null;
            this.isLoaded = _data["isLoaded"] !== undefined ? _data["isLoaded"] : <any>null;
            this.isDefault = _data["isDefault"] !== undefined ? _data["isDefault"] : <any>null;
        }
    }

    static fromJS(data: any): TreeNodeInfo {
        data = typeof data === 'object' ? data : {};
        let result = new TreeNodeInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["nodeType"] = this.nodeType !== undefined ? this.nodeType : <any>null;
        data["watchListType"] = this.watchListType !== undefined ? this.watchListType : <any>null;
        data["breadCrumb"] = this.breadCrumb !== undefined ? this.breadCrumb : <any>null;
        data["delimitedFavouriteInfo"] = this.delimitedFavouriteInfo !== undefined ? this.delimitedFavouriteInfo : <any>null;
        data["level"] = this.level !== undefined ? this.level : <any>null;
        data["navigationDomainId"] = this.navigationDomainId !== undefined ? this.navigationDomainId : <any>null;
        data["isDefaultTreeNode"] = this.isDefaultTreeNode !== undefined ? this.isDefaultTreeNode : <any>null;
        data["levelTypes"] = this.levelTypes !== undefined ? this.levelTypes : <any>null;
        data["searchExpression"] = this.searchExpression !== undefined ? this.searchExpression : <any>null;
        if (Array.isArray(this.dataChannelTypes)) {
            data["dataChannelTypes"] = [];
            for (let item of this.dataChannelTypes)
                data["dataChannelTypes"].push(item);
        }
        if (Array.isArray(this.treeNodeList)) {
            data["treeNodeList"] = [];
            for (let item of this.treeNodeList)
                data["treeNodeList"].push(item.toJSON());
        }
        data["guidItemId"] = this.guidItemId !== undefined ? this.guidItemId : <any>null;
        data["intItemId"] = this.intItemId !== undefined ? this.intItemId : <any>null;
        data["isLoaded"] = this.isLoaded !== undefined ? this.isLoaded : <any>null;
        data["isDefault"] = this.isDefault !== undefined ? this.isDefault : <any>null;
        return data;
    }
}

export enum TreeNodeType {
    Asset = 0,
    Favourite = 1,
    AssetGroup = 2,
    WatchListItem = 3,
}

export enum WatchListType {
    AssetDetails = 0,
    RTU = 1,
    ProblemReports = 2,
}

export enum DataChannelType {
    None = 0,
    Level = 1,
    Pressure = 2,
    DigitalInput = 3,
    BatteryVoltage = 4,
    Gps = 5,
    FlowMeter = 6,
    Counter = 7,
    Temperature = 8,
    OtherAnalog = 9,
    RtuCaseTemperature = 10,
    Diagnostic = 11,
    TotalizedLevel = 12,
    VirtualChannel = 13,
    Rtu = 14,
    Shock = 15,
    RateOfChange = 16,
    SignalStrength = 17,
    ChargeCurrent = 18,
}

export class ProblemDetails {
    type?: string | null;
    title?: string | null;
    status?: number | null;
    detail?: string | null;
    instance?: string | null;
    extensions?: { [key: string]: any; };

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.title = _data["title"] !== undefined ? _data["title"] : <any>null;
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
            this.detail = _data["detail"] !== undefined ? _data["detail"] : <any>null;
            this.instance = _data["instance"] !== undefined ? _data["instance"] : <any>null;
            if (_data["extensions"]) {
                this.extensions = {} as any;
                for (let key in _data["extensions"]) {
                    if (_data["extensions"].hasOwnProperty(key))
                        (<any>this.extensions)![key] = _data["extensions"][key] !== undefined ? _data["extensions"][key] : <any>null;
                }
            }
            else {
                this.extensions = <any>null;
            }
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["detail"] = this.detail !== undefined ? this.detail : <any>null;
        data["instance"] = this.instance !== undefined ? this.instance : <any>null;
        if (this.extensions) {
            data["extensions"] = {};
            for (let key in this.extensions) {
                if (this.extensions.hasOwnProperty(key))
                    (<any>data["extensions"])[key] = this.extensions[key] !== undefined ? this.extensions[key] : <any>null;
            }
        }
        return data;
    }
}

export class WcfProxyUserDetails {

    init(_data?: any) {
    }

    static fromJS(data: any): WcfProxyUserDetails {
        data = typeof data === 'object' ? data : {};
        let result = new WcfProxyUserDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export class RetrieveTreeNodeInfoListBranchByParentNodeRequest extends WcfProxyUserDetails {
    domainId?: string;
    parentNode?: TreeNodeInfo | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.parentNode = _data["parentNode"] ? TreeNodeInfo.fromJS(_data["parentNode"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveTreeNodeInfoListBranchByParentNodeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveTreeNodeInfoListBranchByParentNodeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["parentNode"] = this.parentNode ? this.parentNode.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveTreeNodeInfoListBranchByParentNodeRequest extends RetrieveTreeNodeInfoListBranchByParentNodeRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveTreeNodeInfoListBranchByParentNodeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveTreeNodeInfoListBranchByParentNodeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveTreeNodeInfoListRootByDomainResponse {
    retrieveTreeNodeInfoListRootByDomainResult?: RetrieveTreeNodeInfoListResult | null;

    init(_data?: any) {
        if (_data) {
            this.retrieveTreeNodeInfoListRootByDomainResult = _data["retrieveTreeNodeInfoListRootByDomainResult"] ? RetrieveTreeNodeInfoListResult.fromJS(_data["retrieveTreeNodeInfoListRootByDomainResult"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveTreeNodeInfoListRootByDomainResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveTreeNodeInfoListRootByDomainResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["retrieveTreeNodeInfoListRootByDomainResult"] = this.retrieveTreeNodeInfoListRootByDomainResult ? this.retrieveTreeNodeInfoListRootByDomainResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveRetrieveTreeNodeInfoListRootByDomainResponse extends RetrieveTreeNodeInfoListRootByDomainResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveTreeNodeInfoListRootByDomainResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveTreeNodeInfoListRootByDomainResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveTreeNodeInfoListRootByDomainRequest extends WcfProxyUserDetails {
    domainId?: string;
    additionalNodesToLoad?: TreeNodeInfo[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            if (Array.isArray(_data["additionalNodesToLoad"])) {
                this.additionalNodesToLoad = [] as any;
                for (let item of _data["additionalNodesToLoad"])
                    this.additionalNodesToLoad!.push(TreeNodeInfo.fromJS(item));
            }
            else {
                this.additionalNodesToLoad = <any>null;
            }
        }
    }

    static fromJS(data: any): RetrieveTreeNodeInfoListRootByDomainRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveTreeNodeInfoListRootByDomainRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        if (Array.isArray(this.additionalNodesToLoad)) {
            data["additionalNodesToLoad"] = [];
            for (let item of this.additionalNodesToLoad)
                data["additionalNodesToLoad"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveTreeNodeInfoListRootByDomainRequest extends RetrieveTreeNodeInfoListRootByDomainRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveTreeNodeInfoListRootByDomainRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveTreeNodeInfoListRootByDomainRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class UpdateUserPreferredTimeZoneRequest extends WcfProxyUserDetails {
    timeZoneId?: number;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.timeZoneId = _data["timeZoneId"] !== undefined ? _data["timeZoneId"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateUserPreferredTimeZoneRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateUserPreferredTimeZoneRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["timeZoneId"] = this.timeZoneId !== undefined ? this.timeZoneId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveUpdateUserPreferredTimeZoneRequest extends UpdateUserPreferredTimeZoneRequest {
    timeZoneId?: number;
    systemId?: string | null;
    utcOffset?: string;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.timeZoneId = _data["timeZoneId"] !== undefined ? _data["timeZoneId"] : <any>null;
            this.systemId = _data["systemId"] !== undefined ? _data["systemId"] : <any>null;
            this.utcOffset = _data["utcOffset"] !== undefined ? _data["utcOffset"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveUpdateUserPreferredTimeZoneRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveUpdateUserPreferredTimeZoneRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["timeZoneId"] = this.timeZoneId !== undefined ? this.timeZoneId : <any>null;
        data["systemId"] = this.systemId !== undefined ? this.systemId : <any>null;
        data["utcOffset"] = this.utcOffset !== undefined ? this.utcOffset : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class AuthenticateAndRetrieveApplicationInfoResponse {
    authenticateAndRetrieveApplicationInfoResult?: RetrieveApplicationInfoResult | null;

    init(_data?: any) {
        if (_data) {
            this.authenticateAndRetrieveApplicationInfoResult = _data["authenticateAndRetrieveApplicationInfoResult"] ? RetrieveApplicationInfoResult.fromJS(_data["authenticateAndRetrieveApplicationInfoResult"]) : <any>null;
        }
    }

    static fromJS(data: any): AuthenticateAndRetrieveApplicationInfoResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticateAndRetrieveApplicationInfoResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["authenticateAndRetrieveApplicationInfoResult"] = this.authenticateAndRetrieveApplicationInfoResult ? this.authenticateAndRetrieveApplicationInfoResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveAuthenticateAndRetrieveApplicationInfoResponse extends AuthenticateAndRetrieveApplicationInfoResponse {
    ianaTimezones?: EvolveTimezoneInfo[] | null;
    themeColor?: string | null;
    canUserEditTheirProfile?: boolean;
    userAccessToTranscendAndDolV3StatusId?: number;
    userNameConvertedForDolV3Application?: string | null;
    /** The asset summary template for the effective domain.
             */
    effectiveDomainAssetSummaryTemplate?: AssetSummaryTemplate | null;
    /** The asset summary template "JSON'ified" for the home domain.
             */
    homeDomainAssetSummaryTemplate?: AssetSummaryTemplate | null;
    /** Default favourites information for the specific user.
             */
    defaultFavourites?: EvolveFavourite[] | null;
    /** ShowPreviewPage indicator for the specific user.
             */
    showPreviewPage?: boolean;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["ianaTimezones"])) {
                this.ianaTimezones = [] as any;
                for (let item of _data["ianaTimezones"])
                    this.ianaTimezones!.push(EvolveTimezoneInfo.fromJS(item));
            }
            else {
                this.ianaTimezones = <any>null;
            }
            this.themeColor = _data["themeColor"] !== undefined ? _data["themeColor"] : <any>null;
            this.canUserEditTheirProfile = _data["canUserEditTheirProfile"] !== undefined ? _data["canUserEditTheirProfile"] : <any>null;
            this.userAccessToTranscendAndDolV3StatusId = _data["userAccessToTranscendAndDolV3StatusId"] !== undefined ? _data["userAccessToTranscendAndDolV3StatusId"] : <any>null;
            this.userNameConvertedForDolV3Application = _data["userNameConvertedForDolV3Application"] !== undefined ? _data["userNameConvertedForDolV3Application"] : <any>null;
            this.effectiveDomainAssetSummaryTemplate = _data["effectiveDomainAssetSummaryTemplate"] ? AssetSummaryTemplate.fromJS(_data["effectiveDomainAssetSummaryTemplate"]) : <any>null;
            this.homeDomainAssetSummaryTemplate = _data["homeDomainAssetSummaryTemplate"] ? AssetSummaryTemplate.fromJS(_data["homeDomainAssetSummaryTemplate"]) : <any>null;
            if (Array.isArray(_data["defaultFavourites"])) {
                this.defaultFavourites = [] as any;
                for (let item of _data["defaultFavourites"])
                    this.defaultFavourites!.push(EvolveFavourite.fromJS(item));
            }
            else {
                this.defaultFavourites = <any>null;
            }
            this.showPreviewPage = _data["showPreviewPage"] !== undefined ? _data["showPreviewPage"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveAuthenticateAndRetrieveApplicationInfoResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveAuthenticateAndRetrieveApplicationInfoResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.ianaTimezones)) {
            data["ianaTimezones"] = [];
            for (let item of this.ianaTimezones)
                data["ianaTimezones"].push(item.toJSON());
        }
        data["themeColor"] = this.themeColor !== undefined ? this.themeColor : <any>null;
        data["canUserEditTheirProfile"] = this.canUserEditTheirProfile !== undefined ? this.canUserEditTheirProfile : <any>null;
        data["userAccessToTranscendAndDolV3StatusId"] = this.userAccessToTranscendAndDolV3StatusId !== undefined ? this.userAccessToTranscendAndDolV3StatusId : <any>null;
        data["userNameConvertedForDolV3Application"] = this.userNameConvertedForDolV3Application !== undefined ? this.userNameConvertedForDolV3Application : <any>null;
        data["effectiveDomainAssetSummaryTemplate"] = this.effectiveDomainAssetSummaryTemplate ? this.effectiveDomainAssetSummaryTemplate.toJSON() : <any>null;
        data["homeDomainAssetSummaryTemplate"] = this.homeDomainAssetSummaryTemplate ? this.homeDomainAssetSummaryTemplate.toJSON() : <any>null;
        if (Array.isArray(this.defaultFavourites)) {
            data["defaultFavourites"] = [];
            for (let item of this.defaultFavourites)
                data["defaultFavourites"].push(item.toJSON());
        }
        data["showPreviewPage"] = this.showPreviewPage !== undefined ? this.showPreviewPage : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveTimezoneInfo {
    abbreviatedDisplayNameResourceKey?: string | null;
    delimitedDSTInfo?: string | null;
    displayName?: string | null;
    displayNameResourceKey?: string | null;
    isLoaded?: boolean;
    standardName?: string | null;
    supportsDaylightSavingsTime?: boolean;
    systemId?: string | null;
    timezoneId?: number | null;
    utcOffset?: string | null;
    ianaTimezoneId?: string | null;

    init(_data?: any) {
        if (_data) {
            this.abbreviatedDisplayNameResourceKey = _data["abbreviatedDisplayNameResourceKey"] !== undefined ? _data["abbreviatedDisplayNameResourceKey"] : <any>null;
            this.delimitedDSTInfo = _data["delimitedDSTInfo"] !== undefined ? _data["delimitedDSTInfo"] : <any>null;
            this.displayName = _data["displayName"] !== undefined ? _data["displayName"] : <any>null;
            this.displayNameResourceKey = _data["displayNameResourceKey"] !== undefined ? _data["displayNameResourceKey"] : <any>null;
            this.isLoaded = _data["isLoaded"] !== undefined ? _data["isLoaded"] : <any>null;
            this.standardName = _data["standardName"] !== undefined ? _data["standardName"] : <any>null;
            this.supportsDaylightSavingsTime = _data["supportsDaylightSavingsTime"] !== undefined ? _data["supportsDaylightSavingsTime"] : <any>null;
            this.systemId = _data["systemId"] !== undefined ? _data["systemId"] : <any>null;
            this.timezoneId = _data["timezoneId"] !== undefined ? _data["timezoneId"] : <any>null;
            this.utcOffset = _data["utcOffset"] !== undefined ? _data["utcOffset"] : <any>null;
            this.ianaTimezoneId = _data["ianaTimezoneId"] !== undefined ? _data["ianaTimezoneId"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveTimezoneInfo {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveTimezoneInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["abbreviatedDisplayNameResourceKey"] = this.abbreviatedDisplayNameResourceKey !== undefined ? this.abbreviatedDisplayNameResourceKey : <any>null;
        data["delimitedDSTInfo"] = this.delimitedDSTInfo !== undefined ? this.delimitedDSTInfo : <any>null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : <any>null;
        data["displayNameResourceKey"] = this.displayNameResourceKey !== undefined ? this.displayNameResourceKey : <any>null;
        data["isLoaded"] = this.isLoaded !== undefined ? this.isLoaded : <any>null;
        data["standardName"] = this.standardName !== undefined ? this.standardName : <any>null;
        data["supportsDaylightSavingsTime"] = this.supportsDaylightSavingsTime !== undefined ? this.supportsDaylightSavingsTime : <any>null;
        data["systemId"] = this.systemId !== undefined ? this.systemId : <any>null;
        data["timezoneId"] = this.timezoneId !== undefined ? this.timezoneId : <any>null;
        data["utcOffset"] = this.utcOffset !== undefined ? this.utcOffset : <any>null;
        data["ianaTimezoneId"] = this.ianaTimezoneId !== undefined ? this.ianaTimezoneId : <any>null;
        return data;
    }
}

/** The root object for asset summary template. */
export class AssetSummaryTemplate {
    fields?: AssetSummaryTemplateFields | null;

    init(_data?: any) {
        if (_data) {
            this.fields = _data["fields"] ? AssetSummaryTemplateFields.fromJS(_data["fields"]) : <any>null;
        }
    }

    static fromJS(data: any): AssetSummaryTemplate {
        data = typeof data === 'object' ? data : {};
        let result = new AssetSummaryTemplate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fields"] = this.fields ? this.fields.toJSON() : <any>null;
        return data;
    }
}

/** Class that has the fields because XML is a funny guy. */
export class AssetSummaryTemplateFields {
    field?: AssetSummaryTemplateField[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["field"])) {
                this.field = [] as any;
                for (let item of _data["field"])
                    this.field!.push(AssetSummaryTemplateField.fromJS(item));
            }
            else {
                this.field = <any>null;
            }
        }
    }

    static fromJS(data: any): AssetSummaryTemplateFields {
        data = typeof data === 'object' ? data : {};
        let result = new AssetSummaryTemplateFields();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.field)) {
            data["field"] = [];
            for (let item of this.field)
                data["field"].push(item.toJSON());
        }
        return data;
    }
}

/** Individual column field for asset summary template. */
export class AssetSummaryTemplateField {
    name?: string | null;
    title?: string | null;
    order?: string | null;

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.title = _data["title"] !== undefined ? _data["title"] : <any>null;
            this.order = _data["order"] !== undefined ? _data["order"] : <any>null;
        }
    }

    static fromJS(data: any): AssetSummaryTemplateField {
        data = typeof data === 'object' ? data : {};
        let result = new AssetSummaryTemplateField();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["order"] = this.order !== undefined ? this.order : <any>null;
        return data;
    }
}

/** The evolve favourite object. */
export class EvolveFavourite {
    /** Id of the favourite.
             */
    favouriteId?: number;
    /** The domain the favourite is saved under.
             */
    domainId?: string;
    /** The domain id if an asset group is published from another domain.
             */
    navigationDomainId?: string | null;
    /** The user who created the favourite.
             */
    userId?: string;
    /** The name of the favourite.
             */
    description?: string | null;
    /** The string representation of the filter by enum. AssetListFilterOptions.
             */
    filterBy?: AssetListFilterOptions;
    /** The search text.
             */
    filterText?: string | null;
    /** The string representation of the group by enum. AssetListGroupingOptions
             */
    groupBy?: AssetSummaryGroupingOptions;
    /** The group sort direction.
             */
    groupBySortDirection?: ListSortDirection;
    /** The display unit filter.
             */
    displayUnit?: UnitType | null;
    /** The data channel types filter.
             */
    dataChannelTypes?: DataChannelType[] | null;
    /** The inventory states filter.
             */
    inventoryStates?: string[] | null;
    /** The sort column.
             */
    sortColumnName?: string | null;
    /** The direction of the sort column.
             */
    sortDirection?: ListSortDirection;
    /** The asset search expression.
             */
    assetSearchExpression?: string | null;
    /** Flag indicating whether this favourite is default or not.
             */
    isDefaultFavorite?: boolean;
    /** The event types for the favourite. Not yet implemented in legacy class objects since GOS.
             */
    eventTypes?: string[] | null;

    init(_data?: any) {
        if (_data) {
            this.favouriteId = _data["favouriteId"] !== undefined ? _data["favouriteId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.navigationDomainId = _data["navigationDomainId"] !== undefined ? _data["navigationDomainId"] : <any>null;
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.filterBy = _data["filterBy"] !== undefined ? _data["filterBy"] : <any>null;
            this.filterText = _data["filterText"] !== undefined ? _data["filterText"] : <any>null;
            this.groupBy = _data["groupBy"] !== undefined ? _data["groupBy"] : <any>null;
            this.groupBySortDirection = _data["groupBySortDirection"] !== undefined ? _data["groupBySortDirection"] : <any>null;
            this.displayUnit = _data["displayUnit"] !== undefined ? _data["displayUnit"] : <any>null;
            if (Array.isArray(_data["dataChannelTypes"])) {
                this.dataChannelTypes = [] as any;
                for (let item of _data["dataChannelTypes"])
                    this.dataChannelTypes!.push(item);
            }
            else {
                this.dataChannelTypes = <any>null;
            }
            if (Array.isArray(_data["inventoryStates"])) {
                this.inventoryStates = [] as any;
                for (let item of _data["inventoryStates"])
                    this.inventoryStates!.push(item);
            }
            else {
                this.inventoryStates = <any>null;
            }
            this.sortColumnName = _data["sortColumnName"] !== undefined ? _data["sortColumnName"] : <any>null;
            this.sortDirection = _data["sortDirection"] !== undefined ? _data["sortDirection"] : <any>null;
            this.assetSearchExpression = _data["assetSearchExpression"] !== undefined ? _data["assetSearchExpression"] : <any>null;
            this.isDefaultFavorite = _data["isDefaultFavorite"] !== undefined ? _data["isDefaultFavorite"] : <any>null;
            if (Array.isArray(_data["eventTypes"])) {
                this.eventTypes = [] as any;
                for (let item of _data["eventTypes"])
                    this.eventTypes!.push(item);
            }
            else {
                this.eventTypes = <any>null;
            }
        }
    }

    static fromJS(data: any): EvolveFavourite {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveFavourite();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["favouriteId"] = this.favouriteId !== undefined ? this.favouriteId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["navigationDomainId"] = this.navigationDomainId !== undefined ? this.navigationDomainId : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["filterBy"] = this.filterBy !== undefined ? this.filterBy : <any>null;
        data["filterText"] = this.filterText !== undefined ? this.filterText : <any>null;
        data["groupBy"] = this.groupBy !== undefined ? this.groupBy : <any>null;
        data["groupBySortDirection"] = this.groupBySortDirection !== undefined ? this.groupBySortDirection : <any>null;
        data["displayUnit"] = this.displayUnit !== undefined ? this.displayUnit : <any>null;
        if (Array.isArray(this.dataChannelTypes)) {
            data["dataChannelTypes"] = [];
            for (let item of this.dataChannelTypes)
                data["dataChannelTypes"].push(item);
        }
        if (Array.isArray(this.inventoryStates)) {
            data["inventoryStates"] = [];
            for (let item of this.inventoryStates)
                data["inventoryStates"].push(item);
        }
        data["sortColumnName"] = this.sortColumnName !== undefined ? this.sortColumnName : <any>null;
        data["sortDirection"] = this.sortDirection !== undefined ? this.sortDirection : <any>null;
        data["assetSearchExpression"] = this.assetSearchExpression !== undefined ? this.assetSearchExpression : <any>null;
        data["isDefaultFavorite"] = this.isDefaultFavorite !== undefined ? this.isDefaultFavorite : <any>null;
        if (Array.isArray(this.eventTypes)) {
            data["eventTypes"] = [];
            for (let item of this.eventTypes)
                data["eventTypes"].push(item);
        }
        return data;
    }
}

export enum AssetListFilterOptions {
    Asset = 0,
    RTU = 1,
    FTPId = 2,
    Site = 3,
    Product = 4,
    CustomerName = 5,
    AllFields = 6,
}

export enum AssetSummaryGroupingOptions {
    Asset = 0,
    CustomerName = 1,
    Location = 2,
    None = 3,
}

export enum ListSortDirection {
    Ascending = 0,
    Descending = 1,
}

export enum UnitType {
    WaterColumnMillimeters = 0,
    WaterColumnCentimeters = 1,
    WaterColumnMeters = 2,
    HydrogenMillimeters = 3,
    HydrogenCentimeters = 4,
    HydrogenMeters = 5,
    WaterColumnInches = 10,
    HydrogenInches = 11,
    Millimeters = 20,
    Centimeters = 21,
    Meters = 22,
    Inches = 30,
    Feet = 31,
    Yards = 32,
    Liters = 40,
    KiloLiters = 41,
    CubicMeters = 42,
    Default = 45,
    USGallons = 50,
    UKGallons = 51,
    CubicInches = 52,
    CubicFeet = 53,
    CubicYards = 54,
    Kilograms = 60,
    MetricTonne = 61,
    Pounds = 70,
    TonUS = 71,
    StandardCubicMeter = 80,
    StandardCubicFoot = 90,
    PercentFull = 100,
}

export class RetrieveApplicationInfoResult {
    authenticationResult?: UserAuthenticationResult;
    userInfo?: UserInfo | null;
    homeDomain?: DomainDetail | null;
    effectiveDomain?: DomainDetail | null;
    domainEventSettings?: UserEventSettingsInfo[] | null;
    userPermissions?: UserPermissionsInfo | null;
    accessibleDomains?: DomainDetail[] | null;
    domainTimezones?: TimezoneInfo[] | null;
    domainPresetReports?: PresetReportInfo[] | null;
    userPreferredTimeZoneId?: number;
    migratedtoTranscend?: boolean;

    init(_data?: any) {
        if (_data) {
            this.authenticationResult = _data["authenticationResult"] !== undefined ? _data["authenticationResult"] : <any>null;
            this.userInfo = _data["userInfo"] ? UserInfo.fromJS(_data["userInfo"]) : <any>null;
            this.homeDomain = _data["homeDomain"] ? DomainDetail.fromJS(_data["homeDomain"]) : <any>null;
            this.effectiveDomain = _data["effectiveDomain"] ? DomainDetail.fromJS(_data["effectiveDomain"]) : <any>null;
            if (Array.isArray(_data["domainEventSettings"])) {
                this.domainEventSettings = [] as any;
                for (let item of _data["domainEventSettings"])
                    this.domainEventSettings!.push(UserEventSettingsInfo.fromJS(item));
            }
            else {
                this.domainEventSettings = <any>null;
            }
            this.userPermissions = _data["userPermissions"] ? UserPermissionsInfo.fromJS(_data["userPermissions"]) : <any>null;
            if (Array.isArray(_data["accessibleDomains"])) {
                this.accessibleDomains = [] as any;
                for (let item of _data["accessibleDomains"])
                    this.accessibleDomains!.push(DomainDetail.fromJS(item));
            }
            else {
                this.accessibleDomains = <any>null;
            }
            if (Array.isArray(_data["domainTimezones"])) {
                this.domainTimezones = [] as any;
                for (let item of _data["domainTimezones"])
                    this.domainTimezones!.push(TimezoneInfo.fromJS(item));
            }
            else {
                this.domainTimezones = <any>null;
            }
            if (Array.isArray(_data["domainPresetReports"])) {
                this.domainPresetReports = [] as any;
                for (let item of _data["domainPresetReports"])
                    this.domainPresetReports!.push(PresetReportInfo.fromJS(item));
            }
            else {
                this.domainPresetReports = <any>null;
            }
            this.userPreferredTimeZoneId = _data["userPreferredTimeZoneId"] !== undefined ? _data["userPreferredTimeZoneId"] : <any>null;
            this.migratedtoTranscend = _data["migratedtoTranscend"] !== undefined ? _data["migratedtoTranscend"] : <any>null;
        }
    }

    static fromJS(data: any): RetrieveApplicationInfoResult {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveApplicationInfoResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["authenticationResult"] = this.authenticationResult !== undefined ? this.authenticationResult : <any>null;
        data["userInfo"] = this.userInfo ? this.userInfo.toJSON() : <any>null;
        data["homeDomain"] = this.homeDomain ? this.homeDomain.toJSON() : <any>null;
        data["effectiveDomain"] = this.effectiveDomain ? this.effectiveDomain.toJSON() : <any>null;
        if (Array.isArray(this.domainEventSettings)) {
            data["domainEventSettings"] = [];
            for (let item of this.domainEventSettings)
                data["domainEventSettings"].push(item.toJSON());
        }
        data["userPermissions"] = this.userPermissions ? this.userPermissions.toJSON() : <any>null;
        if (Array.isArray(this.accessibleDomains)) {
            data["accessibleDomains"] = [];
            for (let item of this.accessibleDomains)
                data["accessibleDomains"].push(item.toJSON());
        }
        if (Array.isArray(this.domainTimezones)) {
            data["domainTimezones"] = [];
            for (let item of this.domainTimezones)
                data["domainTimezones"].push(item.toJSON());
        }
        if (Array.isArray(this.domainPresetReports)) {
            data["domainPresetReports"] = [];
            for (let item of this.domainPresetReports)
                data["domainPresetReports"].push(item.toJSON());
        }
        data["userPreferredTimeZoneId"] = this.userPreferredTimeZoneId !== undefined ? this.userPreferredTimeZoneId : <any>null;
        data["migratedtoTranscend"] = this.migratedtoTranscend !== undefined ? this.migratedtoTranscend : <any>null;
        return data;
    }
}

export enum UserAuthenticationResult {
    Authenticated = 0,
    InvalidUsernameAndPassword = 1,
    DomainUserLoginDisabled = 2,
    UserDoesNotExists = 3,
    WebLoginDisabled = 4,
}

export class UserInfo {
    userId?: string;
    username?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    password?: string | null;
    domainId?: string;
    domainName?: string | null;
    email?: string | null;
    userType?: UserType;
    isPasswordChangeRequired?: boolean;
    isLoaded?: boolean;
    integrationProfile?: IntegrationProfileType;
    applicationTimeout?: string;
    defaultFavourite?: { [key: string]: TreeNodeInfo; } | null;
    defaultDomainId?: string | null;
    migratedToTranscend?: boolean;
    localTimezoneSystemId?: string | null;
    localTimezoneOffset?: string;

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.username = _data["username"] !== undefined ? _data["username"] : <any>null;
            this.firstName = _data["firstName"] !== undefined ? _data["firstName"] : <any>null;
            this.lastName = _data["lastName"] !== undefined ? _data["lastName"] : <any>null;
            this.password = _data["password"] !== undefined ? _data["password"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.domainName = _data["domainName"] !== undefined ? _data["domainName"] : <any>null;
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
            this.userType = _data["userType"] !== undefined ? _data["userType"] : <any>null;
            this.isPasswordChangeRequired = _data["isPasswordChangeRequired"] !== undefined ? _data["isPasswordChangeRequired"] : <any>null;
            this.isLoaded = _data["isLoaded"] !== undefined ? _data["isLoaded"] : <any>null;
            this.integrationProfile = _data["integrationProfile"] !== undefined ? _data["integrationProfile"] : <any>null;
            this.applicationTimeout = _data["applicationTimeout"] !== undefined ? _data["applicationTimeout"] : <any>null;
            if (_data["defaultFavourite"]) {
                this.defaultFavourite = {} as any;
                for (let key in _data["defaultFavourite"]) {
                    if (_data["defaultFavourite"].hasOwnProperty(key))
                        (<any>this.defaultFavourite)![key] = _data["defaultFavourite"][key] ? TreeNodeInfo.fromJS(_data["defaultFavourite"][key]) : new TreeNodeInfo();
                }
            }
            else {
                this.defaultFavourite = <any>null;
            }
            this.defaultDomainId = _data["defaultDomainId"] !== undefined ? _data["defaultDomainId"] : <any>null;
            this.migratedToTranscend = _data["migratedToTranscend"] !== undefined ? _data["migratedToTranscend"] : <any>null;
            this.localTimezoneSystemId = _data["localTimezoneSystemId"] !== undefined ? _data["localTimezoneSystemId"] : <any>null;
            this.localTimezoneOffset = _data["localTimezoneOffset"] !== undefined ? _data["localTimezoneOffset"] : <any>null;
        }
    }

    static fromJS(data: any): UserInfo {
        data = typeof data === 'object' ? data : {};
        let result = new UserInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["username"] = this.username !== undefined ? this.username : <any>null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["domainName"] = this.domainName !== undefined ? this.domainName : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["userType"] = this.userType !== undefined ? this.userType : <any>null;
        data["isPasswordChangeRequired"] = this.isPasswordChangeRequired !== undefined ? this.isPasswordChangeRequired : <any>null;
        data["isLoaded"] = this.isLoaded !== undefined ? this.isLoaded : <any>null;
        data["integrationProfile"] = this.integrationProfile !== undefined ? this.integrationProfile : <any>null;
        data["applicationTimeout"] = this.applicationTimeout !== undefined ? this.applicationTimeout : <any>null;
        if (this.defaultFavourite) {
            data["defaultFavourite"] = {};
            for (let key in this.defaultFavourite) {
                if (this.defaultFavourite.hasOwnProperty(key))
                    (<any>data["defaultFavourite"])[key] = this.defaultFavourite[key] ? this.defaultFavourite[key].toJSON() : <any>null;
            }
        }
        data["defaultDomainId"] = this.defaultDomainId !== undefined ? this.defaultDomainId : <any>null;
        data["migratedToTranscend"] = this.migratedToTranscend !== undefined ? this.migratedToTranscend : <any>null;
        data["localTimezoneSystemId"] = this.localTimezoneSystemId !== undefined ? this.localTimezoneSystemId : <any>null;
        data["localTimezoneOffset"] = this.localTimezoneOffset !== undefined ? this.localTimezoneOffset : <any>null;
        return data;
    }
}

export enum UserType {
    WebUser = 1,
    WebServiceUser = 2,
    WebUserAndWebServiceUser = 3,
    FTPUser = 4,
    SubsystemUser = 5,
}

export enum IntegrationProfileType {
    None = 0,
    APCI = 1,
}

export class DomainDetail {
    domainId?: string;
    name?: string | null;
    displayName?: string | null;
    parentDomainId?: string | null;
    parentDomainName?: string | null;
    applicationTimeout?: string;
    defaultSiteId?: string | null;
    logo?: string | null;
    ftpFileFormat?: FtpFileFormat;
    assetSummaryTemplate?: string | null;
    assetTitleTemplate?: string | null;
    assetEventRowColoringEnabled?: boolean;
    maxGraphDays?: number;
    defaultEventStateDescription?: string | null;
    isOrphanChannelScanEnabled?: boolean;
    level?: number;
    indentedName?: string | null;
    disableUserLogins?: boolean;
    isLoaded?: boolean;
    integrationProfile?: IntegrationProfileType | null;
    referenceDocumentUrlPrefix?: string | null;
    hasPublishTargets?: boolean;
    canSubscribeToPublishedDataChannel?: boolean;
    isBdtEnabled?: boolean | null;
    isDeliveryForecasted?: boolean;
    isDataChannelEventRulesAutoLinked?: boolean;
    isFederatedSecurityEnabled?: boolean;
    itemsPerPage?: number;
    defaultRTUEventRuleGroupId?: number | null;
    mapType?: number;
    useAssetsummaryTable?: boolean;
    isAudibleEventNotificationEnabled?: boolean;

    init(_data?: any) {
        if (_data) {
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.displayName = _data["displayName"] !== undefined ? _data["displayName"] : <any>null;
            this.parentDomainId = _data["parentDomainId"] !== undefined ? _data["parentDomainId"] : <any>null;
            this.parentDomainName = _data["parentDomainName"] !== undefined ? _data["parentDomainName"] : <any>null;
            this.applicationTimeout = _data["applicationTimeout"] !== undefined ? _data["applicationTimeout"] : <any>null;
            this.defaultSiteId = _data["defaultSiteId"] !== undefined ? _data["defaultSiteId"] : <any>null;
            this.logo = _data["logo"] !== undefined ? _data["logo"] : <any>null;
            this.ftpFileFormat = _data["ftpFileFormat"] !== undefined ? _data["ftpFileFormat"] : <any>null;
            this.assetSummaryTemplate = _data["assetSummaryTemplate"] !== undefined ? _data["assetSummaryTemplate"] : <any>null;
            this.assetTitleTemplate = _data["assetTitleTemplate"] !== undefined ? _data["assetTitleTemplate"] : <any>null;
            this.assetEventRowColoringEnabled = _data["assetEventRowColoringEnabled"] !== undefined ? _data["assetEventRowColoringEnabled"] : <any>null;
            this.maxGraphDays = _data["maxGraphDays"] !== undefined ? _data["maxGraphDays"] : <any>null;
            this.defaultEventStateDescription = _data["defaultEventStateDescription"] !== undefined ? _data["defaultEventStateDescription"] : <any>null;
            this.isOrphanChannelScanEnabled = _data["isOrphanChannelScanEnabled"] !== undefined ? _data["isOrphanChannelScanEnabled"] : <any>null;
            this.level = _data["level"] !== undefined ? _data["level"] : <any>null;
            this.indentedName = _data["indentedName"] !== undefined ? _data["indentedName"] : <any>null;
            this.disableUserLogins = _data["disableUserLogins"] !== undefined ? _data["disableUserLogins"] : <any>null;
            this.isLoaded = _data["isLoaded"] !== undefined ? _data["isLoaded"] : <any>null;
            this.integrationProfile = _data["integrationProfile"] !== undefined ? _data["integrationProfile"] : <any>null;
            this.referenceDocumentUrlPrefix = _data["referenceDocumentUrlPrefix"] !== undefined ? _data["referenceDocumentUrlPrefix"] : <any>null;
            this.hasPublishTargets = _data["hasPublishTargets"] !== undefined ? _data["hasPublishTargets"] : <any>null;
            this.canSubscribeToPublishedDataChannel = _data["canSubscribeToPublishedDataChannel"] !== undefined ? _data["canSubscribeToPublishedDataChannel"] : <any>null;
            this.isBdtEnabled = _data["isBdtEnabled"] !== undefined ? _data["isBdtEnabled"] : <any>null;
            this.isDeliveryForecasted = _data["isDeliveryForecasted"] !== undefined ? _data["isDeliveryForecasted"] : <any>null;
            this.isDataChannelEventRulesAutoLinked = _data["isDataChannelEventRulesAutoLinked"] !== undefined ? _data["isDataChannelEventRulesAutoLinked"] : <any>null;
            this.isFederatedSecurityEnabled = _data["isFederatedSecurityEnabled"] !== undefined ? _data["isFederatedSecurityEnabled"] : <any>null;
            this.itemsPerPage = _data["itemsPerPage"] !== undefined ? _data["itemsPerPage"] : <any>null;
            this.defaultRTUEventRuleGroupId = _data["defaultRTUEventRuleGroupId"] !== undefined ? _data["defaultRTUEventRuleGroupId"] : <any>null;
            this.mapType = _data["mapType"] !== undefined ? _data["mapType"] : <any>null;
            this.useAssetsummaryTable = _data["useAssetsummaryTable"] !== undefined ? _data["useAssetsummaryTable"] : <any>null;
            this.isAudibleEventNotificationEnabled = _data["isAudibleEventNotificationEnabled"] !== undefined ? _data["isAudibleEventNotificationEnabled"] : <any>null;
        }
    }

    static fromJS(data: any): DomainDetail {
        data = typeof data === 'object' ? data : {};
        let result = new DomainDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : <any>null;
        data["parentDomainId"] = this.parentDomainId !== undefined ? this.parentDomainId : <any>null;
        data["parentDomainName"] = this.parentDomainName !== undefined ? this.parentDomainName : <any>null;
        data["applicationTimeout"] = this.applicationTimeout !== undefined ? this.applicationTimeout : <any>null;
        data["defaultSiteId"] = this.defaultSiteId !== undefined ? this.defaultSiteId : <any>null;
        data["logo"] = this.logo !== undefined ? this.logo : <any>null;
        data["ftpFileFormat"] = this.ftpFileFormat !== undefined ? this.ftpFileFormat : <any>null;
        data["assetSummaryTemplate"] = this.assetSummaryTemplate !== undefined ? this.assetSummaryTemplate : <any>null;
        data["assetTitleTemplate"] = this.assetTitleTemplate !== undefined ? this.assetTitleTemplate : <any>null;
        data["assetEventRowColoringEnabled"] = this.assetEventRowColoringEnabled !== undefined ? this.assetEventRowColoringEnabled : <any>null;
        data["maxGraphDays"] = this.maxGraphDays !== undefined ? this.maxGraphDays : <any>null;
        data["defaultEventStateDescription"] = this.defaultEventStateDescription !== undefined ? this.defaultEventStateDescription : <any>null;
        data["isOrphanChannelScanEnabled"] = this.isOrphanChannelScanEnabled !== undefined ? this.isOrphanChannelScanEnabled : <any>null;
        data["level"] = this.level !== undefined ? this.level : <any>null;
        data["indentedName"] = this.indentedName !== undefined ? this.indentedName : <any>null;
        data["disableUserLogins"] = this.disableUserLogins !== undefined ? this.disableUserLogins : <any>null;
        data["isLoaded"] = this.isLoaded !== undefined ? this.isLoaded : <any>null;
        data["integrationProfile"] = this.integrationProfile !== undefined ? this.integrationProfile : <any>null;
        data["referenceDocumentUrlPrefix"] = this.referenceDocumentUrlPrefix !== undefined ? this.referenceDocumentUrlPrefix : <any>null;
        data["hasPublishTargets"] = this.hasPublishTargets !== undefined ? this.hasPublishTargets : <any>null;
        data["canSubscribeToPublishedDataChannel"] = this.canSubscribeToPublishedDataChannel !== undefined ? this.canSubscribeToPublishedDataChannel : <any>null;
        data["isBdtEnabled"] = this.isBdtEnabled !== undefined ? this.isBdtEnabled : <any>null;
        data["isDeliveryForecasted"] = this.isDeliveryForecasted !== undefined ? this.isDeliveryForecasted : <any>null;
        data["isDataChannelEventRulesAutoLinked"] = this.isDataChannelEventRulesAutoLinked !== undefined ? this.isDataChannelEventRulesAutoLinked : <any>null;
        data["isFederatedSecurityEnabled"] = this.isFederatedSecurityEnabled !== undefined ? this.isFederatedSecurityEnabled : <any>null;
        data["itemsPerPage"] = this.itemsPerPage !== undefined ? this.itemsPerPage : <any>null;
        data["defaultRTUEventRuleGroupId"] = this.defaultRTUEventRuleGroupId !== undefined ? this.defaultRTUEventRuleGroupId : <any>null;
        data["mapType"] = this.mapType !== undefined ? this.mapType : <any>null;
        data["useAssetsummaryTable"] = this.useAssetsummaryTable !== undefined ? this.useAssetsummaryTable : <any>null;
        data["isAudibleEventNotificationEnabled"] = this.isAudibleEventNotificationEnabled !== undefined ? this.isAudibleEventNotificationEnabled : <any>null;
        return data;
    }
}

export enum FtpFileFormat {
    None = 0,
    Praxair = 1,
    Apci = 2,
    Intellitrans = 5,
    Yara = 6,
    Generic = 7,
    Boc = 8,
    Generic2 = 9,
    WhiteMartins = 11,
    EndressHauser = 12,
    PraxairHelium = 14,
    LindeJson = 15,
    Ortec = 16,
}

export class UserEventSettingsInfo {
    domainId?: string;
    eventRuleTypes?: EventRuleType[] | null;
    tags?: EventTagInfo[] | null;
    isPlaySoundOnNewEvent?: boolean;
    isLoaded?: boolean;

    init(_data?: any) {
        if (_data) {
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            if (Array.isArray(_data["eventRuleTypes"])) {
                this.eventRuleTypes = [] as any;
                for (let item of _data["eventRuleTypes"])
                    this.eventRuleTypes!.push(item);
            }
            else {
                this.eventRuleTypes = <any>null;
            }
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags!.push(EventTagInfo.fromJS(item));
            }
            else {
                this.tags = <any>null;
            }
            this.isPlaySoundOnNewEvent = _data["isPlaySoundOnNewEvent"] !== undefined ? _data["isPlaySoundOnNewEvent"] : <any>null;
            this.isLoaded = _data["isLoaded"] !== undefined ? _data["isLoaded"] : <any>null;
        }
    }

    static fromJS(data: any): UserEventSettingsInfo {
        data = typeof data === 'object' ? data : {};
        let result = new UserEventSettingsInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        if (Array.isArray(this.eventRuleTypes)) {
            data["eventRuleTypes"] = [];
            for (let item of this.eventRuleTypes)
                data["eventRuleTypes"].push(item);
        }
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item.toJSON());
        }
        data["isPlaySoundOnNewEvent"] = this.isPlaySoundOnNewEvent !== undefined ? this.isPlaySoundOnNewEvent : <any>null;
        data["isLoaded"] = this.isLoaded !== undefined ? this.isLoaded : <any>null;
        return data;
    }
}

export enum EventRuleType {
    Level = 1,
    MissingData = 2,
    ScheduledDeliveryTooEarly = 3,
    ScheduledDeliveryTooLate = 4,
    ScheduledDeliveryMissed = 5,
    RTUChannelEvent = 6,
    UsageRate = 7,
    GeoFencing = 8,
}

export class EventTagInfo {
    tagId?: number;
    name?: string | null;

    init(_data?: any) {
        if (_data) {
            this.tagId = _data["tagId"] !== undefined ? _data["tagId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
        }
    }

    static fromJS(data: any): EventTagInfo {
        data = typeof data === 'object' ? data : {};
        let result = new EventTagInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tagId"] = this.tagId !== undefined ? this.tagId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        return data;
    }
}

export class UserPermissionsInfo {
    applicationUserRoleId?: number;
    roleName?: string | null;
    roleType?: ApplicationUserRoleType;
    rootDomainId?: string;
    isRootDomainCreateEnabled?: boolean;
    isRootDomainDeleteEnabled?: boolean;
    isRootDomainReadEnabled?: boolean;
    isRootDomainUpdateEnabled?: boolean;
    isSubDomainCreateEnabled?: boolean;
    isSubDomainDeleteEnabled?: boolean;
    isSubDomainReadEnabled?: boolean;
    isSubDomainUpdateEnabled?: boolean;
    permissions?: UserPermissionDetails[] | null;
    assetGroupPermissionsList?: UserAssetGroupPermissionsInfo[] | null;

    init(_data?: any) {
        if (_data) {
            this.applicationUserRoleId = _data["applicationUserRoleId"] !== undefined ? _data["applicationUserRoleId"] : <any>null;
            this.roleName = _data["roleName"] !== undefined ? _data["roleName"] : <any>null;
            this.roleType = _data["roleType"] !== undefined ? _data["roleType"] : <any>null;
            this.rootDomainId = _data["rootDomainId"] !== undefined ? _data["rootDomainId"] : <any>null;
            this.isRootDomainCreateEnabled = _data["isRootDomainCreateEnabled"] !== undefined ? _data["isRootDomainCreateEnabled"] : <any>null;
            this.isRootDomainDeleteEnabled = _data["isRootDomainDeleteEnabled"] !== undefined ? _data["isRootDomainDeleteEnabled"] : <any>null;
            this.isRootDomainReadEnabled = _data["isRootDomainReadEnabled"] !== undefined ? _data["isRootDomainReadEnabled"] : <any>null;
            this.isRootDomainUpdateEnabled = _data["isRootDomainUpdateEnabled"] !== undefined ? _data["isRootDomainUpdateEnabled"] : <any>null;
            this.isSubDomainCreateEnabled = _data["isSubDomainCreateEnabled"] !== undefined ? _data["isSubDomainCreateEnabled"] : <any>null;
            this.isSubDomainDeleteEnabled = _data["isSubDomainDeleteEnabled"] !== undefined ? _data["isSubDomainDeleteEnabled"] : <any>null;
            this.isSubDomainReadEnabled = _data["isSubDomainReadEnabled"] !== undefined ? _data["isSubDomainReadEnabled"] : <any>null;
            this.isSubDomainUpdateEnabled = _data["isSubDomainUpdateEnabled"] !== undefined ? _data["isSubDomainUpdateEnabled"] : <any>null;
            if (Array.isArray(_data["permissions"])) {
                this.permissions = [] as any;
                for (let item of _data["permissions"])
                    this.permissions!.push(UserPermissionDetails.fromJS(item));
            }
            else {
                this.permissions = <any>null;
            }
            if (Array.isArray(_data["assetGroupPermissionsList"])) {
                this.assetGroupPermissionsList = [] as any;
                for (let item of _data["assetGroupPermissionsList"])
                    this.assetGroupPermissionsList!.push(UserAssetGroupPermissionsInfo.fromJS(item));
            }
            else {
                this.assetGroupPermissionsList = <any>null;
            }
        }
    }

    static fromJS(data: any): UserPermissionsInfo {
        data = typeof data === 'object' ? data : {};
        let result = new UserPermissionsInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["applicationUserRoleId"] = this.applicationUserRoleId !== undefined ? this.applicationUserRoleId : <any>null;
        data["roleName"] = this.roleName !== undefined ? this.roleName : <any>null;
        data["roleType"] = this.roleType !== undefined ? this.roleType : <any>null;
        data["rootDomainId"] = this.rootDomainId !== undefined ? this.rootDomainId : <any>null;
        data["isRootDomainCreateEnabled"] = this.isRootDomainCreateEnabled !== undefined ? this.isRootDomainCreateEnabled : <any>null;
        data["isRootDomainDeleteEnabled"] = this.isRootDomainDeleteEnabled !== undefined ? this.isRootDomainDeleteEnabled : <any>null;
        data["isRootDomainReadEnabled"] = this.isRootDomainReadEnabled !== undefined ? this.isRootDomainReadEnabled : <any>null;
        data["isRootDomainUpdateEnabled"] = this.isRootDomainUpdateEnabled !== undefined ? this.isRootDomainUpdateEnabled : <any>null;
        data["isSubDomainCreateEnabled"] = this.isSubDomainCreateEnabled !== undefined ? this.isSubDomainCreateEnabled : <any>null;
        data["isSubDomainDeleteEnabled"] = this.isSubDomainDeleteEnabled !== undefined ? this.isSubDomainDeleteEnabled : <any>null;
        data["isSubDomainReadEnabled"] = this.isSubDomainReadEnabled !== undefined ? this.isSubDomainReadEnabled : <any>null;
        data["isSubDomainUpdateEnabled"] = this.isSubDomainUpdateEnabled !== undefined ? this.isSubDomainUpdateEnabled : <any>null;
        if (Array.isArray(this.permissions)) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item.toJSON());
        }
        if (Array.isArray(this.assetGroupPermissionsList)) {
            data["assetGroupPermissionsList"] = [];
            for (let item of this.assetGroupPermissionsList)
                data["assetGroupPermissionsList"].push(item.toJSON());
        }
        return data;
    }
}

export enum ApplicationUserRoleType {
    SystemAdministrator = 0,
    SystemUser = 1,
    DomainAdministrator = 2,
    DomainUser = 3,
    Unauthenticated = -1,
}

export class UserPermissionDetails {
    applicationUserRoleGroupItemId?: number;
    permissionName?: string | null;
    permissionType?: UserPermissionType;
    dataChannelType?: DataChannelType | null;
    isCreateEnabled?: boolean;
    isDeleteEnabled?: boolean;
    isEnabled?: boolean;
    isReadEnabled?: boolean;
    isUpdateEnabled?: boolean;

    init(_data?: any) {
        if (_data) {
            this.applicationUserRoleGroupItemId = _data["applicationUserRoleGroupItemId"] !== undefined ? _data["applicationUserRoleGroupItemId"] : <any>null;
            this.permissionName = _data["permissionName"] !== undefined ? _data["permissionName"] : <any>null;
            this.permissionType = _data["permissionType"] !== undefined ? _data["permissionType"] : <any>null;
            this.dataChannelType = _data["dataChannelType"] !== undefined ? _data["dataChannelType"] : <any>null;
            this.isCreateEnabled = _data["isCreateEnabled"] !== undefined ? _data["isCreateEnabled"] : <any>null;
            this.isDeleteEnabled = _data["isDeleteEnabled"] !== undefined ? _data["isDeleteEnabled"] : <any>null;
            this.isEnabled = _data["isEnabled"] !== undefined ? _data["isEnabled"] : <any>null;
            this.isReadEnabled = _data["isReadEnabled"] !== undefined ? _data["isReadEnabled"] : <any>null;
            this.isUpdateEnabled = _data["isUpdateEnabled"] !== undefined ? _data["isUpdateEnabled"] : <any>null;
        }
    }

    static fromJS(data: any): UserPermissionDetails {
        data = typeof data === 'object' ? data : {};
        let result = new UserPermissionDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["applicationUserRoleGroupItemId"] = this.applicationUserRoleGroupItemId !== undefined ? this.applicationUserRoleGroupItemId : <any>null;
        data["permissionName"] = this.permissionName !== undefined ? this.permissionName : <any>null;
        data["permissionType"] = this.permissionType !== undefined ? this.permissionType : <any>null;
        data["dataChannelType"] = this.dataChannelType !== undefined ? this.dataChannelType : <any>null;
        data["isCreateEnabled"] = this.isCreateEnabled !== undefined ? this.isCreateEnabled : <any>null;
        data["isDeleteEnabled"] = this.isDeleteEnabled !== undefined ? this.isDeleteEnabled : <any>null;
        data["isEnabled"] = this.isEnabled !== undefined ? this.isEnabled : <any>null;
        data["isReadEnabled"] = this.isReadEnabled !== undefined ? this.isReadEnabled : <any>null;
        data["isUpdateEnabled"] = this.isUpdateEnabled !== undefined ? this.isUpdateEnabled : <any>null;
        return data;
    }
}

export enum UserPermissionType {
    None = 0,
    DataChannelTypeAccess = 1,
    ViewTabAccess = 2,
    AdministrationTabAccess = 3,
    SystemTabAccess = 4,
    MiscellaneousFeatureAccess = 5,
    DomainAccess = 6,
    RTUWirelessAccess = 7,
    UserAccess = 8,
    AssetGroupAccess = 9,
    EventAccess = 10,
    ReportAccess = 11,
    AssetAccess = 12,
    SiteAccess = 13,
    ProductAccess = 14,
    TankDimensionAccess = 15,
    DataChannelAccess = 16,
    DeliveryScheduleAccess = 17,
    AssetTreeAccess = 18,
    DiagnosticsTabAccess = 19,
    RTUMetron2Access = 21,
    RTUCloverAccess = 22,
    RTUHornerAccess = 23,
    RTUFileAccess = 24,
    RTU400SeriesAccess = 25,
    GeofenceAccess = 26,
    DataChannelTypeLevel = 101,
    DataChannelTypePressure = 102,
    DataChannelTypeDigitalInput = 103,
    DataChannelTypeBatteryVoltage = 104,
    DataChannelTypeGPS = 105,
    DataChannelTypeFlowMeter = 106,
    DataChannelTypeCounter = 107,
    DataChannelTypeTemperature = 108,
    DataChannelTypeOtherAnalog = 109,
    DataChannelTypeRTUCaseTemperature = 110,
    ViewTabAssetSummary = 111,
    MiscellaneousFeatureViewMap = 112,
    ViewTabSchedule = 113,
    ViewTabEvents = 114,
    AdministrationTabAsset = 115,
    AdministrationTabDataChannel = 116,
    AdministrationTabRTU = 117,
    AdministrationTabSite = 118,
    AdministrationTabTankDimensions = 119,
    AdministrationTabProduct = 120,
    AdministrationTabAssetGroup = 121,
    AdministrationTabAssetTree = 122,
    AdministrationTabDomain = 123,
    AdministrationTabUser = 124,
    AdministrationTabUserRoles = 125,
    AdministrationTabRuleGroup = 126,
    AdministrationTabMessageTemplate = 127,
    AdministrationTabRoster = 128,
    SystemTabAssetSearch = 129,
    SystemTabRTUSearch = 130,
    SystemTabPacketSearch = 131,
    SystemTabRTURequestSearch = 132,
    SystemTabCarrierAndSystem = 133,
    SystemTabMissingData = 134,
    SystemTabFTPCompareResults = 135,
    SystemTabFTPStatus = 136,
    SystemTabDataChannelTemplate = 137,
    SystemTabRTUOutbound = 138,
    SystemTabOrphanChannels = 139,
    MiscellaneousFeatureRTUCommsHistory = 140,
    DomainGlobal = 141,
    DomainFTPSettings = 142,
    DomainCustomProperties = 143,
    RtuWirelessEditor = 144,
    RTUWiredEditor = 145,
    RTUWiredCommTab = 146,
    RTUWirelessCommTab = 147,
    UserGeneral = 148,
    UserRoles = 149,
    EventRuleGroups = 150,
    EventRosters = 151,
    EventMessageTemplates = 152,
    AssetGlobal = 153,
    AssetNotes = 154,
    AssetCustomProperties = 155,
    DataChannelGlobal = 156,
    DataChannelRTUSetpoints = 157,
    DataChannelFullEditOfEvents = 158,
    DataChannelFTPParameters = 159,
    DataChannelFTPDomain = 160,
    DataChannelScalingAndDisplay = 161,
    DataChannelManualDataEntry = 162,
    DataChannelReprocessingPackets = 163,
    DataChannelRescalingData = 164,
    DataChannelDeletingData = 165,
    MiscellaneousFeatureRTUTransfer = 166,
    MiscellaneousFeaturePollRTU = 167,
    MiscellaneousFeatureViewPacketHEX = 168,
    SiteGlobal = 169,
    SiteNotes = 170,
    MiscellaneousFeatureViewAssetTreeNav = 171,
    MiscellaneousFeatureViewForecast = 172,
    AdministrationTabReports = 173,
    ViewTabQuickReports = 174,
    DiagnosticsTabRTUStatus = 175,
    DiagnosticsTabRTUEventsHistory = 176,
    DiagnosticsTabSessionQueue = 177,
    DiagnosticsTabCallHistory = 178,
    RTUWiredAccess = 179,
    MiscellaneousFeatureViewFtpReading = 180,
    SystemTabModemStatus = 181,
    DiagnosticsTabRTUTime = 182,
    RTUMetron2Editor = 183,
    RTUMetron2CommTab = 184,
    RTUPollSchedule = 185,
    AdministrationTabRTUPollSchedule = 186,
    MiscellaneousFeatureAssetTransfer = 187,
    AdministrationTabBulkUpdateEvents = 188,
    RTUCloverEditor = 189,
    RTUCloverCommTab = 190,
    AdministrationTabHornerMessageTemplateManager = 191,
    AdministrationTabHornerPINManager = 192,
    AdministrationTabDataChannelTemplates = 193,
    DataChannelTemplateEditor = 194,
    RTUHornerEditor = 195,
    RTUHornerCommTab = 196,
    HornerMessageTemplateManagerAccess = 197,
    HornerPINManagerAccess = 198,
    DataChannelAudit = 199,
    AssetAudit = 200,
    RtuCloverAudit = 201,
    RtuSmsAudit = 202,
    RtuModbusAudit = 203,
    RtuMetron2Audit = 204,
    RtuHornerAudit = 205,
    RTUFileEditor = 206,
    MiscellaneousFeatureDataChannelPublish = 207,
    MiscellaneousFeatureDataChannelSubscribe = 208,
    RtuFileAudit = 209,
    ViewTabProblemReports = 210,
    AdministrationTabProblemReportMessageTemplateManager = 211,
    ProblemReportAccess = 212,
    ProblemReportEditorAccess = 213,
    ProblemReportMessageTemplates = 214,
    ProblemReportActivityLog = 215,
    ProblemReportDateToEngineering = 216,
    ProblemReportShowHyperlinks = 217,
    ProblemReportClose = 218,
    MiscellaneousFeatureFastPoll = 219,
    ViewAssetSearch = 220,
    MiscellaneousManageSessionQueue = 221,
    RTU400SeriesEditor = 222,
    RTU400SeriesCommTab = 223,
    RTU400SeriesAudit = 224,
    DataChannelTypeDiagnostic = 225,
    DataChannelTypeTotalizedLevel = 226,
    DataChannelTypeVirtualLevel = 227,
    DataChannelTypeRTU = 228,
    DataChannelTypeShock = 229,
    DataChannelTypeRateOfChange = 230,
    DataChannelTypeSignalStrength = 231,
    DataChannelTypeChargeCurrent = 232,
    MiscellaneousFeatureFreezerView = 233,
    MiscellaneousFeatureFreezerAdmin = 234,
    SystemUserGeneralAccess = 999,
}

export class UserAssetGroupPermissionsInfo {
    assetGroupId?: string;
    assetGroupName?: string | null;
    isAllAssetGroup?: boolean;
    assetIdList?: string[] | null;
    domainId?: string;
    permissions?: UserPermissionDetails[] | null;

    init(_data?: any) {
        if (_data) {
            this.assetGroupId = _data["assetGroupId"] !== undefined ? _data["assetGroupId"] : <any>null;
            this.assetGroupName = _data["assetGroupName"] !== undefined ? _data["assetGroupName"] : <any>null;
            this.isAllAssetGroup = _data["isAllAssetGroup"] !== undefined ? _data["isAllAssetGroup"] : <any>null;
            if (Array.isArray(_data["assetIdList"])) {
                this.assetIdList = [] as any;
                for (let item of _data["assetIdList"])
                    this.assetIdList!.push(item);
            }
            else {
                this.assetIdList = <any>null;
            }
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            if (Array.isArray(_data["permissions"])) {
                this.permissions = [] as any;
                for (let item of _data["permissions"])
                    this.permissions!.push(UserPermissionDetails.fromJS(item));
            }
            else {
                this.permissions = <any>null;
            }
        }
    }

    static fromJS(data: any): UserAssetGroupPermissionsInfo {
        data = typeof data === 'object' ? data : {};
        let result = new UserAssetGroupPermissionsInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetGroupId"] = this.assetGroupId !== undefined ? this.assetGroupId : <any>null;
        data["assetGroupName"] = this.assetGroupName !== undefined ? this.assetGroupName : <any>null;
        data["isAllAssetGroup"] = this.isAllAssetGroup !== undefined ? this.isAllAssetGroup : <any>null;
        if (Array.isArray(this.assetIdList)) {
            data["assetIdList"] = [];
            for (let item of this.assetIdList)
                data["assetIdList"].push(item);
        }
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        if (Array.isArray(this.permissions)) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item.toJSON());
        }
        return data;
    }
}

export class TimezoneInfo {
    timezoneId?: number;
    systemId?: string | null;
    standardName?: string | null;
    displayName?: string | null;
    displayNameResourceKey?: string | null;
    abbreviatedDisplayNameResourceKey?: string | null;
    utcOffsetInHours?: number;
    supportsDaylightSavingsTime?: boolean;
    delimitedDSTInfo?: string | null;
    isLoaded?: boolean;

    init(_data?: any) {
        if (_data) {
            this.timezoneId = _data["timezoneId"] !== undefined ? _data["timezoneId"] : <any>null;
            this.systemId = _data["systemId"] !== undefined ? _data["systemId"] : <any>null;
            this.standardName = _data["standardName"] !== undefined ? _data["standardName"] : <any>null;
            this.displayName = _data["displayName"] !== undefined ? _data["displayName"] : <any>null;
            this.displayNameResourceKey = _data["displayNameResourceKey"] !== undefined ? _data["displayNameResourceKey"] : <any>null;
            this.abbreviatedDisplayNameResourceKey = _data["abbreviatedDisplayNameResourceKey"] !== undefined ? _data["abbreviatedDisplayNameResourceKey"] : <any>null;
            this.utcOffsetInHours = _data["utcOffsetInHours"] !== undefined ? _data["utcOffsetInHours"] : <any>null;
            this.supportsDaylightSavingsTime = _data["supportsDaylightSavingsTime"] !== undefined ? _data["supportsDaylightSavingsTime"] : <any>null;
            this.delimitedDSTInfo = _data["delimitedDSTInfo"] !== undefined ? _data["delimitedDSTInfo"] : <any>null;
            this.isLoaded = _data["isLoaded"] !== undefined ? _data["isLoaded"] : <any>null;
        }
    }

    static fromJS(data: any): TimezoneInfo {
        data = typeof data === 'object' ? data : {};
        let result = new TimezoneInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["timezoneId"] = this.timezoneId !== undefined ? this.timezoneId : <any>null;
        data["systemId"] = this.systemId !== undefined ? this.systemId : <any>null;
        data["standardName"] = this.standardName !== undefined ? this.standardName : <any>null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : <any>null;
        data["displayNameResourceKey"] = this.displayNameResourceKey !== undefined ? this.displayNameResourceKey : <any>null;
        data["abbreviatedDisplayNameResourceKey"] = this.abbreviatedDisplayNameResourceKey !== undefined ? this.abbreviatedDisplayNameResourceKey : <any>null;
        data["utcOffsetInHours"] = this.utcOffsetInHours !== undefined ? this.utcOffsetInHours : <any>null;
        data["supportsDaylightSavingsTime"] = this.supportsDaylightSavingsTime !== undefined ? this.supportsDaylightSavingsTime : <any>null;
        data["delimitedDSTInfo"] = this.delimitedDSTInfo !== undefined ? this.delimitedDSTInfo : <any>null;
        data["isLoaded"] = this.isLoaded !== undefined ? this.isLoaded : <any>null;
        return data;
    }
}

export class YearDaylightSavingsInfo {
    timeZoneId?: number;
    year?: number;
    daylightSavingsStartTime?: Date;
    daylightSavingsEndTime?: Date;

    init(_data?: any) {
        if (_data) {
            this.timeZoneId = _data["timeZoneId"] !== undefined ? _data["timeZoneId"] : <any>null;
            this.year = _data["year"] !== undefined ? _data["year"] : <any>null;
            this.daylightSavingsStartTime = _data["daylightSavingsStartTime"] ? new Date(_data["daylightSavingsStartTime"].toString()) : <any>null;
            this.daylightSavingsEndTime = _data["daylightSavingsEndTime"] ? new Date(_data["daylightSavingsEndTime"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): YearDaylightSavingsInfo {
        data = typeof data === 'object' ? data : {};
        let result = new YearDaylightSavingsInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["timeZoneId"] = this.timeZoneId !== undefined ? this.timeZoneId : <any>null;
        data["year"] = this.year !== undefined ? this.year : <any>null;
        data["daylightSavingsStartTime"] = this.daylightSavingsStartTime ? this.daylightSavingsStartTime.toISOString() : <any>null;
        data["daylightSavingsEndTime"] = this.daylightSavingsEndTime ? this.daylightSavingsEndTime.toISOString() : <any>null;
        return data;
    }
}

export class PresetReportInfo {
    presetReportId?: number;
    name?: string | null;
    isStoredProcedure?: boolean;
    storedProcedureName?: string | null;
    assetGroupId?: string | null;
    rtuId?: string | null;
    filterByEnumValue?: string | null;
    filterText?: string | null;
    groupByEnumValue?: string | null;
    hasCarrierSelector?: boolean;
    hasDataChannelTypeSelector?: boolean;
    hasInventoryStateSelector?: boolean;
    hasDateRangeSelector?: boolean;
    hasDomainSelector?: boolean;
    hasFilterBy?: boolean;
    hasGroupBy?: boolean;
    hasOtherFilterBy?: boolean;
    hasTimePeriodSelector?: boolean;
    hasUnitsSelector?: boolean;
    hasRtuSelector?: boolean;
    includedCarriers?: string | null;
    includedDataChannelTypes?: string | null;
    includedInventoryStates?: string | null;
    includeSubDomains?: boolean;
    includeReportParametersSection?: boolean;
    otherFilterByEnumValue?: string | null;
    otherFilterText?: string | null;
    displayLanguageEnumValue?: string | null;
    reportType?: ReportType;
    reportTemplateName?: string | null;
    selectedDomainId?: string | null;
    timePeriod?: ReportTimePeriod | null;
    timePeriodEndDate?: Date | null;
    timePeriodStartDate?: Date | null;
    unitTypeEnumValue?: string | null;
    includeReportTitle?: boolean;
    includeColumnHeaders?: boolean;
    sprDomainId?: string | null;
    parameters?: PresetReportParameterInfo[] | null;

    init(_data?: any) {
        if (_data) {
            this.presetReportId = _data["presetReportId"] !== undefined ? _data["presetReportId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.isStoredProcedure = _data["isStoredProcedure"] !== undefined ? _data["isStoredProcedure"] : <any>null;
            this.storedProcedureName = _data["storedProcedureName"] !== undefined ? _data["storedProcedureName"] : <any>null;
            this.assetGroupId = _data["assetGroupId"] !== undefined ? _data["assetGroupId"] : <any>null;
            this.rtuId = _data["rtuId"] !== undefined ? _data["rtuId"] : <any>null;
            this.filterByEnumValue = _data["filterByEnumValue"] !== undefined ? _data["filterByEnumValue"] : <any>null;
            this.filterText = _data["filterText"] !== undefined ? _data["filterText"] : <any>null;
            this.groupByEnumValue = _data["groupByEnumValue"] !== undefined ? _data["groupByEnumValue"] : <any>null;
            this.hasCarrierSelector = _data["hasCarrierSelector"] !== undefined ? _data["hasCarrierSelector"] : <any>null;
            this.hasDataChannelTypeSelector = _data["hasDataChannelTypeSelector"] !== undefined ? _data["hasDataChannelTypeSelector"] : <any>null;
            this.hasInventoryStateSelector = _data["hasInventoryStateSelector"] !== undefined ? _data["hasInventoryStateSelector"] : <any>null;
            this.hasDateRangeSelector = _data["hasDateRangeSelector"] !== undefined ? _data["hasDateRangeSelector"] : <any>null;
            this.hasDomainSelector = _data["hasDomainSelector"] !== undefined ? _data["hasDomainSelector"] : <any>null;
            this.hasFilterBy = _data["hasFilterBy"] !== undefined ? _data["hasFilterBy"] : <any>null;
            this.hasGroupBy = _data["hasGroupBy"] !== undefined ? _data["hasGroupBy"] : <any>null;
            this.hasOtherFilterBy = _data["hasOtherFilterBy"] !== undefined ? _data["hasOtherFilterBy"] : <any>null;
            this.hasTimePeriodSelector = _data["hasTimePeriodSelector"] !== undefined ? _data["hasTimePeriodSelector"] : <any>null;
            this.hasUnitsSelector = _data["hasUnitsSelector"] !== undefined ? _data["hasUnitsSelector"] : <any>null;
            this.hasRtuSelector = _data["hasRtuSelector"] !== undefined ? _data["hasRtuSelector"] : <any>null;
            this.includedCarriers = _data["includedCarriers"] !== undefined ? _data["includedCarriers"] : <any>null;
            this.includedDataChannelTypes = _data["includedDataChannelTypes"] !== undefined ? _data["includedDataChannelTypes"] : <any>null;
            this.includedInventoryStates = _data["includedInventoryStates"] !== undefined ? _data["includedInventoryStates"] : <any>null;
            this.includeSubDomains = _data["includeSubDomains"] !== undefined ? _data["includeSubDomains"] : <any>null;
            this.includeReportParametersSection = _data["includeReportParametersSection"] !== undefined ? _data["includeReportParametersSection"] : <any>null;
            this.otherFilterByEnumValue = _data["otherFilterByEnumValue"] !== undefined ? _data["otherFilterByEnumValue"] : <any>null;
            this.otherFilterText = _data["otherFilterText"] !== undefined ? _data["otherFilterText"] : <any>null;
            this.displayLanguageEnumValue = _data["displayLanguageEnumValue"] !== undefined ? _data["displayLanguageEnumValue"] : <any>null;
            this.reportType = _data["reportType"] !== undefined ? _data["reportType"] : <any>null;
            this.reportTemplateName = _data["reportTemplateName"] !== undefined ? _data["reportTemplateName"] : <any>null;
            this.selectedDomainId = _data["selectedDomainId"] !== undefined ? _data["selectedDomainId"] : <any>null;
            this.timePeriod = _data["timePeriod"] !== undefined ? _data["timePeriod"] : <any>null;
            this.timePeriodEndDate = _data["timePeriodEndDate"] ? new Date(_data["timePeriodEndDate"].toString()) : <any>null;
            this.timePeriodStartDate = _data["timePeriodStartDate"] ? new Date(_data["timePeriodStartDate"].toString()) : <any>null;
            this.unitTypeEnumValue = _data["unitTypeEnumValue"] !== undefined ? _data["unitTypeEnumValue"] : <any>null;
            this.includeReportTitle = _data["includeReportTitle"] !== undefined ? _data["includeReportTitle"] : <any>null;
            this.includeColumnHeaders = _data["includeColumnHeaders"] !== undefined ? _data["includeColumnHeaders"] : <any>null;
            this.sprDomainId = _data["sprDomainId"] !== undefined ? _data["sprDomainId"] : <any>null;
            if (Array.isArray(_data["parameters"])) {
                this.parameters = [] as any;
                for (let item of _data["parameters"])
                    this.parameters!.push(PresetReportParameterInfo.fromJS(item));
            }
            else {
                this.parameters = <any>null;
            }
        }
    }

    static fromJS(data: any): PresetReportInfo {
        data = typeof data === 'object' ? data : {};
        let result = new PresetReportInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["presetReportId"] = this.presetReportId !== undefined ? this.presetReportId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["isStoredProcedure"] = this.isStoredProcedure !== undefined ? this.isStoredProcedure : <any>null;
        data["storedProcedureName"] = this.storedProcedureName !== undefined ? this.storedProcedureName : <any>null;
        data["assetGroupId"] = this.assetGroupId !== undefined ? this.assetGroupId : <any>null;
        data["rtuId"] = this.rtuId !== undefined ? this.rtuId : <any>null;
        data["filterByEnumValue"] = this.filterByEnumValue !== undefined ? this.filterByEnumValue : <any>null;
        data["filterText"] = this.filterText !== undefined ? this.filterText : <any>null;
        data["groupByEnumValue"] = this.groupByEnumValue !== undefined ? this.groupByEnumValue : <any>null;
        data["hasCarrierSelector"] = this.hasCarrierSelector !== undefined ? this.hasCarrierSelector : <any>null;
        data["hasDataChannelTypeSelector"] = this.hasDataChannelTypeSelector !== undefined ? this.hasDataChannelTypeSelector : <any>null;
        data["hasInventoryStateSelector"] = this.hasInventoryStateSelector !== undefined ? this.hasInventoryStateSelector : <any>null;
        data["hasDateRangeSelector"] = this.hasDateRangeSelector !== undefined ? this.hasDateRangeSelector : <any>null;
        data["hasDomainSelector"] = this.hasDomainSelector !== undefined ? this.hasDomainSelector : <any>null;
        data["hasFilterBy"] = this.hasFilterBy !== undefined ? this.hasFilterBy : <any>null;
        data["hasGroupBy"] = this.hasGroupBy !== undefined ? this.hasGroupBy : <any>null;
        data["hasOtherFilterBy"] = this.hasOtherFilterBy !== undefined ? this.hasOtherFilterBy : <any>null;
        data["hasTimePeriodSelector"] = this.hasTimePeriodSelector !== undefined ? this.hasTimePeriodSelector : <any>null;
        data["hasUnitsSelector"] = this.hasUnitsSelector !== undefined ? this.hasUnitsSelector : <any>null;
        data["hasRtuSelector"] = this.hasRtuSelector !== undefined ? this.hasRtuSelector : <any>null;
        data["includedCarriers"] = this.includedCarriers !== undefined ? this.includedCarriers : <any>null;
        data["includedDataChannelTypes"] = this.includedDataChannelTypes !== undefined ? this.includedDataChannelTypes : <any>null;
        data["includedInventoryStates"] = this.includedInventoryStates !== undefined ? this.includedInventoryStates : <any>null;
        data["includeSubDomains"] = this.includeSubDomains !== undefined ? this.includeSubDomains : <any>null;
        data["includeReportParametersSection"] = this.includeReportParametersSection !== undefined ? this.includeReportParametersSection : <any>null;
        data["otherFilterByEnumValue"] = this.otherFilterByEnumValue !== undefined ? this.otherFilterByEnumValue : <any>null;
        data["otherFilterText"] = this.otherFilterText !== undefined ? this.otherFilterText : <any>null;
        data["displayLanguageEnumValue"] = this.displayLanguageEnumValue !== undefined ? this.displayLanguageEnumValue : <any>null;
        data["reportType"] = this.reportType !== undefined ? this.reportType : <any>null;
        data["reportTemplateName"] = this.reportTemplateName !== undefined ? this.reportTemplateName : <any>null;
        data["selectedDomainId"] = this.selectedDomainId !== undefined ? this.selectedDomainId : <any>null;
        data["timePeriod"] = this.timePeriod !== undefined ? this.timePeriod : <any>null;
        data["timePeriodEndDate"] = this.timePeriodEndDate ? this.timePeriodEndDate.toISOString() : <any>null;
        data["timePeriodStartDate"] = this.timePeriodStartDate ? this.timePeriodStartDate.toISOString() : <any>null;
        data["unitTypeEnumValue"] = this.unitTypeEnumValue !== undefined ? this.unitTypeEnumValue : <any>null;
        data["includeReportTitle"] = this.includeReportTitle !== undefined ? this.includeReportTitle : <any>null;
        data["includeColumnHeaders"] = this.includeColumnHeaders !== undefined ? this.includeColumnHeaders : <any>null;
        data["sprDomainId"] = this.sprDomainId !== undefined ? this.sprDomainId : <any>null;
        if (Array.isArray(this.parameters)) {
            data["parameters"] = [];
            for (let item of this.parameters)
                data["parameters"].push(item.toJSON());
        }
        return data;
    }
}

export enum ReportType {
    None = 0,
    AssetSummaryList = 101,
    DataChannelsWithMissingReadings = 102,
    MissingData = 103,
    NewAssetList = 104,
    LowBatteryVoltage = 105,
    DataChannelReading = 106,
    DataChannelForecast = 107,
    AssetTubeTrailerFillList = 108,
    AssetList = 201,
    RTUList = 202,
    DataChannelList = 203,
    SiteList = 204,
    TankDimensionList = 205,
    ProductList = 206,
    AssetGroupList = 207,
    DomainList = 208,
    UserList = 209,
    UserRoleList = 210,
    EventRuleGroupList = 211,
    DataChannelTemplateList = 212,
    CustomCSVReport = 301,
    HornerDOEReport = 401,
    HornerDetailReport = 402,
    StoredProcedureReport01 = 1001,
    StoredProcedureReport02 = 1002,
    StoredProcedureReport03 = 1003,
    StoredProcedureReport04 = 1004,
    StoredProcedureReport05 = 1005,
    StoredProcedureReport06 = 1006,
    StoredProcedureReport07 = 1007,
    StoredProcedureReport08 = 1008,
    StoredProcedureReport09 = 1009,
    StoredProcedureReport10 = 1010,
    StoredProcedureReport11 = 1011,
    StoredProcedureReport12 = 1012,
    StoredProcedureReport13 = 1013,
    StoredProcedureReport14 = 1014,
    StoredProcedureReport15 = 1015,
    StoredProcedureReport16 = 1016,
    StoredProcedureReport17 = 1017,
    StoredProcedureReport18 = 1018,
    StoredProcedureReport19 = 1019,
    StoredProcedureReport20 = 1020,
    StoredProcedureReport21 = 1021,
    StoredProcedureReport22 = 1022,
    StoredProcedureReport23 = 1023,
    StoredProcedureReport24 = 1024,
    StoredProcedureReport25 = 1025,
    StoredProcedureReport26 = 1026,
    StoredProcedureReport27 = 1027,
    StoredProcedureReport28 = 1028,
    StoredProcedureReport29 = 1029,
    StoredProcedureReport30 = 1030,
    StoredProcedureReport31 = 1031,
    StoredProcedureReport32 = 1032,
    StoredProcedureReport33 = 1033,
    StoredProcedureReport34 = 1034,
    StoredProcedureReport35 = 1035,
    StoredProcedureReport36 = 1036,
    StoredProcedureReport37 = 1037,
    StoredProcedureReport38 = 1038,
    StoredProcedureReport39 = 1039,
    StoredProcedureReport40 = 1040,
    StoredProcedureReport41 = 1041,
    StoredProcedureReport42 = 1042,
    StoredProcedureReport43 = 1043,
    StoredProcedureReport44 = 1044,
    StoredProcedureReport45 = 1045,
    StoredProcedureReport46 = 1046,
    StoredProcedureReport47 = 1047,
    StoredProcedureReport48 = 1048,
    StoredProcedureReport49 = 1049,
    StoredProcedureReport50 = 1050,
}

export enum ReportTimePeriod {
    Custom = 0,
    PreviousCalendarDay = 1,
    PreviousCalendarWeek = 2,
    PreviousCalendarMonth = 3,
    PreviousCalendarQuarter = 4,
    PreviousCalendarYear = 5,
}

export class PresetReportParameterInfo {
    presetReportParameterId?: number;
    presetReportTemplateParameterId?: number;
    name?: string | null;
    dataType?: PresetReportParameterDataType;
    value?: string | null;
    parameterBooleanValue?: boolean | null;
    parameterDateTimeValue?: Date | null;
    parameterIntValue?: number | null;
    parameterDoubleValue?: number | null;

    init(_data?: any) {
        if (_data) {
            this.presetReportParameterId = _data["presetReportParameterId"] !== undefined ? _data["presetReportParameterId"] : <any>null;
            this.presetReportTemplateParameterId = _data["presetReportTemplateParameterId"] !== undefined ? _data["presetReportTemplateParameterId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.dataType = _data["dataType"] !== undefined ? _data["dataType"] : <any>null;
            this.value = _data["value"] !== undefined ? _data["value"] : <any>null;
            this.parameterBooleanValue = _data["parameterBooleanValue"] !== undefined ? _data["parameterBooleanValue"] : <any>null;
            this.parameterDateTimeValue = _data["parameterDateTimeValue"] ? new Date(_data["parameterDateTimeValue"].toString()) : <any>null;
            this.parameterIntValue = _data["parameterIntValue"] !== undefined ? _data["parameterIntValue"] : <any>null;
            this.parameterDoubleValue = _data["parameterDoubleValue"] !== undefined ? _data["parameterDoubleValue"] : <any>null;
        }
    }

    static fromJS(data: any): PresetReportParameterInfo {
        data = typeof data === 'object' ? data : {};
        let result = new PresetReportParameterInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["presetReportParameterId"] = this.presetReportParameterId !== undefined ? this.presetReportParameterId : <any>null;
        data["presetReportTemplateParameterId"] = this.presetReportTemplateParameterId !== undefined ? this.presetReportTemplateParameterId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["dataType"] = this.dataType !== undefined ? this.dataType : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        data["parameterBooleanValue"] = this.parameterBooleanValue !== undefined ? this.parameterBooleanValue : <any>null;
        data["parameterDateTimeValue"] = this.parameterDateTimeValue ? this.parameterDateTimeValue.toISOString() : <any>null;
        data["parameterIntValue"] = this.parameterIntValue !== undefined ? this.parameterIntValue : <any>null;
        data["parameterDoubleValue"] = this.parameterDoubleValue !== undefined ? this.parameterDoubleValue : <any>null;
        return data;
    }
}

export enum PresetReportParameterDataType {
    Text = 0,
    Number = 1,
    Boolean = 2,
    Date = 3,
}

export class AuthenticateAndRetrieveApplicationInfoRequest extends WcfProxyUserDetails {
    username?: string | null;
    password?: string | null;
    effectiveDomainId?: string | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.username = _data["username"] !== undefined ? _data["username"] : <any>null;
            this.password = _data["password"] !== undefined ? _data["password"] : <any>null;
            this.effectiveDomainId = _data["effectiveDomainId"] !== undefined ? _data["effectiveDomainId"] : <any>null;
        }
    }

    static fromJS(data: any): AuthenticateAndRetrieveApplicationInfoRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticateAndRetrieveApplicationInfoRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username !== undefined ? this.username : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        data["effectiveDomainId"] = this.effectiveDomainId !== undefined ? this.effectiveDomainId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveAuthenticateAndRetrieveApplicationInfoRequest extends AuthenticateAndRetrieveApplicationInfoRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveAuthenticateAndRetrieveApplicationInfoRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveAuthenticateAndRetrieveApplicationInfoRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveDomainApplicationInfoByIdResponse {
    retrieveDomainApplicationInfoByIdResult?: RetrieveDomainApplicationInfoResult | null;

    init(_data?: any) {
        if (_data) {
            this.retrieveDomainApplicationInfoByIdResult = _data["retrieveDomainApplicationInfoByIdResult"] ? RetrieveDomainApplicationInfoResult.fromJS(_data["retrieveDomainApplicationInfoByIdResult"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveDomainApplicationInfoByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveDomainApplicationInfoByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["retrieveDomainApplicationInfoByIdResult"] = this.retrieveDomainApplicationInfoByIdResult ? this.retrieveDomainApplicationInfoByIdResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveRetrieveDomainApplicationInfoByIdResponse extends RetrieveDomainApplicationInfoByIdResponse {
    ianaTimezones?: EvolveTimezoneInfo[] | null;
    themeColor?: string | null;
    /** The asset summary template "JSON'ified" for the effective domain.
             */
    effectiveDomainAssetSummaryTemplate?: AssetSummaryTemplate | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["ianaTimezones"])) {
                this.ianaTimezones = [] as any;
                for (let item of _data["ianaTimezones"])
                    this.ianaTimezones!.push(EvolveTimezoneInfo.fromJS(item));
            }
            else {
                this.ianaTimezones = <any>null;
            }
            this.themeColor = _data["themeColor"] !== undefined ? _data["themeColor"] : <any>null;
            this.effectiveDomainAssetSummaryTemplate = _data["effectiveDomainAssetSummaryTemplate"] ? AssetSummaryTemplate.fromJS(_data["effectiveDomainAssetSummaryTemplate"]) : <any>null;
        }
    }

    static fromJS(data: any): EvolveRetrieveDomainApplicationInfoByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveDomainApplicationInfoByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.ianaTimezones)) {
            data["ianaTimezones"] = [];
            for (let item of this.ianaTimezones)
                data["ianaTimezones"].push(item.toJSON());
        }
        data["themeColor"] = this.themeColor !== undefined ? this.themeColor : <any>null;
        data["effectiveDomainAssetSummaryTemplate"] = this.effectiveDomainAssetSummaryTemplate ? this.effectiveDomainAssetSummaryTemplate.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class RetrieveDomainApplicationInfoResult {
    effectiveDomain?: DomainDetail | null;
    domainTimezones?: TimezoneInfo[] | null;
    domainPresetReports?: PresetReportInfo[] | null;
    userPermissions?: UserPermissionsInfo | null;

    init(_data?: any) {
        if (_data) {
            this.effectiveDomain = _data["effectiveDomain"] ? DomainDetail.fromJS(_data["effectiveDomain"]) : <any>null;
            if (Array.isArray(_data["domainTimezones"])) {
                this.domainTimezones = [] as any;
                for (let item of _data["domainTimezones"])
                    this.domainTimezones!.push(TimezoneInfo.fromJS(item));
            }
            else {
                this.domainTimezones = <any>null;
            }
            if (Array.isArray(_data["domainPresetReports"])) {
                this.domainPresetReports = [] as any;
                for (let item of _data["domainPresetReports"])
                    this.domainPresetReports!.push(PresetReportInfo.fromJS(item));
            }
            else {
                this.domainPresetReports = <any>null;
            }
            this.userPermissions = _data["userPermissions"] ? UserPermissionsInfo.fromJS(_data["userPermissions"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveDomainApplicationInfoResult {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveDomainApplicationInfoResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["effectiveDomain"] = this.effectiveDomain ? this.effectiveDomain.toJSON() : <any>null;
        if (Array.isArray(this.domainTimezones)) {
            data["domainTimezones"] = [];
            for (let item of this.domainTimezones)
                data["domainTimezones"].push(item.toJSON());
        }
        if (Array.isArray(this.domainPresetReports)) {
            data["domainPresetReports"] = [];
            for (let item of this.domainPresetReports)
                data["domainPresetReports"].push(item.toJSON());
        }
        data["userPermissions"] = this.userPermissions ? this.userPermissions.toJSON() : <any>null;
        return data;
    }
}

export class RetrieveDomainApplicationInfoByIdRequest extends WcfProxyUserDetails {
    domainId?: string;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
        }
    }

    static fromJS(data: any): RetrieveDomainApplicationInfoByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveDomainApplicationInfoByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveDomainApplicationInfoByIdRequest extends RetrieveDomainApplicationInfoByIdRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveDomainApplicationInfoByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveDomainApplicationInfoByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveUserPermissionsInfoByIdResponse {
    retrieveUserPermissionsInfoByIdResult?: RetrieveUserPermissionsInfoResult | null;

    init(_data?: any) {
        if (_data) {
            this.retrieveUserPermissionsInfoByIdResult = _data["retrieveUserPermissionsInfoByIdResult"] ? RetrieveUserPermissionsInfoResult.fromJS(_data["retrieveUserPermissionsInfoByIdResult"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveUserPermissionsInfoByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveUserPermissionsInfoByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["retrieveUserPermissionsInfoByIdResult"] = this.retrieveUserPermissionsInfoByIdResult ? this.retrieveUserPermissionsInfoByIdResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveRetrieveUserPermissionsInfoByIdResponse extends RetrieveUserPermissionsInfoByIdResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveUserPermissionsInfoByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveUserPermissionsInfoByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveUserPermissionsInfoResult {
    userId?: string;
    userPermissions?: UserPermissionsInfo | null;

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.userPermissions = _data["userPermissions"] ? UserPermissionsInfo.fromJS(_data["userPermissions"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveUserPermissionsInfoResult {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveUserPermissionsInfoResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["userPermissions"] = this.userPermissions ? this.userPermissions.toJSON() : <any>null;
        return data;
    }
}

export class RetrieveUserPermissionsInfoByIdRequest extends WcfProxyUserDetails {
    userId?: string;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
        }
    }

    static fromJS(data: any): RetrieveUserPermissionsInfoByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveUserPermissionsInfoByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveUserPermissionsInfoByIdRequest extends RetrieveUserPermissionsInfoByIdRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveUserPermissionsInfoByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveUserPermissionsInfoByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveAssetCustomPropertiesEditComponentsByIdResponse {
    retrieveAssetCustomPropertiesEditComponentsByIdResult?: RetrieveAssetCustomPropertiesEditComponentsResult | null;

    init(_data?: any) {
        if (_data) {
            this.retrieveAssetCustomPropertiesEditComponentsByIdResult = _data["retrieveAssetCustomPropertiesEditComponentsByIdResult"] ? RetrieveAssetCustomPropertiesEditComponentsResult.fromJS(_data["retrieveAssetCustomPropertiesEditComponentsByIdResult"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveAssetCustomPropertiesEditComponentsByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveAssetCustomPropertiesEditComponentsByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["retrieveAssetCustomPropertiesEditComponentsByIdResult"] = this.retrieveAssetCustomPropertiesEditComponentsByIdResult ? this.retrieveAssetCustomPropertiesEditComponentsByIdResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveRetrieveAssetCustomPropertiesEditComponentsByIdResponse extends RetrieveAssetCustomPropertiesEditComponentsByIdResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveAssetCustomPropertiesEditComponentsByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveAssetCustomPropertiesEditComponentsByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class BaseEditComponentsResultOfEditAssetCustomProperties {
    editObject?: EditAssetCustomProperties | null;
    areEditComponentsLoaded?: boolean;

    init(_data?: any) {
        if (_data) {
            this.editObject = _data["editObject"] ? EditAssetCustomProperties.fromJS(_data["editObject"]) : <any>null;
            this.areEditComponentsLoaded = _data["areEditComponentsLoaded"] !== undefined ? _data["areEditComponentsLoaded"] : <any>null;
        }
    }

    static fromJS(data: any): BaseEditComponentsResultOfEditAssetCustomProperties {
        data = typeof data === 'object' ? data : {};
        let result = new BaseEditComponentsResultOfEditAssetCustomProperties();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["editObject"] = this.editObject ? this.editObject.toJSON() : <any>null;
        data["areEditComponentsLoaded"] = this.areEditComponentsLoaded !== undefined ? this.areEditComponentsLoaded : <any>null;
        return data;
    }
}

export class RetrieveAssetCustomPropertiesEditComponentsResult extends BaseEditComponentsResultOfEditAssetCustomProperties {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): RetrieveAssetCustomPropertiesEditComponentsResult {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveAssetCustomPropertiesEditComponentsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class EditBase {
    isLoaded?: boolean;
    validationErrors?: ValidationErrorInfo[] | null;
    createdBy?: string | null;
    createdByUsername?: string | null;
    createdDate?: Date | null;
    lastUpdateUserId?: string | null;
    lastUpdateUsername?: string | null;
    lastUpdatedDate?: Date | null;

    init(_data?: any) {
        if (_data) {
            this.isLoaded = _data["isLoaded"] !== undefined ? _data["isLoaded"] : <any>null;
            if (Array.isArray(_data["validationErrors"])) {
                this.validationErrors = [] as any;
                for (let item of _data["validationErrors"])
                    this.validationErrors!.push(ValidationErrorInfo.fromJS(item));
            }
            else {
                this.validationErrors = <any>null;
            }
            this.createdBy = _data["createdBy"] !== undefined ? _data["createdBy"] : <any>null;
            this.createdByUsername = _data["createdByUsername"] !== undefined ? _data["createdByUsername"] : <any>null;
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>null;
            this.lastUpdateUserId = _data["lastUpdateUserId"] !== undefined ? _data["lastUpdateUserId"] : <any>null;
            this.lastUpdateUsername = _data["lastUpdateUsername"] !== undefined ? _data["lastUpdateUsername"] : <any>null;
            this.lastUpdatedDate = _data["lastUpdatedDate"] ? new Date(_data["lastUpdatedDate"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): EditBase {
        data = typeof data === 'object' ? data : {};
        let result = new EditBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isLoaded"] = this.isLoaded !== undefined ? this.isLoaded : <any>null;
        if (Array.isArray(this.validationErrors)) {
            data["validationErrors"] = [];
            for (let item of this.validationErrors)
                data["validationErrors"].push(item.toJSON());
        }
        data["createdBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["createdByUsername"] = this.createdByUsername !== undefined ? this.createdByUsername : <any>null;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>null;
        data["lastUpdateUserId"] = this.lastUpdateUserId !== undefined ? this.lastUpdateUserId : <any>null;
        data["lastUpdateUsername"] = this.lastUpdateUsername !== undefined ? this.lastUpdateUsername : <any>null;
        data["lastUpdatedDate"] = this.lastUpdatedDate ? this.lastUpdatedDate.toISOString() : <any>null;
        return data;
    }
}

export class EditAssetCustomProperties extends EditBase {
    assetId?: string;
    customProperties?: EditAssetCustomPropertyItem[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            if (Array.isArray(_data["customProperties"])) {
                this.customProperties = [] as any;
                for (let item of _data["customProperties"])
                    this.customProperties!.push(EditAssetCustomPropertyItem.fromJS(item));
            }
            else {
                this.customProperties = <any>null;
            }
        }
    }

    static fromJS(data: any): EditAssetCustomProperties {
        data = typeof data === 'object' ? data : {};
        let result = new EditAssetCustomProperties();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        if (Array.isArray(this.customProperties)) {
            data["customProperties"] = [];
            for (let item of this.customProperties)
                data["customProperties"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export class EditAssetCustomPropertyItem extends EditBase {
    customPropertyId?: string;
    name?: string | null;
    dataType?: CustomPropertyDataType;
    minimum?: number | null;
    maximum?: number | null;
    precision?: number | null;
    listValues?: string | null;
    value?: string | null;
    propertyTypeId?: string;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.customPropertyId = _data["customPropertyId"] !== undefined ? _data["customPropertyId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.dataType = _data["dataType"] !== undefined ? _data["dataType"] : <any>null;
            this.minimum = _data["minimum"] !== undefined ? _data["minimum"] : <any>null;
            this.maximum = _data["maximum"] !== undefined ? _data["maximum"] : <any>null;
            this.precision = _data["precision"] !== undefined ? _data["precision"] : <any>null;
            this.listValues = _data["listValues"] !== undefined ? _data["listValues"] : <any>null;
            this.value = _data["value"] !== undefined ? _data["value"] : <any>null;
            this.propertyTypeId = _data["propertyTypeId"] !== undefined ? _data["propertyTypeId"] : <any>null;
        }
    }

    static fromJS(data: any): EditAssetCustomPropertyItem {
        data = typeof data === 'object' ? data : {};
        let result = new EditAssetCustomPropertyItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customPropertyId"] = this.customPropertyId !== undefined ? this.customPropertyId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["dataType"] = this.dataType !== undefined ? this.dataType : <any>null;
        data["minimum"] = this.minimum !== undefined ? this.minimum : <any>null;
        data["maximum"] = this.maximum !== undefined ? this.maximum : <any>null;
        data["precision"] = this.precision !== undefined ? this.precision : <any>null;
        data["listValues"] = this.listValues !== undefined ? this.listValues : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        data["propertyTypeId"] = this.propertyTypeId !== undefined ? this.propertyTypeId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export enum CustomPropertyDataType {
    String = 0,
    Boolean = 1,
    Number = 2,
    ValueList = 3,
}

export class ValidationErrorInfo {
    propertyName?: string | null;
    errorCode?: number;
    errorDescription?: string | null;

    init(_data?: any) {
        if (_data) {
            this.propertyName = _data["propertyName"] !== undefined ? _data["propertyName"] : <any>null;
            this.errorCode = _data["errorCode"] !== undefined ? _data["errorCode"] : <any>null;
            this.errorDescription = _data["errorDescription"] !== undefined ? _data["errorDescription"] : <any>null;
        }
    }

    static fromJS(data: any): ValidationErrorInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ValidationErrorInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["propertyName"] = this.propertyName !== undefined ? this.propertyName : <any>null;
        data["errorCode"] = this.errorCode !== undefined ? this.errorCode : <any>null;
        data["errorDescription"] = this.errorDescription !== undefined ? this.errorDescription : <any>null;
        return data;
    }
}

export class RetrieveAssetCustomPropertiesEditComponentsByIdRequest extends WcfProxyUserDetails {
    assetId?: string;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
        }
    }

    static fromJS(data: any): RetrieveAssetCustomPropertiesEditComponentsByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveAssetCustomPropertiesEditComponentsByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveAssetCustomPropertiesEditComponentsByIdRequest extends RetrieveAssetCustomPropertiesEditComponentsByIdRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveAssetCustomPropertiesEditComponentsByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveAssetCustomPropertiesEditComponentsByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class LocalizedString {
    name?: string;
    value?: string;
    resourceNotFound?: boolean;
    searchedLocation?: string | null;

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.value = _data["value"] !== undefined ? _data["value"] : <any>null;
            this.resourceNotFound = _data["resourceNotFound"] !== undefined ? _data["resourceNotFound"] : <any>null;
            this.searchedLocation = _data["searchedLocation"] !== undefined ? _data["searchedLocation"] : <any>null;
        }
    }

    static fromJS(data: any): LocalizedString {
        data = typeof data === 'object' ? data : {};
        let result = new LocalizedString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        data["resourceNotFound"] = this.resourceNotFound !== undefined ? this.resourceNotFound : <any>null;
        data["searchedLocation"] = this.searchedLocation !== undefined ? this.searchedLocation : <any>null;
        return data;
    }
}

export class EvolveUnitsConverterResponse {
    conversionResults?: DataChannelConversionResponse[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["conversionResults"])) {
                this.conversionResults = [] as any;
                for (let item of _data["conversionResults"])
                    this.conversionResults!.push(DataChannelConversionResponse.fromJS(item));
            }
            else {
                this.conversionResults = <any>null;
            }
        }
    }

    static fromJS(data: any): EvolveUnitsConverterResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveUnitsConverterResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.conversionResults)) {
            data["conversionResults"] = [];
            for (let item of this.conversionResults)
                data["conversionResults"].push(item.toJSON());
        }
        return data;
    }
}

export class DataChannelConversionResponse {
    datachannelId?: string;
    values?: { [key: string]: number[]; } | null;
    unitName?: string | null;
    unitString?: string | null;

    init(_data?: any) {
        if (_data) {
            this.datachannelId = _data["datachannelId"] !== undefined ? _data["datachannelId"] : <any>null;
            if (_data["values"]) {
                this.values = {} as any;
                for (let key in _data["values"]) {
                    if (_data["values"].hasOwnProperty(key))
                        (<any>this.values)![key] = _data["values"][key] !== undefined ? _data["values"][key] : [];
                }
            }
            else {
                this.values = <any>null;
            }
            this.unitName = _data["unitName"] !== undefined ? _data["unitName"] : <any>null;
            this.unitString = _data["unitString"] !== undefined ? _data["unitString"] : <any>null;
        }
    }

    static fromJS(data: any): DataChannelConversionResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelConversionResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["datachannelId"] = this.datachannelId !== undefined ? this.datachannelId : <any>null;
        if (this.values) {
            data["values"] = {};
            for (let key in this.values) {
                if (this.values.hasOwnProperty(key))
                    (<any>data["values"])[key] = this.values[key] !== undefined ? this.values[key] : <any>null;
            }
        }
        data["unitName"] = this.unitName !== undefined ? this.unitName : <any>null;
        data["unitString"] = this.unitString !== undefined ? this.unitString : <any>null;
        return data;
    }
}

export class EvolveUnitsConverterRequest {
    dataChannel?: DataChannelConversionRequest[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["dataChannel"])) {
                this.dataChannel = [] as any;
                for (let item of _data["dataChannel"])
                    this.dataChannel!.push(DataChannelConversionRequest.fromJS(item));
            }
            else {
                this.dataChannel = <any>null;
            }
        }
    }

    static fromJS(data: any): EvolveUnitsConverterRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveUnitsConverterRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dataChannel)) {
            data["dataChannel"] = [];
            for (let item of this.dataChannel)
                data["dataChannel"].push(item.toJSON());
        }
        return data;
    }
}

export class DataChannelConversionRequest {
    datachannelId?: string;
    values?: { [key: string]: number[]; } | null;
    fromUnit?: string | null;
    toUnit?: string | null;

    init(_data?: any) {
        if (_data) {
            this.datachannelId = _data["datachannelId"] !== undefined ? _data["datachannelId"] : <any>null;
            if (_data["values"]) {
                this.values = {} as any;
                for (let key in _data["values"]) {
                    if (_data["values"].hasOwnProperty(key))
                        (<any>this.values)![key] = _data["values"][key] !== undefined ? _data["values"][key] : [];
                }
            }
            else {
                this.values = <any>null;
            }
            this.fromUnit = _data["fromUnit"] !== undefined ? _data["fromUnit"] : <any>null;
            this.toUnit = _data["toUnit"] !== undefined ? _data["toUnit"] : <any>null;
        }
    }

    static fromJS(data: any): DataChannelConversionRequest {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelConversionRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["datachannelId"] = this.datachannelId !== undefined ? this.datachannelId : <any>null;
        if (this.values) {
            data["values"] = {};
            for (let key in this.values) {
                if (this.values.hasOwnProperty(key))
                    (<any>data["values"])[key] = this.values[key] !== undefined ? this.values[key] : <any>null;
            }
        }
        data["fromUnit"] = this.fromUnit !== undefined ? this.fromUnit : <any>null;
        data["toUnit"] = this.toUnit !== undefined ? this.toUnit : <any>null;
        return data;
    }
}

export class EvolveMaxProductHeightUnitsConverterWithTankDimensionsResponse {
    maxProductHeight?: number;

    init(_data?: any) {
        if (_data) {
            this.maxProductHeight = _data["maxProductHeight"] !== undefined ? _data["maxProductHeight"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveMaxProductHeightUnitsConverterWithTankDimensionsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveMaxProductHeightUnitsConverterWithTankDimensionsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxProductHeight"] = this.maxProductHeight !== undefined ? this.maxProductHeight : <any>null;
        return data;
    }
}

export class EvolveMaxProductHeightUnitsConverterWithTankDimensionsRequest {
    maxProductHeight?: number;
    fromUnit?: UnitType;
    toUnit?: UnitType;
    tankDimensionId?: string;
    productId?: string;

    init(_data?: any) {
        if (_data) {
            this.maxProductHeight = _data["maxProductHeight"] !== undefined ? _data["maxProductHeight"] : <any>null;
            this.fromUnit = _data["fromUnit"] !== undefined ? _data["fromUnit"] : <any>null;
            this.toUnit = _data["toUnit"] !== undefined ? _data["toUnit"] : <any>null;
            this.tankDimensionId = _data["tankDimensionId"] !== undefined ? _data["tankDimensionId"] : <any>null;
            this.productId = _data["productId"] !== undefined ? _data["productId"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveMaxProductHeightUnitsConverterWithTankDimensionsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveMaxProductHeightUnitsConverterWithTankDimensionsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxProductHeight"] = this.maxProductHeight !== undefined ? this.maxProductHeight : <any>null;
        data["fromUnit"] = this.fromUnit !== undefined ? this.fromUnit : <any>null;
        data["toUnit"] = this.toUnit !== undefined ? this.toUnit : <any>null;
        data["tankDimensionId"] = this.tankDimensionId !== undefined ? this.tankDimensionId : <any>null;
        data["productId"] = this.productId !== undefined ? this.productId : <any>null;
        return data;
    }
}

export class EvolveUnitsConverterWithConversionInfoResponse {
    values?: { [key: string]: number[]; } | null;
    unit?: string | null;

    init(_data?: any) {
        if (_data) {
            if (_data["values"]) {
                this.values = {} as any;
                for (let key in _data["values"]) {
                    if (_data["values"].hasOwnProperty(key))
                        (<any>this.values)![key] = _data["values"][key] !== undefined ? _data["values"][key] : [];
                }
            }
            else {
                this.values = <any>null;
            }
            this.unit = _data["unit"] !== undefined ? _data["unit"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveUnitsConverterWithConversionInfoResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveUnitsConverterWithConversionInfoResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.values) {
            data["values"] = {};
            for (let key in this.values) {
                if (this.values.hasOwnProperty(key))
                    (<any>data["values"])[key] = this.values[key] !== undefined ? this.values[key] : <any>null;
            }
        }
        data["unit"] = this.unit !== undefined ? this.unit : <any>null;
        return data;
    }
}

export class EvolveUnitsConverterWithConversionInfoRequest {
    values?: { [key: string]: number[]; } | null;
    fromUnit?: string | null;
    toUnit?: string | null;
    conversionInfoWithTankDimension?: ConversionInfoRequestWithTankDimensions | null;
    conversionInfoWithoutTankDimension?: ConversionInfoRequestWithoutTankDimensions | null;

    init(_data?: any) {
        if (_data) {
            if (_data["values"]) {
                this.values = {} as any;
                for (let key in _data["values"]) {
                    if (_data["values"].hasOwnProperty(key))
                        (<any>this.values)![key] = _data["values"][key] !== undefined ? _data["values"][key] : [];
                }
            }
            else {
                this.values = <any>null;
            }
            this.fromUnit = _data["fromUnit"] !== undefined ? _data["fromUnit"] : <any>null;
            this.toUnit = _data["toUnit"] !== undefined ? _data["toUnit"] : <any>null;
            this.conversionInfoWithTankDimension = _data["conversionInfoWithTankDimension"] ? ConversionInfoRequestWithTankDimensions.fromJS(_data["conversionInfoWithTankDimension"]) : <any>null;
            this.conversionInfoWithoutTankDimension = _data["conversionInfoWithoutTankDimension"] ? ConversionInfoRequestWithoutTankDimensions.fromJS(_data["conversionInfoWithoutTankDimension"]) : <any>null;
        }
    }

    static fromJS(data: any): EvolveUnitsConverterWithConversionInfoRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveUnitsConverterWithConversionInfoRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.values) {
            data["values"] = {};
            for (let key in this.values) {
                if (this.values.hasOwnProperty(key))
                    (<any>data["values"])[key] = this.values[key] !== undefined ? this.values[key] : <any>null;
            }
        }
        data["fromUnit"] = this.fromUnit !== undefined ? this.fromUnit : <any>null;
        data["toUnit"] = this.toUnit !== undefined ? this.toUnit : <any>null;
        data["conversionInfoWithTankDimension"] = this.conversionInfoWithTankDimension ? this.conversionInfoWithTankDimension.toJSON() : <any>null;
        data["conversionInfoWithoutTankDimension"] = this.conversionInfoWithoutTankDimension ? this.conversionInfoWithoutTankDimension.toJSON() : <any>null;
        return data;
    }
}

export class ConversionInfoRequestWithTankDimensions {
    tankDimensionId?: string;
    productId?: string;
    maxProductHeightInDisplayUnits?: number;
    displayUnit?: UnitType;
    scaledUnit?: UnitType;

    init(_data?: any) {
        if (_data) {
            this.tankDimensionId = _data["tankDimensionId"] !== undefined ? _data["tankDimensionId"] : <any>null;
            this.productId = _data["productId"] !== undefined ? _data["productId"] : <any>null;
            this.maxProductHeightInDisplayUnits = _data["maxProductHeightInDisplayUnits"] !== undefined ? _data["maxProductHeightInDisplayUnits"] : <any>null;
            this.displayUnit = _data["displayUnit"] !== undefined ? _data["displayUnit"] : <any>null;
            this.scaledUnit = _data["scaledUnit"] !== undefined ? _data["scaledUnit"] : <any>null;
        }
    }

    static fromJS(data: any): ConversionInfoRequestWithTankDimensions {
        data = typeof data === 'object' ? data : {};
        let result = new ConversionInfoRequestWithTankDimensions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tankDimensionId"] = this.tankDimensionId !== undefined ? this.tankDimensionId : <any>null;
        data["productId"] = this.productId !== undefined ? this.productId : <any>null;
        data["maxProductHeightInDisplayUnits"] = this.maxProductHeightInDisplayUnits !== undefined ? this.maxProductHeightInDisplayUnits : <any>null;
        data["displayUnit"] = this.displayUnit !== undefined ? this.displayUnit : <any>null;
        data["scaledUnit"] = this.scaledUnit !== undefined ? this.scaledUnit : <any>null;
        return data;
    }
}

export class ConversionInfoRequestWithoutTankDimensions {
    maxProductHeightInScaledUnits?: number;
    maxProductHeightInDisplayUnits?: number;
    scaledMin?: number;
    scaledMax?: number;
    displayUnit?: UnitType;

    init(_data?: any) {
        if (_data) {
            this.maxProductHeightInScaledUnits = _data["maxProductHeightInScaledUnits"] !== undefined ? _data["maxProductHeightInScaledUnits"] : <any>null;
            this.maxProductHeightInDisplayUnits = _data["maxProductHeightInDisplayUnits"] !== undefined ? _data["maxProductHeightInDisplayUnits"] : <any>null;
            this.scaledMin = _data["scaledMin"] !== undefined ? _data["scaledMin"] : <any>null;
            this.scaledMax = _data["scaledMax"] !== undefined ? _data["scaledMax"] : <any>null;
            this.displayUnit = _data["displayUnit"] !== undefined ? _data["displayUnit"] : <any>null;
        }
    }

    static fromJS(data: any): ConversionInfoRequestWithoutTankDimensions {
        data = typeof data === 'object' ? data : {};
        let result = new ConversionInfoRequestWithoutTankDimensions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxProductHeightInScaledUnits"] = this.maxProductHeightInScaledUnits !== undefined ? this.maxProductHeightInScaledUnits : <any>null;
        data["maxProductHeightInDisplayUnits"] = this.maxProductHeightInDisplayUnits !== undefined ? this.maxProductHeightInDisplayUnits : <any>null;
        data["scaledMin"] = this.scaledMin !== undefined ? this.scaledMin : <any>null;
        data["scaledMax"] = this.scaledMax !== undefined ? this.scaledMax : <any>null;
        data["displayUnit"] = this.displayUnit !== undefined ? this.displayUnit : <any>null;
        return data;
    }
}

export class EvolveGetAssetGroupsByUserIdAndDomainIdResponse {
    assetGroups?: EvolveAssetGroup[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["assetGroups"])) {
                this.assetGroups = [] as any;
                for (let item of _data["assetGroups"])
                    this.assetGroups!.push(EvolveAssetGroup.fromJS(item));
            }
            else {
                this.assetGroups = <any>null;
            }
        }
    }

    static fromJS(data: any): EvolveGetAssetGroupsByUserIdAndDomainIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveGetAssetGroupsByUserIdAndDomainIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.assetGroups)) {
            data["assetGroups"] = [];
            for (let item of this.assetGroups)
                data["assetGroups"].push(item.toJSON());
        }
        return data;
    }
}

export class EvolveAssetGroup {
    /** The name of the asset group.
             */
    name?: string | null;
    /** The domain the asset group belongs to.
             */
    navigationDomainId?: string;
    /** The search expression used in various filters.
             */
    assetSearchExpression?: string | null;
    /** The id of the asset group.
             */
    id?: string;

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.navigationDomainId = _data["navigationDomainId"] !== undefined ? _data["navigationDomainId"] : <any>null;
            this.assetSearchExpression = _data["assetSearchExpression"] !== undefined ? _data["assetSearchExpression"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveAssetGroup {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveAssetGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["navigationDomainId"] = this.navigationDomainId !== undefined ? this.navigationDomainId : <any>null;
        data["assetSearchExpression"] = this.assetSearchExpression !== undefined ? this.assetSearchExpression : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data;
    }
}

export class EvolveGetAssetGroupsByUserIdAndDomainIdRequest {
    userId?: string;
    domainId?: string;

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveGetAssetGroupsByUserIdAndDomainIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveGetAssetGroupsByUserIdAndDomainIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        return data;
    }
}

export class EvolveGetFavouritesByUserIdAndDomainIdResponse {
    favourites?: EvolveFavourite[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["favourites"])) {
                this.favourites = [] as any;
                for (let item of _data["favourites"])
                    this.favourites!.push(EvolveFavourite.fromJS(item));
            }
            else {
                this.favourites = <any>null;
            }
        }
    }

    static fromJS(data: any): EvolveGetFavouritesByUserIdAndDomainIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveGetFavouritesByUserIdAndDomainIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.favourites)) {
            data["favourites"] = [];
            for (let item of this.favourites)
                data["favourites"].push(item.toJSON());
        }
        return data;
    }
}

export class EvolveGetFavouritesByUserIdAndDomainIdRequest {
    userId?: string;
    domainId?: string;

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveGetFavouritesByUserIdAndDomainIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveGetFavouritesByUserIdAndDomainIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        return data;
    }
}

export class EvolveGetNavigationByUserIdAndDomainIdResponse {
    assetGroups?: EvolveAssetGroup[] | null;
    favourites?: EvolveFavourite[] | null;
    watchList?: EvolveWatchListItem[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["assetGroups"])) {
                this.assetGroups = [] as any;
                for (let item of _data["assetGroups"])
                    this.assetGroups!.push(EvolveAssetGroup.fromJS(item));
            }
            else {
                this.assetGroups = <any>null;
            }
            if (Array.isArray(_data["favourites"])) {
                this.favourites = [] as any;
                for (let item of _data["favourites"])
                    this.favourites!.push(EvolveFavourite.fromJS(item));
            }
            else {
                this.favourites = <any>null;
            }
            if (Array.isArray(_data["watchList"])) {
                this.watchList = [] as any;
                for (let item of _data["watchList"])
                    this.watchList!.push(EvolveWatchListItem.fromJS(item));
            }
            else {
                this.watchList = <any>null;
            }
        }
    }

    static fromJS(data: any): EvolveGetNavigationByUserIdAndDomainIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveGetNavigationByUserIdAndDomainIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.assetGroups)) {
            data["assetGroups"] = [];
            for (let item of this.assetGroups)
                data["assetGroups"].push(item.toJSON());
        }
        if (Array.isArray(this.favourites)) {
            data["favourites"] = [];
            for (let item of this.favourites)
                data["favourites"].push(item.toJSON());
        }
        if (Array.isArray(this.watchList)) {
            data["watchList"] = [];
            for (let item of this.watchList)
                data["watchList"].push(item.toJSON());
        }
        return data;
    }
}

export class EvolveWatchListItem {
    /** The watch list type.
             */
    type?: WatchListType;
    /** The description for the watch list item. Varies depending on watch list type.
             */
    description?: string | null;
    /** The item id of the watch list item if the item id is a Guid.
             */
    guidItemId?: string | null;
    /** The item id of the watch list item if the item id is an int.
             */
    intItemId?: number | null;

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.guidItemId = _data["guidItemId"] !== undefined ? _data["guidItemId"] : <any>null;
            this.intItemId = _data["intItemId"] !== undefined ? _data["intItemId"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveWatchListItem {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveWatchListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["guidItemId"] = this.guidItemId !== undefined ? this.guidItemId : <any>null;
        data["intItemId"] = this.intItemId !== undefined ? this.intItemId : <any>null;
        return data;
    }
}

export class EvolveGetNavigationByUserIdAndDomainIdRequest {
    userId?: string;
    domainId?: string;

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveGetNavigationByUserIdAndDomainIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveGetNavigationByUserIdAndDomainIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        return data;
    }
}

export class EvolveUserFeedbackRequest {
    feedbackCategory?: string | null;
    feedbackMessage?: string | null;

    init(_data?: any) {
        if (_data) {
            this.feedbackCategory = _data["feedbackCategory"] !== undefined ? _data["feedbackCategory"] : <any>null;
            this.feedbackMessage = _data["feedbackMessage"] !== undefined ? _data["feedbackMessage"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveUserFeedbackRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveUserFeedbackRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["feedbackCategory"] = this.feedbackCategory !== undefined ? this.feedbackCategory : <any>null;
        data["feedbackMessage"] = this.feedbackMessage !== undefined ? this.feedbackMessage : <any>null;
        return data;
    }
}

export class EvolveSaveUserShowPreviewPageResponse {

    init(_data?: any) {
    }

    static fromJS(data: any): EvolveSaveUserShowPreviewPageResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveUserShowPreviewPageResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

/** Extend problem details object with validation errors property instead of adding to extensions. Frontend generating typescript code does not generate the validation errors, causing issues. */
export class EvolveProblemDetails extends ProblemDetails {
    validationErrors?: { [key: string]: any; } | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (_data["validationErrors"]) {
                this.validationErrors = {} as any;
                for (let key in _data["validationErrors"]) {
                    if (_data["validationErrors"].hasOwnProperty(key))
                        (<any>this.validationErrors)![key] = _data["validationErrors"][key] !== undefined ? _data["validationErrors"][key] : <any>null;
                }
            }
            else {
                this.validationErrors = <any>null;
            }
        }
    }

    static fromJS(data: any): EvolveProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.validationErrors) {
            data["validationErrors"] = {};
            for (let key in this.validationErrors) {
                if (this.validationErrors.hasOwnProperty(key))
                    (<any>data["validationErrors"])[key] = this.validationErrors[key] !== undefined ? this.validationErrors[key] : <any>null;
            }
        }
        super.toJSON(data);
        return data;
    }
}

export class EvolveSaveUserShowPreviewPageRequest {
    /** The ShowPreviewPage indicator.
             */
    showPreviewPage?: boolean;

    init(_data?: any) {
        if (_data) {
            this.showPreviewPage = _data["showPreviewPage"] !== undefined ? _data["showPreviewPage"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveSaveUserShowPreviewPageRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveUserShowPreviewPageRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["showPreviewPage"] = this.showPreviewPage !== undefined ? this.showPreviewPage : <any>null;
        return data;
    }
}

export class CallJournalRcmDto {
    callJournalId?: number;
    createdDate?: Date;
    lastUpdatedDate?: Date | null;
    rtuId?: string | null;
    sessionServer?: string | null;
    callComManager?: string | null;
    localAddress?: string | null;
    remoteAddress?: string | null;
    remoteSlaveAddress?: number | null;
    isOutbound?: boolean;
    rtuProtocol?: RtuProtocolTypeEnum | null;
    transport?: RTUTransportTypeEnum;
    journalStatus?: RcmJournalItemStatusEnum;
    connectTimestamp?: Date;
    duration?: number | null;
    totalDataTransmitted?: number | null;
    errorType?: string | null;
    errorDescription?: string | null;
    errorTypeId?: DolErrorCode | null;
    sessions?: SessionJournalRcmDto[] | null;

    init(_data?: any) {
        if (_data) {
            this.callJournalId = _data["callJournalId"] !== undefined ? _data["callJournalId"] : <any>null;
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>null;
            this.lastUpdatedDate = _data["lastUpdatedDate"] ? new Date(_data["lastUpdatedDate"].toString()) : <any>null;
            this.rtuId = _data["rtuId"] !== undefined ? _data["rtuId"] : <any>null;
            this.sessionServer = _data["sessionServer"] !== undefined ? _data["sessionServer"] : <any>null;
            this.callComManager = _data["callComManager"] !== undefined ? _data["callComManager"] : <any>null;
            this.localAddress = _data["localAddress"] !== undefined ? _data["localAddress"] : <any>null;
            this.remoteAddress = _data["remoteAddress"] !== undefined ? _data["remoteAddress"] : <any>null;
            this.remoteSlaveAddress = _data["remoteSlaveAddress"] !== undefined ? _data["remoteSlaveAddress"] : <any>null;
            this.isOutbound = _data["isOutbound"] !== undefined ? _data["isOutbound"] : <any>null;
            this.rtuProtocol = _data["rtuProtocol"] !== undefined ? _data["rtuProtocol"] : <any>null;
            this.transport = _data["transport"] !== undefined ? _data["transport"] : <any>null;
            this.journalStatus = _data["journalStatus"] !== undefined ? _data["journalStatus"] : <any>null;
            this.connectTimestamp = _data["connectTimestamp"] ? new Date(_data["connectTimestamp"].toString()) : <any>null;
            this.duration = _data["duration"] !== undefined ? _data["duration"] : <any>null;
            this.totalDataTransmitted = _data["totalDataTransmitted"] !== undefined ? _data["totalDataTransmitted"] : <any>null;
            this.errorType = _data["errorType"] !== undefined ? _data["errorType"] : <any>null;
            this.errorDescription = _data["errorDescription"] !== undefined ? _data["errorDescription"] : <any>null;
            this.errorTypeId = _data["errorTypeId"] !== undefined ? _data["errorTypeId"] : <any>null;
            if (Array.isArray(_data["sessions"])) {
                this.sessions = [] as any;
                for (let item of _data["sessions"])
                    this.sessions!.push(SessionJournalRcmDto.fromJS(item));
            }
            else {
                this.sessions = <any>null;
            }
        }
    }

    static fromJS(data: any): CallJournalRcmDto {
        data = typeof data === 'object' ? data : {};
        let result = new CallJournalRcmDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["callJournalId"] = this.callJournalId !== undefined ? this.callJournalId : <any>null;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>null;
        data["lastUpdatedDate"] = this.lastUpdatedDate ? this.lastUpdatedDate.toISOString() : <any>null;
        data["rtuId"] = this.rtuId !== undefined ? this.rtuId : <any>null;
        data["sessionServer"] = this.sessionServer !== undefined ? this.sessionServer : <any>null;
        data["callComManager"] = this.callComManager !== undefined ? this.callComManager : <any>null;
        data["localAddress"] = this.localAddress !== undefined ? this.localAddress : <any>null;
        data["remoteAddress"] = this.remoteAddress !== undefined ? this.remoteAddress : <any>null;
        data["remoteSlaveAddress"] = this.remoteSlaveAddress !== undefined ? this.remoteSlaveAddress : <any>null;
        data["isOutbound"] = this.isOutbound !== undefined ? this.isOutbound : <any>null;
        data["rtuProtocol"] = this.rtuProtocol !== undefined ? this.rtuProtocol : <any>null;
        data["transport"] = this.transport !== undefined ? this.transport : <any>null;
        data["journalStatus"] = this.journalStatus !== undefined ? this.journalStatus : <any>null;
        data["connectTimestamp"] = this.connectTimestamp ? this.connectTimestamp.toISOString() : <any>null;
        data["duration"] = this.duration !== undefined ? this.duration : <any>null;
        data["totalDataTransmitted"] = this.totalDataTransmitted !== undefined ? this.totalDataTransmitted : <any>null;
        data["errorType"] = this.errorType !== undefined ? this.errorType : <any>null;
        data["errorDescription"] = this.errorDescription !== undefined ? this.errorDescription : <any>null;
        data["errorTypeId"] = this.errorTypeId !== undefined ? this.errorTypeId : <any>null;
        if (Array.isArray(this.sessions)) {
            data["sessions"] = [];
            for (let item of this.sessions)
                data["sessions"].push(item.toJSON());
        }
        return data;
    }
}

export enum RtuProtocolTypeEnum {
    None = 0,
    ModbusGeneric = 1,
    ModbusApci = 2,
    ModbusPraxair = 3,
    CloverGeneric = 4,
    CloverInfAct = 5,
    CloverCompak = 6,
    Unknown = 7,
    Mertron2 = 8,
    Horner = 9,
    KT09 = 10,
    Echo = 11,
}

export enum RTUTransportTypeEnum {
    None = 0,
    Pstn = 1,
    Tcp = 2,
    Udp = 4,
}

export enum RcmJournalItemStatusEnum {
    Initialized = 0,
    Complete = 1,
    Processing = 2,
    Failed = 3,
    Partial = 4,
}

export enum DolErrorCode {
    Success = 0,
    AlreadyActive = 1,
    ConcurrencyError = 2,
    ConfigurationError = 3,
    ConnectionTerminatedError = 4,
    DatabaseAccessError = 5,
    DatabaseUpdateError = 6,
    DeviceIdMismatchError = 7,
    DeviceIdNotFoundError = 8,
    DevicePhoneLineIsBusyError = 9,
    DuplicateError = 10,
    SystemError = 10,
    EmptyError = 12,
    FunctionNotSupported = 13,
    GeneralError = 14,
    ModemError = 15,
    NoAnswerError = 16,
    NoDialtoneError = 17,
    NoOutboundPhoneLinesAvailableError = 18,
    NotFoundError = 19,
    NotReadyError = 20,
    OpenError = 21,
    ReferrentialIntegrityError = 22,
    RetriesExceededError = 23,
    SecurityAccessDeniedError = 24,
    SecurityModuleError = 25,
    SecurityOperationDeniedError = 26,
    UserCancelError = 27,
    ValidationError = 28,
    AccessDeniedModbusError = 29,
    UnsupportFunctionModbusError = 30,
    RS485TimeoutModbusError = 31,
    ReadBackMismatchModbusError = 32,
    QueueFullModbusError = 33,
    OutOfSyncResponseModbusError = 34,
    OutOfMemoryModbusError = 35,
    NoDeviceIdModbusError = 36,
    ModuleIoErrorModbusError = 37,
    InvalidResponseLengthModbusError = 38,
    InvalidRegisterModbusError = 39,
    InvalidDataModbusError = 40,
    InvalidDataLengthModbusError = 41,
    ChannelNotFoundModbusError = 42,
    BadCrcModbusError = 43,
    ReadBackMismatchCloverError = 44,
    OutOfSyncCloverError = 45,
    InvalidFormatCloverError = 46,
    InvalidChecksumCloverError = 47,
    BadCrcHornerError = 48,
    UnsupportFunctionHornerError = 49,
    ReadBackMismatchHornerError = 50,
    OutOfSyncResponseHornerError = 51,
    InvalidResponseLengthHornerError = 52,
    InvalidRegisterHornerError = 53,
    InvalidDataLengthHornerError = 54,
    InvalidDataHornerError = 55,
    TransmissionErrorMetron2Error = 56,
    BadCrcMetron2Error = 57,
    MessageRejectedMetron2Error = 58,
    InvalidBulkMessageMetron2Error = 59,
    Error = 60,
    AlreadyInuseByUserError = 61,
    ActiveCallError = 62,
    InvalidFormatKt09Error = 63,
}

export class SessionJournalRcmDto {
    createdDate?: Date;
    lastUpdatedDate?: Date | null;
    sessionJournalId?: number;
    sessionType?: string | null;
    sessionAttemptCount?: number;
    sessionRefNo?: number;
    sessionSource?: string | null;
    sessionServer?: string | null;
    journalStatus?: RcmJournalItemStatusEnum;
    requestParameters?: string | null;
    responseParameters?: string | null;
    userId?: string | null;
    duration?: number | null;
    transactionTotal?: number | null;
    transactionIndex?: number | null;
    errorType?: string | null;
    errorDescription?: string | null;
    errorTypeId?: DolErrorCode | null;
    transactions?: TransactionJournalRcmDto[] | null;

    init(_data?: any) {
        if (_data) {
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>null;
            this.lastUpdatedDate = _data["lastUpdatedDate"] ? new Date(_data["lastUpdatedDate"].toString()) : <any>null;
            this.sessionJournalId = _data["sessionJournalId"] !== undefined ? _data["sessionJournalId"] : <any>null;
            this.sessionType = _data["sessionType"] !== undefined ? _data["sessionType"] : <any>null;
            this.sessionAttemptCount = _data["sessionAttemptCount"] !== undefined ? _data["sessionAttemptCount"] : <any>null;
            this.sessionRefNo = _data["sessionRefNo"] !== undefined ? _data["sessionRefNo"] : <any>null;
            this.sessionSource = _data["sessionSource"] !== undefined ? _data["sessionSource"] : <any>null;
            this.sessionServer = _data["sessionServer"] !== undefined ? _data["sessionServer"] : <any>null;
            this.journalStatus = _data["journalStatus"] !== undefined ? _data["journalStatus"] : <any>null;
            this.requestParameters = _data["requestParameters"] !== undefined ? _data["requestParameters"] : <any>null;
            this.responseParameters = _data["responseParameters"] !== undefined ? _data["responseParameters"] : <any>null;
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.duration = _data["duration"] !== undefined ? _data["duration"] : <any>null;
            this.transactionTotal = _data["transactionTotal"] !== undefined ? _data["transactionTotal"] : <any>null;
            this.transactionIndex = _data["transactionIndex"] !== undefined ? _data["transactionIndex"] : <any>null;
            this.errorType = _data["errorType"] !== undefined ? _data["errorType"] : <any>null;
            this.errorDescription = _data["errorDescription"] !== undefined ? _data["errorDescription"] : <any>null;
            this.errorTypeId = _data["errorTypeId"] !== undefined ? _data["errorTypeId"] : <any>null;
            if (Array.isArray(_data["transactions"])) {
                this.transactions = [] as any;
                for (let item of _data["transactions"])
                    this.transactions!.push(TransactionJournalRcmDto.fromJS(item));
            }
            else {
                this.transactions = <any>null;
            }
        }
    }

    static fromJS(data: any): SessionJournalRcmDto {
        data = typeof data === 'object' ? data : {};
        let result = new SessionJournalRcmDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>null;
        data["lastUpdatedDate"] = this.lastUpdatedDate ? this.lastUpdatedDate.toISOString() : <any>null;
        data["sessionJournalId"] = this.sessionJournalId !== undefined ? this.sessionJournalId : <any>null;
        data["sessionType"] = this.sessionType !== undefined ? this.sessionType : <any>null;
        data["sessionAttemptCount"] = this.sessionAttemptCount !== undefined ? this.sessionAttemptCount : <any>null;
        data["sessionRefNo"] = this.sessionRefNo !== undefined ? this.sessionRefNo : <any>null;
        data["sessionSource"] = this.sessionSource !== undefined ? this.sessionSource : <any>null;
        data["sessionServer"] = this.sessionServer !== undefined ? this.sessionServer : <any>null;
        data["journalStatus"] = this.journalStatus !== undefined ? this.journalStatus : <any>null;
        data["requestParameters"] = this.requestParameters !== undefined ? this.requestParameters : <any>null;
        data["responseParameters"] = this.responseParameters !== undefined ? this.responseParameters : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["duration"] = this.duration !== undefined ? this.duration : <any>null;
        data["transactionTotal"] = this.transactionTotal !== undefined ? this.transactionTotal : <any>null;
        data["transactionIndex"] = this.transactionIndex !== undefined ? this.transactionIndex : <any>null;
        data["errorType"] = this.errorType !== undefined ? this.errorType : <any>null;
        data["errorDescription"] = this.errorDescription !== undefined ? this.errorDescription : <any>null;
        data["errorTypeId"] = this.errorTypeId !== undefined ? this.errorTypeId : <any>null;
        if (Array.isArray(this.transactions)) {
            data["transactions"] = [];
            for (let item of this.transactions)
                data["transactions"].push(item.toJSON());
        }
        return data;
    }
}

export class TransactionJournalRcmDto {
    createdDate?: Date;
    lastUpdatedDate?: Date | null;
    transactionJournalId?: number;
    transactionType?: RcmTransactionTypeEnum;
    requestParameters?: string | null;
    responseParameters?: string | null;
    journalStatus?: RcmJournalItemStatusEnum;
    duration?: number | null;
    errorType?: string | null;
    errorDescription?: string | null;
    errorTypeId?: DolErrorCode | null;

    init(_data?: any) {
        if (_data) {
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>null;
            this.lastUpdatedDate = _data["lastUpdatedDate"] ? new Date(_data["lastUpdatedDate"].toString()) : <any>null;
            this.transactionJournalId = _data["transactionJournalId"] !== undefined ? _data["transactionJournalId"] : <any>null;
            this.transactionType = _data["transactionType"] !== undefined ? _data["transactionType"] : <any>null;
            this.requestParameters = _data["requestParameters"] !== undefined ? _data["requestParameters"] : <any>null;
            this.responseParameters = _data["responseParameters"] !== undefined ? _data["responseParameters"] : <any>null;
            this.journalStatus = _data["journalStatus"] !== undefined ? _data["journalStatus"] : <any>null;
            this.duration = _data["duration"] !== undefined ? _data["duration"] : <any>null;
            this.errorType = _data["errorType"] !== undefined ? _data["errorType"] : <any>null;
            this.errorDescription = _data["errorDescription"] !== undefined ? _data["errorDescription"] : <any>null;
            this.errorTypeId = _data["errorTypeId"] !== undefined ? _data["errorTypeId"] : <any>null;
        }
    }

    static fromJS(data: any): TransactionJournalRcmDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransactionJournalRcmDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>null;
        data["lastUpdatedDate"] = this.lastUpdatedDate ? this.lastUpdatedDate.toISOString() : <any>null;
        data["transactionJournalId"] = this.transactionJournalId !== undefined ? this.transactionJournalId : <any>null;
        data["transactionType"] = this.transactionType !== undefined ? this.transactionType : <any>null;
        data["requestParameters"] = this.requestParameters !== undefined ? this.requestParameters : <any>null;
        data["responseParameters"] = this.responseParameters !== undefined ? this.responseParameters : <any>null;
        data["journalStatus"] = this.journalStatus !== undefined ? this.journalStatus : <any>null;
        data["duration"] = this.duration !== undefined ? this.duration : <any>null;
        data["errorType"] = this.errorType !== undefined ? this.errorType : <any>null;
        data["errorDescription"] = this.errorDescription !== undefined ? this.errorDescription : <any>null;
        data["errorTypeId"] = this.errorTypeId !== undefined ? this.errorTypeId : <any>null;
        return data;
    }
}

export enum RcmTransactionTypeEnum {
    None = 0,
    ClearDeviceEvents = 1,
    ClearAnalogChannelEvents = 2,
    ClearAnalogChannelsEvents = 3,
    ClearDigitalChannelEvents = 4,
    ClearDigitalChannelsEvents = 5,
    ClearMaintenanceInProgress = 6,
    DisableUnusedChannels = 7,
    GetAnalogChannelConfig = 8,
    GetAnalogChannelDataLog = 9,
    GetAnalogChannelReadingStatusEvents = 10,
    GetAnalogChannelsDataLog = 11,
    GetAnalogChannelsReadingStatusEvents = 12,
    GetApplicationConfig = 13,
    GetChannelsConfig = 14,
    GetDeviceConfig = 15,
    GetDeviceStatusAndEvents = 16,
    GetDeviceTime = 17,
    GetDigitalChannelConfig = 18,
    GetDigitalChannelDataLog = 19,
    GetDigitalChannelReadingStatusEvents = 20,
    GetDigitalChannelsDataLog = 21,
    GetDigitalChannelsReadingStatusEvents = 22,
    GetDigitalOutputs = 23,
    GetEnabledChannels = 24,
    GetEventHistory = 25,
    GetRtuId = 26,
    GetScalingMaps = 27,
    Login = 28,
    RebootDevice = 29,
    ResetDeviceToFactoryDefaults = 30,
    SelectAnalogChannel = 31,
    SelectDigitalChannel = 32,
    SendTestEvent = 33,
    SetAnalogChannelConfig = 34,
    SetApplicationConfig = 35,
    SetChannelsConfig = 36,
    SetDigitalChannelConfig = 37,
    SetDigitalOutputs = 38,
    SetDeviceConfig = 39,
    SetDeviceTime = 40,
    SetMaintenanceInProgress = 41,
    SetPassword = 42,
    SetRtuId = 43,
    GetDiagnosticChannelsReading = 44,
    SetChannelsSetPoints = 45,
    SetScalingMaps = 46,
    SetAnalogChannelSetPoints = 47,
    SetDigitalChannelSetPoints = 48,
    WaitForStackedAlarms = 49,
    SetDeviceGprsConfig = 50,
    PulseDigitalOutPuts = 51,
    SetDeviceCallinTimeAndPeriod = 52,
    ActivateDevice = 53,
    DeactivateDevice = 54,
    ResetDigitalCountersAndTimers = 55,
    GetAnalogChannelsDataLogHighSpeedReadings = 56,
    DumpUnitsMemory = 57,
    GetFillTranAndDetailTableParameters = 58,
    GetFillTransactionRecords = 59,
    GetFillDetailRecords = 60,
    SetHostAddress = 61,
}

export enum RtuCommDirection {
    Inbound = 0,
    Outbound = 1,
}

export class FileRtuCreateDto {
    description?: string | null;
    rtuType?: RtuDeviceType;
    siteNumber?: string | null;
    providerId?: number | null;
    alternativeDeviceId?: string | null;

    init(_data?: any) {
        if (_data) {
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.rtuType = _data["rtuType"] !== undefined ? _data["rtuType"] : <any>null;
            this.siteNumber = _data["siteNumber"] !== undefined ? _data["siteNumber"] : <any>null;
            this.providerId = _data["providerId"] !== undefined ? _data["providerId"] : <any>null;
            this.alternativeDeviceId = _data["alternativeDeviceId"] !== undefined ? _data["alternativeDeviceId"] : <any>null;
        }
    }

    static fromJS(data: any): FileRtuCreateDto {
        data = typeof data === 'object' ? data : {};
        let result = new FileRtuCreateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["rtuType"] = this.rtuType !== undefined ? this.rtuType : <any>null;
        data["siteNumber"] = this.siteNumber !== undefined ? this.siteNumber : <any>null;
        data["providerId"] = this.providerId !== undefined ? this.providerId : <any>null;
        data["alternativeDeviceId"] = this.alternativeDeviceId !== undefined ? this.alternativeDeviceId : <any>null;
        return data;
    }
}

export enum RtuDeviceType {
    FFD = 0,
    FFB = 1,
    FFE = 2,
    FF6 = 3,
    FF9 = 4,
    FF70 = 5,
    FFA = 6,
    FF8 = 7,
    Demo4Channel = 8,
    FakeWired4Channel = 9,
    FF5 = 10,
    FF1 = 11,
    FF4 = 12,
    Compak = 13,
    Infact = 14,
    FE = 15,
    FF78 = 16,
    FF74 = 17,
    FF7F = 18,
    None = 20,
    FF79 = 21,
    FF7E = 22,
    FE0 = 23,
    Metron2 = 24,
    FF7D = 25,
    FF71 = 26,
    FF7A = 27,
    FF7B = 28,
    Horner = 29,
    FF75 = 30,
    FA = 31,
    File = 32,
    TrippleHash = 33,
    FF72 = 34,
    GGPlant = 35,
    FF73 = 36,
    LC490 = 37,
    DP489 = 38,
    FF7C = 39,
    FF17 = 40,
    EaglePaymeter = 41,
    KT09 = 42,
    BC474 = 43,
    GU476 = 44,
    EG501 = 45,
}

export class RtuPacketDTO {
    packetId?: number | null;
    deviceId?: string | null;
    channelNumber?: string | null;
    payload?: string | null;
    additionalInformation?: string | null;
    communicationDirection?: RtuCommDirection | null;
    communicationMethod?: TelecommunicationsCarrier | null;
    address?: string | null;
    serverTimestamp?: Date;
    rtuTimestamp?: Date | null;
    packetType?: RtuPacketType | null;
    sequenceNumber?: number | null;
    processState?: RtuPacketStatus | null;
    processingCounter?: number | null;
    packetTypeGroup?: RtuPacketCategory | null;

    init(_data?: any) {
        if (_data) {
            this.packetId = _data["packetId"] !== undefined ? _data["packetId"] : <any>null;
            this.deviceId = _data["deviceId"] !== undefined ? _data["deviceId"] : <any>null;
            this.channelNumber = _data["channelNumber"] !== undefined ? _data["channelNumber"] : <any>null;
            this.payload = _data["payload"] !== undefined ? _data["payload"] : <any>null;
            this.additionalInformation = _data["additionalInformation"] !== undefined ? _data["additionalInformation"] : <any>null;
            this.communicationDirection = _data["communicationDirection"] !== undefined ? _data["communicationDirection"] : <any>null;
            this.communicationMethod = _data["communicationMethod"] !== undefined ? _data["communicationMethod"] : <any>null;
            this.address = _data["address"] !== undefined ? _data["address"] : <any>null;
            this.serverTimestamp = _data["serverTimestamp"] ? new Date(_data["serverTimestamp"].toString()) : <any>null;
            this.rtuTimestamp = _data["rtuTimestamp"] ? new Date(_data["rtuTimestamp"].toString()) : <any>null;
            this.packetType = _data["packetType"] !== undefined ? _data["packetType"] : <any>null;
            this.sequenceNumber = _data["sequenceNumber"] !== undefined ? _data["sequenceNumber"] : <any>null;
            this.processState = _data["processState"] !== undefined ? _data["processState"] : <any>null;
            this.processingCounter = _data["processingCounter"] !== undefined ? _data["processingCounter"] : <any>null;
            this.packetTypeGroup = _data["packetTypeGroup"] !== undefined ? _data["packetTypeGroup"] : <any>null;
        }
    }

    static fromJS(data: any): RtuPacketDTO {
        data = typeof data === 'object' ? data : {};
        let result = new RtuPacketDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["packetId"] = this.packetId !== undefined ? this.packetId : <any>null;
        data["deviceId"] = this.deviceId !== undefined ? this.deviceId : <any>null;
        data["channelNumber"] = this.channelNumber !== undefined ? this.channelNumber : <any>null;
        data["payload"] = this.payload !== undefined ? this.payload : <any>null;
        data["additionalInformation"] = this.additionalInformation !== undefined ? this.additionalInformation : <any>null;
        data["communicationDirection"] = this.communicationDirection !== undefined ? this.communicationDirection : <any>null;
        data["communicationMethod"] = this.communicationMethod !== undefined ? this.communicationMethod : <any>null;
        data["address"] = this.address !== undefined ? this.address : <any>null;
        data["serverTimestamp"] = this.serverTimestamp ? this.serverTimestamp.toISOString() : <any>null;
        data["rtuTimestamp"] = this.rtuTimestamp ? this.rtuTimestamp.toISOString() : <any>null;
        data["packetType"] = this.packetType !== undefined ? this.packetType : <any>null;
        data["sequenceNumber"] = this.sequenceNumber !== undefined ? this.sequenceNumber : <any>null;
        data["processState"] = this.processState !== undefined ? this.processState : <any>null;
        data["processingCounter"] = this.processingCounter !== undefined ? this.processingCounter : <any>null;
        data["packetTypeGroup"] = this.packetTypeGroup !== undefined ? this.packetTypeGroup : <any>null;
        return data;
    }
}

export enum TelecommunicationsCarrier {
    Unknown = 0,
    Modem = 1,
    Vistar = 2,
    Vodafone = 3,
    TelenorSweden = 4,
    Email = 5,
    Aql = 6,
    Ais = 7,
    Raco = 8,
    Vivo = 9,
    Skytel = 10,
    Tdc = 11,
    Weblink = 12,
    Dtac = 13,
    EmailHosted = 14,
    Att = 15,
    Verizon = 16,
    Tigo = 17,
    ChinaMobile = 18,
    WorldTextIndia = 19,
    Transfer = 20,
    VivoDol = 21,
    VivoApci = 22,
    Telcel = 23,
    TMobile = 24,
    O2 = 25,
    Telenor = 26,
    Numerex = 27,
    Rogers = 28,
    FileTransfer = 30,
    Email2 = 31,
    SkyWaveIGWS = 32,
    ICE = 33,
    ChinaMobileDirect = 34,
    Iridium = 35,
    ReadingsService = 36,
    AttApci = 37,
    Raco2 = 38,
    AWG = 39,
    KoreAtt = 40,
    NumerexAtt = 41,
    Udp = 42,
    ChinaMobileCmpp090528 = 43,
    WorldTextUsa = 44,
    WorldTextAustralia = 45,
    WorldTextIndonesia = 46,
    WorldTextUk = 47,
    WorldTextIndiaIdea = 48,
    WorldTextIndiaTata = 49,
    Particle = 50,
    KT09 = 51,
    Telit = 52,
    NxLocate = 53,
    RCM = 54,
    Dtac2 = 55,
    Att4GApci = 56,
    KoreAtt4G = 57,
    Fieldgate = 58,
    WorldTextHongKong = 59,
    WorldTextUAE = 60,
    ChinaMobileCmpp091430 = 61,
    UdpTurkey = 62,
    TestSMPP = 63,
    KoreTMobile = 64,
    WorldTextBrazil = 65,
    WorldTextGermany = 66,
    WorldTextIndonesiaBackup = 67,
    WorldTextNetherlands = 68,
    WorldTextTurkey = 69,
    KoreTelstra = 70,
    Telcel88449 = 71,
    Skybitz = 72,
    KoreAtt4G2 = 73,
    TelitAnova = 74,
    GDC = 75,
    UdpKore = 76,
    All = 999,
}

export enum RtuPacketType {
    PeriodicDataTransmission = 0,
    UserRequestedDataTransmission = 1,
    AlarmLowLevelTransmission = 2,
    AlarmFillDataTransmission = 3,
    AdHocDataPacket = 4,
    GpsLocationTransmission = 5,
    NetworkTimeSync = 6,
    CommunicationsUpdate = 7,
    RequestDataTransmission = 8,
    RequestCurrentConfiguration = 9,
    RequestAdditionalConfigurationAndStatus = 10,
    UpdateAdditionalConfiguration = 11,
    UpdateSystemConfiguration = 12,
    CurrentConfigurationTransmission = 13,
    TestConfigurationDataTransmission = 14,
    AdditionalConfigurationAndStatusTransmission = 15,
    CounterPacket = 16,
    ReadingsService = 17,
    VistarPeriodicDataTransmission = 100,
    VistarAlarmDataTransmission = 101,
    VistarConfigurationRecordType1 = 102,
    VistarConfigurationRecordType2 = 103,
    VistarDataRequest = 104,
    VistarConfigurationUpdate = 105,
    VistarConfigurationRequest = 106,
    VistarGpsLocationTransmission = 107,
    VistarTerminalRegistration = 108,
    VistarTerminalAcknowledgment = 109,
    FourHundredSeriesPollRequest = 200,
    FourHundredSeriesGprsTerminationRequest = 201,
    FourHundredSeriesTimeUpdateRequest = 202,
    FourHundredSeriesTimeUpdateResponse = 203,
    FourHundredSeriesRealtimeRtuStatusInputDataReport = 204,
    FourHundredSeriesRealtimeOutputDataReport = 205,
    FourHundredSeriesAnalogLoggedDataReport = 210,
    FourHundredSeriesAdHocLoggedDataReport = 211,
    FourHundredSeriesDigitalLoggedDataReport = 212,
    FourHundredSeriesCounterLoggedDataReport = 213,
    FourHundredSeriesGpsLocationLoggedDataReport = 214,
    FourHundredSeriesAnalogInputConfig = 220,
    FourHundredSeriesAnalogInputConfigResponse = 221,
    FourHundredSeriesAnalogInputAdditionalConfig = 222,
    FourHundredSeriesAnalogInputAdditionalConfigResponse = 223,
    FourHundredSeriesAnalogInputStrappingChart = 224,
    FourHundredSeriesAnalogInputStrappingChartResponse = 225,
    FourHundredSeriesDigitalInputConfig = 226,
    FourHundredSeriesDigitalInputConfigResponse = 227,
    FourHundredSeriesCounterInputConfig = 228,
    FourHundredSeriesCounterInputConfigResponse = 229,
    FourHundredSeriesAnalogOutputConfig = 230,
    FourHundredSeriesAnalogOutputConfigResponse = 231,
    FourHundredSeriesDigitalOutputConfig = 232,
    FourHundredSeriesDigitalOutputConfigResponse = 233,
    FourHundredSeriesGpsConfig = 234,
    FourHundredSeriesGpsConfigResponse = 235,
    FourHundredSeriesInitialConfig = 240,
    FourHundredSeriesSystemConfigUpdate = 241,
    FourHundredSeriesSystemConfigResponse = 242,
    FourHundredSeriesSmsCommunicationsConfig = 248,
    FourHundredSeriesSmsCommunicationsConfigResponse = 249,
    FourHundredSeriesDataNetworkAccessCommunicationsConfig = 250,
    FourHundredSeriesDataNetworkAccessCommunicationsConfigResponse = 251,
    FourHundredSeriesDolv3AccessCommunicationsConfig = 252,
    FourHundredSeriesDolv3AccessCommunicationsConfigResponse = 253,
    FourHundredSeriesIridiumSatelliteCommunicationsConfig = 254,
    FourHundredSeriesIridiumSatelliteCommunicationsConfigResponse = 255,
    FourHundredSeriesRtuCommand = 262,
    FourHundredSeriesRtuCommandAcknowledge = 263,
    Kt09PollRequest = 300,
    Kt09InitializeSimRequest = 301,
    RcmReadings = 302,
    RcmConfig = 303,
    None = -1,
}

export enum RtuPacketStatus {
    NotProcessed = 0,
    InProcessingQueue = 1,
    Processed = 2,
    ProcessedWithErrors = 3,
    CannotBeProcessed = 4,
    UnknownPacketType = 5,
    Processing = 101,
    Completed = 102,
    InvalidCommunicationMethod = 103,
    InvalidServerTimestamp = 104,
    InvalidPacketPrefix = 105,
    InvalidRtuTimestamp = 106,
    InvalidPacketType = 107,
    InvalidSequenceNumber = 108,
    InvalidRecordingRate = 109,
    InvalidLogLength = 110,
    InvalidDataReading = 111,
    InvalidTemperatureReading = 112,
    InvalidBatteryVoltReading = 113,
    InvalidDeviceID = 114,
    InvalidSensorDelay = 115,
    InvalidLoopVolts = 116,
    InvalidTxRate = 117,
    InvalidTxHour = 118,
    InvalidRtuTypeInPacket = 119,
    RtuTypeNoLongerSupported = 120,
    InvalidFillTime = 121,
    InvalidFillUpdate = 122,
    InvalidFillAlarm = 123,
    InvalidAlarmPointsADC = 124,
    InvalidZeroOffset = 125,
    InvalidSensorSpan = 126,
    InvalidControlFlag = 127,
    InvalidTimeUpdateFlag = 128,
    InvalidServCtrNo = 129,
    InvalidDestNo = 130,
    InvalidOwnNo = 131,
    InvalidDestEmail = 132,
    InvalidSWVersion = 133,
    NoRtuChannelFound = 134,
    NoRtuFound = 135,
    NoDataChannelFound = 136,
    InvalidPollMode = 137,
    InvalidBatteryType = 138,
    InvalidBatteryLowSetpoint = 139,
    InvalidNumberDecimalPlaces = 140,
    InvalidPollHour = 141,
    InvalidBatteryNightVolts = 142,
    InvalidBatteryChargeCurrent = 143,
    InvalidAverageCharge = 144,
    InvalidAmbientLightLevel = 145,
    InvalidSignalStrength = 146,
    InvalidDestinationPIN = 147,
    InvalidOwnPIN = 148,
    RtuIsDeleted = 149,
    RtuCreationFailed = 150,
    RtuChannelCreationFailed = 151,
    InvalidDomain = 152,
    InvalidSite = 153,
    InvalidDataChannelType = 154,
    InvalidRtuConfigBlock = 155,
    InvalidRtuChannelConfigBlock = 156,
    OutdatedConfigPacket = 157,
    InvalidFtpFileFormat = 158,
    FtpOptionSetToNone = 159,
    FtpFileFormatSetToNone = 160,
    FtpFileNotCreatedNoTimeZoneInfo = 161,
    InvalidRtuChannelDiagnosticBlock = 162,
    NotSupported = 163,
    UnknownError = 164,
    NoGPSDataChannelFound = 165,
    FtpVolumetricConvertFailed = 166,
    FtpInvalidDataChannelUnits = 167,
    InvalidFtpId = 168,
    InvalidFtpTimeZone = 169,
    NoCounterDataChannelFound = 170,
    InvalidCounterData = 171,
    DecodeVistarGPSFailed = 172,
    ManualSettingNotProcessed = 999,
}

export enum RtuPacketCategory {
    Unknown = 0,
    Configuration = 1,
    Data = 2,
    Initial = 3,
}

export class FileRtuDto {
    deviceId?: string | null;
    description?: string | null;
    rtuType?: string | null;
    rtuTypeId?: number | null;
    provider?: string | null;
    providerId?: number | null;
    alternativeDeviceId?: string | null;
    siteId?: string | null;
    siteNumber?: string | null;
    customerName?: string | null;
    customerAddress1?: string | null;
    customerAddress2?: string | null;
    customerAddress3?: string | null;
    city?: string | null;
    state?: string | null;
    postalCode?: string | null;
    country?: string | null;
    createdBy?: string | null;
    createdDate?: Date | null;
    lastUpdatedDate?: Date | null;
    lastUpdatedUserId?: string | null;

    init(_data?: any) {
        if (_data) {
            this.deviceId = _data["deviceId"] !== undefined ? _data["deviceId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.rtuType = _data["rtuType"] !== undefined ? _data["rtuType"] : <any>null;
            this.rtuTypeId = _data["rtuTypeId"] !== undefined ? _data["rtuTypeId"] : <any>null;
            this.provider = _data["provider"] !== undefined ? _data["provider"] : <any>null;
            this.providerId = _data["providerId"] !== undefined ? _data["providerId"] : <any>null;
            this.alternativeDeviceId = _data["alternativeDeviceId"] !== undefined ? _data["alternativeDeviceId"] : <any>null;
            this.siteId = _data["siteId"] !== undefined ? _data["siteId"] : <any>null;
            this.siteNumber = _data["siteNumber"] !== undefined ? _data["siteNumber"] : <any>null;
            this.customerName = _data["customerName"] !== undefined ? _data["customerName"] : <any>null;
            this.customerAddress1 = _data["customerAddress1"] !== undefined ? _data["customerAddress1"] : <any>null;
            this.customerAddress2 = _data["customerAddress2"] !== undefined ? _data["customerAddress2"] : <any>null;
            this.customerAddress3 = _data["customerAddress3"] !== undefined ? _data["customerAddress3"] : <any>null;
            this.city = _data["city"] !== undefined ? _data["city"] : <any>null;
            this.state = _data["state"] !== undefined ? _data["state"] : <any>null;
            this.postalCode = _data["postalCode"] !== undefined ? _data["postalCode"] : <any>null;
            this.country = _data["country"] !== undefined ? _data["country"] : <any>null;
            this.createdBy = _data["createdBy"] !== undefined ? _data["createdBy"] : <any>null;
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>null;
            this.lastUpdatedDate = _data["lastUpdatedDate"] ? new Date(_data["lastUpdatedDate"].toString()) : <any>null;
            this.lastUpdatedUserId = _data["lastUpdatedUserId"] !== undefined ? _data["lastUpdatedUserId"] : <any>null;
        }
    }

    static fromJS(data: any): FileRtuDto {
        data = typeof data === 'object' ? data : {};
        let result = new FileRtuDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deviceId"] = this.deviceId !== undefined ? this.deviceId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["rtuType"] = this.rtuType !== undefined ? this.rtuType : <any>null;
        data["rtuTypeId"] = this.rtuTypeId !== undefined ? this.rtuTypeId : <any>null;
        data["provider"] = this.provider !== undefined ? this.provider : <any>null;
        data["providerId"] = this.providerId !== undefined ? this.providerId : <any>null;
        data["alternativeDeviceId"] = this.alternativeDeviceId !== undefined ? this.alternativeDeviceId : <any>null;
        data["siteId"] = this.siteId !== undefined ? this.siteId : <any>null;
        data["siteNumber"] = this.siteNumber !== undefined ? this.siteNumber : <any>null;
        data["customerName"] = this.customerName !== undefined ? this.customerName : <any>null;
        data["customerAddress1"] = this.customerAddress1 !== undefined ? this.customerAddress1 : <any>null;
        data["customerAddress2"] = this.customerAddress2 !== undefined ? this.customerAddress2 : <any>null;
        data["customerAddress3"] = this.customerAddress3 !== undefined ? this.customerAddress3 : <any>null;
        data["city"] = this.city !== undefined ? this.city : <any>null;
        data["state"] = this.state !== undefined ? this.state : <any>null;
        data["postalCode"] = this.postalCode !== undefined ? this.postalCode : <any>null;
        data["country"] = this.country !== undefined ? this.country : <any>null;
        data["createdBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>null;
        data["lastUpdatedDate"] = this.lastUpdatedDate ? this.lastUpdatedDate.toISOString() : <any>null;
        data["lastUpdatedUserId"] = this.lastUpdatedUserId !== undefined ? this.lastUpdatedUserId : <any>null;
        return data;
    }
}

export class RtuChannelSummaryDto {
    channelNumber?: string | null;
    description?: string | null;
    isInSync?: boolean | null;
    dataLoggingRate?: number | null;

    init(_data?: any) {
        if (_data) {
            this.channelNumber = _data["channelNumber"] !== undefined ? _data["channelNumber"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.isInSync = _data["isInSync"] !== undefined ? _data["isInSync"] : <any>null;
            this.dataLoggingRate = _data["dataLoggingRate"] !== undefined ? _data["dataLoggingRate"] : <any>null;
        }
    }

    static fromJS(data: any): RtuChannelSummaryDto {
        data = typeof data === 'object' ? data : {};
        let result = new RtuChannelSummaryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["channelNumber"] = this.channelNumber !== undefined ? this.channelNumber : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["isInSync"] = this.isInSync !== undefined ? this.isInSync : <any>null;
        data["dataLoggingRate"] = this.dataLoggingRate !== undefined ? this.dataLoggingRate : <any>null;
        return data;
    }
}

export class HornerRtuCreateDto {
    deviceId?: string | null;
    description?: string | null;
    siteNumber?: string | null;
    hornerRTUType?: HornerRtuMode;
    hornerModelType?: HornerRtuCategory;
    rtuPollScheduleGroupId?: string;
    carrierId?: number;
    ipNetworkAddress?: string | null;

    init(_data?: any) {
        if (_data) {
            this.deviceId = _data["deviceId"] !== undefined ? _data["deviceId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.siteNumber = _data["siteNumber"] !== undefined ? _data["siteNumber"] : <any>null;
            this.hornerRTUType = _data["hornerRTUType"] !== undefined ? _data["hornerRTUType"] : <any>null;
            this.hornerModelType = _data["hornerModelType"] !== undefined ? _data["hornerModelType"] : <any>null;
            this.rtuPollScheduleGroupId = _data["rtuPollScheduleGroupId"] !== undefined ? _data["rtuPollScheduleGroupId"] : <any>null;
            this.carrierId = _data["carrierId"] !== undefined ? _data["carrierId"] : <any>null;
            this.ipNetworkAddress = _data["ipNetworkAddress"] !== undefined ? _data["ipNetworkAddress"] : <any>null;
        }
    }

    static fromJS(data: any): HornerRtuCreateDto {
        data = typeof data === 'object' ? data : {};
        let result = new HornerRtuCreateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deviceId"] = this.deviceId !== undefined ? this.deviceId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["siteNumber"] = this.siteNumber !== undefined ? this.siteNumber : <any>null;
        data["hornerRTUType"] = this.hornerRTUType !== undefined ? this.hornerRTUType : <any>null;
        data["hornerModelType"] = this.hornerModelType !== undefined ? this.hornerModelType : <any>null;
        data["rtuPollScheduleGroupId"] = this.rtuPollScheduleGroupId !== undefined ? this.rtuPollScheduleGroupId : <any>null;
        data["carrierId"] = this.carrierId !== undefined ? this.carrierId : <any>null;
        data["ipNetworkAddress"] = this.ipNetworkAddress !== undefined ? this.ipNetworkAddress : <any>null;
        return data;
    }
}

export enum HornerRtuMode {
    Dispenser = 0,
    Compressor = 1,
}

export enum HornerRtuCategory {
    Serial = 0,
    Ip = 1,
}

export class HornerGeneralInformationDTO {
    deviceId?: string | null;
    rtuId?: string;
    description?: string | null;
    hornerRTUType?: HornerRtuMode | null;
    hornerModelType?: HornerRtuCategory | null;
    siteId?: string | null;
    siteNumber?: string | null;
    customerName?: string | null;
    customerAddress1?: string | null;
    customerAddress2?: string | null;
    customerAddress3?: string | null;
    city?: string | null;
    state?: string | null;
    postalcode?: string | null;
    country?: string | null;
    rtuPollScheduleGroupId?: string | null;
    rtuPollScheduleGroupAsText?: string | null;
    createdBy?: string | null;
    createdDate?: Date | null;
    lastUpdateUserId?: string | null;
    lastUpdatedDate?: Date | null;
    createdByName?: string | null;
    lastUpdateUserName?: string | null;

    init(_data?: any) {
        if (_data) {
            this.deviceId = _data["deviceId"] !== undefined ? _data["deviceId"] : <any>null;
            this.rtuId = _data["rtuId"] !== undefined ? _data["rtuId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.hornerRTUType = _data["hornerRTUType"] !== undefined ? _data["hornerRTUType"] : <any>null;
            this.hornerModelType = _data["hornerModelType"] !== undefined ? _data["hornerModelType"] : <any>null;
            this.siteId = _data["siteId"] !== undefined ? _data["siteId"] : <any>null;
            this.siteNumber = _data["siteNumber"] !== undefined ? _data["siteNumber"] : <any>null;
            this.customerName = _data["customerName"] !== undefined ? _data["customerName"] : <any>null;
            this.customerAddress1 = _data["customerAddress1"] !== undefined ? _data["customerAddress1"] : <any>null;
            this.customerAddress2 = _data["customerAddress2"] !== undefined ? _data["customerAddress2"] : <any>null;
            this.customerAddress3 = _data["customerAddress3"] !== undefined ? _data["customerAddress3"] : <any>null;
            this.city = _data["city"] !== undefined ? _data["city"] : <any>null;
            this.state = _data["state"] !== undefined ? _data["state"] : <any>null;
            this.postalcode = _data["postalcode"] !== undefined ? _data["postalcode"] : <any>null;
            this.country = _data["country"] !== undefined ? _data["country"] : <any>null;
            this.rtuPollScheduleGroupId = _data["rtuPollScheduleGroupId"] !== undefined ? _data["rtuPollScheduleGroupId"] : <any>null;
            this.rtuPollScheduleGroupAsText = _data["rtuPollScheduleGroupAsText"] !== undefined ? _data["rtuPollScheduleGroupAsText"] : <any>null;
            this.createdBy = _data["createdBy"] !== undefined ? _data["createdBy"] : <any>null;
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>null;
            this.lastUpdateUserId = _data["lastUpdateUserId"] !== undefined ? _data["lastUpdateUserId"] : <any>null;
            this.lastUpdatedDate = _data["lastUpdatedDate"] ? new Date(_data["lastUpdatedDate"].toString()) : <any>null;
            this.createdByName = _data["createdByName"] !== undefined ? _data["createdByName"] : <any>null;
            this.lastUpdateUserName = _data["lastUpdateUserName"] !== undefined ? _data["lastUpdateUserName"] : <any>null;
        }
    }

    static fromJS(data: any): HornerGeneralInformationDTO {
        data = typeof data === 'object' ? data : {};
        let result = new HornerGeneralInformationDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deviceId"] = this.deviceId !== undefined ? this.deviceId : <any>null;
        data["rtuId"] = this.rtuId !== undefined ? this.rtuId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["hornerRTUType"] = this.hornerRTUType !== undefined ? this.hornerRTUType : <any>null;
        data["hornerModelType"] = this.hornerModelType !== undefined ? this.hornerModelType : <any>null;
        data["siteId"] = this.siteId !== undefined ? this.siteId : <any>null;
        data["siteNumber"] = this.siteNumber !== undefined ? this.siteNumber : <any>null;
        data["customerName"] = this.customerName !== undefined ? this.customerName : <any>null;
        data["customerAddress1"] = this.customerAddress1 !== undefined ? this.customerAddress1 : <any>null;
        data["customerAddress2"] = this.customerAddress2 !== undefined ? this.customerAddress2 : <any>null;
        data["customerAddress3"] = this.customerAddress3 !== undefined ? this.customerAddress3 : <any>null;
        data["city"] = this.city !== undefined ? this.city : <any>null;
        data["state"] = this.state !== undefined ? this.state : <any>null;
        data["postalcode"] = this.postalcode !== undefined ? this.postalcode : <any>null;
        data["country"] = this.country !== undefined ? this.country : <any>null;
        data["rtuPollScheduleGroupId"] = this.rtuPollScheduleGroupId !== undefined ? this.rtuPollScheduleGroupId : <any>null;
        data["rtuPollScheduleGroupAsText"] = this.rtuPollScheduleGroupAsText !== undefined ? this.rtuPollScheduleGroupAsText : <any>null;
        data["createdBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>null;
        data["lastUpdateUserId"] = this.lastUpdateUserId !== undefined ? this.lastUpdateUserId : <any>null;
        data["lastUpdatedDate"] = this.lastUpdatedDate ? this.lastUpdatedDate.toISOString() : <any>null;
        data["createdByName"] = this.createdByName !== undefined ? this.createdByName : <any>null;
        data["lastUpdateUserName"] = this.lastUpdateUserName !== undefined ? this.lastUpdateUserName : <any>null;
        return data;
    }
}

export class HornerRtuAnalogInputChannelsDTO {
    hornerRtuAnalogInputChannels?: HornerRtuAnalogInputChannelDTO[] | null;
    unitOfMeasureList?: string[] | null;
    fieldTypeList?: HornerChannelFieldTypeDTO[] | null;
    createdBy?: string | null;
    createdDate?: Date | null;
    lastUpdateUserId?: string | null;
    lastUpdatedDate?: Date | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["hornerRtuAnalogInputChannels"])) {
                this.hornerRtuAnalogInputChannels = [] as any;
                for (let item of _data["hornerRtuAnalogInputChannels"])
                    this.hornerRtuAnalogInputChannels!.push(HornerRtuAnalogInputChannelDTO.fromJS(item));
            }
            else {
                this.hornerRtuAnalogInputChannels = <any>null;
            }
            if (Array.isArray(_data["unitOfMeasureList"])) {
                this.unitOfMeasureList = [] as any;
                for (let item of _data["unitOfMeasureList"])
                    this.unitOfMeasureList!.push(item);
            }
            else {
                this.unitOfMeasureList = <any>null;
            }
            if (Array.isArray(_data["fieldTypeList"])) {
                this.fieldTypeList = [] as any;
                for (let item of _data["fieldTypeList"])
                    this.fieldTypeList!.push(HornerChannelFieldTypeDTO.fromJS(item));
            }
            else {
                this.fieldTypeList = <any>null;
            }
            this.createdBy = _data["createdBy"] !== undefined ? _data["createdBy"] : <any>null;
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>null;
            this.lastUpdateUserId = _data["lastUpdateUserId"] !== undefined ? _data["lastUpdateUserId"] : <any>null;
            this.lastUpdatedDate = _data["lastUpdatedDate"] ? new Date(_data["lastUpdatedDate"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): HornerRtuAnalogInputChannelsDTO {
        data = typeof data === 'object' ? data : {};
        let result = new HornerRtuAnalogInputChannelsDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.hornerRtuAnalogInputChannels)) {
            data["hornerRtuAnalogInputChannels"] = [];
            for (let item of this.hornerRtuAnalogInputChannels)
                data["hornerRtuAnalogInputChannels"].push(item.toJSON());
        }
        if (Array.isArray(this.unitOfMeasureList)) {
            data["unitOfMeasureList"] = [];
            for (let item of this.unitOfMeasureList)
                data["unitOfMeasureList"].push(item);
        }
        if (Array.isArray(this.fieldTypeList)) {
            data["fieldTypeList"] = [];
            for (let item of this.fieldTypeList)
                data["fieldTypeList"].push(item.toJSON());
        }
        data["createdBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>null;
        data["lastUpdateUserId"] = this.lastUpdateUserId !== undefined ? this.lastUpdateUserId : <any>null;
        data["lastUpdatedDate"] = this.lastUpdatedDate ? this.lastUpdatedDate.toISOString() : <any>null;
        return data;
    }
}

export class HornerRtuAnalogInputChannelDTO {
    fieldName?: string | null;
    fieldType?: string | null;
    channelNumber?: string | null;
    rawMinimumValue?: number | null;
    rawMaximumValue?: number | null;
    scaledMinimumValue?: number | null;
    scaledMaximumValue?: number | null;
    unitOfMeasure?: string | null;
    decimalPlaces?: number | null;
    isDisplayed?: boolean | null;

    init(_data?: any) {
        if (_data) {
            this.fieldName = _data["fieldName"] !== undefined ? _data["fieldName"] : <any>null;
            this.fieldType = _data["fieldType"] !== undefined ? _data["fieldType"] : <any>null;
            this.channelNumber = _data["channelNumber"] !== undefined ? _data["channelNumber"] : <any>null;
            this.rawMinimumValue = _data["rawMinimumValue"] !== undefined ? _data["rawMinimumValue"] : <any>null;
            this.rawMaximumValue = _data["rawMaximumValue"] !== undefined ? _data["rawMaximumValue"] : <any>null;
            this.scaledMinimumValue = _data["scaledMinimumValue"] !== undefined ? _data["scaledMinimumValue"] : <any>null;
            this.scaledMaximumValue = _data["scaledMaximumValue"] !== undefined ? _data["scaledMaximumValue"] : <any>null;
            this.unitOfMeasure = _data["unitOfMeasure"] !== undefined ? _data["unitOfMeasure"] : <any>null;
            this.decimalPlaces = _data["decimalPlaces"] !== undefined ? _data["decimalPlaces"] : <any>null;
            this.isDisplayed = _data["isDisplayed"] !== undefined ? _data["isDisplayed"] : <any>null;
        }
    }

    static fromJS(data: any): HornerRtuAnalogInputChannelDTO {
        data = typeof data === 'object' ? data : {};
        let result = new HornerRtuAnalogInputChannelDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fieldName"] = this.fieldName !== undefined ? this.fieldName : <any>null;
        data["fieldType"] = this.fieldType !== undefined ? this.fieldType : <any>null;
        data["channelNumber"] = this.channelNumber !== undefined ? this.channelNumber : <any>null;
        data["rawMinimumValue"] = this.rawMinimumValue !== undefined ? this.rawMinimumValue : <any>null;
        data["rawMaximumValue"] = this.rawMaximumValue !== undefined ? this.rawMaximumValue : <any>null;
        data["scaledMinimumValue"] = this.scaledMinimumValue !== undefined ? this.scaledMinimumValue : <any>null;
        data["scaledMaximumValue"] = this.scaledMaximumValue !== undefined ? this.scaledMaximumValue : <any>null;
        data["unitOfMeasure"] = this.unitOfMeasure !== undefined ? this.unitOfMeasure : <any>null;
        data["decimalPlaces"] = this.decimalPlaces !== undefined ? this.decimalPlaces : <any>null;
        data["isDisplayed"] = this.isDisplayed !== undefined ? this.isDisplayed : <any>null;
        return data;
    }
}

export class HornerChannelFieldTypeDTO {
    fieldName?: string | null;
    fieldType?: string | null;
    isRawMinDisplayed?: boolean;
    isRawMaxDisplayed?: boolean;
    isScaledMinDisplayed?: boolean;
    isScaledMaxDisplayed?: boolean;
    isUomDisplayed?: boolean;
    isDecimalPlacesDisplayed?: boolean;

    init(_data?: any) {
        if (_data) {
            this.fieldName = _data["fieldName"] !== undefined ? _data["fieldName"] : <any>null;
            this.fieldType = _data["fieldType"] !== undefined ? _data["fieldType"] : <any>null;
            this.isRawMinDisplayed = _data["isRawMinDisplayed"] !== undefined ? _data["isRawMinDisplayed"] : <any>null;
            this.isRawMaxDisplayed = _data["isRawMaxDisplayed"] !== undefined ? _data["isRawMaxDisplayed"] : <any>null;
            this.isScaledMinDisplayed = _data["isScaledMinDisplayed"] !== undefined ? _data["isScaledMinDisplayed"] : <any>null;
            this.isScaledMaxDisplayed = _data["isScaledMaxDisplayed"] !== undefined ? _data["isScaledMaxDisplayed"] : <any>null;
            this.isUomDisplayed = _data["isUomDisplayed"] !== undefined ? _data["isUomDisplayed"] : <any>null;
            this.isDecimalPlacesDisplayed = _data["isDecimalPlacesDisplayed"] !== undefined ? _data["isDecimalPlacesDisplayed"] : <any>null;
        }
    }

    static fromJS(data: any): HornerChannelFieldTypeDTO {
        data = typeof data === 'object' ? data : {};
        let result = new HornerChannelFieldTypeDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fieldName"] = this.fieldName !== undefined ? this.fieldName : <any>null;
        data["fieldType"] = this.fieldType !== undefined ? this.fieldType : <any>null;
        data["isRawMinDisplayed"] = this.isRawMinDisplayed !== undefined ? this.isRawMinDisplayed : <any>null;
        data["isRawMaxDisplayed"] = this.isRawMaxDisplayed !== undefined ? this.isRawMaxDisplayed : <any>null;
        data["isScaledMinDisplayed"] = this.isScaledMinDisplayed !== undefined ? this.isScaledMinDisplayed : <any>null;
        data["isScaledMaxDisplayed"] = this.isScaledMaxDisplayed !== undefined ? this.isScaledMaxDisplayed : <any>null;
        data["isUomDisplayed"] = this.isUomDisplayed !== undefined ? this.isUomDisplayed : <any>null;
        data["isDecimalPlacesDisplayed"] = this.isDecimalPlacesDisplayed !== undefined ? this.isDecimalPlacesDisplayed : <any>null;
        return data;
    }
}

export class ErrorRecordResponseModel extends ErrorResponseModel {
    recordId?: string | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.recordId = _data["recordId"] !== undefined ? _data["recordId"] : <any>null;
        }
    }

    static fromJS(data: any): ErrorRecordResponseModel {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorRecordResponseModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["recordId"] = this.recordId !== undefined ? this.recordId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class HornerRtuCommunicationConfigDTO {
    transportType?: RTUTransportTypeEnum;
    carrierType?: TelecommunicationsCarrier;
    ipNetworkAddress?: string | null;
    listenPort?: number;
    localHostAddress?: string | null;
    localHostPort?: number;
    remoteHostAddress?: string | null;
    remoteHostPort?: number;

    init(_data?: any) {
        if (_data) {
            this.transportType = _data["transportType"] !== undefined ? _data["transportType"] : <any>null;
            this.carrierType = _data["carrierType"] !== undefined ? _data["carrierType"] : <any>null;
            this.ipNetworkAddress = _data["ipNetworkAddress"] !== undefined ? _data["ipNetworkAddress"] : <any>null;
            this.listenPort = _data["listenPort"] !== undefined ? _data["listenPort"] : <any>null;
            this.localHostAddress = _data["localHostAddress"] !== undefined ? _data["localHostAddress"] : <any>null;
            this.localHostPort = _data["localHostPort"] !== undefined ? _data["localHostPort"] : <any>null;
            this.remoteHostAddress = _data["remoteHostAddress"] !== undefined ? _data["remoteHostAddress"] : <any>null;
            this.remoteHostPort = _data["remoteHostPort"] !== undefined ? _data["remoteHostPort"] : <any>null;
        }
    }

    static fromJS(data: any): HornerRtuCommunicationConfigDTO {
        data = typeof data === 'object' ? data : {};
        let result = new HornerRtuCommunicationConfigDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transportType"] = this.transportType !== undefined ? this.transportType : <any>null;
        data["carrierType"] = this.carrierType !== undefined ? this.carrierType : <any>null;
        data["ipNetworkAddress"] = this.ipNetworkAddress !== undefined ? this.ipNetworkAddress : <any>null;
        data["listenPort"] = this.listenPort !== undefined ? this.listenPort : <any>null;
        data["localHostAddress"] = this.localHostAddress !== undefined ? this.localHostAddress : <any>null;
        data["localHostPort"] = this.localHostPort !== undefined ? this.localHostPort : <any>null;
        data["remoteHostAddress"] = this.remoteHostAddress !== undefined ? this.remoteHostAddress : <any>null;
        data["remoteHostPort"] = this.remoteHostPort !== undefined ? this.remoteHostPort : <any>null;
        return data;
    }
}

export class HornerRtuTimeCorrectionDTO {
    timeCorrectionMode?: RTUAutoTimingCorrectionSourceEnum;

    init(_data?: any) {
        if (_data) {
            this.timeCorrectionMode = _data["timeCorrectionMode"] !== undefined ? _data["timeCorrectionMode"] : <any>null;
        }
    }

    static fromJS(data: any): HornerRtuTimeCorrectionDTO {
        data = typeof data === 'object' ? data : {};
        let result = new HornerRtuTimeCorrectionDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["timeCorrectionMode"] = this.timeCorrectionMode !== undefined ? this.timeCorrectionMode : <any>null;
        return data;
    }
}

export enum RTUAutoTimingCorrectionSourceEnum {
    None = 0,
    InitialCorrection = 1,
    LazyCorrection = 2,
    UseServerTimestamp = 3,
}

export class HornerRtuTransactionChannelsDTO {
    hornerRtuTransactionChannels?: HornerRtuTransactionChannelDTO[] | null;
    unitOfMeasureList?: string[] | null;
    fieldTypeList?: HornerChannelFieldTypeDTO[] | null;
    createdBy?: string | null;
    createdDate?: Date | null;
    lastUpdateUserId?: string | null;
    lastUpdatedDate?: Date | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["hornerRtuTransactionChannels"])) {
                this.hornerRtuTransactionChannels = [] as any;
                for (let item of _data["hornerRtuTransactionChannels"])
                    this.hornerRtuTransactionChannels!.push(HornerRtuTransactionChannelDTO.fromJS(item));
            }
            else {
                this.hornerRtuTransactionChannels = <any>null;
            }
            if (Array.isArray(_data["unitOfMeasureList"])) {
                this.unitOfMeasureList = [] as any;
                for (let item of _data["unitOfMeasureList"])
                    this.unitOfMeasureList!.push(item);
            }
            else {
                this.unitOfMeasureList = <any>null;
            }
            if (Array.isArray(_data["fieldTypeList"])) {
                this.fieldTypeList = [] as any;
                for (let item of _data["fieldTypeList"])
                    this.fieldTypeList!.push(HornerChannelFieldTypeDTO.fromJS(item));
            }
            else {
                this.fieldTypeList = <any>null;
            }
            this.createdBy = _data["createdBy"] !== undefined ? _data["createdBy"] : <any>null;
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>null;
            this.lastUpdateUserId = _data["lastUpdateUserId"] !== undefined ? _data["lastUpdateUserId"] : <any>null;
            this.lastUpdatedDate = _data["lastUpdatedDate"] ? new Date(_data["lastUpdatedDate"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): HornerRtuTransactionChannelsDTO {
        data = typeof data === 'object' ? data : {};
        let result = new HornerRtuTransactionChannelsDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.hornerRtuTransactionChannels)) {
            data["hornerRtuTransactionChannels"] = [];
            for (let item of this.hornerRtuTransactionChannels)
                data["hornerRtuTransactionChannels"].push(item.toJSON());
        }
        if (Array.isArray(this.unitOfMeasureList)) {
            data["unitOfMeasureList"] = [];
            for (let item of this.unitOfMeasureList)
                data["unitOfMeasureList"].push(item);
        }
        if (Array.isArray(this.fieldTypeList)) {
            data["fieldTypeList"] = [];
            for (let item of this.fieldTypeList)
                data["fieldTypeList"].push(item.toJSON());
        }
        data["createdBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>null;
        data["lastUpdateUserId"] = this.lastUpdateUserId !== undefined ? this.lastUpdateUserId : <any>null;
        data["lastUpdatedDate"] = this.lastUpdatedDate ? this.lastUpdatedDate.toISOString() : <any>null;
        return data;
    }
}

export class HornerRtuTransactionChannelDTO {
    fieldName?: string | null;
    fieldType?: string | null;
    channelNumber?: string | null;
    rawMinimumValue?: number | null;
    rawMaximumValue?: number | null;
    scaledMinimumValue?: number | null;
    scaledMaximumValue?: number | null;
    unitOfMeasure?: string | null;
    decimalPlaces?: number | null;
    isDisplayed?: boolean | null;

    init(_data?: any) {
        if (_data) {
            this.fieldName = _data["fieldName"] !== undefined ? _data["fieldName"] : <any>null;
            this.fieldType = _data["fieldType"] !== undefined ? _data["fieldType"] : <any>null;
            this.channelNumber = _data["channelNumber"] !== undefined ? _data["channelNumber"] : <any>null;
            this.rawMinimumValue = _data["rawMinimumValue"] !== undefined ? _data["rawMinimumValue"] : <any>null;
            this.rawMaximumValue = _data["rawMaximumValue"] !== undefined ? _data["rawMaximumValue"] : <any>null;
            this.scaledMinimumValue = _data["scaledMinimumValue"] !== undefined ? _data["scaledMinimumValue"] : <any>null;
            this.scaledMaximumValue = _data["scaledMaximumValue"] !== undefined ? _data["scaledMaximumValue"] : <any>null;
            this.unitOfMeasure = _data["unitOfMeasure"] !== undefined ? _data["unitOfMeasure"] : <any>null;
            this.decimalPlaces = _data["decimalPlaces"] !== undefined ? _data["decimalPlaces"] : <any>null;
            this.isDisplayed = _data["isDisplayed"] !== undefined ? _data["isDisplayed"] : <any>null;
        }
    }

    static fromJS(data: any): HornerRtuTransactionChannelDTO {
        data = typeof data === 'object' ? data : {};
        let result = new HornerRtuTransactionChannelDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fieldName"] = this.fieldName !== undefined ? this.fieldName : <any>null;
        data["fieldType"] = this.fieldType !== undefined ? this.fieldType : <any>null;
        data["channelNumber"] = this.channelNumber !== undefined ? this.channelNumber : <any>null;
        data["rawMinimumValue"] = this.rawMinimumValue !== undefined ? this.rawMinimumValue : <any>null;
        data["rawMaximumValue"] = this.rawMaximumValue !== undefined ? this.rawMaximumValue : <any>null;
        data["scaledMinimumValue"] = this.scaledMinimumValue !== undefined ? this.scaledMinimumValue : <any>null;
        data["scaledMaximumValue"] = this.scaledMaximumValue !== undefined ? this.scaledMaximumValue : <any>null;
        data["unitOfMeasure"] = this.unitOfMeasure !== undefined ? this.unitOfMeasure : <any>null;
        data["decimalPlaces"] = this.decimalPlaces !== undefined ? this.decimalPlaces : <any>null;
        data["isDisplayed"] = this.isDisplayed !== undefined ? this.isDisplayed : <any>null;
        return data;
    }
}

export class DropDownListDtoOfInteger {
    id?: number;
    value?: string | null;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.value = _data["value"] !== undefined ? _data["value"] : <any>null;
        }
    }

    static fromJS(data: any): DropDownListDtoOfInteger {
        data = typeof data === 'object' ? data : {};
        let result = new DropDownListDtoOfInteger();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        return data;
    }
}

export class HornerTransactionJournalDTO {
    hornerTransactionJournalId?: number;
    createdDate?: Date;
    rtuId?: string;
    batchTime?: Date;
    pin?: number;
    fillCount?: number;
    fillStartTime?: Date;
    startPressure?: number | null;
    ambientTemperature?: number;
    startTankPressure?: number | null;
    startTankTemperature?: number | null;
    product?: number | null;
    userNo?: number | null;
    vechicleId?: number | null;
    odometerReading?: number | null;
    fillEndTime?: Date | null;
    endPressure?: number;
    flow?: number;
    fuelTemperature?: number | null;
    recordingEndTime?: Date | null;
    commType?: number | null;
    shutdownReason?: number;
    nonCommReason?: number;
    duration?: number;
    averageFillRate?: number | null;
    endTankPressure?: number | null;
    endTankTemperature?: number | null;
    commLossCount?: number | null;
    blend?: number | null;
    customField1?: number | null;
    customField2?: number | null;
    customField3?: number | null;
    customField4?: number | null;
    customField5?: number | null;
    customField6?: number | null;
    customField7?: number | null;
    customField8?: number | null;
    customField9?: number | null;
    startPressureRaw?: number | null;
    ambientTemperatureRaw?: number;
    startTankPressureRaw?: number | null;
    startTankTemperatureRaw?: number | null;
    endPressureRaw?: number;
    flowRaw?: number;
    fuelTemperatureRaw?: number | null;
    endTankPressureRaw?: number | null;
    endTankTemperatureRaw?: number | null;
    averageFillRateRaw?: number | null;
    blendRaw?: number | null;
    customField1Raw?: number | null;
    customField2Raw?: number | null;
    customField3Raw?: number | null;
    customField4Raw?: number | null;
    customField5Raw?: number | null;
    customField6Raw?: number | null;
    customField7Raw?: number | null;
    customField8Raw?: number | null;
    customField9Raw?: number | null;
    bdtBatchId?: number | null;

    init(_data?: any) {
        if (_data) {
            this.hornerTransactionJournalId = _data["hornerTransactionJournalId"] !== undefined ? _data["hornerTransactionJournalId"] : <any>null;
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>null;
            this.rtuId = _data["rtuId"] !== undefined ? _data["rtuId"] : <any>null;
            this.batchTime = _data["batchTime"] ? new Date(_data["batchTime"].toString()) : <any>null;
            this.pin = _data["pin"] !== undefined ? _data["pin"] : <any>null;
            this.fillCount = _data["fillCount"] !== undefined ? _data["fillCount"] : <any>null;
            this.fillStartTime = _data["fillStartTime"] ? new Date(_data["fillStartTime"].toString()) : <any>null;
            this.startPressure = _data["startPressure"] !== undefined ? _data["startPressure"] : <any>null;
            this.ambientTemperature = _data["ambientTemperature"] !== undefined ? _data["ambientTemperature"] : <any>null;
            this.startTankPressure = _data["startTankPressure"] !== undefined ? _data["startTankPressure"] : <any>null;
            this.startTankTemperature = _data["startTankTemperature"] !== undefined ? _data["startTankTemperature"] : <any>null;
            this.product = _data["product"] !== undefined ? _data["product"] : <any>null;
            this.userNo = _data["userNo"] !== undefined ? _data["userNo"] : <any>null;
            this.vechicleId = _data["vechicleId"] !== undefined ? _data["vechicleId"] : <any>null;
            this.odometerReading = _data["odometerReading"] !== undefined ? _data["odometerReading"] : <any>null;
            this.fillEndTime = _data["fillEndTime"] ? new Date(_data["fillEndTime"].toString()) : <any>null;
            this.endPressure = _data["endPressure"] !== undefined ? _data["endPressure"] : <any>null;
            this.flow = _data["flow"] !== undefined ? _data["flow"] : <any>null;
            this.fuelTemperature = _data["fuelTemperature"] !== undefined ? _data["fuelTemperature"] : <any>null;
            this.recordingEndTime = _data["recordingEndTime"] ? new Date(_data["recordingEndTime"].toString()) : <any>null;
            this.commType = _data["commType"] !== undefined ? _data["commType"] : <any>null;
            this.shutdownReason = _data["shutdownReason"] !== undefined ? _data["shutdownReason"] : <any>null;
            this.nonCommReason = _data["nonCommReason"] !== undefined ? _data["nonCommReason"] : <any>null;
            this.duration = _data["duration"] !== undefined ? _data["duration"] : <any>null;
            this.averageFillRate = _data["averageFillRate"] !== undefined ? _data["averageFillRate"] : <any>null;
            this.endTankPressure = _data["endTankPressure"] !== undefined ? _data["endTankPressure"] : <any>null;
            this.endTankTemperature = _data["endTankTemperature"] !== undefined ? _data["endTankTemperature"] : <any>null;
            this.commLossCount = _data["commLossCount"] !== undefined ? _data["commLossCount"] : <any>null;
            this.blend = _data["blend"] !== undefined ? _data["blend"] : <any>null;
            this.customField1 = _data["customField1"] !== undefined ? _data["customField1"] : <any>null;
            this.customField2 = _data["customField2"] !== undefined ? _data["customField2"] : <any>null;
            this.customField3 = _data["customField3"] !== undefined ? _data["customField3"] : <any>null;
            this.customField4 = _data["customField4"] !== undefined ? _data["customField4"] : <any>null;
            this.customField5 = _data["customField5"] !== undefined ? _data["customField5"] : <any>null;
            this.customField6 = _data["customField6"] !== undefined ? _data["customField6"] : <any>null;
            this.customField7 = _data["customField7"] !== undefined ? _data["customField7"] : <any>null;
            this.customField8 = _data["customField8"] !== undefined ? _data["customField8"] : <any>null;
            this.customField9 = _data["customField9"] !== undefined ? _data["customField9"] : <any>null;
            this.startPressureRaw = _data["startPressureRaw"] !== undefined ? _data["startPressureRaw"] : <any>null;
            this.ambientTemperatureRaw = _data["ambientTemperatureRaw"] !== undefined ? _data["ambientTemperatureRaw"] : <any>null;
            this.startTankPressureRaw = _data["startTankPressureRaw"] !== undefined ? _data["startTankPressureRaw"] : <any>null;
            this.startTankTemperatureRaw = _data["startTankTemperatureRaw"] !== undefined ? _data["startTankTemperatureRaw"] : <any>null;
            this.endPressureRaw = _data["endPressureRaw"] !== undefined ? _data["endPressureRaw"] : <any>null;
            this.flowRaw = _data["flowRaw"] !== undefined ? _data["flowRaw"] : <any>null;
            this.fuelTemperatureRaw = _data["fuelTemperatureRaw"] !== undefined ? _data["fuelTemperatureRaw"] : <any>null;
            this.endTankPressureRaw = _data["endTankPressureRaw"] !== undefined ? _data["endTankPressureRaw"] : <any>null;
            this.endTankTemperatureRaw = _data["endTankTemperatureRaw"] !== undefined ? _data["endTankTemperatureRaw"] : <any>null;
            this.averageFillRateRaw = _data["averageFillRateRaw"] !== undefined ? _data["averageFillRateRaw"] : <any>null;
            this.blendRaw = _data["blendRaw"] !== undefined ? _data["blendRaw"] : <any>null;
            this.customField1Raw = _data["customField1Raw"] !== undefined ? _data["customField1Raw"] : <any>null;
            this.customField2Raw = _data["customField2Raw"] !== undefined ? _data["customField2Raw"] : <any>null;
            this.customField3Raw = _data["customField3Raw"] !== undefined ? _data["customField3Raw"] : <any>null;
            this.customField4Raw = _data["customField4Raw"] !== undefined ? _data["customField4Raw"] : <any>null;
            this.customField5Raw = _data["customField5Raw"] !== undefined ? _data["customField5Raw"] : <any>null;
            this.customField6Raw = _data["customField6Raw"] !== undefined ? _data["customField6Raw"] : <any>null;
            this.customField7Raw = _data["customField7Raw"] !== undefined ? _data["customField7Raw"] : <any>null;
            this.customField8Raw = _data["customField8Raw"] !== undefined ? _data["customField8Raw"] : <any>null;
            this.customField9Raw = _data["customField9Raw"] !== undefined ? _data["customField9Raw"] : <any>null;
            this.bdtBatchId = _data["bdtBatchId"] !== undefined ? _data["bdtBatchId"] : <any>null;
        }
    }

    static fromJS(data: any): HornerTransactionJournalDTO {
        data = typeof data === 'object' ? data : {};
        let result = new HornerTransactionJournalDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hornerTransactionJournalId"] = this.hornerTransactionJournalId !== undefined ? this.hornerTransactionJournalId : <any>null;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>null;
        data["rtuId"] = this.rtuId !== undefined ? this.rtuId : <any>null;
        data["batchTime"] = this.batchTime ? this.batchTime.toISOString() : <any>null;
        data["pin"] = this.pin !== undefined ? this.pin : <any>null;
        data["fillCount"] = this.fillCount !== undefined ? this.fillCount : <any>null;
        data["fillStartTime"] = this.fillStartTime ? this.fillStartTime.toISOString() : <any>null;
        data["startPressure"] = this.startPressure !== undefined ? this.startPressure : <any>null;
        data["ambientTemperature"] = this.ambientTemperature !== undefined ? this.ambientTemperature : <any>null;
        data["startTankPressure"] = this.startTankPressure !== undefined ? this.startTankPressure : <any>null;
        data["startTankTemperature"] = this.startTankTemperature !== undefined ? this.startTankTemperature : <any>null;
        data["product"] = this.product !== undefined ? this.product : <any>null;
        data["userNo"] = this.userNo !== undefined ? this.userNo : <any>null;
        data["vechicleId"] = this.vechicleId !== undefined ? this.vechicleId : <any>null;
        data["odometerReading"] = this.odometerReading !== undefined ? this.odometerReading : <any>null;
        data["fillEndTime"] = this.fillEndTime ? this.fillEndTime.toISOString() : <any>null;
        data["endPressure"] = this.endPressure !== undefined ? this.endPressure : <any>null;
        data["flow"] = this.flow !== undefined ? this.flow : <any>null;
        data["fuelTemperature"] = this.fuelTemperature !== undefined ? this.fuelTemperature : <any>null;
        data["recordingEndTime"] = this.recordingEndTime ? this.recordingEndTime.toISOString() : <any>null;
        data["commType"] = this.commType !== undefined ? this.commType : <any>null;
        data["shutdownReason"] = this.shutdownReason !== undefined ? this.shutdownReason : <any>null;
        data["nonCommReason"] = this.nonCommReason !== undefined ? this.nonCommReason : <any>null;
        data["duration"] = this.duration !== undefined ? this.duration : <any>null;
        data["averageFillRate"] = this.averageFillRate !== undefined ? this.averageFillRate : <any>null;
        data["endTankPressure"] = this.endTankPressure !== undefined ? this.endTankPressure : <any>null;
        data["endTankTemperature"] = this.endTankTemperature !== undefined ? this.endTankTemperature : <any>null;
        data["commLossCount"] = this.commLossCount !== undefined ? this.commLossCount : <any>null;
        data["blend"] = this.blend !== undefined ? this.blend : <any>null;
        data["customField1"] = this.customField1 !== undefined ? this.customField1 : <any>null;
        data["customField2"] = this.customField2 !== undefined ? this.customField2 : <any>null;
        data["customField3"] = this.customField3 !== undefined ? this.customField3 : <any>null;
        data["customField4"] = this.customField4 !== undefined ? this.customField4 : <any>null;
        data["customField5"] = this.customField5 !== undefined ? this.customField5 : <any>null;
        data["customField6"] = this.customField6 !== undefined ? this.customField6 : <any>null;
        data["customField7"] = this.customField7 !== undefined ? this.customField7 : <any>null;
        data["customField8"] = this.customField8 !== undefined ? this.customField8 : <any>null;
        data["customField9"] = this.customField9 !== undefined ? this.customField9 : <any>null;
        data["startPressureRaw"] = this.startPressureRaw !== undefined ? this.startPressureRaw : <any>null;
        data["ambientTemperatureRaw"] = this.ambientTemperatureRaw !== undefined ? this.ambientTemperatureRaw : <any>null;
        data["startTankPressureRaw"] = this.startTankPressureRaw !== undefined ? this.startTankPressureRaw : <any>null;
        data["startTankTemperatureRaw"] = this.startTankTemperatureRaw !== undefined ? this.startTankTemperatureRaw : <any>null;
        data["endPressureRaw"] = this.endPressureRaw !== undefined ? this.endPressureRaw : <any>null;
        data["flowRaw"] = this.flowRaw !== undefined ? this.flowRaw : <any>null;
        data["fuelTemperatureRaw"] = this.fuelTemperatureRaw !== undefined ? this.fuelTemperatureRaw : <any>null;
        data["endTankPressureRaw"] = this.endTankPressureRaw !== undefined ? this.endTankPressureRaw : <any>null;
        data["endTankTemperatureRaw"] = this.endTankTemperatureRaw !== undefined ? this.endTankTemperatureRaw : <any>null;
        data["averageFillRateRaw"] = this.averageFillRateRaw !== undefined ? this.averageFillRateRaw : <any>null;
        data["blendRaw"] = this.blendRaw !== undefined ? this.blendRaw : <any>null;
        data["customField1Raw"] = this.customField1Raw !== undefined ? this.customField1Raw : <any>null;
        data["customField2Raw"] = this.customField2Raw !== undefined ? this.customField2Raw : <any>null;
        data["customField3Raw"] = this.customField3Raw !== undefined ? this.customField3Raw : <any>null;
        data["customField4Raw"] = this.customField4Raw !== undefined ? this.customField4Raw : <any>null;
        data["customField5Raw"] = this.customField5Raw !== undefined ? this.customField5Raw : <any>null;
        data["customField6Raw"] = this.customField6Raw !== undefined ? this.customField6Raw : <any>null;
        data["customField7Raw"] = this.customField7Raw !== undefined ? this.customField7Raw : <any>null;
        data["customField8Raw"] = this.customField8Raw !== undefined ? this.customField8Raw : <any>null;
        data["customField9Raw"] = this.customField9Raw !== undefined ? this.customField9Raw : <any>null;
        data["bdtBatchId"] = this.bdtBatchId !== undefined ? this.bdtBatchId : <any>null;
        return data;
    }
}

export class HornerDetailJournalDTO {
    hornerDetailJournalId?: number;
    createdDate?: Date;
    hornerTransactionJournalId?: number | null;
    rtuId?: string;
    batchTime?: Date;
    readingTime?: Date;
    chan1?: number;
    chan2?: number;
    chan3?: number | null;
    chan4?: number | null;
    chan5?: number | null;
    chan6?: number | null;
    chan7?: number | null;
    chan8?: number | null;
    chan9?: number | null;
    chan10?: number | null;
    chan11?: number | null;
    chan12?: number | null;
    chan13?: number | null;
    chan14?: number | null;
    chan15?: number | null;
    chan16?: number | null;
    chan17?: number | null;
    chan18?: number | null;
    chan19?: number | null;
    chan20?: number | null;
    chan21?: number | null;
    chan22?: number | null;
    chan23?: number | null;
    chan24?: number | null;
    chan25?: number | null;
    chan26?: number | null;
    chan27?: number | null;
    chan28?: number | null;
    chan29?: number | null;
    chan30?: number | null;
    chan1Raw?: number;
    chan2Raw?: number;
    chan3Raw?: number | null;
    chan4Raw?: number | null;
    chan5Raw?: number | null;
    chan6Raw?: number | null;
    chan7Raw?: number | null;
    chan8Raw?: number | null;
    chan9Raw?: number | null;
    chan10Raw?: number | null;
    chan11Raw?: number | null;
    chan12Raw?: number | null;
    chan13Raw?: number | null;
    chan14Raw?: number | null;
    chan15Raw?: number | null;
    chan16Raw?: number | null;
    chan17Raw?: number | null;
    chan18Raw?: number | null;
    chan19Raw?: number | null;
    chan20Raw?: number | null;
    chan21Raw?: number | null;
    chan22Raw?: number | null;
    chan23Raw?: number | null;
    chan24Raw?: number | null;
    chan25Raw?: number | null;
    chan26Raw?: number | null;
    chan27Raw?: number | null;
    chan28Raw?: number | null;
    chan29Raw?: number | null;
    chan30Raw?: number | null;
    bdtBatchId?: number | null;

    init(_data?: any) {
        if (_data) {
            this.hornerDetailJournalId = _data["hornerDetailJournalId"] !== undefined ? _data["hornerDetailJournalId"] : <any>null;
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>null;
            this.hornerTransactionJournalId = _data["hornerTransactionJournalId"] !== undefined ? _data["hornerTransactionJournalId"] : <any>null;
            this.rtuId = _data["rtuId"] !== undefined ? _data["rtuId"] : <any>null;
            this.batchTime = _data["batchTime"] ? new Date(_data["batchTime"].toString()) : <any>null;
            this.readingTime = _data["readingTime"] ? new Date(_data["readingTime"].toString()) : <any>null;
            this.chan1 = _data["chan1"] !== undefined ? _data["chan1"] : <any>null;
            this.chan2 = _data["chan2"] !== undefined ? _data["chan2"] : <any>null;
            this.chan3 = _data["chan3"] !== undefined ? _data["chan3"] : <any>null;
            this.chan4 = _data["chan4"] !== undefined ? _data["chan4"] : <any>null;
            this.chan5 = _data["chan5"] !== undefined ? _data["chan5"] : <any>null;
            this.chan6 = _data["chan6"] !== undefined ? _data["chan6"] : <any>null;
            this.chan7 = _data["chan7"] !== undefined ? _data["chan7"] : <any>null;
            this.chan8 = _data["chan8"] !== undefined ? _data["chan8"] : <any>null;
            this.chan9 = _data["chan9"] !== undefined ? _data["chan9"] : <any>null;
            this.chan10 = _data["chan10"] !== undefined ? _data["chan10"] : <any>null;
            this.chan11 = _data["chan11"] !== undefined ? _data["chan11"] : <any>null;
            this.chan12 = _data["chan12"] !== undefined ? _data["chan12"] : <any>null;
            this.chan13 = _data["chan13"] !== undefined ? _data["chan13"] : <any>null;
            this.chan14 = _data["chan14"] !== undefined ? _data["chan14"] : <any>null;
            this.chan15 = _data["chan15"] !== undefined ? _data["chan15"] : <any>null;
            this.chan16 = _data["chan16"] !== undefined ? _data["chan16"] : <any>null;
            this.chan17 = _data["chan17"] !== undefined ? _data["chan17"] : <any>null;
            this.chan18 = _data["chan18"] !== undefined ? _data["chan18"] : <any>null;
            this.chan19 = _data["chan19"] !== undefined ? _data["chan19"] : <any>null;
            this.chan20 = _data["chan20"] !== undefined ? _data["chan20"] : <any>null;
            this.chan21 = _data["chan21"] !== undefined ? _data["chan21"] : <any>null;
            this.chan22 = _data["chan22"] !== undefined ? _data["chan22"] : <any>null;
            this.chan23 = _data["chan23"] !== undefined ? _data["chan23"] : <any>null;
            this.chan24 = _data["chan24"] !== undefined ? _data["chan24"] : <any>null;
            this.chan25 = _data["chan25"] !== undefined ? _data["chan25"] : <any>null;
            this.chan26 = _data["chan26"] !== undefined ? _data["chan26"] : <any>null;
            this.chan27 = _data["chan27"] !== undefined ? _data["chan27"] : <any>null;
            this.chan28 = _data["chan28"] !== undefined ? _data["chan28"] : <any>null;
            this.chan29 = _data["chan29"] !== undefined ? _data["chan29"] : <any>null;
            this.chan30 = _data["chan30"] !== undefined ? _data["chan30"] : <any>null;
            this.chan1Raw = _data["chan1Raw"] !== undefined ? _data["chan1Raw"] : <any>null;
            this.chan2Raw = _data["chan2Raw"] !== undefined ? _data["chan2Raw"] : <any>null;
            this.chan3Raw = _data["chan3Raw"] !== undefined ? _data["chan3Raw"] : <any>null;
            this.chan4Raw = _data["chan4Raw"] !== undefined ? _data["chan4Raw"] : <any>null;
            this.chan5Raw = _data["chan5Raw"] !== undefined ? _data["chan5Raw"] : <any>null;
            this.chan6Raw = _data["chan6Raw"] !== undefined ? _data["chan6Raw"] : <any>null;
            this.chan7Raw = _data["chan7Raw"] !== undefined ? _data["chan7Raw"] : <any>null;
            this.chan8Raw = _data["chan8Raw"] !== undefined ? _data["chan8Raw"] : <any>null;
            this.chan9Raw = _data["chan9Raw"] !== undefined ? _data["chan9Raw"] : <any>null;
            this.chan10Raw = _data["chan10Raw"] !== undefined ? _data["chan10Raw"] : <any>null;
            this.chan11Raw = _data["chan11Raw"] !== undefined ? _data["chan11Raw"] : <any>null;
            this.chan12Raw = _data["chan12Raw"] !== undefined ? _data["chan12Raw"] : <any>null;
            this.chan13Raw = _data["chan13Raw"] !== undefined ? _data["chan13Raw"] : <any>null;
            this.chan14Raw = _data["chan14Raw"] !== undefined ? _data["chan14Raw"] : <any>null;
            this.chan15Raw = _data["chan15Raw"] !== undefined ? _data["chan15Raw"] : <any>null;
            this.chan16Raw = _data["chan16Raw"] !== undefined ? _data["chan16Raw"] : <any>null;
            this.chan17Raw = _data["chan17Raw"] !== undefined ? _data["chan17Raw"] : <any>null;
            this.chan18Raw = _data["chan18Raw"] !== undefined ? _data["chan18Raw"] : <any>null;
            this.chan19Raw = _data["chan19Raw"] !== undefined ? _data["chan19Raw"] : <any>null;
            this.chan20Raw = _data["chan20Raw"] !== undefined ? _data["chan20Raw"] : <any>null;
            this.chan21Raw = _data["chan21Raw"] !== undefined ? _data["chan21Raw"] : <any>null;
            this.chan22Raw = _data["chan22Raw"] !== undefined ? _data["chan22Raw"] : <any>null;
            this.chan23Raw = _data["chan23Raw"] !== undefined ? _data["chan23Raw"] : <any>null;
            this.chan24Raw = _data["chan24Raw"] !== undefined ? _data["chan24Raw"] : <any>null;
            this.chan25Raw = _data["chan25Raw"] !== undefined ? _data["chan25Raw"] : <any>null;
            this.chan26Raw = _data["chan26Raw"] !== undefined ? _data["chan26Raw"] : <any>null;
            this.chan27Raw = _data["chan27Raw"] !== undefined ? _data["chan27Raw"] : <any>null;
            this.chan28Raw = _data["chan28Raw"] !== undefined ? _data["chan28Raw"] : <any>null;
            this.chan29Raw = _data["chan29Raw"] !== undefined ? _data["chan29Raw"] : <any>null;
            this.chan30Raw = _data["chan30Raw"] !== undefined ? _data["chan30Raw"] : <any>null;
            this.bdtBatchId = _data["bdtBatchId"] !== undefined ? _data["bdtBatchId"] : <any>null;
        }
    }

    static fromJS(data: any): HornerDetailJournalDTO {
        data = typeof data === 'object' ? data : {};
        let result = new HornerDetailJournalDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hornerDetailJournalId"] = this.hornerDetailJournalId !== undefined ? this.hornerDetailJournalId : <any>null;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>null;
        data["hornerTransactionJournalId"] = this.hornerTransactionJournalId !== undefined ? this.hornerTransactionJournalId : <any>null;
        data["rtuId"] = this.rtuId !== undefined ? this.rtuId : <any>null;
        data["batchTime"] = this.batchTime ? this.batchTime.toISOString() : <any>null;
        data["readingTime"] = this.readingTime ? this.readingTime.toISOString() : <any>null;
        data["chan1"] = this.chan1 !== undefined ? this.chan1 : <any>null;
        data["chan2"] = this.chan2 !== undefined ? this.chan2 : <any>null;
        data["chan3"] = this.chan3 !== undefined ? this.chan3 : <any>null;
        data["chan4"] = this.chan4 !== undefined ? this.chan4 : <any>null;
        data["chan5"] = this.chan5 !== undefined ? this.chan5 : <any>null;
        data["chan6"] = this.chan6 !== undefined ? this.chan6 : <any>null;
        data["chan7"] = this.chan7 !== undefined ? this.chan7 : <any>null;
        data["chan8"] = this.chan8 !== undefined ? this.chan8 : <any>null;
        data["chan9"] = this.chan9 !== undefined ? this.chan9 : <any>null;
        data["chan10"] = this.chan10 !== undefined ? this.chan10 : <any>null;
        data["chan11"] = this.chan11 !== undefined ? this.chan11 : <any>null;
        data["chan12"] = this.chan12 !== undefined ? this.chan12 : <any>null;
        data["chan13"] = this.chan13 !== undefined ? this.chan13 : <any>null;
        data["chan14"] = this.chan14 !== undefined ? this.chan14 : <any>null;
        data["chan15"] = this.chan15 !== undefined ? this.chan15 : <any>null;
        data["chan16"] = this.chan16 !== undefined ? this.chan16 : <any>null;
        data["chan17"] = this.chan17 !== undefined ? this.chan17 : <any>null;
        data["chan18"] = this.chan18 !== undefined ? this.chan18 : <any>null;
        data["chan19"] = this.chan19 !== undefined ? this.chan19 : <any>null;
        data["chan20"] = this.chan20 !== undefined ? this.chan20 : <any>null;
        data["chan21"] = this.chan21 !== undefined ? this.chan21 : <any>null;
        data["chan22"] = this.chan22 !== undefined ? this.chan22 : <any>null;
        data["chan23"] = this.chan23 !== undefined ? this.chan23 : <any>null;
        data["chan24"] = this.chan24 !== undefined ? this.chan24 : <any>null;
        data["chan25"] = this.chan25 !== undefined ? this.chan25 : <any>null;
        data["chan26"] = this.chan26 !== undefined ? this.chan26 : <any>null;
        data["chan27"] = this.chan27 !== undefined ? this.chan27 : <any>null;
        data["chan28"] = this.chan28 !== undefined ? this.chan28 : <any>null;
        data["chan29"] = this.chan29 !== undefined ? this.chan29 : <any>null;
        data["chan30"] = this.chan30 !== undefined ? this.chan30 : <any>null;
        data["chan1Raw"] = this.chan1Raw !== undefined ? this.chan1Raw : <any>null;
        data["chan2Raw"] = this.chan2Raw !== undefined ? this.chan2Raw : <any>null;
        data["chan3Raw"] = this.chan3Raw !== undefined ? this.chan3Raw : <any>null;
        data["chan4Raw"] = this.chan4Raw !== undefined ? this.chan4Raw : <any>null;
        data["chan5Raw"] = this.chan5Raw !== undefined ? this.chan5Raw : <any>null;
        data["chan6Raw"] = this.chan6Raw !== undefined ? this.chan6Raw : <any>null;
        data["chan7Raw"] = this.chan7Raw !== undefined ? this.chan7Raw : <any>null;
        data["chan8Raw"] = this.chan8Raw !== undefined ? this.chan8Raw : <any>null;
        data["chan9Raw"] = this.chan9Raw !== undefined ? this.chan9Raw : <any>null;
        data["chan10Raw"] = this.chan10Raw !== undefined ? this.chan10Raw : <any>null;
        data["chan11Raw"] = this.chan11Raw !== undefined ? this.chan11Raw : <any>null;
        data["chan12Raw"] = this.chan12Raw !== undefined ? this.chan12Raw : <any>null;
        data["chan13Raw"] = this.chan13Raw !== undefined ? this.chan13Raw : <any>null;
        data["chan14Raw"] = this.chan14Raw !== undefined ? this.chan14Raw : <any>null;
        data["chan15Raw"] = this.chan15Raw !== undefined ? this.chan15Raw : <any>null;
        data["chan16Raw"] = this.chan16Raw !== undefined ? this.chan16Raw : <any>null;
        data["chan17Raw"] = this.chan17Raw !== undefined ? this.chan17Raw : <any>null;
        data["chan18Raw"] = this.chan18Raw !== undefined ? this.chan18Raw : <any>null;
        data["chan19Raw"] = this.chan19Raw !== undefined ? this.chan19Raw : <any>null;
        data["chan20Raw"] = this.chan20Raw !== undefined ? this.chan20Raw : <any>null;
        data["chan21Raw"] = this.chan21Raw !== undefined ? this.chan21Raw : <any>null;
        data["chan22Raw"] = this.chan22Raw !== undefined ? this.chan22Raw : <any>null;
        data["chan23Raw"] = this.chan23Raw !== undefined ? this.chan23Raw : <any>null;
        data["chan24Raw"] = this.chan24Raw !== undefined ? this.chan24Raw : <any>null;
        data["chan25Raw"] = this.chan25Raw !== undefined ? this.chan25Raw : <any>null;
        data["chan26Raw"] = this.chan26Raw !== undefined ? this.chan26Raw : <any>null;
        data["chan27Raw"] = this.chan27Raw !== undefined ? this.chan27Raw : <any>null;
        data["chan28Raw"] = this.chan28Raw !== undefined ? this.chan28Raw : <any>null;
        data["chan29Raw"] = this.chan29Raw !== undefined ? this.chan29Raw : <any>null;
        data["chan30Raw"] = this.chan30Raw !== undefined ? this.chan30Raw : <any>null;
        data["bdtBatchId"] = this.bdtBatchId !== undefined ? this.bdtBatchId : <any>null;
        return data;
    }
}

export class HornerDiagnosticInformationDTO {
    lastUpdatedDate?: Date | null;
    lastCommissionTimeStamp?: Date | null;
    timeErrorSeconds?: number | null;
    transactionRecordSize?: number | null;
    transactionDataStart?: number | null;
    transactionDataMax?: number | null;
    transactionDataFillCount?: number | null;
    remoteTransactionDataFillCount?: number | null;
    detailDataStart?: number | null;
    detailDataMax?: number | null;
    detailDataOffset?: number | null;
    remoteDetailDataOffset?: number | null;
    isDeviceTraceEnabled?: boolean | null;

    init(_data?: any) {
        if (_data) {
            this.lastUpdatedDate = _data["lastUpdatedDate"] ? new Date(_data["lastUpdatedDate"].toString()) : <any>null;
            this.lastCommissionTimeStamp = _data["lastCommissionTimeStamp"] ? new Date(_data["lastCommissionTimeStamp"].toString()) : <any>null;
            this.timeErrorSeconds = _data["timeErrorSeconds"] !== undefined ? _data["timeErrorSeconds"] : <any>null;
            this.transactionRecordSize = _data["transactionRecordSize"] !== undefined ? _data["transactionRecordSize"] : <any>null;
            this.transactionDataStart = _data["transactionDataStart"] !== undefined ? _data["transactionDataStart"] : <any>null;
            this.transactionDataMax = _data["transactionDataMax"] !== undefined ? _data["transactionDataMax"] : <any>null;
            this.transactionDataFillCount = _data["transactionDataFillCount"] !== undefined ? _data["transactionDataFillCount"] : <any>null;
            this.remoteTransactionDataFillCount = _data["remoteTransactionDataFillCount"] !== undefined ? _data["remoteTransactionDataFillCount"] : <any>null;
            this.detailDataStart = _data["detailDataStart"] !== undefined ? _data["detailDataStart"] : <any>null;
            this.detailDataMax = _data["detailDataMax"] !== undefined ? _data["detailDataMax"] : <any>null;
            this.detailDataOffset = _data["detailDataOffset"] !== undefined ? _data["detailDataOffset"] : <any>null;
            this.remoteDetailDataOffset = _data["remoteDetailDataOffset"] !== undefined ? _data["remoteDetailDataOffset"] : <any>null;
            this.isDeviceTraceEnabled = _data["isDeviceTraceEnabled"] !== undefined ? _data["isDeviceTraceEnabled"] : <any>null;
        }
    }

    static fromJS(data: any): HornerDiagnosticInformationDTO {
        data = typeof data === 'object' ? data : {};
        let result = new HornerDiagnosticInformationDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lastUpdatedDate"] = this.lastUpdatedDate ? this.lastUpdatedDate.toISOString() : <any>null;
        data["lastCommissionTimeStamp"] = this.lastCommissionTimeStamp ? this.lastCommissionTimeStamp.toISOString() : <any>null;
        data["timeErrorSeconds"] = this.timeErrorSeconds !== undefined ? this.timeErrorSeconds : <any>null;
        data["transactionRecordSize"] = this.transactionRecordSize !== undefined ? this.transactionRecordSize : <any>null;
        data["transactionDataStart"] = this.transactionDataStart !== undefined ? this.transactionDataStart : <any>null;
        data["transactionDataMax"] = this.transactionDataMax !== undefined ? this.transactionDataMax : <any>null;
        data["transactionDataFillCount"] = this.transactionDataFillCount !== undefined ? this.transactionDataFillCount : <any>null;
        data["remoteTransactionDataFillCount"] = this.remoteTransactionDataFillCount !== undefined ? this.remoteTransactionDataFillCount : <any>null;
        data["detailDataStart"] = this.detailDataStart !== undefined ? this.detailDataStart : <any>null;
        data["detailDataMax"] = this.detailDataMax !== undefined ? this.detailDataMax : <any>null;
        data["detailDataOffset"] = this.detailDataOffset !== undefined ? this.detailDataOffset : <any>null;
        data["remoteDetailDataOffset"] = this.remoteDetailDataOffset !== undefined ? this.remoteDetailDataOffset : <any>null;
        data["isDeviceTraceEnabled"] = this.isDeviceTraceEnabled !== undefined ? this.isDeviceTraceEnabled : <any>null;
        return data;
    }
}

export class MetronConfigurationsDTO {
    local?: MetronConfigurationDTO | null;
    remote?: MetronConfigurationDTO | null;
    inSync?: MetronConfigurationInSyncDTO | null;

    init(_data?: any) {
        if (_data) {
            this.local = _data["local"] ? MetronConfigurationDTO.fromJS(_data["local"]) : <any>null;
            this.remote = _data["remote"] ? MetronConfigurationDTO.fromJS(_data["remote"]) : <any>null;
            this.inSync = _data["inSync"] ? MetronConfigurationInSyncDTO.fromJS(_data["inSync"]) : <any>null;
        }
    }

    static fromJS(data: any): MetronConfigurationsDTO {
        data = typeof data === 'object' ? data : {};
        let result = new MetronConfigurationsDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["local"] = this.local ? this.local.toJSON() : <any>null;
        data["remote"] = this.remote ? this.remote.toJSON() : <any>null;
        data["inSync"] = this.inSync ? this.inSync.toJSON() : <any>null;
        return data;
    }
}

export class MetronConfigurationDTO {
    callTime?: number | null;
    callPeriod?: number;
    powerMode?: string | null;
    calloutTimeVariance?: number;
    wakeUpInterval?: number;
    externalAntenna?: boolean;
    batteryAlarmPoint?: number;

    init(_data?: any) {
        if (_data) {
            this.callTime = _data["callTime"] !== undefined ? _data["callTime"] : <any>null;
            this.callPeriod = _data["callPeriod"] !== undefined ? _data["callPeriod"] : <any>null;
            this.powerMode = _data["powerMode"] !== undefined ? _data["powerMode"] : <any>null;
            this.calloutTimeVariance = _data["calloutTimeVariance"] !== undefined ? _data["calloutTimeVariance"] : <any>null;
            this.wakeUpInterval = _data["wakeUpInterval"] !== undefined ? _data["wakeUpInterval"] : <any>null;
            this.externalAntenna = _data["externalAntenna"] !== undefined ? _data["externalAntenna"] : <any>null;
            this.batteryAlarmPoint = _data["batteryAlarmPoint"] !== undefined ? _data["batteryAlarmPoint"] : <any>null;
        }
    }

    static fromJS(data: any): MetronConfigurationDTO {
        data = typeof data === 'object' ? data : {};
        let result = new MetronConfigurationDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["callTime"] = this.callTime !== undefined ? this.callTime : <any>null;
        data["callPeriod"] = this.callPeriod !== undefined ? this.callPeriod : <any>null;
        data["powerMode"] = this.powerMode !== undefined ? this.powerMode : <any>null;
        data["calloutTimeVariance"] = this.calloutTimeVariance !== undefined ? this.calloutTimeVariance : <any>null;
        data["wakeUpInterval"] = this.wakeUpInterval !== undefined ? this.wakeUpInterval : <any>null;
        data["externalAntenna"] = this.externalAntenna !== undefined ? this.externalAntenna : <any>null;
        data["batteryAlarmPoint"] = this.batteryAlarmPoint !== undefined ? this.batteryAlarmPoint : <any>null;
        return data;
    }
}

export class MetronConfigurationInSyncDTO {
    callTime?: boolean;
    callPeriod?: boolean;
    powerMode?: boolean;
    calloutTimeVariance?: boolean;
    wakeUpInterval?: boolean;
    externalAntenna?: boolean;
    batteryAlarmPoint?: boolean;

    init(_data?: any) {
        if (_data) {
            this.callTime = _data["callTime"] !== undefined ? _data["callTime"] : <any>null;
            this.callPeriod = _data["callPeriod"] !== undefined ? _data["callPeriod"] : <any>null;
            this.powerMode = _data["powerMode"] !== undefined ? _data["powerMode"] : <any>null;
            this.calloutTimeVariance = _data["calloutTimeVariance"] !== undefined ? _data["calloutTimeVariance"] : <any>null;
            this.wakeUpInterval = _data["wakeUpInterval"] !== undefined ? _data["wakeUpInterval"] : <any>null;
            this.externalAntenna = _data["externalAntenna"] !== undefined ? _data["externalAntenna"] : <any>null;
            this.batteryAlarmPoint = _data["batteryAlarmPoint"] !== undefined ? _data["batteryAlarmPoint"] : <any>null;
        }
    }

    static fromJS(data: any): MetronConfigurationInSyncDTO {
        data = typeof data === 'object' ? data : {};
        let result = new MetronConfigurationInSyncDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["callTime"] = this.callTime !== undefined ? this.callTime : <any>null;
        data["callPeriod"] = this.callPeriod !== undefined ? this.callPeriod : <any>null;
        data["powerMode"] = this.powerMode !== undefined ? this.powerMode : <any>null;
        data["calloutTimeVariance"] = this.calloutTimeVariance !== undefined ? this.calloutTimeVariance : <any>null;
        data["wakeUpInterval"] = this.wakeUpInterval !== undefined ? this.wakeUpInterval : <any>null;
        data["externalAntenna"] = this.externalAntenna !== undefined ? this.externalAntenna : <any>null;
        data["batteryAlarmPoint"] = this.batteryAlarmPoint !== undefined ? this.batteryAlarmPoint : <any>null;
        return data;
    }
}

export class MetronCommunicationConfigDTO {
    transport?: RTUTransportTypeEnum | null;
    direction?: RtuCallDirection | null;
    carrier?: TelecommunicationsCarrier | null;
    local?: MetronNetworkConfigDTO | null;
    remote?: MetronNetworkConfigDTO | null;
    inSync?: MetronNetworkConfigInSyncDTO | null;
    ipNetworkAddress?: string | null;
    outgoingSmsInterface?: TelecommunicationsCarrier | null;
    smsNetworkAddress?: string | null;

    init(_data?: any) {
        if (_data) {
            this.transport = _data["transport"] !== undefined ? _data["transport"] : <any>null;
            this.direction = _data["direction"] !== undefined ? _data["direction"] : <any>null;
            this.carrier = _data["carrier"] !== undefined ? _data["carrier"] : <any>null;
            this.local = _data["local"] ? MetronNetworkConfigDTO.fromJS(_data["local"]) : <any>null;
            this.remote = _data["remote"] ? MetronNetworkConfigDTO.fromJS(_data["remote"]) : <any>null;
            this.inSync = _data["inSync"] ? MetronNetworkConfigInSyncDTO.fromJS(_data["inSync"]) : <any>null;
            this.ipNetworkAddress = _data["ipNetworkAddress"] !== undefined ? _data["ipNetworkAddress"] : <any>null;
            this.outgoingSmsInterface = _data["outgoingSmsInterface"] !== undefined ? _data["outgoingSmsInterface"] : <any>null;
            this.smsNetworkAddress = _data["smsNetworkAddress"] !== undefined ? _data["smsNetworkAddress"] : <any>null;
        }
    }

    static fromJS(data: any): MetronCommunicationConfigDTO {
        data = typeof data === 'object' ? data : {};
        let result = new MetronCommunicationConfigDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transport"] = this.transport !== undefined ? this.transport : <any>null;
        data["direction"] = this.direction !== undefined ? this.direction : <any>null;
        data["carrier"] = this.carrier !== undefined ? this.carrier : <any>null;
        data["local"] = this.local ? this.local.toJSON() : <any>null;
        data["remote"] = this.remote ? this.remote.toJSON() : <any>null;
        data["inSync"] = this.inSync ? this.inSync.toJSON() : <any>null;
        data["ipNetworkAddress"] = this.ipNetworkAddress !== undefined ? this.ipNetworkAddress : <any>null;
        data["outgoingSmsInterface"] = this.outgoingSmsInterface !== undefined ? this.outgoingSmsInterface : <any>null;
        data["smsNetworkAddress"] = this.smsNetworkAddress !== undefined ? this.smsNetworkAddress : <any>null;
        return data;
    }
}

export enum RtuCallDirection {
    Inbound = 1,
    Outbound = 2,
    Both = 3,
}

export class MetronNetworkConfigDTO {
    apn?: string | null;
    apnUser?: string | null;
    apnPassword?: string | null;
    hostAddress?: string | null;
    hostPort?: number;
    listenPort?: number;

    init(_data?: any) {
        if (_data) {
            this.apn = _data["apn"] !== undefined ? _data["apn"] : <any>null;
            this.apnUser = _data["apnUser"] !== undefined ? _data["apnUser"] : <any>null;
            this.apnPassword = _data["apnPassword"] !== undefined ? _data["apnPassword"] : <any>null;
            this.hostAddress = _data["hostAddress"] !== undefined ? _data["hostAddress"] : <any>null;
            this.hostPort = _data["hostPort"] !== undefined ? _data["hostPort"] : <any>null;
            this.listenPort = _data["listenPort"] !== undefined ? _data["listenPort"] : <any>null;
        }
    }

    static fromJS(data: any): MetronNetworkConfigDTO {
        data = typeof data === 'object' ? data : {};
        let result = new MetronNetworkConfigDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["apn"] = this.apn !== undefined ? this.apn : <any>null;
        data["apnUser"] = this.apnUser !== undefined ? this.apnUser : <any>null;
        data["apnPassword"] = this.apnPassword !== undefined ? this.apnPassword : <any>null;
        data["hostAddress"] = this.hostAddress !== undefined ? this.hostAddress : <any>null;
        data["hostPort"] = this.hostPort !== undefined ? this.hostPort : <any>null;
        data["listenPort"] = this.listenPort !== undefined ? this.listenPort : <any>null;
        return data;
    }
}

export class MetronNetworkConfigInSyncDTO {
    apn?: boolean;
    apnUser?: boolean;
    apnPassword?: boolean;
    hostAddress?: boolean;
    hostPort?: boolean;
    listenPort?: boolean;

    init(_data?: any) {
        if (_data) {
            this.apn = _data["apn"] !== undefined ? _data["apn"] : <any>null;
            this.apnUser = _data["apnUser"] !== undefined ? _data["apnUser"] : <any>null;
            this.apnPassword = _data["apnPassword"] !== undefined ? _data["apnPassword"] : <any>null;
            this.hostAddress = _data["hostAddress"] !== undefined ? _data["hostAddress"] : <any>null;
            this.hostPort = _data["hostPort"] !== undefined ? _data["hostPort"] : <any>null;
            this.listenPort = _data["listenPort"] !== undefined ? _data["listenPort"] : <any>null;
        }
    }

    static fromJS(data: any): MetronNetworkConfigInSyncDTO {
        data = typeof data === 'object' ? data : {};
        let result = new MetronNetworkConfigInSyncDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["apn"] = this.apn !== undefined ? this.apn : <any>null;
        data["apnUser"] = this.apnUser !== undefined ? this.apnUser : <any>null;
        data["apnPassword"] = this.apnPassword !== undefined ? this.apnPassword : <any>null;
        data["hostAddress"] = this.hostAddress !== undefined ? this.hostAddress : <any>null;
        data["hostPort"] = this.hostPort !== undefined ? this.hostPort : <any>null;
        data["listenPort"] = this.listenPort !== undefined ? this.listenPort : <any>null;
        return data;
    }
}

export class MetronCommunicationConfigInputDto {
    transport?: RTUTransportTypeEnum | null;
    direction?: RtuCallDirection | null;
    carrier?: TelecommunicationsCarrier | null;
    apn?: string | null;
    apnUser?: string | null;
    apnPassword?: string | null;
    hostAddress?: string | null;
    hostPort?: number;
    listenPort?: number;
    ipNetworkAddress?: string | null;
    outgoingSmsInterface?: TelecommunicationsCarrier | null;
    smsNetworkAddress?: string | null;

    init(_data?: any) {
        if (_data) {
            this.transport = _data["transport"] !== undefined ? _data["transport"] : <any>null;
            this.direction = _data["direction"] !== undefined ? _data["direction"] : <any>null;
            this.carrier = _data["carrier"] !== undefined ? _data["carrier"] : <any>null;
            this.apn = _data["apn"] !== undefined ? _data["apn"] : <any>null;
            this.apnUser = _data["apnUser"] !== undefined ? _data["apnUser"] : <any>null;
            this.apnPassword = _data["apnPassword"] !== undefined ? _data["apnPassword"] : <any>null;
            this.hostAddress = _data["hostAddress"] !== undefined ? _data["hostAddress"] : <any>null;
            this.hostPort = _data["hostPort"] !== undefined ? _data["hostPort"] : <any>null;
            this.listenPort = _data["listenPort"] !== undefined ? _data["listenPort"] : <any>null;
            this.ipNetworkAddress = _data["ipNetworkAddress"] !== undefined ? _data["ipNetworkAddress"] : <any>null;
            this.outgoingSmsInterface = _data["outgoingSmsInterface"] !== undefined ? _data["outgoingSmsInterface"] : <any>null;
            this.smsNetworkAddress = _data["smsNetworkAddress"] !== undefined ? _data["smsNetworkAddress"] : <any>null;
        }
    }

    static fromJS(data: any): MetronCommunicationConfigInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new MetronCommunicationConfigInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transport"] = this.transport !== undefined ? this.transport : <any>null;
        data["direction"] = this.direction !== undefined ? this.direction : <any>null;
        data["carrier"] = this.carrier !== undefined ? this.carrier : <any>null;
        data["apn"] = this.apn !== undefined ? this.apn : <any>null;
        data["apnUser"] = this.apnUser !== undefined ? this.apnUser : <any>null;
        data["apnPassword"] = this.apnPassword !== undefined ? this.apnPassword : <any>null;
        data["hostAddress"] = this.hostAddress !== undefined ? this.hostAddress : <any>null;
        data["hostPort"] = this.hostPort !== undefined ? this.hostPort : <any>null;
        data["listenPort"] = this.listenPort !== undefined ? this.listenPort : <any>null;
        data["ipNetworkAddress"] = this.ipNetworkAddress !== undefined ? this.ipNetworkAddress : <any>null;
        data["outgoingSmsInterface"] = this.outgoingSmsInterface !== undefined ? this.outgoingSmsInterface : <any>null;
        data["smsNetworkAddress"] = this.smsNetworkAddress !== undefined ? this.smsNetworkAddress : <any>null;
        return data;
    }
}

export class MetronRtuChannelInfoDTO {
    description?: string | null;
    decimalPlaces?: number | null;
    local?: MetronAiChannelConfigDTO | null;
    remote?: MetronAiChannelConfigDTO | null;
    inSync?: MetronAiChannelConfigInSyncDTO | null;

    init(_data?: any) {
        if (_data) {
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.decimalPlaces = _data["decimalPlaces"] !== undefined ? _data["decimalPlaces"] : <any>null;
            this.local = _data["local"] ? MetronAiChannelConfigDTO.fromJS(_data["local"]) : <any>null;
            this.remote = _data["remote"] ? MetronAiChannelConfigDTO.fromJS(_data["remote"]) : <any>null;
            this.inSync = _data["inSync"] ? MetronAiChannelConfigInSyncDTO.fromJS(_data["inSync"]) : <any>null;
        }
    }

    static fromJS(data: any): MetronRtuChannelInfoDTO {
        data = typeof data === 'object' ? data : {};
        let result = new MetronRtuChannelInfoDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["decimalPlaces"] = this.decimalPlaces !== undefined ? this.decimalPlaces : <any>null;
        data["local"] = this.local ? this.local.toJSON() : <any>null;
        data["remote"] = this.remote ? this.remote.toJSON() : <any>null;
        data["inSync"] = this.inSync ? this.inSync.toJSON() : <any>null;
        return data;
    }
}

export class MetronAiChannelConfigDTO {
    frontPanelText?: string | null;
    scaledMin?: number | null;
    scaledMax?: number | null;
    scaledUnits?: string | null;
    inputSignalType?: Metron2RTUChannelInputSignalType;
    sensorLoopVoltage?: number | null;
    settleTime?: number;
    enable?: boolean;
    reversePollDelay?: number | null;
    alarmHystersis?: number;
    fallingPoint1?: number | null;
    fallingPoint2?: number | null;
    fallingPoint3?: number | null;
    fallingPoint4?: number | null;
    fallingPoint5?: number | null;
    fallingPoint6?: number | null;
    fallingPoint7?: number | null;
    fallingPoint8?: number | null;
    fallingPoint9?: number | null;
    fallingPoint10?: number | null;
    raisingPoint1?: number | null;
    raisingPoint2?: number | null;
    raisingPoint3?: number | null;
    raisingPoint4?: number | null;
    raisingPoint5?: number | null;
    raisingPoint6?: number | null;
    raisingPoint7?: number | null;
    raisingPoint8?: number | null;
    raisingPoint9?: number | null;
    raisingPoint10?: number | null;

    init(_data?: any) {
        if (_data) {
            this.frontPanelText = _data["frontPanelText"] !== undefined ? _data["frontPanelText"] : <any>null;
            this.scaledMin = _data["scaledMin"] !== undefined ? _data["scaledMin"] : <any>null;
            this.scaledMax = _data["scaledMax"] !== undefined ? _data["scaledMax"] : <any>null;
            this.scaledUnits = _data["scaledUnits"] !== undefined ? _data["scaledUnits"] : <any>null;
            this.inputSignalType = _data["inputSignalType"] !== undefined ? _data["inputSignalType"] : <any>null;
            this.sensorLoopVoltage = _data["sensorLoopVoltage"] !== undefined ? _data["sensorLoopVoltage"] : <any>null;
            this.settleTime = _data["settleTime"] !== undefined ? _data["settleTime"] : <any>null;
            this.enable = _data["enable"] !== undefined ? _data["enable"] : <any>null;
            this.reversePollDelay = _data["reversePollDelay"] !== undefined ? _data["reversePollDelay"] : <any>null;
            this.alarmHystersis = _data["alarmHystersis"] !== undefined ? _data["alarmHystersis"] : <any>null;
            this.fallingPoint1 = _data["fallingPoint1"] !== undefined ? _data["fallingPoint1"] : <any>null;
            this.fallingPoint2 = _data["fallingPoint2"] !== undefined ? _data["fallingPoint2"] : <any>null;
            this.fallingPoint3 = _data["fallingPoint3"] !== undefined ? _data["fallingPoint3"] : <any>null;
            this.fallingPoint4 = _data["fallingPoint4"] !== undefined ? _data["fallingPoint4"] : <any>null;
            this.fallingPoint5 = _data["fallingPoint5"] !== undefined ? _data["fallingPoint5"] : <any>null;
            this.fallingPoint6 = _data["fallingPoint6"] !== undefined ? _data["fallingPoint6"] : <any>null;
            this.fallingPoint7 = _data["fallingPoint7"] !== undefined ? _data["fallingPoint7"] : <any>null;
            this.fallingPoint8 = _data["fallingPoint8"] !== undefined ? _data["fallingPoint8"] : <any>null;
            this.fallingPoint9 = _data["fallingPoint9"] !== undefined ? _data["fallingPoint9"] : <any>null;
            this.fallingPoint10 = _data["fallingPoint10"] !== undefined ? _data["fallingPoint10"] : <any>null;
            this.raisingPoint1 = _data["raisingPoint1"] !== undefined ? _data["raisingPoint1"] : <any>null;
            this.raisingPoint2 = _data["raisingPoint2"] !== undefined ? _data["raisingPoint2"] : <any>null;
            this.raisingPoint3 = _data["raisingPoint3"] !== undefined ? _data["raisingPoint3"] : <any>null;
            this.raisingPoint4 = _data["raisingPoint4"] !== undefined ? _data["raisingPoint4"] : <any>null;
            this.raisingPoint5 = _data["raisingPoint5"] !== undefined ? _data["raisingPoint5"] : <any>null;
            this.raisingPoint6 = _data["raisingPoint6"] !== undefined ? _data["raisingPoint6"] : <any>null;
            this.raisingPoint7 = _data["raisingPoint7"] !== undefined ? _data["raisingPoint7"] : <any>null;
            this.raisingPoint8 = _data["raisingPoint8"] !== undefined ? _data["raisingPoint8"] : <any>null;
            this.raisingPoint9 = _data["raisingPoint9"] !== undefined ? _data["raisingPoint9"] : <any>null;
            this.raisingPoint10 = _data["raisingPoint10"] !== undefined ? _data["raisingPoint10"] : <any>null;
        }
    }

    static fromJS(data: any): MetronAiChannelConfigDTO {
        data = typeof data === 'object' ? data : {};
        let result = new MetronAiChannelConfigDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["frontPanelText"] = this.frontPanelText !== undefined ? this.frontPanelText : <any>null;
        data["scaledMin"] = this.scaledMin !== undefined ? this.scaledMin : <any>null;
        data["scaledMax"] = this.scaledMax !== undefined ? this.scaledMax : <any>null;
        data["scaledUnits"] = this.scaledUnits !== undefined ? this.scaledUnits : <any>null;
        data["inputSignalType"] = this.inputSignalType !== undefined ? this.inputSignalType : <any>null;
        data["sensorLoopVoltage"] = this.sensorLoopVoltage !== undefined ? this.sensorLoopVoltage : <any>null;
        data["settleTime"] = this.settleTime !== undefined ? this.settleTime : <any>null;
        data["enable"] = this.enable !== undefined ? this.enable : <any>null;
        data["reversePollDelay"] = this.reversePollDelay !== undefined ? this.reversePollDelay : <any>null;
        data["alarmHystersis"] = this.alarmHystersis !== undefined ? this.alarmHystersis : <any>null;
        data["fallingPoint1"] = this.fallingPoint1 !== undefined ? this.fallingPoint1 : <any>null;
        data["fallingPoint2"] = this.fallingPoint2 !== undefined ? this.fallingPoint2 : <any>null;
        data["fallingPoint3"] = this.fallingPoint3 !== undefined ? this.fallingPoint3 : <any>null;
        data["fallingPoint4"] = this.fallingPoint4 !== undefined ? this.fallingPoint4 : <any>null;
        data["fallingPoint5"] = this.fallingPoint5 !== undefined ? this.fallingPoint5 : <any>null;
        data["fallingPoint6"] = this.fallingPoint6 !== undefined ? this.fallingPoint6 : <any>null;
        data["fallingPoint7"] = this.fallingPoint7 !== undefined ? this.fallingPoint7 : <any>null;
        data["fallingPoint8"] = this.fallingPoint8 !== undefined ? this.fallingPoint8 : <any>null;
        data["fallingPoint9"] = this.fallingPoint9 !== undefined ? this.fallingPoint9 : <any>null;
        data["fallingPoint10"] = this.fallingPoint10 !== undefined ? this.fallingPoint10 : <any>null;
        data["raisingPoint1"] = this.raisingPoint1 !== undefined ? this.raisingPoint1 : <any>null;
        data["raisingPoint2"] = this.raisingPoint2 !== undefined ? this.raisingPoint2 : <any>null;
        data["raisingPoint3"] = this.raisingPoint3 !== undefined ? this.raisingPoint3 : <any>null;
        data["raisingPoint4"] = this.raisingPoint4 !== undefined ? this.raisingPoint4 : <any>null;
        data["raisingPoint5"] = this.raisingPoint5 !== undefined ? this.raisingPoint5 : <any>null;
        data["raisingPoint6"] = this.raisingPoint6 !== undefined ? this.raisingPoint6 : <any>null;
        data["raisingPoint7"] = this.raisingPoint7 !== undefined ? this.raisingPoint7 : <any>null;
        data["raisingPoint8"] = this.raisingPoint8 !== undefined ? this.raisingPoint8 : <any>null;
        data["raisingPoint9"] = this.raisingPoint9 !== undefined ? this.raisingPoint9 : <any>null;
        data["raisingPoint10"] = this.raisingPoint10 !== undefined ? this.raisingPoint10 : <any>null;
        return data;
    }
}

export enum Metron2RTUChannelInputSignalType {
    Volts0To10 = 0,
    MAmps4To20 = 1,
}

export class MetronAiChannelConfigInSyncDTO {
    frontPanelText?: boolean;
    scaledMin?: boolean;
    scaledMax?: boolean;
    scaledUnits?: boolean;
    inputSignalType?: boolean;
    metron2SensorLoopVoltage?: boolean;
    settleTime?: boolean;
    enable?: boolean;
    reversePollDelay?: boolean;
    alarmHystersis?: boolean;
    fallingPoint1?: boolean;
    fallingPoint2?: boolean;
    fallingPoint3?: boolean;
    fallingPoint4?: boolean;
    fallingPoint5?: boolean;
    fallingPoint6?: boolean;
    fallingPoint7?: boolean;
    fallingPoint8?: boolean;
    fallingPoint9?: boolean;
    fallingPoint10?: boolean;
    raisingPoint1?: boolean;
    raisingPoint2?: boolean;
    raisingPoint3?: boolean;
    raisingPoint4?: boolean;
    raisingPoint5?: boolean;
    raisingPoint6?: boolean;
    raisingPoint7?: boolean;
    raisingPoint8?: boolean;
    raisingPoint9?: boolean;
    raisingPoint10?: boolean;

    init(_data?: any) {
        if (_data) {
            this.frontPanelText = _data["frontPanelText"] !== undefined ? _data["frontPanelText"] : <any>null;
            this.scaledMin = _data["scaledMin"] !== undefined ? _data["scaledMin"] : <any>null;
            this.scaledMax = _data["scaledMax"] !== undefined ? _data["scaledMax"] : <any>null;
            this.scaledUnits = _data["scaledUnits"] !== undefined ? _data["scaledUnits"] : <any>null;
            this.inputSignalType = _data["inputSignalType"] !== undefined ? _data["inputSignalType"] : <any>null;
            this.metron2SensorLoopVoltage = _data["metron2SensorLoopVoltage"] !== undefined ? _data["metron2SensorLoopVoltage"] : <any>null;
            this.settleTime = _data["settleTime"] !== undefined ? _data["settleTime"] : <any>null;
            this.enable = _data["enable"] !== undefined ? _data["enable"] : <any>null;
            this.reversePollDelay = _data["reversePollDelay"] !== undefined ? _data["reversePollDelay"] : <any>null;
            this.alarmHystersis = _data["alarmHystersis"] !== undefined ? _data["alarmHystersis"] : <any>null;
            this.fallingPoint1 = _data["fallingPoint1"] !== undefined ? _data["fallingPoint1"] : <any>null;
            this.fallingPoint2 = _data["fallingPoint2"] !== undefined ? _data["fallingPoint2"] : <any>null;
            this.fallingPoint3 = _data["fallingPoint3"] !== undefined ? _data["fallingPoint3"] : <any>null;
            this.fallingPoint4 = _data["fallingPoint4"] !== undefined ? _data["fallingPoint4"] : <any>null;
            this.fallingPoint5 = _data["fallingPoint5"] !== undefined ? _data["fallingPoint5"] : <any>null;
            this.fallingPoint6 = _data["fallingPoint6"] !== undefined ? _data["fallingPoint6"] : <any>null;
            this.fallingPoint7 = _data["fallingPoint7"] !== undefined ? _data["fallingPoint7"] : <any>null;
            this.fallingPoint8 = _data["fallingPoint8"] !== undefined ? _data["fallingPoint8"] : <any>null;
            this.fallingPoint9 = _data["fallingPoint9"] !== undefined ? _data["fallingPoint9"] : <any>null;
            this.fallingPoint10 = _data["fallingPoint10"] !== undefined ? _data["fallingPoint10"] : <any>null;
            this.raisingPoint1 = _data["raisingPoint1"] !== undefined ? _data["raisingPoint1"] : <any>null;
            this.raisingPoint2 = _data["raisingPoint2"] !== undefined ? _data["raisingPoint2"] : <any>null;
            this.raisingPoint3 = _data["raisingPoint3"] !== undefined ? _data["raisingPoint3"] : <any>null;
            this.raisingPoint4 = _data["raisingPoint4"] !== undefined ? _data["raisingPoint4"] : <any>null;
            this.raisingPoint5 = _data["raisingPoint5"] !== undefined ? _data["raisingPoint5"] : <any>null;
            this.raisingPoint6 = _data["raisingPoint6"] !== undefined ? _data["raisingPoint6"] : <any>null;
            this.raisingPoint7 = _data["raisingPoint7"] !== undefined ? _data["raisingPoint7"] : <any>null;
            this.raisingPoint8 = _data["raisingPoint8"] !== undefined ? _data["raisingPoint8"] : <any>null;
            this.raisingPoint9 = _data["raisingPoint9"] !== undefined ? _data["raisingPoint9"] : <any>null;
            this.raisingPoint10 = _data["raisingPoint10"] !== undefined ? _data["raisingPoint10"] : <any>null;
        }
    }

    static fromJS(data: any): MetronAiChannelConfigInSyncDTO {
        data = typeof data === 'object' ? data : {};
        let result = new MetronAiChannelConfigInSyncDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["frontPanelText"] = this.frontPanelText !== undefined ? this.frontPanelText : <any>null;
        data["scaledMin"] = this.scaledMin !== undefined ? this.scaledMin : <any>null;
        data["scaledMax"] = this.scaledMax !== undefined ? this.scaledMax : <any>null;
        data["scaledUnits"] = this.scaledUnits !== undefined ? this.scaledUnits : <any>null;
        data["inputSignalType"] = this.inputSignalType !== undefined ? this.inputSignalType : <any>null;
        data["metron2SensorLoopVoltage"] = this.metron2SensorLoopVoltage !== undefined ? this.metron2SensorLoopVoltage : <any>null;
        data["settleTime"] = this.settleTime !== undefined ? this.settleTime : <any>null;
        data["enable"] = this.enable !== undefined ? this.enable : <any>null;
        data["reversePollDelay"] = this.reversePollDelay !== undefined ? this.reversePollDelay : <any>null;
        data["alarmHystersis"] = this.alarmHystersis !== undefined ? this.alarmHystersis : <any>null;
        data["fallingPoint1"] = this.fallingPoint1 !== undefined ? this.fallingPoint1 : <any>null;
        data["fallingPoint2"] = this.fallingPoint2 !== undefined ? this.fallingPoint2 : <any>null;
        data["fallingPoint3"] = this.fallingPoint3 !== undefined ? this.fallingPoint3 : <any>null;
        data["fallingPoint4"] = this.fallingPoint4 !== undefined ? this.fallingPoint4 : <any>null;
        data["fallingPoint5"] = this.fallingPoint5 !== undefined ? this.fallingPoint5 : <any>null;
        data["fallingPoint6"] = this.fallingPoint6 !== undefined ? this.fallingPoint6 : <any>null;
        data["fallingPoint7"] = this.fallingPoint7 !== undefined ? this.fallingPoint7 : <any>null;
        data["fallingPoint8"] = this.fallingPoint8 !== undefined ? this.fallingPoint8 : <any>null;
        data["fallingPoint9"] = this.fallingPoint9 !== undefined ? this.fallingPoint9 : <any>null;
        data["fallingPoint10"] = this.fallingPoint10 !== undefined ? this.fallingPoint10 : <any>null;
        data["raisingPoint1"] = this.raisingPoint1 !== undefined ? this.raisingPoint1 : <any>null;
        data["raisingPoint2"] = this.raisingPoint2 !== undefined ? this.raisingPoint2 : <any>null;
        data["raisingPoint3"] = this.raisingPoint3 !== undefined ? this.raisingPoint3 : <any>null;
        data["raisingPoint4"] = this.raisingPoint4 !== undefined ? this.raisingPoint4 : <any>null;
        data["raisingPoint5"] = this.raisingPoint5 !== undefined ? this.raisingPoint5 : <any>null;
        data["raisingPoint6"] = this.raisingPoint6 !== undefined ? this.raisingPoint6 : <any>null;
        data["raisingPoint7"] = this.raisingPoint7 !== undefined ? this.raisingPoint7 : <any>null;
        data["raisingPoint8"] = this.raisingPoint8 !== undefined ? this.raisingPoint8 : <any>null;
        data["raisingPoint9"] = this.raisingPoint9 !== undefined ? this.raisingPoint9 : <any>null;
        data["raisingPoint10"] = this.raisingPoint10 !== undefined ? this.raisingPoint10 : <any>null;
        return data;
    }
}

export class MetronAiChannelSummaryItemDto {
    channelNumber?: string | null;
    description?: string | null;
    isInSync?: boolean;

    init(_data?: any) {
        if (_data) {
            this.channelNumber = _data["channelNumber"] !== undefined ? _data["channelNumber"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.isInSync = _data["isInSync"] !== undefined ? _data["isInSync"] : <any>null;
        }
    }

    static fromJS(data: any): MetronAiChannelSummaryItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new MetronAiChannelSummaryItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["channelNumber"] = this.channelNumber !== undefined ? this.channelNumber : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["isInSync"] = this.isInSync !== undefined ? this.isInSync : <any>null;
        return data;
    }
}

export class MetronGeneralInformationDTO {
    deviceId?: string | null;
    rtuId?: string;
    description?: string | null;
    rtuType?: RtuDeviceType;
    siteId?: string;
    siteNumber?: string | null;
    customerName?: string | null;
    customerAddress1?: string | null;
    customerAddress2?: string | null;
    customerAddress3?: string | null;
    city?: string | null;
    state?: string | null;
    postalCode?: string | null;
    rtuPollScheduleGroupId?: string | null;
    rtuPollScheduleGroupAsText?: string | null;
    pollFilter?: boolean | null;
    pollFilterId?: RtuDevicePollFilter;
    syncStatus?: boolean | null;

    init(_data?: any) {
        if (_data) {
            this.deviceId = _data["deviceId"] !== undefined ? _data["deviceId"] : <any>null;
            this.rtuId = _data["rtuId"] !== undefined ? _data["rtuId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.rtuType = _data["rtuType"] !== undefined ? _data["rtuType"] : <any>null;
            this.siteId = _data["siteId"] !== undefined ? _data["siteId"] : <any>null;
            this.siteNumber = _data["siteNumber"] !== undefined ? _data["siteNumber"] : <any>null;
            this.customerName = _data["customerName"] !== undefined ? _data["customerName"] : <any>null;
            this.customerAddress1 = _data["customerAddress1"] !== undefined ? _data["customerAddress1"] : <any>null;
            this.customerAddress2 = _data["customerAddress2"] !== undefined ? _data["customerAddress2"] : <any>null;
            this.customerAddress3 = _data["customerAddress3"] !== undefined ? _data["customerAddress3"] : <any>null;
            this.city = _data["city"] !== undefined ? _data["city"] : <any>null;
            this.state = _data["state"] !== undefined ? _data["state"] : <any>null;
            this.postalCode = _data["postalCode"] !== undefined ? _data["postalCode"] : <any>null;
            this.rtuPollScheduleGroupId = _data["rtuPollScheduleGroupId"] !== undefined ? _data["rtuPollScheduleGroupId"] : <any>null;
            this.rtuPollScheduleGroupAsText = _data["rtuPollScheduleGroupAsText"] !== undefined ? _data["rtuPollScheduleGroupAsText"] : <any>null;
            this.pollFilter = _data["pollFilter"] !== undefined ? _data["pollFilter"] : <any>null;
            this.pollFilterId = _data["pollFilterId"] !== undefined ? _data["pollFilterId"] : <any>null;
            this.syncStatus = _data["syncStatus"] !== undefined ? _data["syncStatus"] : <any>null;
        }
    }

    static fromJS(data: any): MetronGeneralInformationDTO {
        data = typeof data === 'object' ? data : {};
        let result = new MetronGeneralInformationDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deviceId"] = this.deviceId !== undefined ? this.deviceId : <any>null;
        data["rtuId"] = this.rtuId !== undefined ? this.rtuId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["rtuType"] = this.rtuType !== undefined ? this.rtuType : <any>null;
        data["siteId"] = this.siteId !== undefined ? this.siteId : <any>null;
        data["siteNumber"] = this.siteNumber !== undefined ? this.siteNumber : <any>null;
        data["customerName"] = this.customerName !== undefined ? this.customerName : <any>null;
        data["customerAddress1"] = this.customerAddress1 !== undefined ? this.customerAddress1 : <any>null;
        data["customerAddress2"] = this.customerAddress2 !== undefined ? this.customerAddress2 : <any>null;
        data["customerAddress3"] = this.customerAddress3 !== undefined ? this.customerAddress3 : <any>null;
        data["city"] = this.city !== undefined ? this.city : <any>null;
        data["state"] = this.state !== undefined ? this.state : <any>null;
        data["postalCode"] = this.postalCode !== undefined ? this.postalCode : <any>null;
        data["rtuPollScheduleGroupId"] = this.rtuPollScheduleGroupId !== undefined ? this.rtuPollScheduleGroupId : <any>null;
        data["rtuPollScheduleGroupAsText"] = this.rtuPollScheduleGroupAsText !== undefined ? this.rtuPollScheduleGroupAsText : <any>null;
        data["pollFilter"] = this.pollFilter !== undefined ? this.pollFilter : <any>null;
        data["pollFilterId"] = this.pollFilterId !== undefined ? this.pollFilterId : <any>null;
        data["syncStatus"] = this.syncStatus !== undefined ? this.syncStatus : <any>null;
        return data;
    }
}

export enum RtuDevicePollFilter {
    InstantaneousAndHistoricalReadings = 1,
    InstantaneousReadingsOnly = 2,
}

export class MetronDiagnosticInformationDTO {
    localCarrier?: string | null;
    lastUpdatedDate?: Date | null;
    isMaintenanceInProgress?: boolean;
    rtuTemperature?: number | null;
    signalStrength?: number | null;
    isLastCalloutSuccessful?: boolean;
    aiChannelList?: MetronAiChannelDTO[] | null;

    init(_data?: any) {
        if (_data) {
            this.localCarrier = _data["localCarrier"] !== undefined ? _data["localCarrier"] : <any>null;
            this.lastUpdatedDate = _data["lastUpdatedDate"] ? new Date(_data["lastUpdatedDate"].toString()) : <any>null;
            this.isMaintenanceInProgress = _data["isMaintenanceInProgress"] !== undefined ? _data["isMaintenanceInProgress"] : <any>null;
            this.rtuTemperature = _data["rtuTemperature"] !== undefined ? _data["rtuTemperature"] : <any>null;
            this.signalStrength = _data["signalStrength"] !== undefined ? _data["signalStrength"] : <any>null;
            this.isLastCalloutSuccessful = _data["isLastCalloutSuccessful"] !== undefined ? _data["isLastCalloutSuccessful"] : <any>null;
            if (Array.isArray(_data["aiChannelList"])) {
                this.aiChannelList = [] as any;
                for (let item of _data["aiChannelList"])
                    this.aiChannelList!.push(MetronAiChannelDTO.fromJS(item));
            }
            else {
                this.aiChannelList = <any>null;
            }
        }
    }

    static fromJS(data: any): MetronDiagnosticInformationDTO {
        data = typeof data === 'object' ? data : {};
        let result = new MetronDiagnosticInformationDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["localCarrier"] = this.localCarrier !== undefined ? this.localCarrier : <any>null;
        data["lastUpdatedDate"] = this.lastUpdatedDate ? this.lastUpdatedDate.toISOString() : <any>null;
        data["isMaintenanceInProgress"] = this.isMaintenanceInProgress !== undefined ? this.isMaintenanceInProgress : <any>null;
        data["rtuTemperature"] = this.rtuTemperature !== undefined ? this.rtuTemperature : <any>null;
        data["signalStrength"] = this.signalStrength !== undefined ? this.signalStrength : <any>null;
        data["isLastCalloutSuccessful"] = this.isLastCalloutSuccessful !== undefined ? this.isLastCalloutSuccessful : <any>null;
        if (Array.isArray(this.aiChannelList)) {
            data["aiChannelList"] = [];
            for (let item of this.aiChannelList)
                data["aiChannelList"].push(item.toJSON());
        }
        return data;
    }
}

export class MetronAiChannelDTO {
    channelTypeId?: number | null;
    channelNumber?: string | null;
    lastReadingValue?: number | null;
    displayUnits?: string | null;
    lastReadingTimestamp?: Date | null;
    rtuChannelSyncStatus?: string | null;

    init(_data?: any) {
        if (_data) {
            this.channelTypeId = _data["channelTypeId"] !== undefined ? _data["channelTypeId"] : <any>null;
            this.channelNumber = _data["channelNumber"] !== undefined ? _data["channelNumber"] : <any>null;
            this.lastReadingValue = _data["lastReadingValue"] !== undefined ? _data["lastReadingValue"] : <any>null;
            this.displayUnits = _data["displayUnits"] !== undefined ? _data["displayUnits"] : <any>null;
            this.lastReadingTimestamp = _data["lastReadingTimestamp"] ? new Date(_data["lastReadingTimestamp"].toString()) : <any>null;
            this.rtuChannelSyncStatus = _data["rtuChannelSyncStatus"] !== undefined ? _data["rtuChannelSyncStatus"] : <any>null;
        }
    }

    static fromJS(data: any): MetronAiChannelDTO {
        data = typeof data === 'object' ? data : {};
        let result = new MetronAiChannelDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["channelTypeId"] = this.channelTypeId !== undefined ? this.channelTypeId : <any>null;
        data["channelNumber"] = this.channelNumber !== undefined ? this.channelNumber : <any>null;
        data["lastReadingValue"] = this.lastReadingValue !== undefined ? this.lastReadingValue : <any>null;
        data["displayUnits"] = this.displayUnits !== undefined ? this.displayUnits : <any>null;
        data["lastReadingTimestamp"] = this.lastReadingTimestamp ? this.lastReadingTimestamp.toISOString() : <any>null;
        data["rtuChannelSyncStatus"] = this.rtuChannelSyncStatus !== undefined ? this.rtuChannelSyncStatus : <any>null;
        return data;
    }
}

export class ValueTupleOfIntegerAndString {
    item1?: number;
    item2?: string;

    init(_data?: any) {
        if (_data) {
            this.item1 = _data["item1"] !== undefined ? _data["item1"] : <any>null;
            this.item2 = _data["item2"] !== undefined ? _data["item2"] : <any>null;
        }
    }

    static fromJS(data: any): ValueTupleOfIntegerAndString {
        data = typeof data === 'object' ? data : {};
        let result = new ValueTupleOfIntegerAndString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item1"] = this.item1 !== undefined ? this.item1 : <any>null;
        data["item2"] = this.item2 !== undefined ? this.item2 : <any>null;
        return data;
    }
}

export class MetronCreateRtuChannelInfoDto {
    deviceId?: string | null;
    channelNumber?: string | null;
    channelInfo?: MetronCreateRtuChannelConfigDto | null;

    init(_data?: any) {
        if (_data) {
            this.deviceId = _data["deviceId"] !== undefined ? _data["deviceId"] : <any>null;
            this.channelNumber = _data["channelNumber"] !== undefined ? _data["channelNumber"] : <any>null;
            this.channelInfo = _data["channelInfo"] ? MetronCreateRtuChannelConfigDto.fromJS(_data["channelInfo"]) : <any>null;
        }
    }

    static fromJS(data: any): MetronCreateRtuChannelInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new MetronCreateRtuChannelInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deviceId"] = this.deviceId !== undefined ? this.deviceId : <any>null;
        data["channelNumber"] = this.channelNumber !== undefined ? this.channelNumber : <any>null;
        data["channelInfo"] = this.channelInfo ? this.channelInfo.toJSON() : <any>null;
        return data;
    }
}

export class MetronCreateRtuChannelConfigDto {
    description?: string | null;
    decimalPlaces?: number | null;
    frontPanelText?: string | null;
    scaledMin?: number | null;
    scaledMax?: number | null;
    scaledUnits?: string | null;
    inputSignalType?: Metron2RTUChannelInputSignalType;
    sensorLoopVoltage?: number | null;
    settleTime?: number;
    enable?: boolean;
    reversePollDelay?: number | null;
    alarmHystersis?: number;
    fallingPoint1?: number | null;
    fallingPoint2?: number | null;
    fallingPoint3?: number | null;
    fallingPoint4?: number | null;
    fallingPoint5?: number | null;
    fallingPoint6?: number | null;
    fallingPoint7?: number | null;
    fallingPoint8?: number | null;
    fallingPoint9?: number | null;
    fallingPoint10?: number | null;
    raisingPoint1?: number | null;
    raisingPoint2?: number | null;
    raisingPoint3?: number | null;
    raisingPoint4?: number | null;
    raisingPoint5?: number | null;
    raisingPoint6?: number | null;
    raisingPoint7?: number | null;
    raisingPoint8?: number | null;
    raisingPoint9?: number | null;
    raisingPoint10?: number | null;

    init(_data?: any) {
        if (_data) {
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.decimalPlaces = _data["decimalPlaces"] !== undefined ? _data["decimalPlaces"] : <any>null;
            this.frontPanelText = _data["frontPanelText"] !== undefined ? _data["frontPanelText"] : <any>null;
            this.scaledMin = _data["scaledMin"] !== undefined ? _data["scaledMin"] : <any>null;
            this.scaledMax = _data["scaledMax"] !== undefined ? _data["scaledMax"] : <any>null;
            this.scaledUnits = _data["scaledUnits"] !== undefined ? _data["scaledUnits"] : <any>null;
            this.inputSignalType = _data["inputSignalType"] !== undefined ? _data["inputSignalType"] : <any>null;
            this.sensorLoopVoltage = _data["sensorLoopVoltage"] !== undefined ? _data["sensorLoopVoltage"] : <any>null;
            this.settleTime = _data["settleTime"] !== undefined ? _data["settleTime"] : <any>null;
            this.enable = _data["enable"] !== undefined ? _data["enable"] : <any>null;
            this.reversePollDelay = _data["reversePollDelay"] !== undefined ? _data["reversePollDelay"] : <any>null;
            this.alarmHystersis = _data["alarmHystersis"] !== undefined ? _data["alarmHystersis"] : <any>null;
            this.fallingPoint1 = _data["fallingPoint1"] !== undefined ? _data["fallingPoint1"] : <any>null;
            this.fallingPoint2 = _data["fallingPoint2"] !== undefined ? _data["fallingPoint2"] : <any>null;
            this.fallingPoint3 = _data["fallingPoint3"] !== undefined ? _data["fallingPoint3"] : <any>null;
            this.fallingPoint4 = _data["fallingPoint4"] !== undefined ? _data["fallingPoint4"] : <any>null;
            this.fallingPoint5 = _data["fallingPoint5"] !== undefined ? _data["fallingPoint5"] : <any>null;
            this.fallingPoint6 = _data["fallingPoint6"] !== undefined ? _data["fallingPoint6"] : <any>null;
            this.fallingPoint7 = _data["fallingPoint7"] !== undefined ? _data["fallingPoint7"] : <any>null;
            this.fallingPoint8 = _data["fallingPoint8"] !== undefined ? _data["fallingPoint8"] : <any>null;
            this.fallingPoint9 = _data["fallingPoint9"] !== undefined ? _data["fallingPoint9"] : <any>null;
            this.fallingPoint10 = _data["fallingPoint10"] !== undefined ? _data["fallingPoint10"] : <any>null;
            this.raisingPoint1 = _data["raisingPoint1"] !== undefined ? _data["raisingPoint1"] : <any>null;
            this.raisingPoint2 = _data["raisingPoint2"] !== undefined ? _data["raisingPoint2"] : <any>null;
            this.raisingPoint3 = _data["raisingPoint3"] !== undefined ? _data["raisingPoint3"] : <any>null;
            this.raisingPoint4 = _data["raisingPoint4"] !== undefined ? _data["raisingPoint4"] : <any>null;
            this.raisingPoint5 = _data["raisingPoint5"] !== undefined ? _data["raisingPoint5"] : <any>null;
            this.raisingPoint6 = _data["raisingPoint6"] !== undefined ? _data["raisingPoint6"] : <any>null;
            this.raisingPoint7 = _data["raisingPoint7"] !== undefined ? _data["raisingPoint7"] : <any>null;
            this.raisingPoint8 = _data["raisingPoint8"] !== undefined ? _data["raisingPoint8"] : <any>null;
            this.raisingPoint9 = _data["raisingPoint9"] !== undefined ? _data["raisingPoint9"] : <any>null;
            this.raisingPoint10 = _data["raisingPoint10"] !== undefined ? _data["raisingPoint10"] : <any>null;
        }
    }

    static fromJS(data: any): MetronCreateRtuChannelConfigDto {
        data = typeof data === 'object' ? data : {};
        let result = new MetronCreateRtuChannelConfigDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["decimalPlaces"] = this.decimalPlaces !== undefined ? this.decimalPlaces : <any>null;
        data["frontPanelText"] = this.frontPanelText !== undefined ? this.frontPanelText : <any>null;
        data["scaledMin"] = this.scaledMin !== undefined ? this.scaledMin : <any>null;
        data["scaledMax"] = this.scaledMax !== undefined ? this.scaledMax : <any>null;
        data["scaledUnits"] = this.scaledUnits !== undefined ? this.scaledUnits : <any>null;
        data["inputSignalType"] = this.inputSignalType !== undefined ? this.inputSignalType : <any>null;
        data["sensorLoopVoltage"] = this.sensorLoopVoltage !== undefined ? this.sensorLoopVoltage : <any>null;
        data["settleTime"] = this.settleTime !== undefined ? this.settleTime : <any>null;
        data["enable"] = this.enable !== undefined ? this.enable : <any>null;
        data["reversePollDelay"] = this.reversePollDelay !== undefined ? this.reversePollDelay : <any>null;
        data["alarmHystersis"] = this.alarmHystersis !== undefined ? this.alarmHystersis : <any>null;
        data["fallingPoint1"] = this.fallingPoint1 !== undefined ? this.fallingPoint1 : <any>null;
        data["fallingPoint2"] = this.fallingPoint2 !== undefined ? this.fallingPoint2 : <any>null;
        data["fallingPoint3"] = this.fallingPoint3 !== undefined ? this.fallingPoint3 : <any>null;
        data["fallingPoint4"] = this.fallingPoint4 !== undefined ? this.fallingPoint4 : <any>null;
        data["fallingPoint5"] = this.fallingPoint5 !== undefined ? this.fallingPoint5 : <any>null;
        data["fallingPoint6"] = this.fallingPoint6 !== undefined ? this.fallingPoint6 : <any>null;
        data["fallingPoint7"] = this.fallingPoint7 !== undefined ? this.fallingPoint7 : <any>null;
        data["fallingPoint8"] = this.fallingPoint8 !== undefined ? this.fallingPoint8 : <any>null;
        data["fallingPoint9"] = this.fallingPoint9 !== undefined ? this.fallingPoint9 : <any>null;
        data["fallingPoint10"] = this.fallingPoint10 !== undefined ? this.fallingPoint10 : <any>null;
        data["raisingPoint1"] = this.raisingPoint1 !== undefined ? this.raisingPoint1 : <any>null;
        data["raisingPoint2"] = this.raisingPoint2 !== undefined ? this.raisingPoint2 : <any>null;
        data["raisingPoint3"] = this.raisingPoint3 !== undefined ? this.raisingPoint3 : <any>null;
        data["raisingPoint4"] = this.raisingPoint4 !== undefined ? this.raisingPoint4 : <any>null;
        data["raisingPoint5"] = this.raisingPoint5 !== undefined ? this.raisingPoint5 : <any>null;
        data["raisingPoint6"] = this.raisingPoint6 !== undefined ? this.raisingPoint6 : <any>null;
        data["raisingPoint7"] = this.raisingPoint7 !== undefined ? this.raisingPoint7 : <any>null;
        data["raisingPoint8"] = this.raisingPoint8 !== undefined ? this.raisingPoint8 : <any>null;
        data["raisingPoint9"] = this.raisingPoint9 !== undefined ? this.raisingPoint9 : <any>null;
        data["raisingPoint10"] = this.raisingPoint10 !== undefined ? this.raisingPoint10 : <any>null;
        return data;
    }
}

export class MetronRtuCreateDto {
    deviceId?: string | null;
    description?: string | null;
    siteNumber?: string | null;
    carrierId?: number;
    ipNetworkAddress?: string | null;

    init(_data?: any) {
        if (_data) {
            this.deviceId = _data["deviceId"] !== undefined ? _data["deviceId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.siteNumber = _data["siteNumber"] !== undefined ? _data["siteNumber"] : <any>null;
            this.carrierId = _data["carrierId"] !== undefined ? _data["carrierId"] : <any>null;
            this.ipNetworkAddress = _data["ipNetworkAddress"] !== undefined ? _data["ipNetworkAddress"] : <any>null;
        }
    }

    static fromJS(data: any): MetronRtuCreateDto {
        data = typeof data === 'object' ? data : {};
        let result = new MetronRtuCreateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deviceId"] = this.deviceId !== undefined ? this.deviceId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["siteNumber"] = this.siteNumber !== undefined ? this.siteNumber : <any>null;
        data["carrierId"] = this.carrierId !== undefined ? this.carrierId : <any>null;
        data["ipNetworkAddress"] = this.ipNetworkAddress !== undefined ? this.ipNetworkAddress : <any>null;
        return data;
    }
}

export class RtuChannelSetpointsSyncDetailReportDto {
    totalCount?: number;
    setpointDiffCount?: number;
    scalingParamsDiffCount?: number;
    errorCount?: number;
    scalingParamsDiffList?: RtuChannelSetpointsAndScalingSyncReportItemModel[] | null;
    setpointDiffList?: RtuChannelSetpointsAndScalingSyncReportItemModel[] | null;
    errorList?: RtuChannelSetpointsAndScalingSyncReportItemModel[] | null;

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"] !== undefined ? _data["totalCount"] : <any>null;
            this.setpointDiffCount = _data["setpointDiffCount"] !== undefined ? _data["setpointDiffCount"] : <any>null;
            this.scalingParamsDiffCount = _data["scalingParamsDiffCount"] !== undefined ? _data["scalingParamsDiffCount"] : <any>null;
            this.errorCount = _data["errorCount"] !== undefined ? _data["errorCount"] : <any>null;
            if (Array.isArray(_data["scalingParamsDiffList"])) {
                this.scalingParamsDiffList = [] as any;
                for (let item of _data["scalingParamsDiffList"])
                    this.scalingParamsDiffList!.push(RtuChannelSetpointsAndScalingSyncReportItemModel.fromJS(item));
            }
            else {
                this.scalingParamsDiffList = <any>null;
            }
            if (Array.isArray(_data["setpointDiffList"])) {
                this.setpointDiffList = [] as any;
                for (let item of _data["setpointDiffList"])
                    this.setpointDiffList!.push(RtuChannelSetpointsAndScalingSyncReportItemModel.fromJS(item));
            }
            else {
                this.setpointDiffList = <any>null;
            }
            if (Array.isArray(_data["errorList"])) {
                this.errorList = [] as any;
                for (let item of _data["errorList"])
                    this.errorList!.push(RtuChannelSetpointsAndScalingSyncReportItemModel.fromJS(item));
            }
            else {
                this.errorList = <any>null;
            }
        }
    }

    static fromJS(data: any): RtuChannelSetpointsSyncDetailReportDto {
        data = typeof data === 'object' ? data : {};
        let result = new RtuChannelSetpointsSyncDetailReportDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : <any>null;
        data["setpointDiffCount"] = this.setpointDiffCount !== undefined ? this.setpointDiffCount : <any>null;
        data["scalingParamsDiffCount"] = this.scalingParamsDiffCount !== undefined ? this.scalingParamsDiffCount : <any>null;
        data["errorCount"] = this.errorCount !== undefined ? this.errorCount : <any>null;
        if (Array.isArray(this.scalingParamsDiffList)) {
            data["scalingParamsDiffList"] = [];
            for (let item of this.scalingParamsDiffList)
                data["scalingParamsDiffList"].push(item.toJSON());
        }
        if (Array.isArray(this.setpointDiffList)) {
            data["setpointDiffList"] = [];
            for (let item of this.setpointDiffList)
                data["setpointDiffList"].push(item.toJSON());
        }
        if (Array.isArray(this.errorList)) {
            data["errorList"] = [];
            for (let item of this.errorList)
                data["errorList"].push(item.toJSON());
        }
        return data;
    }
}

export class RtuChannelSetpointsAndScalingSyncReportItemModel {
    dataChannelId?: string;
    deviceId?: string | null;
    channelNumber?: string | null;
    domain?: string | null;

    init(_data?: any) {
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.deviceId = _data["deviceId"] !== undefined ? _data["deviceId"] : <any>null;
            this.channelNumber = _data["channelNumber"] !== undefined ? _data["channelNumber"] : <any>null;
            this.domain = _data["domain"] !== undefined ? _data["domain"] : <any>null;
        }
    }

    static fromJS(data: any): RtuChannelSetpointsAndScalingSyncReportItemModel {
        data = typeof data === 'object' ? data : {};
        let result = new RtuChannelSetpointsAndScalingSyncReportItemModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["deviceId"] = this.deviceId !== undefined ? this.deviceId : <any>null;
        data["channelNumber"] = this.channelNumber !== undefined ? this.channelNumber : <any>null;
        data["domain"] = this.domain !== undefined ? this.domain : <any>null;
        return data;
    }
}

export class Rtu400GeneralInfoDto {
    deviceId?: string | null;
    description?: string | null;
    hardware?: string | null;
    siteNumber?: string | null;
    autoSyncConfiguration?: boolean | null;
    syncTime?: boolean;
    customerName?: string | null;
    customerAddress1?: string | null;
    customerAddress2?: string | null;
    customerAddress3?: string | null;
    customerCity?: string | null;
    customerState?: string | null;
    customerCountry?: string | null;

    init(_data?: any) {
        if (_data) {
            this.deviceId = _data["deviceId"] !== undefined ? _data["deviceId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.hardware = _data["hardware"] !== undefined ? _data["hardware"] : <any>null;
            this.siteNumber = _data["siteNumber"] !== undefined ? _data["siteNumber"] : <any>null;
            this.autoSyncConfiguration = _data["autoSyncConfiguration"] !== undefined ? _data["autoSyncConfiguration"] : <any>null;
            this.syncTime = _data["syncTime"] !== undefined ? _data["syncTime"] : <any>null;
            this.customerName = _data["customerName"] !== undefined ? _data["customerName"] : <any>null;
            this.customerAddress1 = _data["customerAddress1"] !== undefined ? _data["customerAddress1"] : <any>null;
            this.customerAddress2 = _data["customerAddress2"] !== undefined ? _data["customerAddress2"] : <any>null;
            this.customerAddress3 = _data["customerAddress3"] !== undefined ? _data["customerAddress3"] : <any>null;
            this.customerCity = _data["customerCity"] !== undefined ? _data["customerCity"] : <any>null;
            this.customerState = _data["customerState"] !== undefined ? _data["customerState"] : <any>null;
            this.customerCountry = _data["customerCountry"] !== undefined ? _data["customerCountry"] : <any>null;
        }
    }

    static fromJS(data: any): Rtu400GeneralInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new Rtu400GeneralInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deviceId"] = this.deviceId !== undefined ? this.deviceId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["hardware"] = this.hardware !== undefined ? this.hardware : <any>null;
        data["siteNumber"] = this.siteNumber !== undefined ? this.siteNumber : <any>null;
        data["autoSyncConfiguration"] = this.autoSyncConfiguration !== undefined ? this.autoSyncConfiguration : <any>null;
        data["syncTime"] = this.syncTime !== undefined ? this.syncTime : <any>null;
        data["customerName"] = this.customerName !== undefined ? this.customerName : <any>null;
        data["customerAddress1"] = this.customerAddress1 !== undefined ? this.customerAddress1 : <any>null;
        data["customerAddress2"] = this.customerAddress2 !== undefined ? this.customerAddress2 : <any>null;
        data["customerAddress3"] = this.customerAddress3 !== undefined ? this.customerAddress3 : <any>null;
        data["customerCity"] = this.customerCity !== undefined ? this.customerCity : <any>null;
        data["customerState"] = this.customerState !== undefined ? this.customerState : <any>null;
        data["customerCountry"] = this.customerCountry !== undefined ? this.customerCountry : <any>null;
        return data;
    }
}

export class RtuInfoDTO {
    rtuId?: string;
    deviceId?: string | null;
    description?: string | null;

    init(_data?: any) {
        if (_data) {
            this.rtuId = _data["rtuId"] !== undefined ? _data["rtuId"] : <any>null;
            this.deviceId = _data["deviceId"] !== undefined ? _data["deviceId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
        }
    }

    static fromJS(data: any): RtuInfoDTO {
        data = typeof data === 'object' ? data : {};
        let result = new RtuInfoDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rtuId"] = this.rtuId !== undefined ? this.rtuId : <any>null;
        data["deviceId"] = this.deviceId !== undefined ? this.deviceId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        return data;
    }
}

export enum RtuPollStatusEnum {
    NotPollable = 0,
    NotPollableBatteryLow = 1,
    PollingDisabled = 2,
    InstantaneousAndHistoricalReadings = 3,
    InstantaneousReadings = 4,
}

export class QuickEditRtuNotesDTO {
    permanentNotes?: string | null;
    temporaryNotes?: string | null;
    installationDate?: Date | null;
    modelDescription?: string | null;
    functionalLocation?: string | null;
    simIccId?: string | null;

    init(_data?: any) {
        if (_data) {
            this.permanentNotes = _data["permanentNotes"] !== undefined ? _data["permanentNotes"] : <any>null;
            this.temporaryNotes = _data["temporaryNotes"] !== undefined ? _data["temporaryNotes"] : <any>null;
            this.installationDate = _data["installationDate"] ? new Date(_data["installationDate"].toString()) : <any>null;
            this.modelDescription = _data["modelDescription"] !== undefined ? _data["modelDescription"] : <any>null;
            this.functionalLocation = _data["functionalLocation"] !== undefined ? _data["functionalLocation"] : <any>null;
            this.simIccId = _data["simIccId"] !== undefined ? _data["simIccId"] : <any>null;
        }
    }

    static fromJS(data: any): QuickEditRtuNotesDTO {
        data = typeof data === 'object' ? data : {};
        let result = new QuickEditRtuNotesDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["permanentNotes"] = this.permanentNotes !== undefined ? this.permanentNotes : <any>null;
        data["temporaryNotes"] = this.temporaryNotes !== undefined ? this.temporaryNotes : <any>null;
        data["installationDate"] = this.installationDate ? this.installationDate.toISOString() : <any>null;
        data["modelDescription"] = this.modelDescription !== undefined ? this.modelDescription : <any>null;
        data["functionalLocation"] = this.functionalLocation !== undefined ? this.functionalLocation : <any>null;
        data["simIccId"] = this.simIccId !== undefined ? this.simIccId : <any>null;
        return data;
    }
}

export enum RtuDeviceCategory {
    Unknown = 0,
    SMS = 1,
    Modbus = 2,
    Clover = 3,
    Metron2 = 4,
    Horner = 5,
    File = 6,
    FourHundredSeries = 7,
}

export class RtuSearchResultSetDTO {
    totalCount?: number;
    results?: RtuSearchResultDTO[] | null;

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"] !== undefined ? _data["totalCount"] : <any>null;
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(RtuSearchResultDTO.fromJS(item));
            }
            else {
                this.results = <any>null;
            }
        }
    }

    static fromJS(data: any): RtuSearchResultSetDTO {
        data = typeof data === 'object' ? data : {};
        let result = new RtuSearchResultSetDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : <any>null;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        return data;
    }
}

export class RtuSearchResultDTO {
    id?: string;
    domainId?: string | null;
    assetId?: string | null;
    assetTitle?: string | null;
    deviceId?: string | null;
    carrierId?: TelecommunicationsCarrier;
    carrierName?: string | null;
    deviceNetworkAddress?: string | null;
    siteTitle?: string | null;
    siteTimeZoneId?: number | null;
    rtuChannelCount?: number;
    dataChannelCount?: number;
    latestPacketTimeStamp?: Date | null;
    domainName?: string | null;
    rtuCategoryId?: RtuDeviceCategory;
    isDeleted?: boolean;
    lastBatteryVoltage?: number | null;
    lastBatteryVoltageTimestamp?: Date | null;
    description?: string | null;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.assetTitle = _data["assetTitle"] !== undefined ? _data["assetTitle"] : <any>null;
            this.deviceId = _data["deviceId"] !== undefined ? _data["deviceId"] : <any>null;
            this.carrierId = _data["carrierId"] !== undefined ? _data["carrierId"] : <any>null;
            this.carrierName = _data["carrierName"] !== undefined ? _data["carrierName"] : <any>null;
            this.deviceNetworkAddress = _data["deviceNetworkAddress"] !== undefined ? _data["deviceNetworkAddress"] : <any>null;
            this.siteTitle = _data["siteTitle"] !== undefined ? _data["siteTitle"] : <any>null;
            this.siteTimeZoneId = _data["siteTimeZoneId"] !== undefined ? _data["siteTimeZoneId"] : <any>null;
            this.rtuChannelCount = _data["rtuChannelCount"] !== undefined ? _data["rtuChannelCount"] : <any>null;
            this.dataChannelCount = _data["dataChannelCount"] !== undefined ? _data["dataChannelCount"] : <any>null;
            this.latestPacketTimeStamp = _data["latestPacketTimeStamp"] ? new Date(_data["latestPacketTimeStamp"].toString()) : <any>null;
            this.domainName = _data["domainName"] !== undefined ? _data["domainName"] : <any>null;
            this.rtuCategoryId = _data["rtuCategoryId"] !== undefined ? _data["rtuCategoryId"] : <any>null;
            this.isDeleted = _data["isDeleted"] !== undefined ? _data["isDeleted"] : <any>null;
            this.lastBatteryVoltage = _data["lastBatteryVoltage"] !== undefined ? _data["lastBatteryVoltage"] : <any>null;
            this.lastBatteryVoltageTimestamp = _data["lastBatteryVoltageTimestamp"] ? new Date(_data["lastBatteryVoltageTimestamp"].toString()) : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
        }
    }

    static fromJS(data: any): RtuSearchResultDTO {
        data = typeof data === 'object' ? data : {};
        let result = new RtuSearchResultDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["assetTitle"] = this.assetTitle !== undefined ? this.assetTitle : <any>null;
        data["deviceId"] = this.deviceId !== undefined ? this.deviceId : <any>null;
        data["carrierId"] = this.carrierId !== undefined ? this.carrierId : <any>null;
        data["carrierName"] = this.carrierName !== undefined ? this.carrierName : <any>null;
        data["deviceNetworkAddress"] = this.deviceNetworkAddress !== undefined ? this.deviceNetworkAddress : <any>null;
        data["siteTitle"] = this.siteTitle !== undefined ? this.siteTitle : <any>null;
        data["siteTimeZoneId"] = this.siteTimeZoneId !== undefined ? this.siteTimeZoneId : <any>null;
        data["rtuChannelCount"] = this.rtuChannelCount !== undefined ? this.rtuChannelCount : <any>null;
        data["dataChannelCount"] = this.dataChannelCount !== undefined ? this.dataChannelCount : <any>null;
        data["latestPacketTimeStamp"] = this.latestPacketTimeStamp ? this.latestPacketTimeStamp.toISOString() : <any>null;
        data["domainName"] = this.domainName !== undefined ? this.domainName : <any>null;
        data["rtuCategoryId"] = this.rtuCategoryId !== undefined ? this.rtuCategoryId : <any>null;
        data["isDeleted"] = this.isDeleted !== undefined ? this.isDeleted : <any>null;
        data["lastBatteryVoltage"] = this.lastBatteryVoltage !== undefined ? this.lastBatteryVoltage : <any>null;
        data["lastBatteryVoltageTimestamp"] = this.lastBatteryVoltageTimestamp ? this.lastBatteryVoltageTimestamp.toISOString() : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        return data;
    }
}

export class RtuSearchDTO {
    domainId?: string;
    startDate?: Date | null;
    endDate?: Date | null;
    includeSubDomain?: boolean;
    filterBy?: RTUSearchInfoListFilterOptionsEnum;
    showDeletedRTU?: boolean;
    isCountRequired?: boolean;
    pageIndex?: number;
    itemsPerPage?: number;
    filterText?: string | null;
    sortColumnName?: string | null;
    sortDirection?: ListSortDirection2;

    init(_data?: any) {
        if (_data) {
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>null;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>null;
            this.includeSubDomain = _data["includeSubDomain"] !== undefined ? _data["includeSubDomain"] : <any>null;
            this.filterBy = _data["filterBy"] !== undefined ? _data["filterBy"] : <any>null;
            this.showDeletedRTU = _data["showDeletedRTU"] !== undefined ? _data["showDeletedRTU"] : <any>null;
            this.isCountRequired = _data["isCountRequired"] !== undefined ? _data["isCountRequired"] : <any>null;
            this.pageIndex = _data["pageIndex"] !== undefined ? _data["pageIndex"] : <any>null;
            this.itemsPerPage = _data["itemsPerPage"] !== undefined ? _data["itemsPerPage"] : <any>null;
            this.filterText = _data["filterText"] !== undefined ? _data["filterText"] : <any>null;
            this.sortColumnName = _data["sortColumnName"] !== undefined ? _data["sortColumnName"] : <any>null;
            this.sortDirection = _data["sortDirection"] !== undefined ? _data["sortDirection"] : <any>null;
        }
    }

    static fromJS(data: any): RtuSearchDTO {
        data = typeof data === 'object' ? data : {};
        let result = new RtuSearchDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>null;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>null;
        data["includeSubDomain"] = this.includeSubDomain !== undefined ? this.includeSubDomain : <any>null;
        data["filterBy"] = this.filterBy !== undefined ? this.filterBy : <any>null;
        data["showDeletedRTU"] = this.showDeletedRTU !== undefined ? this.showDeletedRTU : <any>null;
        data["isCountRequired"] = this.isCountRequired !== undefined ? this.isCountRequired : <any>null;
        data["pageIndex"] = this.pageIndex !== undefined ? this.pageIndex : <any>null;
        data["itemsPerPage"] = this.itemsPerPage !== undefined ? this.itemsPerPage : <any>null;
        data["filterText"] = this.filterText !== undefined ? this.filterText : <any>null;
        data["sortColumnName"] = this.sortColumnName !== undefined ? this.sortColumnName : <any>null;
        data["sortDirection"] = this.sortDirection !== undefined ? this.sortDirection : <any>null;
        return data;
    }
}

export enum RTUSearchInfoListFilterOptionsEnum {
    RTU = 1,
    Site = 2,
    Asset = 3,
    RTUPhone = 4,
    RTUCreatedDate = 5,
    RTUPollScheduleGroup = 6,
    Carrier = 7,
    AltDeviceId = 8,
}

export enum ListSortDirection2 {
    Ascending = 0,
    Descending = 1,
}

export class RtuTransferDTO {
    rtuIds?: string[] | null;
    targetDomainId?: string;
    targetSiteId?: string | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["rtuIds"])) {
                this.rtuIds = [] as any;
                for (let item of _data["rtuIds"])
                    this.rtuIds!.push(item);
            }
            else {
                this.rtuIds = <any>null;
            }
            this.targetDomainId = _data["targetDomainId"] !== undefined ? _data["targetDomainId"] : <any>null;
            this.targetSiteId = _data["targetSiteId"] !== undefined ? _data["targetSiteId"] : <any>null;
        }
    }

    static fromJS(data: any): RtuTransferDTO {
        data = typeof data === 'object' ? data : {};
        let result = new RtuTransferDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.rtuIds)) {
            data["rtuIds"] = [];
            for (let item of this.rtuIds)
                data["rtuIds"].push(item);
        }
        data["targetDomainId"] = this.targetDomainId !== undefined ? this.targetDomainId : <any>null;
        data["targetSiteId"] = this.targetSiteId !== undefined ? this.targetSiteId : <any>null;
        return data;
    }
}

export class RtuPollScheduleGroupDTO {
    id?: string;
    name?: string | null;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
        }
    }

    static fromJS(data: any): RtuPollScheduleGroupDTO {
        data = typeof data === 'object' ? data : {};
        let result = new RtuPollScheduleGroupDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        return data;
    }
}

export class PaginatedResponseModelOfAuditHistoryDto {
    records?: AuditHistoryDto[] | null;
    totalRecordCount?: number;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["records"])) {
                this.records = [] as any;
                for (let item of _data["records"])
                    this.records!.push(AuditHistoryDto.fromJS(item));
            }
            else {
                this.records = <any>null;
            }
            this.totalRecordCount = _data["totalRecordCount"] !== undefined ? _data["totalRecordCount"] : <any>null;
        }
    }

    static fromJS(data: any): PaginatedResponseModelOfAuditHistoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedResponseModelOfAuditHistoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.records)) {
            data["records"] = [];
            for (let item of this.records)
                data["records"].push(item.toJSON());
        }
        data["totalRecordCount"] = this.totalRecordCount !== undefined ? this.totalRecordCount : <any>null;
        return data;
    }
}

export class AuditHistoryDto {
    userName?: string | null;
    timestamp?: Date;
    detailRecords?: AuditHistoryDetails[] | null;

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
            this.timestamp = _data["timestamp"] ? new Date(_data["timestamp"].toString()) : <any>null;
            if (Array.isArray(_data["detailRecords"])) {
                this.detailRecords = [] as any;
                for (let item of _data["detailRecords"])
                    this.detailRecords!.push(AuditHistoryDetails.fromJS(item));
            }
            else {
                this.detailRecords = <any>null;
            }
        }
    }

    static fromJS(data: any): AuditHistoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new AuditHistoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["timestamp"] = this.timestamp ? this.timestamp.toISOString() : <any>null;
        if (Array.isArray(this.detailRecords)) {
            data["detailRecords"] = [];
            for (let item of this.detailRecords)
                data["detailRecords"].push(item.toJSON());
        }
        return data;
    }
}

export class AuditHistoryDetails {
    actionType?: AuditHistoryActionType;
    afterValue?: string | null;
    beforeValue?: string | null;
    description?: string | null;
    fieldName?: string | null;
    recordIdentifier?: string | null;
    type?: AuditType;

    init(_data?: any) {
        if (_data) {
            this.actionType = _data["actionType"] !== undefined ? _data["actionType"] : <any>null;
            this.afterValue = _data["afterValue"] !== undefined ? _data["afterValue"] : <any>null;
            this.beforeValue = _data["beforeValue"] !== undefined ? _data["beforeValue"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.fieldName = _data["fieldName"] !== undefined ? _data["fieldName"] : <any>null;
            this.recordIdentifier = _data["recordIdentifier"] !== undefined ? _data["recordIdentifier"] : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
        }
    }

    static fromJS(data: any): AuditHistoryDetails {
        data = typeof data === 'object' ? data : {};
        let result = new AuditHistoryDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["actionType"] = this.actionType !== undefined ? this.actionType : <any>null;
        data["afterValue"] = this.afterValue !== undefined ? this.afterValue : <any>null;
        data["beforeValue"] = this.beforeValue !== undefined ? this.beforeValue : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["fieldName"] = this.fieldName !== undefined ? this.fieldName : <any>null;
        data["recordIdentifier"] = this.recordIdentifier !== undefined ? this.recordIdentifier : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        return data;
    }
}

export enum AuditHistoryActionType {
    Add = 0,
    Remove = 1,
    Modify = 2,
}

export enum AuditType {
    DataChannel = 0,
    Asset = 1,
    RTU = 2,
    RTUChannel = 3,
    CustomProperty = 4,
    DataChannelEventRule = 5,
    DcRawToScaledMapPoint = 6,
    None = -1,
}

export class RtuChannelSetpointsSyncReportDto {
    totalCount?: number;
    setpointDiffCount?: number;
    scalingParamsDiffCount?: number;
    errorCount?: number;
    scalingParamsDiffSql?: string | null;
    setpointDiffSql?: string | null;
    errorSql?: string | null;

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"] !== undefined ? _data["totalCount"] : <any>null;
            this.setpointDiffCount = _data["setpointDiffCount"] !== undefined ? _data["setpointDiffCount"] : <any>null;
            this.scalingParamsDiffCount = _data["scalingParamsDiffCount"] !== undefined ? _data["scalingParamsDiffCount"] : <any>null;
            this.errorCount = _data["errorCount"] !== undefined ? _data["errorCount"] : <any>null;
            this.scalingParamsDiffSql = _data["scalingParamsDiffSql"] !== undefined ? _data["scalingParamsDiffSql"] : <any>null;
            this.setpointDiffSql = _data["setpointDiffSql"] !== undefined ? _data["setpointDiffSql"] : <any>null;
            this.errorSql = _data["errorSql"] !== undefined ? _data["errorSql"] : <any>null;
        }
    }

    static fromJS(data: any): RtuChannelSetpointsSyncReportDto {
        data = typeof data === 'object' ? data : {};
        let result = new RtuChannelSetpointsSyncReportDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : <any>null;
        data["setpointDiffCount"] = this.setpointDiffCount !== undefined ? this.setpointDiffCount : <any>null;
        data["scalingParamsDiffCount"] = this.scalingParamsDiffCount !== undefined ? this.scalingParamsDiffCount : <any>null;
        data["errorCount"] = this.errorCount !== undefined ? this.errorCount : <any>null;
        data["scalingParamsDiffSql"] = this.scalingParamsDiffSql !== undefined ? this.scalingParamsDiffSql : <any>null;
        data["setpointDiffSql"] = this.setpointDiffSql !== undefined ? this.setpointDiffSql : <any>null;
        data["errorSql"] = this.errorSql !== undefined ? this.errorSql : <any>null;
        return data;
    }
}

export class RtuChannelInfoDto {
    id?: string;
    channelNumber?: string | null;
    channelType?: RtuChannelSensor;
    isInUse?: boolean;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.channelNumber = _data["channelNumber"] !== undefined ? _data["channelNumber"] : <any>null;
            this.channelType = _data["channelType"] !== undefined ? _data["channelType"] : <any>null;
            this.isInUse = _data["isInUse"] !== undefined ? _data["isInUse"] : <any>null;
        }
    }

    static fromJS(data: any): RtuChannelInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new RtuChannelInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["channelNumber"] = this.channelNumber !== undefined ? this.channelNumber : <any>null;
        data["channelType"] = this.channelType !== undefined ? this.channelType : <any>null;
        data["isInUse"] = this.isInUse !== undefined ? this.isInUse : <any>null;
        return data;
    }
}

export enum RtuChannelSensor {
    Analog = 1,
    Digital = 2,
    BatteryVoltage = 3,
    SupplyVoltage = 4,
    TransmitterLoopVoltage = 5,
    ExpansionBoardSupplyVoltage = 6,
    CaseTemperature = 7,
    DigitalOutput = 8,
    GPS = 9,
    AnalogOutput = 10,
    CounterInput = 11,
    SignalStrength = 12,
    ChargeCurrent = 13,
}

export abstract class UpdateB2cUserDomainRolesAndAssetGroupsBase {
    defaultDomainId?: string | null;
    defaultDomainIdValue?: string;
    userDomainRoles?: UserDomainRoleModel[] | null;
    userDomainAssetGroups?: UserDomainAssetGroupsModel[] | null;

    init(_data?: any) {
        if (_data) {
            this.defaultDomainId = _data["defaultDomainId"] !== undefined ? _data["defaultDomainId"] : <any>null;
            this.defaultDomainIdValue = _data["defaultDomainIdValue"] !== undefined ? _data["defaultDomainIdValue"] : <any>null;
            if (Array.isArray(_data["userDomainRoles"])) {
                this.userDomainRoles = [] as any;
                for (let item of _data["userDomainRoles"])
                    this.userDomainRoles!.push(UserDomainRoleModel.fromJS(item));
            }
            else {
                this.userDomainRoles = <any>null;
            }
            if (Array.isArray(_data["userDomainAssetGroups"])) {
                this.userDomainAssetGroups = [] as any;
                for (let item of _data["userDomainAssetGroups"])
                    this.userDomainAssetGroups!.push(UserDomainAssetGroupsModel.fromJS(item));
            }
            else {
                this.userDomainAssetGroups = <any>null;
            }
        }
    }

    static fromJS(data: any): UpdateB2cUserDomainRolesAndAssetGroupsBase {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'UpdateB2cUserDomainRolesAndAssetGroupsBase' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["defaultDomainId"] = this.defaultDomainId !== undefined ? this.defaultDomainId : <any>null;
        data["defaultDomainIdValue"] = this.defaultDomainIdValue !== undefined ? this.defaultDomainIdValue : <any>null;
        if (Array.isArray(this.userDomainRoles)) {
            data["userDomainRoles"] = [];
            for (let item of this.userDomainRoles)
                data["userDomainRoles"].push(item.toJSON());
        }
        if (Array.isArray(this.userDomainAssetGroups)) {
            data["userDomainAssetGroups"] = [];
            for (let item of this.userDomainAssetGroups)
                data["userDomainAssetGroups"].push(item.toJSON());
        }
        return data;
    }
}

export class UpdateB2cUserDomainRolesAndAssetGroupsResponse extends UpdateB2cUserDomainRolesAndAssetGroupsBase {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): UpdateB2cUserDomainRolesAndAssetGroupsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateB2cUserDomainRolesAndAssetGroupsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class UserDomainRoleModel {
    userDomainRoleId?: number;
    userId?: string;
    domainId?: string;
    applicationUserRoleId?: number;
    applicationUserRole?: ApplicationUserRoleModel | null;

    init(_data?: any) {
        if (_data) {
            this.userDomainRoleId = _data["userDomainRoleId"] !== undefined ? _data["userDomainRoleId"] : <any>null;
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.applicationUserRoleId = _data["applicationUserRoleId"] !== undefined ? _data["applicationUserRoleId"] : <any>null;
            this.applicationUserRole = _data["applicationUserRole"] ? ApplicationUserRoleModel.fromJS(_data["applicationUserRole"]) : <any>null;
        }
    }

    static fromJS(data: any): UserDomainRoleModel {
        data = typeof data === 'object' ? data : {};
        let result = new UserDomainRoleModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userDomainRoleId"] = this.userDomainRoleId !== undefined ? this.userDomainRoleId : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["applicationUserRoleId"] = this.applicationUserRoleId !== undefined ? this.applicationUserRoleId : <any>null;
        data["applicationUserRole"] = this.applicationUserRole ? this.applicationUserRole.toJSON() : <any>null;
        return data;
    }
}

export class ApplicationUserRoleModel {
    applicationUserRoleId?: number;
    domainId?: string;
    userRoleTypeEnumId?: UserRoleTypeEnum;
    name?: string | null;
    isAdministrator?: boolean;

    init(_data?: any) {
        if (_data) {
            this.applicationUserRoleId = _data["applicationUserRoleId"] !== undefined ? _data["applicationUserRoleId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.userRoleTypeEnumId = _data["userRoleTypeEnumId"] !== undefined ? _data["userRoleTypeEnumId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.isAdministrator = _data["isAdministrator"] !== undefined ? _data["isAdministrator"] : <any>null;
        }
    }

    static fromJS(data: any): ApplicationUserRoleModel {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationUserRoleModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["applicationUserRoleId"] = this.applicationUserRoleId !== undefined ? this.applicationUserRoleId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["userRoleTypeEnumId"] = this.userRoleTypeEnumId !== undefined ? this.userRoleTypeEnumId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["isAdministrator"] = this.isAdministrator !== undefined ? this.isAdministrator : <any>null;
        return data;
    }
}

export enum UserRoleTypeEnum {
    SystemAdministrator = 0,
    SystemUser = 1,
    DomainAdministrator = 2,
    DomainUser = 3,
    Unauthenticated = -1,
}

export class UserDomainAssetGroupsModel {
    domainId?: string;
    defaultAssetGroupId?: string;
    domainAssetGroups?: AssetGroupModel[] | null;

    init(_data?: any) {
        if (_data) {
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.defaultAssetGroupId = _data["defaultAssetGroupId"] !== undefined ? _data["defaultAssetGroupId"] : <any>null;
            if (Array.isArray(_data["domainAssetGroups"])) {
                this.domainAssetGroups = [] as any;
                for (let item of _data["domainAssetGroups"])
                    this.domainAssetGroups!.push(AssetGroupModel.fromJS(item));
            }
            else {
                this.domainAssetGroups = <any>null;
            }
        }
    }

    static fromJS(data: any): UserDomainAssetGroupsModel {
        data = typeof data === 'object' ? data : {};
        let result = new UserDomainAssetGroupsModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["defaultAssetGroupId"] = this.defaultAssetGroupId !== undefined ? this.defaultAssetGroupId : <any>null;
        if (Array.isArray(this.domainAssetGroups)) {
            data["domainAssetGroups"] = [];
            for (let item of this.domainAssetGroups)
                data["domainAssetGroups"].push(item.toJSON());
        }
        return data;
    }
}

export class AssetGroupModel {
    id?: string;
    dataTimeStamp?: string | null;
    name?: string | null;
    domainId?: string;
    groupType?: number;
    searchCriteria?: string | null;
    isDisplayGroup?: boolean | null;
    status?: number | null;
    whereClause?: string | null;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.dataTimeStamp = _data["dataTimeStamp"] !== undefined ? _data["dataTimeStamp"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.groupType = _data["groupType"] !== undefined ? _data["groupType"] : <any>null;
            this.searchCriteria = _data["searchCriteria"] !== undefined ? _data["searchCriteria"] : <any>null;
            this.isDisplayGroup = _data["isDisplayGroup"] !== undefined ? _data["isDisplayGroup"] : <any>null;
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
            this.whereClause = _data["whereClause"] !== undefined ? _data["whereClause"] : <any>null;
        }
    }

    static fromJS(data: any): AssetGroupModel {
        data = typeof data === 'object' ? data : {};
        let result = new AssetGroupModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["dataTimeStamp"] = this.dataTimeStamp !== undefined ? this.dataTimeStamp : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["groupType"] = this.groupType !== undefined ? this.groupType : <any>null;
        data["searchCriteria"] = this.searchCriteria !== undefined ? this.searchCriteria : <any>null;
        data["isDisplayGroup"] = this.isDisplayGroup !== undefined ? this.isDisplayGroup : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["whereClause"] = this.whereClause !== undefined ? this.whereClause : <any>null;
        return data;
    }
}

export class UpdateB2cUserDomainRolesAndAssetGroupsRequest extends UpdateB2cUserDomainRolesAndAssetGroupsBase {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): UpdateB2cUserDomainRolesAndAssetGroupsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateB2cUserDomainRolesAndAssetGroupsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export abstract class B2cUserRequestResponseBase {
    authenticationProviderId?: number;
    domainId?: string;
    emailAddress?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    companyName?: string | null;
    applicationTimeoutHours?: number;
    applicationTimeoutMinutes?: number;

    init(_data?: any) {
        if (_data) {
            this.authenticationProviderId = _data["authenticationProviderId"] !== undefined ? _data["authenticationProviderId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.emailAddress = _data["emailAddress"] !== undefined ? _data["emailAddress"] : <any>null;
            this.firstName = _data["firstName"] !== undefined ? _data["firstName"] : <any>null;
            this.lastName = _data["lastName"] !== undefined ? _data["lastName"] : <any>null;
            this.companyName = _data["companyName"] !== undefined ? _data["companyName"] : <any>null;
            this.applicationTimeoutHours = _data["applicationTimeoutHours"] !== undefined ? _data["applicationTimeoutHours"] : <any>null;
            this.applicationTimeoutMinutes = _data["applicationTimeoutMinutes"] !== undefined ? _data["applicationTimeoutMinutes"] : <any>null;
        }
    }

    static fromJS(data: any): B2cUserRequestResponseBase {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'B2cUserRequestResponseBase' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["authenticationProviderId"] = this.authenticationProviderId !== undefined ? this.authenticationProviderId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : <any>null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["companyName"] = this.companyName !== undefined ? this.companyName : <any>null;
        data["applicationTimeoutHours"] = this.applicationTimeoutHours !== undefined ? this.applicationTimeoutHours : <any>null;
        data["applicationTimeoutMinutes"] = this.applicationTimeoutMinutes !== undefined ? this.applicationTimeoutMinutes : <any>null;
        return data;
    }
}

export class UpdateB2cUserResponse extends B2cUserRequestResponseBase {
    id?: string;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateB2cUserResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateB2cUserResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class UpdateB2cUserRequest extends B2cUserRequestResponseBase {
    id?: string;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateB2cUserRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateB2cUserRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class CreateB2cUserResponse extends B2cUserRequestResponseBase {
    id?: string;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any): CreateB2cUserResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CreateB2cUserResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class CreateB2cUserRequest extends B2cUserRequestResponseBase {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): CreateB2cUserRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateB2cUserRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class SetupDolV3AccessRequest {
    userId?: string;
    userName?: string | null;
    password?: string | null;

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
            this.password = _data["password"] !== undefined ? _data["password"] : <any>null;
        }
    }

    static fromJS(data: any): SetupDolV3AccessRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SetupDolV3AccessRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        return data;
    }
}

export abstract class ResponseModelBaseOfListOfUserGetResp {
    result?: UserGetResp[] | null;
    errors?: ErrorResponseModel[] | null;
    hasErrors?: boolean;
    hasNoErrors?: boolean;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result!.push(UserGetResp.fromJS(item));
            }
            else {
                this.result = <any>null;
            }
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                this.errors = <any>null;
            }
            this.hasErrors = _data["hasErrors"] !== undefined ? _data["hasErrors"] : <any>null;
            this.hasNoErrors = _data["hasNoErrors"] !== undefined ? _data["hasNoErrors"] : <any>null;
        }
    }

    static fromJS(data: any): ResponseModelBaseOfListOfUserGetResp {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'ResponseModelBaseOfListOfUserGetResp' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["hasErrors"] = this.hasErrors !== undefined ? this.hasErrors : <any>null;
        data["hasNoErrors"] = this.hasNoErrors !== undefined ? this.hasNoErrors : <any>null;
        return data;
    }
}

export class ResponseModelOfListOfUserGetResp extends ResponseModelBaseOfListOfUserGetResp {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): ResponseModelOfListOfUserGetResp {
        data = typeof data === 'object' ? data : {};
        let result = new ResponseModelOfListOfUserGetResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class UserGetResp {
    userId?: string;
    userName?: string | null;
    companyName?: string | null;
    emailAddress?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    roleName?: string | null;
    userTypeValue?: string | null;
    isDeleted?: boolean;
    lastLoginDate?: Date;
    isUsingAadB2cForIdentity?: boolean;
    transcendLoggedInDate?: Date;
    authenticationProfileDescription?: string | null;

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
            this.companyName = _data["companyName"] !== undefined ? _data["companyName"] : <any>null;
            this.emailAddress = _data["emailAddress"] !== undefined ? _data["emailAddress"] : <any>null;
            this.firstName = _data["firstName"] !== undefined ? _data["firstName"] : <any>null;
            this.lastName = _data["lastName"] !== undefined ? _data["lastName"] : <any>null;
            this.roleName = _data["roleName"] !== undefined ? _data["roleName"] : <any>null;
            this.userTypeValue = _data["userTypeValue"] !== undefined ? _data["userTypeValue"] : <any>null;
            this.isDeleted = _data["isDeleted"] !== undefined ? _data["isDeleted"] : <any>null;
            this.lastLoginDate = _data["lastLoginDate"] ? new Date(_data["lastLoginDate"].toString()) : <any>null;
            this.isUsingAadB2cForIdentity = _data["isUsingAadB2cForIdentity"] !== undefined ? _data["isUsingAadB2cForIdentity"] : <any>null;
            this.transcendLoggedInDate = _data["transcendLoggedInDate"] ? new Date(_data["transcendLoggedInDate"].toString()) : <any>null;
            this.authenticationProfileDescription = _data["authenticationProfileDescription"] !== undefined ? _data["authenticationProfileDescription"] : <any>null;
        }
    }

    static fromJS(data: any): UserGetResp {
        data = typeof data === 'object' ? data : {};
        let result = new UserGetResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["companyName"] = this.companyName !== undefined ? this.companyName : <any>null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : <any>null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["roleName"] = this.roleName !== undefined ? this.roleName : <any>null;
        data["userTypeValue"] = this.userTypeValue !== undefined ? this.userTypeValue : <any>null;
        data["isDeleted"] = this.isDeleted !== undefined ? this.isDeleted : <any>null;
        data["lastLoginDate"] = this.lastLoginDate ? this.lastLoginDate.toISOString() : <any>null;
        data["isUsingAadB2cForIdentity"] = this.isUsingAadB2cForIdentity !== undefined ? this.isUsingAadB2cForIdentity : <any>null;
        data["transcendLoggedInDate"] = this.transcendLoggedInDate ? this.transcendLoggedInDate.toISOString() : <any>null;
        data["authenticationProfileDescription"] = this.authenticationProfileDescription !== undefined ? this.authenticationProfileDescription : <any>null;
        return data;
    }
}

export class UserDto {
    id?: string;
    domainId?: string;
    userName?: string | null;
    password?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    emailAddress?: string | null;
    companyName?: string | null;
    emailToSmsaddress?: string | null;
    smsnumber?: string | null;
    homePhoneNumber?: string | null;
    workPhoneNumber?: string | null;
    mobilePhoneNumber?: string | null;
    faxNumber?: string | null;
    isWebLogin?: boolean | null;
    isPasswordChangeRequired?: boolean;
    lastUpdatedDate?: Date | null;
    transcendLoggedInDate?: Date | null;
    lastUpdateUserId?: string | null;
    lastUpdateUsername?: string | null;
    applicationTimeoutInSeconds?: number | null;
    userTypeId?: UserTypeEnum;
    lastLoginDate?: Date | null;
    isPrimary?: boolean;
    isFederatedAuthentication?: boolean;
    defaultDomainId?: string | null;
    showPreviewPage?: boolean;
    migratedToNewUi?: boolean;
    userDomainRoles?: UserDomainRoleDto[] | null;
    userDomainAssetGroups?: UserDomainAssetGroupsDto[] | null;
    authenticationTypeDescription?: string | null;
    authenticationProviderId?: number;
    authenticationProfileID?: number;
    associatedEmailSuffixes?: string[] | null;
    isUsingAadB2cForIdentity?: boolean;
    isUsing3rdPartyIdentityProvider?: boolean;
    isLocalAadB2cAccount?: boolean;
    isDefaultWhenProviderNotDefined?: boolean;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
            this.password = _data["password"] !== undefined ? _data["password"] : <any>null;
            this.firstName = _data["firstName"] !== undefined ? _data["firstName"] : <any>null;
            this.lastName = _data["lastName"] !== undefined ? _data["lastName"] : <any>null;
            this.emailAddress = _data["emailAddress"] !== undefined ? _data["emailAddress"] : <any>null;
            this.companyName = _data["companyName"] !== undefined ? _data["companyName"] : <any>null;
            this.emailToSmsaddress = _data["emailToSmsaddress"] !== undefined ? _data["emailToSmsaddress"] : <any>null;
            this.smsnumber = _data["smsnumber"] !== undefined ? _data["smsnumber"] : <any>null;
            this.homePhoneNumber = _data["homePhoneNumber"] !== undefined ? _data["homePhoneNumber"] : <any>null;
            this.workPhoneNumber = _data["workPhoneNumber"] !== undefined ? _data["workPhoneNumber"] : <any>null;
            this.mobilePhoneNumber = _data["mobilePhoneNumber"] !== undefined ? _data["mobilePhoneNumber"] : <any>null;
            this.faxNumber = _data["faxNumber"] !== undefined ? _data["faxNumber"] : <any>null;
            this.isWebLogin = _data["isWebLogin"] !== undefined ? _data["isWebLogin"] : <any>null;
            this.isPasswordChangeRequired = _data["isPasswordChangeRequired"] !== undefined ? _data["isPasswordChangeRequired"] : <any>null;
            this.lastUpdatedDate = _data["lastUpdatedDate"] ? new Date(_data["lastUpdatedDate"].toString()) : <any>null;
            this.transcendLoggedInDate = _data["transcendLoggedInDate"] ? new Date(_data["transcendLoggedInDate"].toString()) : <any>null;
            this.lastUpdateUserId = _data["lastUpdateUserId"] !== undefined ? _data["lastUpdateUserId"] : <any>null;
            this.lastUpdateUsername = _data["lastUpdateUsername"] !== undefined ? _data["lastUpdateUsername"] : <any>null;
            this.applicationTimeoutInSeconds = _data["applicationTimeoutInSeconds"] !== undefined ? _data["applicationTimeoutInSeconds"] : <any>null;
            this.userTypeId = _data["userTypeId"] !== undefined ? _data["userTypeId"] : <any>null;
            this.lastLoginDate = _data["lastLoginDate"] ? new Date(_data["lastLoginDate"].toString()) : <any>null;
            this.isPrimary = _data["isPrimary"] !== undefined ? _data["isPrimary"] : <any>null;
            this.isFederatedAuthentication = _data["isFederatedAuthentication"] !== undefined ? _data["isFederatedAuthentication"] : <any>null;
            this.defaultDomainId = _data["defaultDomainId"] !== undefined ? _data["defaultDomainId"] : <any>null;
            this.showPreviewPage = _data["showPreviewPage"] !== undefined ? _data["showPreviewPage"] : <any>null;
            this.migratedToNewUi = _data["migratedToNewUi"] !== undefined ? _data["migratedToNewUi"] : <any>null;
            if (Array.isArray(_data["userDomainRoles"])) {
                this.userDomainRoles = [] as any;
                for (let item of _data["userDomainRoles"])
                    this.userDomainRoles!.push(UserDomainRoleDto.fromJS(item));
            }
            else {
                this.userDomainRoles = <any>null;
            }
            if (Array.isArray(_data["userDomainAssetGroups"])) {
                this.userDomainAssetGroups = [] as any;
                for (let item of _data["userDomainAssetGroups"])
                    this.userDomainAssetGroups!.push(UserDomainAssetGroupsDto.fromJS(item));
            }
            else {
                this.userDomainAssetGroups = <any>null;
            }
            this.authenticationTypeDescription = _data["authenticationTypeDescription"] !== undefined ? _data["authenticationTypeDescription"] : <any>null;
            this.authenticationProviderId = _data["authenticationProviderId"] !== undefined ? _data["authenticationProviderId"] : <any>null;
            this.authenticationProfileID = _data["authenticationProfileID"] !== undefined ? _data["authenticationProfileID"] : <any>null;
            if (Array.isArray(_data["associatedEmailSuffixes"])) {
                this.associatedEmailSuffixes = [] as any;
                for (let item of _data["associatedEmailSuffixes"])
                    this.associatedEmailSuffixes!.push(item);
            }
            else {
                this.associatedEmailSuffixes = <any>null;
            }
            this.isUsingAadB2cForIdentity = _data["isUsingAadB2cForIdentity"] !== undefined ? _data["isUsingAadB2cForIdentity"] : <any>null;
            this.isUsing3rdPartyIdentityProvider = _data["isUsing3rdPartyIdentityProvider"] !== undefined ? _data["isUsing3rdPartyIdentityProvider"] : <any>null;
            this.isLocalAadB2cAccount = _data["isLocalAadB2cAccount"] !== undefined ? _data["isLocalAadB2cAccount"] : <any>null;
            this.isDefaultWhenProviderNotDefined = _data["isDefaultWhenProviderNotDefined"] !== undefined ? _data["isDefaultWhenProviderNotDefined"] : <any>null;
        }
    }

    static fromJS(data: any): UserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : <any>null;
        data["companyName"] = this.companyName !== undefined ? this.companyName : <any>null;
        data["emailToSmsaddress"] = this.emailToSmsaddress !== undefined ? this.emailToSmsaddress : <any>null;
        data["smsnumber"] = this.smsnumber !== undefined ? this.smsnumber : <any>null;
        data["homePhoneNumber"] = this.homePhoneNumber !== undefined ? this.homePhoneNumber : <any>null;
        data["workPhoneNumber"] = this.workPhoneNumber !== undefined ? this.workPhoneNumber : <any>null;
        data["mobilePhoneNumber"] = this.mobilePhoneNumber !== undefined ? this.mobilePhoneNumber : <any>null;
        data["faxNumber"] = this.faxNumber !== undefined ? this.faxNumber : <any>null;
        data["isWebLogin"] = this.isWebLogin !== undefined ? this.isWebLogin : <any>null;
        data["isPasswordChangeRequired"] = this.isPasswordChangeRequired !== undefined ? this.isPasswordChangeRequired : <any>null;
        data["lastUpdatedDate"] = this.lastUpdatedDate ? this.lastUpdatedDate.toISOString() : <any>null;
        data["transcendLoggedInDate"] = this.transcendLoggedInDate ? this.transcendLoggedInDate.toISOString() : <any>null;
        data["lastUpdateUserId"] = this.lastUpdateUserId !== undefined ? this.lastUpdateUserId : <any>null;
        data["lastUpdateUsername"] = this.lastUpdateUsername !== undefined ? this.lastUpdateUsername : <any>null;
        data["applicationTimeoutInSeconds"] = this.applicationTimeoutInSeconds !== undefined ? this.applicationTimeoutInSeconds : <any>null;
        data["userTypeId"] = this.userTypeId !== undefined ? this.userTypeId : <any>null;
        data["lastLoginDate"] = this.lastLoginDate ? this.lastLoginDate.toISOString() : <any>null;
        data["isPrimary"] = this.isPrimary !== undefined ? this.isPrimary : <any>null;
        data["isFederatedAuthentication"] = this.isFederatedAuthentication !== undefined ? this.isFederatedAuthentication : <any>null;
        data["defaultDomainId"] = this.defaultDomainId !== undefined ? this.defaultDomainId : <any>null;
        data["showPreviewPage"] = this.showPreviewPage !== undefined ? this.showPreviewPage : <any>null;
        data["migratedToNewUi"] = this.migratedToNewUi !== undefined ? this.migratedToNewUi : <any>null;
        if (Array.isArray(this.userDomainRoles)) {
            data["userDomainRoles"] = [];
            for (let item of this.userDomainRoles)
                data["userDomainRoles"].push(item.toJSON());
        }
        if (Array.isArray(this.userDomainAssetGroups)) {
            data["userDomainAssetGroups"] = [];
            for (let item of this.userDomainAssetGroups)
                data["userDomainAssetGroups"].push(item.toJSON());
        }
        data["authenticationTypeDescription"] = this.authenticationTypeDescription !== undefined ? this.authenticationTypeDescription : <any>null;
        data["authenticationProviderId"] = this.authenticationProviderId !== undefined ? this.authenticationProviderId : <any>null;
        data["authenticationProfileID"] = this.authenticationProfileID !== undefined ? this.authenticationProfileID : <any>null;
        if (Array.isArray(this.associatedEmailSuffixes)) {
            data["associatedEmailSuffixes"] = [];
            for (let item of this.associatedEmailSuffixes)
                data["associatedEmailSuffixes"].push(item);
        }
        data["isUsingAadB2cForIdentity"] = this.isUsingAadB2cForIdentity !== undefined ? this.isUsingAadB2cForIdentity : <any>null;
        data["isUsing3rdPartyIdentityProvider"] = this.isUsing3rdPartyIdentityProvider !== undefined ? this.isUsing3rdPartyIdentityProvider : <any>null;
        data["isLocalAadB2cAccount"] = this.isLocalAadB2cAccount !== undefined ? this.isLocalAadB2cAccount : <any>null;
        data["isDefaultWhenProviderNotDefined"] = this.isDefaultWhenProviderNotDefined !== undefined ? this.isDefaultWhenProviderNotDefined : <any>null;
        return data;
    }
}

export enum UserTypeEnum {
    WebUser = 1,
    WebServiceUser = 2,
    WebUserAndWebServiceUser = 3,
    FTPUser = 4,
    SubsystemUser = 5,
}

export class UserDomainRoleDto {
    domainId?: string;
    roleId?: number;
    userRoleTypeId?: UserRoleTypeEnum;

    init(_data?: any) {
        if (_data) {
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.roleId = _data["roleId"] !== undefined ? _data["roleId"] : <any>null;
            this.userRoleTypeId = _data["userRoleTypeId"] !== undefined ? _data["userRoleTypeId"] : <any>null;
        }
    }

    static fromJS(data: any): UserDomainRoleDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDomainRoleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["roleId"] = this.roleId !== undefined ? this.roleId : <any>null;
        data["userRoleTypeId"] = this.userRoleTypeId !== undefined ? this.userRoleTypeId : <any>null;
        return data;
    }
}

export class UserDomainAssetGroupsDto {
    domainId?: string;
    defaultAssetGroupId?: string;
    domainAssetGroups?: AssetGroupDto[] | null;

    init(_data?: any) {
        if (_data) {
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.defaultAssetGroupId = _data["defaultAssetGroupId"] !== undefined ? _data["defaultAssetGroupId"] : <any>null;
            if (Array.isArray(_data["domainAssetGroups"])) {
                this.domainAssetGroups = [] as any;
                for (let item of _data["domainAssetGroups"])
                    this.domainAssetGroups!.push(AssetGroupDto.fromJS(item));
            }
            else {
                this.domainAssetGroups = <any>null;
            }
        }
    }

    static fromJS(data: any): UserDomainAssetGroupsDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDomainAssetGroupsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["defaultAssetGroupId"] = this.defaultAssetGroupId !== undefined ? this.defaultAssetGroupId : <any>null;
        if (Array.isArray(this.domainAssetGroups)) {
            data["domainAssetGroups"] = [];
            for (let item of this.domainAssetGroups)
                data["domainAssetGroups"].push(item.toJSON());
        }
        return data;
    }
}

export class AssetGroupDto {
    id?: string;
    name?: string | null;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
        }
    }

    static fromJS(data: any): AssetGroupDto {
        data = typeof data === 'object' ? data : {};
        let result = new AssetGroupDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        return data;
    }
}

export class UserNameDto {
    userId?: string;
    userName?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    companyName?: string | null;
    emailAddress?: string | null;
    emailToPhoneAddress?: string | null;

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
            this.firstName = _data["firstName"] !== undefined ? _data["firstName"] : <any>null;
            this.lastName = _data["lastName"] !== undefined ? _data["lastName"] : <any>null;
            this.companyName = _data["companyName"] !== undefined ? _data["companyName"] : <any>null;
            this.emailAddress = _data["emailAddress"] !== undefined ? _data["emailAddress"] : <any>null;
            this.emailToPhoneAddress = _data["emailToPhoneAddress"] !== undefined ? _data["emailToPhoneAddress"] : <any>null;
        }
    }

    static fromJS(data: any): UserNameDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserNameDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["companyName"] = this.companyName !== undefined ? this.companyName : <any>null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : <any>null;
        data["emailToPhoneAddress"] = this.emailToPhoneAddress !== undefined ? this.emailToPhoneAddress : <any>null;
        return data;
    }
}

export class UserSelfServeDto {
    userId!: string;
    oldPassword!: string;
    newPassword!: string;
    confirmPassword!: string;
    emailAddress!: string;

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.oldPassword = _data["oldPassword"] !== undefined ? _data["oldPassword"] : <any>null;
            this.newPassword = _data["newPassword"] !== undefined ? _data["newPassword"] : <any>null;
            this.confirmPassword = _data["confirmPassword"] !== undefined ? _data["confirmPassword"] : <any>null;
            this.emailAddress = _data["emailAddress"] !== undefined ? _data["emailAddress"] : <any>null;
        }
    }

    static fromJS(data: any): UserSelfServeDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserSelfServeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["oldPassword"] = this.oldPassword !== undefined ? this.oldPassword : <any>null;
        data["newPassword"] = this.newPassword !== undefined ? this.newPassword : <any>null;
        data["confirmPassword"] = this.confirmPassword !== undefined ? this.confirmPassword : <any>null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : <any>null;
        return data;
    }
}

export class DomainDetailDto {
    domainId?: string;
    name?: string | null;
    displayName?: string | null;
    parentDomainId?: string | null;
    parentDomainName?: string | null;
    applicationTimeout?: string;
    defaultSiteId?: string | null;
    logo?: string | null;
    ftpFileFormat?: FtpFileFormatCategory;
    assetSummaryTemplate?: string | null;
    assetTitleTemplate?: string | null;
    assetEventRowColoringEnabled?: boolean;
    maxGraphDays?: number;
    defaultEventStateDescription?: string | null;
    isOrphanChannelScanEnabled?: boolean;
    level?: number;
    indentedName?: string | null;
    disableUserLogins?: boolean;
    isLoaded?: boolean;
    integrationProfile?: IntegrationProfile | null;
    referenceDocumentUrlPrefix?: string | null;
    hasPublishTargets?: boolean;
    canSubscribeToPublishedDataChannel?: boolean;
    isBdtEnabled?: boolean | null;
    isDeliveryForecasted?: boolean;
    isDataChannelEventRulesAutoLinked?: boolean;
    isFederatedSecurityEnabled?: boolean;
    itemsPerPage?: number;
    defaultRTUEventRuleGroupId?: number | null;
    mapType?: number;
    useAssetsummaryTable?: boolean;
    isAudibleEventNotificationEnabled?: boolean;

    init(_data?: any) {
        if (_data) {
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.displayName = _data["displayName"] !== undefined ? _data["displayName"] : <any>null;
            this.parentDomainId = _data["parentDomainId"] !== undefined ? _data["parentDomainId"] : <any>null;
            this.parentDomainName = _data["parentDomainName"] !== undefined ? _data["parentDomainName"] : <any>null;
            this.applicationTimeout = _data["applicationTimeout"] !== undefined ? _data["applicationTimeout"] : <any>null;
            this.defaultSiteId = _data["defaultSiteId"] !== undefined ? _data["defaultSiteId"] : <any>null;
            this.logo = _data["logo"] !== undefined ? _data["logo"] : <any>null;
            this.ftpFileFormat = _data["ftpFileFormat"] !== undefined ? _data["ftpFileFormat"] : <any>null;
            this.assetSummaryTemplate = _data["assetSummaryTemplate"] !== undefined ? _data["assetSummaryTemplate"] : <any>null;
            this.assetTitleTemplate = _data["assetTitleTemplate"] !== undefined ? _data["assetTitleTemplate"] : <any>null;
            this.assetEventRowColoringEnabled = _data["assetEventRowColoringEnabled"] !== undefined ? _data["assetEventRowColoringEnabled"] : <any>null;
            this.maxGraphDays = _data["maxGraphDays"] !== undefined ? _data["maxGraphDays"] : <any>null;
            this.defaultEventStateDescription = _data["defaultEventStateDescription"] !== undefined ? _data["defaultEventStateDescription"] : <any>null;
            this.isOrphanChannelScanEnabled = _data["isOrphanChannelScanEnabled"] !== undefined ? _data["isOrphanChannelScanEnabled"] : <any>null;
            this.level = _data["level"] !== undefined ? _data["level"] : <any>null;
            this.indentedName = _data["indentedName"] !== undefined ? _data["indentedName"] : <any>null;
            this.disableUserLogins = _data["disableUserLogins"] !== undefined ? _data["disableUserLogins"] : <any>null;
            this.isLoaded = _data["isLoaded"] !== undefined ? _data["isLoaded"] : <any>null;
            this.integrationProfile = _data["integrationProfile"] !== undefined ? _data["integrationProfile"] : <any>null;
            this.referenceDocumentUrlPrefix = _data["referenceDocumentUrlPrefix"] !== undefined ? _data["referenceDocumentUrlPrefix"] : <any>null;
            this.hasPublishTargets = _data["hasPublishTargets"] !== undefined ? _data["hasPublishTargets"] : <any>null;
            this.canSubscribeToPublishedDataChannel = _data["canSubscribeToPublishedDataChannel"] !== undefined ? _data["canSubscribeToPublishedDataChannel"] : <any>null;
            this.isBdtEnabled = _data["isBdtEnabled"] !== undefined ? _data["isBdtEnabled"] : <any>null;
            this.isDeliveryForecasted = _data["isDeliveryForecasted"] !== undefined ? _data["isDeliveryForecasted"] : <any>null;
            this.isDataChannelEventRulesAutoLinked = _data["isDataChannelEventRulesAutoLinked"] !== undefined ? _data["isDataChannelEventRulesAutoLinked"] : <any>null;
            this.isFederatedSecurityEnabled = _data["isFederatedSecurityEnabled"] !== undefined ? _data["isFederatedSecurityEnabled"] : <any>null;
            this.itemsPerPage = _data["itemsPerPage"] !== undefined ? _data["itemsPerPage"] : <any>null;
            this.defaultRTUEventRuleGroupId = _data["defaultRTUEventRuleGroupId"] !== undefined ? _data["defaultRTUEventRuleGroupId"] : <any>null;
            this.mapType = _data["mapType"] !== undefined ? _data["mapType"] : <any>null;
            this.useAssetsummaryTable = _data["useAssetsummaryTable"] !== undefined ? _data["useAssetsummaryTable"] : <any>null;
            this.isAudibleEventNotificationEnabled = _data["isAudibleEventNotificationEnabled"] !== undefined ? _data["isAudibleEventNotificationEnabled"] : <any>null;
        }
    }

    static fromJS(data: any): DomainDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new DomainDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : <any>null;
        data["parentDomainId"] = this.parentDomainId !== undefined ? this.parentDomainId : <any>null;
        data["parentDomainName"] = this.parentDomainName !== undefined ? this.parentDomainName : <any>null;
        data["applicationTimeout"] = this.applicationTimeout !== undefined ? this.applicationTimeout : <any>null;
        data["defaultSiteId"] = this.defaultSiteId !== undefined ? this.defaultSiteId : <any>null;
        data["logo"] = this.logo !== undefined ? this.logo : <any>null;
        data["ftpFileFormat"] = this.ftpFileFormat !== undefined ? this.ftpFileFormat : <any>null;
        data["assetSummaryTemplate"] = this.assetSummaryTemplate !== undefined ? this.assetSummaryTemplate : <any>null;
        data["assetTitleTemplate"] = this.assetTitleTemplate !== undefined ? this.assetTitleTemplate : <any>null;
        data["assetEventRowColoringEnabled"] = this.assetEventRowColoringEnabled !== undefined ? this.assetEventRowColoringEnabled : <any>null;
        data["maxGraphDays"] = this.maxGraphDays !== undefined ? this.maxGraphDays : <any>null;
        data["defaultEventStateDescription"] = this.defaultEventStateDescription !== undefined ? this.defaultEventStateDescription : <any>null;
        data["isOrphanChannelScanEnabled"] = this.isOrphanChannelScanEnabled !== undefined ? this.isOrphanChannelScanEnabled : <any>null;
        data["level"] = this.level !== undefined ? this.level : <any>null;
        data["indentedName"] = this.indentedName !== undefined ? this.indentedName : <any>null;
        data["disableUserLogins"] = this.disableUserLogins !== undefined ? this.disableUserLogins : <any>null;
        data["isLoaded"] = this.isLoaded !== undefined ? this.isLoaded : <any>null;
        data["integrationProfile"] = this.integrationProfile !== undefined ? this.integrationProfile : <any>null;
        data["referenceDocumentUrlPrefix"] = this.referenceDocumentUrlPrefix !== undefined ? this.referenceDocumentUrlPrefix : <any>null;
        data["hasPublishTargets"] = this.hasPublishTargets !== undefined ? this.hasPublishTargets : <any>null;
        data["canSubscribeToPublishedDataChannel"] = this.canSubscribeToPublishedDataChannel !== undefined ? this.canSubscribeToPublishedDataChannel : <any>null;
        data["isBdtEnabled"] = this.isBdtEnabled !== undefined ? this.isBdtEnabled : <any>null;
        data["isDeliveryForecasted"] = this.isDeliveryForecasted !== undefined ? this.isDeliveryForecasted : <any>null;
        data["isDataChannelEventRulesAutoLinked"] = this.isDataChannelEventRulesAutoLinked !== undefined ? this.isDataChannelEventRulesAutoLinked : <any>null;
        data["isFederatedSecurityEnabled"] = this.isFederatedSecurityEnabled !== undefined ? this.isFederatedSecurityEnabled : <any>null;
        data["itemsPerPage"] = this.itemsPerPage !== undefined ? this.itemsPerPage : <any>null;
        data["defaultRTUEventRuleGroupId"] = this.defaultRTUEventRuleGroupId !== undefined ? this.defaultRTUEventRuleGroupId : <any>null;
        data["mapType"] = this.mapType !== undefined ? this.mapType : <any>null;
        data["useAssetsummaryTable"] = this.useAssetsummaryTable !== undefined ? this.useAssetsummaryTable : <any>null;
        data["isAudibleEventNotificationEnabled"] = this.isAudibleEventNotificationEnabled !== undefined ? this.isAudibleEventNotificationEnabled : <any>null;
        return data;
    }
}

export enum FtpFileFormatCategory {
    None = 0,
    Praxair = 1,
    Apci = 2,
    Intellitrans = 5,
    Yara = 6,
    Generic = 7,
    Linde = 8,
    Generic2 = 9,
    WhiteMartins = 11,
    EndressHauser = 12,
    PraxairHelium = 14,
    GenericJson = 15,
    Ortec = 16,
}

export enum IntegrationProfile {
    None = 0,
    APCI = 1,
}

export class CanAccessRtuResponse {
    doesUserHaveAccess?: boolean;
    message?: string | null;

    init(_data?: any) {
        if (_data) {
            this.doesUserHaveAccess = _data["doesUserHaveAccess"] !== undefined ? _data["doesUserHaveAccess"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
        }
    }

    static fromJS(data: any): CanAccessRtuResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CanAccessRtuResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["doesUserHaveAccess"] = this.doesUserHaveAccess !== undefined ? this.doesUserHaveAccess : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        return data;
    }
}

export class UserWatchListModel {
    watchListId?: number;
    watchListTypeId?: WatchListTypeEnum;
    domainId?: string;
    userId?: string;
    guidItemId?: string | null;
    intItemId?: number | null;
    description?: string | null;
    domain?: DomainModel | null;
    user?: UserDetailModel | null;

    init(_data?: any) {
        if (_data) {
            this.watchListId = _data["watchListId"] !== undefined ? _data["watchListId"] : <any>null;
            this.watchListTypeId = _data["watchListTypeId"] !== undefined ? _data["watchListTypeId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.guidItemId = _data["guidItemId"] !== undefined ? _data["guidItemId"] : <any>null;
            this.intItemId = _data["intItemId"] !== undefined ? _data["intItemId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.domain = _data["domain"] ? DomainModel.fromJS(_data["domain"]) : <any>null;
            this.user = _data["user"] ? UserDetailModel.fromJS(_data["user"]) : <any>null;
        }
    }

    static fromJS(data: any): UserWatchListModel {
        data = typeof data === 'object' ? data : {};
        let result = new UserWatchListModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["watchListId"] = this.watchListId !== undefined ? this.watchListId : <any>null;
        data["watchListTypeId"] = this.watchListTypeId !== undefined ? this.watchListTypeId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["guidItemId"] = this.guidItemId !== undefined ? this.guidItemId : <any>null;
        data["intItemId"] = this.intItemId !== undefined ? this.intItemId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["domain"] = this.domain ? this.domain.toJSON() : <any>null;
        data["user"] = this.user ? this.user.toJSON() : <any>null;
        return data;
    }
}

export enum WatchListTypeEnum {
    AssetDetails = 0,
    RTU = 1,
    ProblemReports = 2,
}

export class DomainModel {
    id?: string;
    dataTimeStamp?: string | null;
    parentDomainId?: string | null;
    name?: string | null;
    screenTitle?: string | null;
    logo?: string | null;
    disableUserLogins?: boolean | null;
    ftpFileFormat?: number | null;
    ftpOptions?: number | null;
    assetTitleTemplate?: string | null;
    assetSummaryTemplate?: string | null;
    isDeleted?: boolean | null;
    lastUpdatedDate?: Date | null;
    lastUpdateUserId?: string | null;
    maxGraphDays?: number | null;
    ftpTimeZone?: string | null;
    ftpTimeZoneId?: number | null;
    outboundEmailFromAddress?: string | null;
    trihedralRealm?: string | null;
    isMigrated?: boolean | null;
    isFtpProcessingEnabled?: boolean | null;
    isEventProcessingEnabled?: boolean | null;
    applicationTimeoutInSeconds?: number | null;
    isOrphanChannelScanEnabled?: boolean;
    customerReference?: string | null;
    defaultEventStateDescription?: string | null;
    autoGenerateFtpid?: boolean | null;
    forecastInProgress?: boolean;
    assetEventRowColoringEnabled?: boolean;
    isRosterProcessingEnabled?: boolean | null;
    defaultForecastMode?: number | null;
    showHighLowForecast?: boolean | null;
    ftpFileName?: string | null;
    isIntegrationProfileEnabled?: boolean;
    integrationProfileId?: number | null;
    isBdtEnabled?: boolean;
    referenceDocumentUrlPrefix?: string | null;
    createdBy?: string | null;
    createdDate?: Date | null;
    cloverRtumajorNumber?: number | null;
    isDeliveryForecasted?: boolean | null;
    isDataChannelSubscribeAvailable?: boolean;
    isDataChannelEventRulesAutoLinked?: boolean;
    isFederatedSecurityEnabled?: boolean;
    itemsPerAssetSummaryPage?: number | null;
    defaultRtuEventRuleGroupId?: number | null;
    mapType?: number;
    totalizedReadingTimeToleranceInMin?: number;
    useAssetSummaryTable?: boolean;
    ftpRtuData?: boolean;
    isAudibleEventNotificationEnabled?: boolean;
    hasParentDomain?: boolean;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.dataTimeStamp = _data["dataTimeStamp"] !== undefined ? _data["dataTimeStamp"] : <any>null;
            this.parentDomainId = _data["parentDomainId"] !== undefined ? _data["parentDomainId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.screenTitle = _data["screenTitle"] !== undefined ? _data["screenTitle"] : <any>null;
            this.logo = _data["logo"] !== undefined ? _data["logo"] : <any>null;
            this.disableUserLogins = _data["disableUserLogins"] !== undefined ? _data["disableUserLogins"] : <any>null;
            this.ftpFileFormat = _data["ftpFileFormat"] !== undefined ? _data["ftpFileFormat"] : <any>null;
            this.ftpOptions = _data["ftpOptions"] !== undefined ? _data["ftpOptions"] : <any>null;
            this.assetTitleTemplate = _data["assetTitleTemplate"] !== undefined ? _data["assetTitleTemplate"] : <any>null;
            this.assetSummaryTemplate = _data["assetSummaryTemplate"] !== undefined ? _data["assetSummaryTemplate"] : <any>null;
            this.isDeleted = _data["isDeleted"] !== undefined ? _data["isDeleted"] : <any>null;
            this.lastUpdatedDate = _data["lastUpdatedDate"] ? new Date(_data["lastUpdatedDate"].toString()) : <any>null;
            this.lastUpdateUserId = _data["lastUpdateUserId"] !== undefined ? _data["lastUpdateUserId"] : <any>null;
            this.maxGraphDays = _data["maxGraphDays"] !== undefined ? _data["maxGraphDays"] : <any>null;
            this.ftpTimeZone = _data["ftpTimeZone"] !== undefined ? _data["ftpTimeZone"] : <any>null;
            this.ftpTimeZoneId = _data["ftpTimeZoneId"] !== undefined ? _data["ftpTimeZoneId"] : <any>null;
            this.outboundEmailFromAddress = _data["outboundEmailFromAddress"] !== undefined ? _data["outboundEmailFromAddress"] : <any>null;
            this.trihedralRealm = _data["trihedralRealm"] !== undefined ? _data["trihedralRealm"] : <any>null;
            this.isMigrated = _data["isMigrated"] !== undefined ? _data["isMigrated"] : <any>null;
            this.isFtpProcessingEnabled = _data["isFtpProcessingEnabled"] !== undefined ? _data["isFtpProcessingEnabled"] : <any>null;
            this.isEventProcessingEnabled = _data["isEventProcessingEnabled"] !== undefined ? _data["isEventProcessingEnabled"] : <any>null;
            this.applicationTimeoutInSeconds = _data["applicationTimeoutInSeconds"] !== undefined ? _data["applicationTimeoutInSeconds"] : <any>null;
            this.isOrphanChannelScanEnabled = _data["isOrphanChannelScanEnabled"] !== undefined ? _data["isOrphanChannelScanEnabled"] : <any>null;
            this.customerReference = _data["customerReference"] !== undefined ? _data["customerReference"] : <any>null;
            this.defaultEventStateDescription = _data["defaultEventStateDescription"] !== undefined ? _data["defaultEventStateDescription"] : <any>null;
            this.autoGenerateFtpid = _data["autoGenerateFtpid"] !== undefined ? _data["autoGenerateFtpid"] : <any>null;
            this.forecastInProgress = _data["forecastInProgress"] !== undefined ? _data["forecastInProgress"] : <any>null;
            this.assetEventRowColoringEnabled = _data["assetEventRowColoringEnabled"] !== undefined ? _data["assetEventRowColoringEnabled"] : <any>null;
            this.isRosterProcessingEnabled = _data["isRosterProcessingEnabled"] !== undefined ? _data["isRosterProcessingEnabled"] : <any>null;
            this.defaultForecastMode = _data["defaultForecastMode"] !== undefined ? _data["defaultForecastMode"] : <any>null;
            this.showHighLowForecast = _data["showHighLowForecast"] !== undefined ? _data["showHighLowForecast"] : <any>null;
            this.ftpFileName = _data["ftpFileName"] !== undefined ? _data["ftpFileName"] : <any>null;
            this.isIntegrationProfileEnabled = _data["isIntegrationProfileEnabled"] !== undefined ? _data["isIntegrationProfileEnabled"] : <any>null;
            this.integrationProfileId = _data["integrationProfileId"] !== undefined ? _data["integrationProfileId"] : <any>null;
            this.isBdtEnabled = _data["isBdtEnabled"] !== undefined ? _data["isBdtEnabled"] : <any>null;
            this.referenceDocumentUrlPrefix = _data["referenceDocumentUrlPrefix"] !== undefined ? _data["referenceDocumentUrlPrefix"] : <any>null;
            this.createdBy = _data["createdBy"] !== undefined ? _data["createdBy"] : <any>null;
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>null;
            this.cloverRtumajorNumber = _data["cloverRtumajorNumber"] !== undefined ? _data["cloverRtumajorNumber"] : <any>null;
            this.isDeliveryForecasted = _data["isDeliveryForecasted"] !== undefined ? _data["isDeliveryForecasted"] : <any>null;
            this.isDataChannelSubscribeAvailable = _data["isDataChannelSubscribeAvailable"] !== undefined ? _data["isDataChannelSubscribeAvailable"] : <any>null;
            this.isDataChannelEventRulesAutoLinked = _data["isDataChannelEventRulesAutoLinked"] !== undefined ? _data["isDataChannelEventRulesAutoLinked"] : <any>null;
            this.isFederatedSecurityEnabled = _data["isFederatedSecurityEnabled"] !== undefined ? _data["isFederatedSecurityEnabled"] : <any>null;
            this.itemsPerAssetSummaryPage = _data["itemsPerAssetSummaryPage"] !== undefined ? _data["itemsPerAssetSummaryPage"] : <any>null;
            this.defaultRtuEventRuleGroupId = _data["defaultRtuEventRuleGroupId"] !== undefined ? _data["defaultRtuEventRuleGroupId"] : <any>null;
            this.mapType = _data["mapType"] !== undefined ? _data["mapType"] : <any>null;
            this.totalizedReadingTimeToleranceInMin = _data["totalizedReadingTimeToleranceInMin"] !== undefined ? _data["totalizedReadingTimeToleranceInMin"] : <any>null;
            this.useAssetSummaryTable = _data["useAssetSummaryTable"] !== undefined ? _data["useAssetSummaryTable"] : <any>null;
            this.ftpRtuData = _data["ftpRtuData"] !== undefined ? _data["ftpRtuData"] : <any>null;
            this.isAudibleEventNotificationEnabled = _data["isAudibleEventNotificationEnabled"] !== undefined ? _data["isAudibleEventNotificationEnabled"] : <any>null;
            this.hasParentDomain = _data["hasParentDomain"] !== undefined ? _data["hasParentDomain"] : <any>null;
        }
    }

    static fromJS(data: any): DomainModel {
        data = typeof data === 'object' ? data : {};
        let result = new DomainModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["dataTimeStamp"] = this.dataTimeStamp !== undefined ? this.dataTimeStamp : <any>null;
        data["parentDomainId"] = this.parentDomainId !== undefined ? this.parentDomainId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["screenTitle"] = this.screenTitle !== undefined ? this.screenTitle : <any>null;
        data["logo"] = this.logo !== undefined ? this.logo : <any>null;
        data["disableUserLogins"] = this.disableUserLogins !== undefined ? this.disableUserLogins : <any>null;
        data["ftpFileFormat"] = this.ftpFileFormat !== undefined ? this.ftpFileFormat : <any>null;
        data["ftpOptions"] = this.ftpOptions !== undefined ? this.ftpOptions : <any>null;
        data["assetTitleTemplate"] = this.assetTitleTemplate !== undefined ? this.assetTitleTemplate : <any>null;
        data["assetSummaryTemplate"] = this.assetSummaryTemplate !== undefined ? this.assetSummaryTemplate : <any>null;
        data["isDeleted"] = this.isDeleted !== undefined ? this.isDeleted : <any>null;
        data["lastUpdatedDate"] = this.lastUpdatedDate ? this.lastUpdatedDate.toISOString() : <any>null;
        data["lastUpdateUserId"] = this.lastUpdateUserId !== undefined ? this.lastUpdateUserId : <any>null;
        data["maxGraphDays"] = this.maxGraphDays !== undefined ? this.maxGraphDays : <any>null;
        data["ftpTimeZone"] = this.ftpTimeZone !== undefined ? this.ftpTimeZone : <any>null;
        data["ftpTimeZoneId"] = this.ftpTimeZoneId !== undefined ? this.ftpTimeZoneId : <any>null;
        data["outboundEmailFromAddress"] = this.outboundEmailFromAddress !== undefined ? this.outboundEmailFromAddress : <any>null;
        data["trihedralRealm"] = this.trihedralRealm !== undefined ? this.trihedralRealm : <any>null;
        data["isMigrated"] = this.isMigrated !== undefined ? this.isMigrated : <any>null;
        data["isFtpProcessingEnabled"] = this.isFtpProcessingEnabled !== undefined ? this.isFtpProcessingEnabled : <any>null;
        data["isEventProcessingEnabled"] = this.isEventProcessingEnabled !== undefined ? this.isEventProcessingEnabled : <any>null;
        data["applicationTimeoutInSeconds"] = this.applicationTimeoutInSeconds !== undefined ? this.applicationTimeoutInSeconds : <any>null;
        data["isOrphanChannelScanEnabled"] = this.isOrphanChannelScanEnabled !== undefined ? this.isOrphanChannelScanEnabled : <any>null;
        data["customerReference"] = this.customerReference !== undefined ? this.customerReference : <any>null;
        data["defaultEventStateDescription"] = this.defaultEventStateDescription !== undefined ? this.defaultEventStateDescription : <any>null;
        data["autoGenerateFtpid"] = this.autoGenerateFtpid !== undefined ? this.autoGenerateFtpid : <any>null;
        data["forecastInProgress"] = this.forecastInProgress !== undefined ? this.forecastInProgress : <any>null;
        data["assetEventRowColoringEnabled"] = this.assetEventRowColoringEnabled !== undefined ? this.assetEventRowColoringEnabled : <any>null;
        data["isRosterProcessingEnabled"] = this.isRosterProcessingEnabled !== undefined ? this.isRosterProcessingEnabled : <any>null;
        data["defaultForecastMode"] = this.defaultForecastMode !== undefined ? this.defaultForecastMode : <any>null;
        data["showHighLowForecast"] = this.showHighLowForecast !== undefined ? this.showHighLowForecast : <any>null;
        data["ftpFileName"] = this.ftpFileName !== undefined ? this.ftpFileName : <any>null;
        data["isIntegrationProfileEnabled"] = this.isIntegrationProfileEnabled !== undefined ? this.isIntegrationProfileEnabled : <any>null;
        data["integrationProfileId"] = this.integrationProfileId !== undefined ? this.integrationProfileId : <any>null;
        data["isBdtEnabled"] = this.isBdtEnabled !== undefined ? this.isBdtEnabled : <any>null;
        data["referenceDocumentUrlPrefix"] = this.referenceDocumentUrlPrefix !== undefined ? this.referenceDocumentUrlPrefix : <any>null;
        data["createdBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>null;
        data["cloverRtumajorNumber"] = this.cloverRtumajorNumber !== undefined ? this.cloverRtumajorNumber : <any>null;
        data["isDeliveryForecasted"] = this.isDeliveryForecasted !== undefined ? this.isDeliveryForecasted : <any>null;
        data["isDataChannelSubscribeAvailable"] = this.isDataChannelSubscribeAvailable !== undefined ? this.isDataChannelSubscribeAvailable : <any>null;
        data["isDataChannelEventRulesAutoLinked"] = this.isDataChannelEventRulesAutoLinked !== undefined ? this.isDataChannelEventRulesAutoLinked : <any>null;
        data["isFederatedSecurityEnabled"] = this.isFederatedSecurityEnabled !== undefined ? this.isFederatedSecurityEnabled : <any>null;
        data["itemsPerAssetSummaryPage"] = this.itemsPerAssetSummaryPage !== undefined ? this.itemsPerAssetSummaryPage : <any>null;
        data["defaultRtuEventRuleGroupId"] = this.defaultRtuEventRuleGroupId !== undefined ? this.defaultRtuEventRuleGroupId : <any>null;
        data["mapType"] = this.mapType !== undefined ? this.mapType : <any>null;
        data["totalizedReadingTimeToleranceInMin"] = this.totalizedReadingTimeToleranceInMin !== undefined ? this.totalizedReadingTimeToleranceInMin : <any>null;
        data["useAssetSummaryTable"] = this.useAssetSummaryTable !== undefined ? this.useAssetSummaryTable : <any>null;
        data["ftpRtuData"] = this.ftpRtuData !== undefined ? this.ftpRtuData : <any>null;
        data["isAudibleEventNotificationEnabled"] = this.isAudibleEventNotificationEnabled !== undefined ? this.isAudibleEventNotificationEnabled : <any>null;
        data["hasParentDomain"] = this.hasParentDomain !== undefined ? this.hasParentDomain : <any>null;
        return data;
    }
}

export class UserDetailModel {
    id?: string;
    userName?: string | null;
    companyName?: string | null;
    emailAddress?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    userTypeId?: UserType;
    mobilePhoneNumber?: string | null;
    workPhoneNumber?: string | null;
    smsNumber?: string | null;
    faxNumber?: string | null;
    emailToSMSAddress?: string | null;
    applicationTimeoutInSeconds?: number | null;
    isPrimary?: boolean;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
            this.companyName = _data["companyName"] !== undefined ? _data["companyName"] : <any>null;
            this.emailAddress = _data["emailAddress"] !== undefined ? _data["emailAddress"] : <any>null;
            this.firstName = _data["firstName"] !== undefined ? _data["firstName"] : <any>null;
            this.lastName = _data["lastName"] !== undefined ? _data["lastName"] : <any>null;
            this.userTypeId = _data["userTypeId"] !== undefined ? _data["userTypeId"] : <any>null;
            this.mobilePhoneNumber = _data["mobilePhoneNumber"] !== undefined ? _data["mobilePhoneNumber"] : <any>null;
            this.workPhoneNumber = _data["workPhoneNumber"] !== undefined ? _data["workPhoneNumber"] : <any>null;
            this.smsNumber = _data["smsNumber"] !== undefined ? _data["smsNumber"] : <any>null;
            this.faxNumber = _data["faxNumber"] !== undefined ? _data["faxNumber"] : <any>null;
            this.emailToSMSAddress = _data["emailToSMSAddress"] !== undefined ? _data["emailToSMSAddress"] : <any>null;
            this.applicationTimeoutInSeconds = _data["applicationTimeoutInSeconds"] !== undefined ? _data["applicationTimeoutInSeconds"] : <any>null;
            this.isPrimary = _data["isPrimary"] !== undefined ? _data["isPrimary"] : <any>null;
        }
    }

    static fromJS(data: any): UserDetailModel {
        data = typeof data === 'object' ? data : {};
        let result = new UserDetailModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["companyName"] = this.companyName !== undefined ? this.companyName : <any>null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : <any>null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["userTypeId"] = this.userTypeId !== undefined ? this.userTypeId : <any>null;
        data["mobilePhoneNumber"] = this.mobilePhoneNumber !== undefined ? this.mobilePhoneNumber : <any>null;
        data["workPhoneNumber"] = this.workPhoneNumber !== undefined ? this.workPhoneNumber : <any>null;
        data["smsNumber"] = this.smsNumber !== undefined ? this.smsNumber : <any>null;
        data["faxNumber"] = this.faxNumber !== undefined ? this.faxNumber : <any>null;
        data["emailToSMSAddress"] = this.emailToSMSAddress !== undefined ? this.emailToSMSAddress : <any>null;
        data["applicationTimeoutInSeconds"] = this.applicationTimeoutInSeconds !== undefined ? this.applicationTimeoutInSeconds : <any>null;
        data["isPrimary"] = this.isPrimary !== undefined ? this.isPrimary : <any>null;
        return data;
    }
}

export class UserWatchListDto {
    watchListId?: number;
    watchListTypeId!: WatchListTypeEnum;
    domainId!: string;
    userId!: string;
    guidItemId?: string | null;
    intItemId?: number | null;
    description?: string | null;

    init(_data?: any) {
        if (_data) {
            this.watchListId = _data["watchListId"] !== undefined ? _data["watchListId"] : <any>null;
            this.watchListTypeId = _data["watchListTypeId"] !== undefined ? _data["watchListTypeId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.guidItemId = _data["guidItemId"] !== undefined ? _data["guidItemId"] : <any>null;
            this.intItemId = _data["intItemId"] !== undefined ? _data["intItemId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
        }
    }

    static fromJS(data: any): UserWatchListDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserWatchListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["watchListId"] = this.watchListId !== undefined ? this.watchListId : <any>null;
        data["watchListTypeId"] = this.watchListTypeId !== undefined ? this.watchListTypeId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["guidItemId"] = this.guidItemId !== undefined ? this.guidItemId : <any>null;
        data["intItemId"] = this.intItemId !== undefined ? this.intItemId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        return data;
    }
}

export class RosterSummaryDto {
    rosterId?: number;
    description?: string | null;
    isEnabled?: boolean;
    userCount?: number;
    dataChannelCount?: number;

    init(_data?: any) {
        if (_data) {
            this.rosterId = _data["rosterId"] !== undefined ? _data["rosterId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.isEnabled = _data["isEnabled"] !== undefined ? _data["isEnabled"] : <any>null;
            this.userCount = _data["userCount"] !== undefined ? _data["userCount"] : <any>null;
            this.dataChannelCount = _data["dataChannelCount"] !== undefined ? _data["dataChannelCount"] : <any>null;
        }
    }

    static fromJS(data: any): RosterSummaryDto {
        data = typeof data === 'object' ? data : {};
        let result = new RosterSummaryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rosterId"] = this.rosterId !== undefined ? this.rosterId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["isEnabled"] = this.isEnabled !== undefined ? this.isEnabled : <any>null;
        data["userCount"] = this.userCount !== undefined ? this.userCount : <any>null;
        data["dataChannelCount"] = this.dataChannelCount !== undefined ? this.dataChannelCount : <any>null;
        return data;
    }
}

export class BaseDto {
    createdByUserName?: string | null;
    createdDate?: Date | null;
    lastUpdateUserName?: string | null;
    lastUpdatedDate?: Date | null;

    init(_data?: any) {
        if (_data) {
            this.createdByUserName = _data["createdByUserName"] !== undefined ? _data["createdByUserName"] : <any>null;
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>null;
            this.lastUpdateUserName = _data["lastUpdateUserName"] !== undefined ? _data["lastUpdateUserName"] : <any>null;
            this.lastUpdatedDate = _data["lastUpdatedDate"] ? new Date(_data["lastUpdatedDate"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): BaseDto {
        data = typeof data === 'object' ? data : {};
        let result = new BaseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createdByUserName"] = this.createdByUserName !== undefined ? this.createdByUserName : <any>null;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>null;
        data["lastUpdateUserName"] = this.lastUpdateUserName !== undefined ? this.lastUpdateUserName : <any>null;
        data["lastUpdatedDate"] = this.lastUpdatedDate ? this.lastUpdatedDate.toISOString() : <any>null;
        return data;
    }
}

export class RosterDto extends BaseDto {
    rosterId?: number;
    domainId?: string;
    description?: string | null;
    isEnabled?: boolean;
    userCount?: number;
    dataChannelCount?: number;
    rosterUsers?: RosterUserSummaryDto[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.rosterId = _data["rosterId"] !== undefined ? _data["rosterId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.isEnabled = _data["isEnabled"] !== undefined ? _data["isEnabled"] : <any>null;
            this.userCount = _data["userCount"] !== undefined ? _data["userCount"] : <any>null;
            this.dataChannelCount = _data["dataChannelCount"] !== undefined ? _data["dataChannelCount"] : <any>null;
            if (Array.isArray(_data["rosterUsers"])) {
                this.rosterUsers = [] as any;
                for (let item of _data["rosterUsers"])
                    this.rosterUsers!.push(RosterUserSummaryDto.fromJS(item));
            }
            else {
                this.rosterUsers = <any>null;
            }
        }
    }

    static fromJS(data: any): RosterDto {
        data = typeof data === 'object' ? data : {};
        let result = new RosterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rosterId"] = this.rosterId !== undefined ? this.rosterId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["isEnabled"] = this.isEnabled !== undefined ? this.isEnabled : <any>null;
        data["userCount"] = this.userCount !== undefined ? this.userCount : <any>null;
        data["dataChannelCount"] = this.dataChannelCount !== undefined ? this.dataChannelCount : <any>null;
        if (Array.isArray(this.rosterUsers)) {
            data["rosterUsers"] = [];
            for (let item of this.rosterUsers)
                data["rosterUsers"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export class RosterUserSummaryDto extends BaseDto {
    rosterUserId?: number;
    userId?: string;
    userName?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    companyName?: string | null;
    isEnabled?: boolean;
    isEmailSelected?: boolean;
    emailAddress?: string | null;
    emailMessageTemplateName?: string | null;
    emailMessageTemplateId?: number | null;
    isEmailToPhoneSelected?: boolean;
    emailToPhoneAddress?: string | null;
    emailToPhoneMessageTemplateName?: string | null;
    emailToPhoneMessageTemplateId?: number | null;
    isPushSelected?: boolean;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.rosterUserId = _data["rosterUserId"] !== undefined ? _data["rosterUserId"] : <any>null;
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
            this.firstName = _data["firstName"] !== undefined ? _data["firstName"] : <any>null;
            this.lastName = _data["lastName"] !== undefined ? _data["lastName"] : <any>null;
            this.companyName = _data["companyName"] !== undefined ? _data["companyName"] : <any>null;
            this.isEnabled = _data["isEnabled"] !== undefined ? _data["isEnabled"] : <any>null;
            this.isEmailSelected = _data["isEmailSelected"] !== undefined ? _data["isEmailSelected"] : <any>null;
            this.emailAddress = _data["emailAddress"] !== undefined ? _data["emailAddress"] : <any>null;
            this.emailMessageTemplateName = _data["emailMessageTemplateName"] !== undefined ? _data["emailMessageTemplateName"] : <any>null;
            this.emailMessageTemplateId = _data["emailMessageTemplateId"] !== undefined ? _data["emailMessageTemplateId"] : <any>null;
            this.isEmailToPhoneSelected = _data["isEmailToPhoneSelected"] !== undefined ? _data["isEmailToPhoneSelected"] : <any>null;
            this.emailToPhoneAddress = _data["emailToPhoneAddress"] !== undefined ? _data["emailToPhoneAddress"] : <any>null;
            this.emailToPhoneMessageTemplateName = _data["emailToPhoneMessageTemplateName"] !== undefined ? _data["emailToPhoneMessageTemplateName"] : <any>null;
            this.emailToPhoneMessageTemplateId = _data["emailToPhoneMessageTemplateId"] !== undefined ? _data["emailToPhoneMessageTemplateId"] : <any>null;
            this.isPushSelected = _data["isPushSelected"] !== undefined ? _data["isPushSelected"] : <any>null;
        }
    }

    static fromJS(data: any): RosterUserSummaryDto {
        data = typeof data === 'object' ? data : {};
        let result = new RosterUserSummaryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rosterUserId"] = this.rosterUserId !== undefined ? this.rosterUserId : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["companyName"] = this.companyName !== undefined ? this.companyName : <any>null;
        data["isEnabled"] = this.isEnabled !== undefined ? this.isEnabled : <any>null;
        data["isEmailSelected"] = this.isEmailSelected !== undefined ? this.isEmailSelected : <any>null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : <any>null;
        data["emailMessageTemplateName"] = this.emailMessageTemplateName !== undefined ? this.emailMessageTemplateName : <any>null;
        data["emailMessageTemplateId"] = this.emailMessageTemplateId !== undefined ? this.emailMessageTemplateId : <any>null;
        data["isEmailToPhoneSelected"] = this.isEmailToPhoneSelected !== undefined ? this.isEmailToPhoneSelected : <any>null;
        data["emailToPhoneAddress"] = this.emailToPhoneAddress !== undefined ? this.emailToPhoneAddress : <any>null;
        data["emailToPhoneMessageTemplateName"] = this.emailToPhoneMessageTemplateName !== undefined ? this.emailToPhoneMessageTemplateName : <any>null;
        data["emailToPhoneMessageTemplateId"] = this.emailToPhoneMessageTemplateId !== undefined ? this.emailToPhoneMessageTemplateId : <any>null;
        data["isPushSelected"] = this.isPushSelected !== undefined ? this.isPushSelected : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class RosterUserDto {
    rosterUserId?: number;
    userId?: string;
    isEnabled?: boolean;
    isEmailSelected?: boolean;
    emailMessageTemplateId?: number | null;
    isEmailToPhoneSelected?: boolean;
    emailToPhoneMessageTemplateId?: number | null;
    isPushSelected?: boolean;

    init(_data?: any) {
        if (_data) {
            this.rosterUserId = _data["rosterUserId"] !== undefined ? _data["rosterUserId"] : <any>null;
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.isEnabled = _data["isEnabled"] !== undefined ? _data["isEnabled"] : <any>null;
            this.isEmailSelected = _data["isEmailSelected"] !== undefined ? _data["isEmailSelected"] : <any>null;
            this.emailMessageTemplateId = _data["emailMessageTemplateId"] !== undefined ? _data["emailMessageTemplateId"] : <any>null;
            this.isEmailToPhoneSelected = _data["isEmailToPhoneSelected"] !== undefined ? _data["isEmailToPhoneSelected"] : <any>null;
            this.emailToPhoneMessageTemplateId = _data["emailToPhoneMessageTemplateId"] !== undefined ? _data["emailToPhoneMessageTemplateId"] : <any>null;
            this.isPushSelected = _data["isPushSelected"] !== undefined ? _data["isPushSelected"] : <any>null;
        }
    }

    static fromJS(data: any): RosterUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new RosterUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rosterUserId"] = this.rosterUserId !== undefined ? this.rosterUserId : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["isEnabled"] = this.isEnabled !== undefined ? this.isEnabled : <any>null;
        data["isEmailSelected"] = this.isEmailSelected !== undefined ? this.isEmailSelected : <any>null;
        data["emailMessageTemplateId"] = this.emailMessageTemplateId !== undefined ? this.emailMessageTemplateId : <any>null;
        data["isEmailToPhoneSelected"] = this.isEmailToPhoneSelected !== undefined ? this.isEmailToPhoneSelected : <any>null;
        data["emailToPhoneMessageTemplateId"] = this.emailToPhoneMessageTemplateId !== undefined ? this.emailToPhoneMessageTemplateId : <any>null;
        data["isPushSelected"] = this.isPushSelected !== undefined ? this.isPushSelected : <any>null;
        return data;
    }
}

export class RecordTemplateDto {
    recordTemplateId?: number;
    description?: string | null;

    init(_data?: any) {
        if (_data) {
            this.recordTemplateId = _data["recordTemplateId"] !== undefined ? _data["recordTemplateId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
        }
    }

    static fromJS(data: any): RecordTemplateDto {
        data = typeof data === 'object' ? data : {};
        let result = new RecordTemplateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["recordTemplateId"] = this.recordTemplateId !== undefined ? this.recordTemplateId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        return data;
    }
}

export class EvolveGetForecastReadingsByDataChannelIdResponse {
    dataChannelId?: string;
    timeOfForecast?: Date | null;
    forecasts?: EvolveForecastReadingResponse[] | null;

    init(_data?: any) {
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.timeOfForecast = _data["timeOfForecast"] ? new Date(_data["timeOfForecast"].toString()) : <any>null;
            if (Array.isArray(_data["forecasts"])) {
                this.forecasts = [] as any;
                for (let item of _data["forecasts"])
                    this.forecasts!.push(EvolveForecastReadingResponse.fromJS(item));
            }
            else {
                this.forecasts = <any>null;
            }
        }
    }

    static fromJS(data: any): EvolveGetForecastReadingsByDataChannelIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveGetForecastReadingsByDataChannelIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["timeOfForecast"] = this.timeOfForecast ? this.timeOfForecast.toISOString() : <any>null;
        if (Array.isArray(this.forecasts)) {
            data["forecasts"] = [];
            for (let item of this.forecasts)
                data["forecasts"].push(item.toJSON());
        }
        return data;
    }
}

export class EvolveForecastReadingResponse {
    logTime?: Date;
    highScaledValue?: number | null;
    estimateScaledValue?: number | null;
    lowScaledValue?: number | null;

    init(_data?: any) {
        if (_data) {
            this.logTime = _data["logTime"] ? new Date(_data["logTime"].toString()) : <any>null;
            this.highScaledValue = _data["highScaledValue"] !== undefined ? _data["highScaledValue"] : <any>null;
            this.estimateScaledValue = _data["estimateScaledValue"] !== undefined ? _data["estimateScaledValue"] : <any>null;
            this.lowScaledValue = _data["lowScaledValue"] !== undefined ? _data["lowScaledValue"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveForecastReadingResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveForecastReadingResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["logTime"] = this.logTime ? this.logTime.toISOString() : <any>null;
        data["highScaledValue"] = this.highScaledValue !== undefined ? this.highScaledValue : <any>null;
        data["estimateScaledValue"] = this.estimateScaledValue !== undefined ? this.estimateScaledValue : <any>null;
        data["lowScaledValue"] = this.lowScaledValue !== undefined ? this.lowScaledValue : <any>null;
        return data;
    }
}

export class EvolveGetForecastReadingsByDataChannelIdRequest {
    dataChannelId?: string;
    uomDisplayType?: UOMDisplayType;

    init(_data?: any) {
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.uomDisplayType = _data["uomDisplayType"] !== undefined ? _data["uomDisplayType"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveGetForecastReadingsByDataChannelIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveGetForecastReadingsByDataChannelIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["uomDisplayType"] = this.uomDisplayType !== undefined ? this.uomDisplayType : <any>null;
        return data;
    }
}

export enum UOMDisplayType {
    Scaled = 0,
    Display = 1,
    PercentFull = 2,
}

/** Azure storage data channel readings response. */
export class EvolveGetReadingsByDataChannelIdResponse {
    /** Data Channel Readings from azure storage. */
    readings?: EvolveReading[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["readings"])) {
                this.readings = [] as any;
                for (let item of _data["readings"])
                    this.readings!.push(EvolveReading.fromJS(item));
            }
            else {
                this.readings = <any>null;
            }
        }
    }

    static fromJS(data: any): EvolveGetReadingsByDataChannelIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveGetReadingsByDataChannelIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.readings)) {
            data["readings"] = [];
            for (let item of this.readings)
                data["readings"].push(item.toJSON());
        }
        return data;
    }
}

export class EvolveReading {
    logTime?: Date;
    value?: number | null;

    init(_data?: any) {
        if (_data) {
            this.logTime = _data["logTime"] ? new Date(_data["logTime"].toString()) : <any>null;
            this.value = _data["value"] !== undefined ? _data["value"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveReading {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveReading();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["logTime"] = this.logTime ? this.logTime.toISOString() : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        return data;
    }
}

/** The evolve reading apiRequest. */
export class EvolveGetReadingsByDataChannelIdRequest {
    /** Data channel id. */
    dataChannelId?: string;
    /** The start date for the query. */
    startDate?: Date | null;
    /** The end date. */
    endDate?: Date | null;
    /** UOM type in which the readings will be represented.
             */
    uomDisplayType?: UOMDisplayType;

    init(_data?: any) {
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>null;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>null;
            this.uomDisplayType = _data["uomDisplayType"] !== undefined ? _data["uomDisplayType"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveGetReadingsByDataChannelIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveGetReadingsByDataChannelIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>null;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>null;
        data["uomDisplayType"] = this.uomDisplayType !== undefined ? this.uomDisplayType : <any>null;
        return data;
    }
}

export class ProductInfoDto {
    id?: string;
    name?: string | null;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
        }
    }

    static fromJS(data: any): ProductInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        return data;
    }
}

export class ProductNameInfoDto {
    productId?: string;
    name?: string | null;
    description?: string | null;
    defaultDisplayUnits?: number | null;

    init(_data?: any) {
        if (_data) {
            this.productId = _data["productId"] !== undefined ? _data["productId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.defaultDisplayUnits = _data["defaultDisplayUnits"] !== undefined ? _data["defaultDisplayUnits"] : <any>null;
        }
    }

    static fromJS(data: any): ProductNameInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductNameInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId !== undefined ? this.productId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["defaultDisplayUnits"] = this.defaultDisplayUnits !== undefined ? this.defaultDisplayUnits : <any>null;
        return data;
    }
}

export abstract class ResponseModelBaseOfListOfProblemReport_SummaryDto {
    result?: ProblemReport_SummaryDto[] | null;
    errors?: ErrorResponseModel[] | null;
    hasErrors?: boolean;
    hasNoErrors?: boolean;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result!.push(ProblemReport_SummaryDto.fromJS(item));
            }
            else {
                this.result = <any>null;
            }
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                this.errors = <any>null;
            }
            this.hasErrors = _data["hasErrors"] !== undefined ? _data["hasErrors"] : <any>null;
            this.hasNoErrors = _data["hasNoErrors"] !== undefined ? _data["hasNoErrors"] : <any>null;
        }
    }

    static fromJS(data: any): ResponseModelBaseOfListOfProblemReport_SummaryDto {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'ResponseModelBaseOfListOfProblemReport_SummaryDto' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["hasErrors"] = this.hasErrors !== undefined ? this.hasErrors : <any>null;
        data["hasNoErrors"] = this.hasNoErrors !== undefined ? this.hasNoErrors : <any>null;
        return data;
    }
}

export class ResponseModelOfListOfProblemReport_SummaryDto extends ResponseModelBaseOfListOfProblemReport_SummaryDto {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): ResponseModelOfListOfProblemReport_SummaryDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResponseModelOfListOfProblemReport_SummaryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class PagingResponseModelOfListOfProblemReport_SummaryDto extends ResponseModelOfListOfProblemReport_SummaryDto {
    paging?: Paging | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.paging = _data["paging"] ? Paging.fromJS(_data["paging"]) : <any>null;
        }
    }

    static fromJS(data: any): PagingResponseModelOfListOfProblemReport_SummaryDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagingResponseModelOfListOfProblemReport_SummaryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["paging"] = this.paging ? this.paging.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class Paging {
    totalCount?: number;
    pageNumber?: number;
    pageSize?: number;
    totalPages?: number;

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"] !== undefined ? _data["totalCount"] : <any>null;
            this.pageNumber = _data["pageNumber"] !== undefined ? _data["pageNumber"] : <any>null;
            this.pageSize = _data["pageSize"] !== undefined ? _data["pageSize"] : <any>null;
            this.totalPages = _data["totalPages"] !== undefined ? _data["totalPages"] : <any>null;
        }
    }

    static fromJS(data: any): Paging {
        data = typeof data === 'object' ? data : {};
        let result = new Paging();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : <any>null;
        data["pageNumber"] = this.pageNumber !== undefined ? this.pageNumber : <any>null;
        data["pageSize"] = this.pageSize !== undefined ? this.pageSize : <any>null;
        data["totalPages"] = this.totalPages !== undefined ? this.totalPages : <any>null;
        return data;
    }
}

export class ProblemReport_SummaryDto {
    problemReportId?: number;
    problemNumber?: string | null;
    domainId?: string | null;
    description?: string | null;
    isClosed?: boolean;
    openDate?: Date;
    shipTo?: string | null;
    assetId?: string | null;
    assetTitle?: string | null;
    city?: string | null;
    state?: string | null;
    workOrderNumber?: number | null;
    currentOpStatus?: string | null;
    rtuId?: string | null;
    deviceId?: string | null;
    priorityTypeId?: ProblemReportPriorityEnum | null;
    businessUnit?: string | null;
    region?: string | null;
    tags?: string | null;

    init(_data?: any) {
        if (_data) {
            this.problemReportId = _data["problemReportId"] !== undefined ? _data["problemReportId"] : <any>null;
            this.problemNumber = _data["problemNumber"] !== undefined ? _data["problemNumber"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.isClosed = _data["isClosed"] !== undefined ? _data["isClosed"] : <any>null;
            this.openDate = _data["openDate"] ? new Date(_data["openDate"].toString()) : <any>null;
            this.shipTo = _data["shipTo"] !== undefined ? _data["shipTo"] : <any>null;
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.assetTitle = _data["assetTitle"] !== undefined ? _data["assetTitle"] : <any>null;
            this.city = _data["city"] !== undefined ? _data["city"] : <any>null;
            this.state = _data["state"] !== undefined ? _data["state"] : <any>null;
            this.workOrderNumber = _data["workOrderNumber"] !== undefined ? _data["workOrderNumber"] : <any>null;
            this.currentOpStatus = _data["currentOpStatus"] !== undefined ? _data["currentOpStatus"] : <any>null;
            this.rtuId = _data["rtuId"] !== undefined ? _data["rtuId"] : <any>null;
            this.deviceId = _data["deviceId"] !== undefined ? _data["deviceId"] : <any>null;
            this.priorityTypeId = _data["priorityTypeId"] !== undefined ? _data["priorityTypeId"] : <any>null;
            this.businessUnit = _data["businessUnit"] !== undefined ? _data["businessUnit"] : <any>null;
            this.region = _data["region"] !== undefined ? _data["region"] : <any>null;
            this.tags = _data["tags"] !== undefined ? _data["tags"] : <any>null;
        }
    }

    static fromJS(data: any): ProblemReport_SummaryDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemReport_SummaryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["problemReportId"] = this.problemReportId !== undefined ? this.problemReportId : <any>null;
        data["problemNumber"] = this.problemNumber !== undefined ? this.problemNumber : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["isClosed"] = this.isClosed !== undefined ? this.isClosed : <any>null;
        data["openDate"] = this.openDate ? this.openDate.toISOString() : <any>null;
        data["shipTo"] = this.shipTo !== undefined ? this.shipTo : <any>null;
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["assetTitle"] = this.assetTitle !== undefined ? this.assetTitle : <any>null;
        data["city"] = this.city !== undefined ? this.city : <any>null;
        data["state"] = this.state !== undefined ? this.state : <any>null;
        data["workOrderNumber"] = this.workOrderNumber !== undefined ? this.workOrderNumber : <any>null;
        data["currentOpStatus"] = this.currentOpStatus !== undefined ? this.currentOpStatus : <any>null;
        data["rtuId"] = this.rtuId !== undefined ? this.rtuId : <any>null;
        data["deviceId"] = this.deviceId !== undefined ? this.deviceId : <any>null;
        data["priorityTypeId"] = this.priorityTypeId !== undefined ? this.priorityTypeId : <any>null;
        data["businessUnit"] = this.businessUnit !== undefined ? this.businessUnit : <any>null;
        data["region"] = this.region !== undefined ? this.region : <any>null;
        data["tags"] = this.tags !== undefined ? this.tags : <any>null;
        return data;
    }
}

export enum ProblemReportPriorityEnum {
    Low = 1,
    Medium = 2,
    High = 3,
}

export enum ProblemReportViewEnum {
    Basic = 0,
    Advanced = 1,
    Plant = 2,
}

export enum ProblemReportFilter {
    ShipTo = 1,
    Rtu = 2,
    AssetTitle = 3,
    Distribution = 4,
    Owner = 5,
    PlantStatus = 6,
    ProblemId = 7,
}

export enum TimeRangeTypeEnum {
    None = 0,
    TwoHours = 1,
    FourHours = 2,
    TwelveHours = 3,
    OneDay = 4,
    TwoDay = 5,
    FourDay = 6,
    OneWeek = 7,
    TwoWeeks = 8,
    FourWeeks = 9,
    TwoMonths = 10,
    FourMonths = 11,
    SixMonths = 12,
    OneYear = 13,
    Custom = 14,
}

export enum SortDirectionEnum {
    Ascending = 0,
    Descending = 1,
}

export class ProblemReportDetailDto extends BaseDto {
    problemReportId?: number;
    problemReport?: ProblemReportDto | null;
    affectedDataChannels?: ProblemReportAffectedDataChannelDto[] | null;
    activityLog?: ProblemReportActivityLogDto[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.problemReportId = _data["problemReportId"] !== undefined ? _data["problemReportId"] : <any>null;
            this.problemReport = _data["problemReport"] ? ProblemReportDto.fromJS(_data["problemReport"]) : <any>null;
            if (Array.isArray(_data["affectedDataChannels"])) {
                this.affectedDataChannels = [] as any;
                for (let item of _data["affectedDataChannels"])
                    this.affectedDataChannels!.push(ProblemReportAffectedDataChannelDto.fromJS(item));
            }
            else {
                this.affectedDataChannels = <any>null;
            }
            if (Array.isArray(_data["activityLog"])) {
                this.activityLog = [] as any;
                for (let item of _data["activityLog"])
                    this.activityLog!.push(ProblemReportActivityLogDto.fromJS(item));
            }
            else {
                this.activityLog = <any>null;
            }
        }
    }

    static fromJS(data: any): ProblemReportDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemReportDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["problemReportId"] = this.problemReportId !== undefined ? this.problemReportId : <any>null;
        data["problemReport"] = this.problemReport ? this.problemReport.toJSON() : <any>null;
        if (Array.isArray(this.affectedDataChannels)) {
            data["affectedDataChannels"] = [];
            for (let item of this.affectedDataChannels)
                data["affectedDataChannels"].push(item.toJSON());
        }
        if (Array.isArray(this.activityLog)) {
            data["activityLog"] = [];
            for (let item of this.activityLog)
                data["activityLog"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export class ProblemReportDto {
    problemNumber?: string | null;
    domainId?: string;
    description?: string | null;
    primaryDataChannelInfo?: PrimaryDataChannelInfoDto | null;
    importanceLevelTypeId?: EventRuleImportanceLevel;
    reportedBy?: string | null;
    resolution?: string | null;
    statusTypeId?: ProblemReportStatusEnum;
    isDisableAutoClose?: boolean;
    currentOpStatus?: string | null;
    tags?: TagDto[] | null;
    statusInformation?: ProblemReportStatusDto | null;
    workOrder?: ProblemReportWorkOrderDto | null;

    init(_data?: any) {
        if (_data) {
            this.problemNumber = _data["problemNumber"] !== undefined ? _data["problemNumber"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.primaryDataChannelInfo = _data["primaryDataChannelInfo"] ? PrimaryDataChannelInfoDto.fromJS(_data["primaryDataChannelInfo"]) : <any>null;
            this.importanceLevelTypeId = _data["importanceLevelTypeId"] !== undefined ? _data["importanceLevelTypeId"] : <any>null;
            this.reportedBy = _data["reportedBy"] !== undefined ? _data["reportedBy"] : <any>null;
            this.resolution = _data["resolution"] !== undefined ? _data["resolution"] : <any>null;
            this.statusTypeId = _data["statusTypeId"] !== undefined ? _data["statusTypeId"] : <any>null;
            this.isDisableAutoClose = _data["isDisableAutoClose"] !== undefined ? _data["isDisableAutoClose"] : <any>null;
            this.currentOpStatus = _data["currentOpStatus"] !== undefined ? _data["currentOpStatus"] : <any>null;
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags!.push(TagDto.fromJS(item));
            }
            else {
                this.tags = <any>null;
            }
            this.statusInformation = _data["statusInformation"] ? ProblemReportStatusDto.fromJS(_data["statusInformation"]) : <any>null;
            this.workOrder = _data["workOrder"] ? ProblemReportWorkOrderDto.fromJS(_data["workOrder"]) : <any>null;
        }
    }

    static fromJS(data: any): ProblemReportDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemReportDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["problemNumber"] = this.problemNumber !== undefined ? this.problemNumber : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["primaryDataChannelInfo"] = this.primaryDataChannelInfo ? this.primaryDataChannelInfo.toJSON() : <any>null;
        data["importanceLevelTypeId"] = this.importanceLevelTypeId !== undefined ? this.importanceLevelTypeId : <any>null;
        data["reportedBy"] = this.reportedBy !== undefined ? this.reportedBy : <any>null;
        data["resolution"] = this.resolution !== undefined ? this.resolution : <any>null;
        data["statusTypeId"] = this.statusTypeId !== undefined ? this.statusTypeId : <any>null;
        data["isDisableAutoClose"] = this.isDisableAutoClose !== undefined ? this.isDisableAutoClose : <any>null;
        data["currentOpStatus"] = this.currentOpStatus !== undefined ? this.currentOpStatus : <any>null;
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item.toJSON());
        }
        data["statusInformation"] = this.statusInformation ? this.statusInformation.toJSON() : <any>null;
        data["workOrder"] = this.workOrder ? this.workOrder.toJSON() : <any>null;
        return data;
    }
}

export class PrimaryDataChannelInfoDto {
    businessUnit?: string | null;
    region?: string | null;
    assetId?: string;
    assetTitle?: string | null;
    rtuId?: string | null;
    deviceId?: string | null;
    deviceInformation?: string | null;

    init(_data?: any) {
        if (_data) {
            this.businessUnit = _data["businessUnit"] !== undefined ? _data["businessUnit"] : <any>null;
            this.region = _data["region"] !== undefined ? _data["region"] : <any>null;
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.assetTitle = _data["assetTitle"] !== undefined ? _data["assetTitle"] : <any>null;
            this.rtuId = _data["rtuId"] !== undefined ? _data["rtuId"] : <any>null;
            this.deviceId = _data["deviceId"] !== undefined ? _data["deviceId"] : <any>null;
            this.deviceInformation = _data["deviceInformation"] !== undefined ? _data["deviceInformation"] : <any>null;
        }
    }

    static fromJS(data: any): PrimaryDataChannelInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new PrimaryDataChannelInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["businessUnit"] = this.businessUnit !== undefined ? this.businessUnit : <any>null;
        data["region"] = this.region !== undefined ? this.region : <any>null;
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["assetTitle"] = this.assetTitle !== undefined ? this.assetTitle : <any>null;
        data["rtuId"] = this.rtuId !== undefined ? this.rtuId : <any>null;
        data["deviceId"] = this.deviceId !== undefined ? this.deviceId : <any>null;
        data["deviceInformation"] = this.deviceInformation !== undefined ? this.deviceInformation : <any>null;
        return data;
    }
}

export enum EventRuleImportanceLevel {
    Normal = 0,
    Information = 1,
    Warning = 2,
    High = 3,
    Urgent = 4,
}

export enum ProblemReportStatusEnum {
    Open = 0,
    Closed = 1,
}

export class ProblemReportStatusDto {
    customerPriorityTypeId?: ProblemReportPriorityEnum | null;
    openDate?: Date;
    fixDate?: Date | null;

    init(_data?: any) {
        if (_data) {
            this.customerPriorityTypeId = _data["customerPriorityTypeId"] !== undefined ? _data["customerPriorityTypeId"] : <any>null;
            this.openDate = _data["openDate"] ? new Date(_data["openDate"].toString()) : <any>null;
            this.fixDate = _data["fixDate"] ? new Date(_data["fixDate"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): ProblemReportStatusDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemReportStatusDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerPriorityTypeId"] = this.customerPriorityTypeId !== undefined ? this.customerPriorityTypeId : <any>null;
        data["openDate"] = this.openDate ? this.openDate.toISOString() : <any>null;
        data["fixDate"] = this.fixDate ? this.fixDate.toISOString() : <any>null;
        return data;
    }
}

export class ProblemReportWorkOrderDto {
    workOrderNumber?: number | null;
    workOrderInitiatedDate?: Date | null;
    workOrderClosedDate?: Date | null;

    init(_data?: any) {
        if (_data) {
            this.workOrderNumber = _data["workOrderNumber"] !== undefined ? _data["workOrderNumber"] : <any>null;
            this.workOrderInitiatedDate = _data["workOrderInitiatedDate"] ? new Date(_data["workOrderInitiatedDate"].toString()) : <any>null;
            this.workOrderClosedDate = _data["workOrderClosedDate"] ? new Date(_data["workOrderClosedDate"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): ProblemReportWorkOrderDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemReportWorkOrderDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["workOrderNumber"] = this.workOrderNumber !== undefined ? this.workOrderNumber : <any>null;
        data["workOrderInitiatedDate"] = this.workOrderInitiatedDate ? this.workOrderInitiatedDate.toISOString() : <any>null;
        data["workOrderClosedDate"] = this.workOrderClosedDate ? this.workOrderClosedDate.toISOString() : <any>null;
        return data;
    }
}

export class ProblemReportAffectedDataChannelDto {
    dataChannelId?: string;
    description?: string | null;
    isPrimary?: boolean | null;
    isFaulty?: boolean | null;
    shipToNumber?: string | null;
    assetId?: string | null;
    assetTitle?: string | null;
    assetTimezoneId?: number | null;
    rtuId?: string | null;
    deviceId?: string | null;
    channelNumber?: string | null;
    scaledMax?: number | null;
    deviceNetworkAddress?: string | null;
    businessUnit?: string | null;
    region?: string | null;

    init(_data?: any) {
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.isPrimary = _data["isPrimary"] !== undefined ? _data["isPrimary"] : <any>null;
            this.isFaulty = _data["isFaulty"] !== undefined ? _data["isFaulty"] : <any>null;
            this.shipToNumber = _data["shipToNumber"] !== undefined ? _data["shipToNumber"] : <any>null;
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.assetTitle = _data["assetTitle"] !== undefined ? _data["assetTitle"] : <any>null;
            this.assetTimezoneId = _data["assetTimezoneId"] !== undefined ? _data["assetTimezoneId"] : <any>null;
            this.rtuId = _data["rtuId"] !== undefined ? _data["rtuId"] : <any>null;
            this.deviceId = _data["deviceId"] !== undefined ? _data["deviceId"] : <any>null;
            this.channelNumber = _data["channelNumber"] !== undefined ? _data["channelNumber"] : <any>null;
            this.scaledMax = _data["scaledMax"] !== undefined ? _data["scaledMax"] : <any>null;
            this.deviceNetworkAddress = _data["deviceNetworkAddress"] !== undefined ? _data["deviceNetworkAddress"] : <any>null;
            this.businessUnit = _data["businessUnit"] !== undefined ? _data["businessUnit"] : <any>null;
            this.region = _data["region"] !== undefined ? _data["region"] : <any>null;
        }
    }

    static fromJS(data: any): ProblemReportAffectedDataChannelDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemReportAffectedDataChannelDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["isPrimary"] = this.isPrimary !== undefined ? this.isPrimary : <any>null;
        data["isFaulty"] = this.isFaulty !== undefined ? this.isFaulty : <any>null;
        data["shipToNumber"] = this.shipToNumber !== undefined ? this.shipToNumber : <any>null;
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["assetTitle"] = this.assetTitle !== undefined ? this.assetTitle : <any>null;
        data["assetTimezoneId"] = this.assetTimezoneId !== undefined ? this.assetTimezoneId : <any>null;
        data["rtuId"] = this.rtuId !== undefined ? this.rtuId : <any>null;
        data["deviceId"] = this.deviceId !== undefined ? this.deviceId : <any>null;
        data["channelNumber"] = this.channelNumber !== undefined ? this.channelNumber : <any>null;
        data["scaledMax"] = this.scaledMax !== undefined ? this.scaledMax : <any>null;
        data["deviceNetworkAddress"] = this.deviceNetworkAddress !== undefined ? this.deviceNetworkAddress : <any>null;
        data["businessUnit"] = this.businessUnit !== undefined ? this.businessUnit : <any>null;
        data["region"] = this.region !== undefined ? this.region : <any>null;
        return data;
    }
}

export class ProblemReportActivityLogDto extends BaseDto {
    problemReportActivityLogId?: number;
    notes?: string | null;
    isSystem?: boolean;
    createdByFirstName?: string | null;
    createdByLastName?: string | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.problemReportActivityLogId = _data["problemReportActivityLogId"] !== undefined ? _data["problemReportActivityLogId"] : <any>null;
            this.notes = _data["notes"] !== undefined ? _data["notes"] : <any>null;
            this.isSystem = _data["isSystem"] !== undefined ? _data["isSystem"] : <any>null;
            this.createdByFirstName = _data["createdByFirstName"] !== undefined ? _data["createdByFirstName"] : <any>null;
            this.createdByLastName = _data["createdByLastName"] !== undefined ? _data["createdByLastName"] : <any>null;
        }
    }

    static fromJS(data: any): ProblemReportActivityLogDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemReportActivityLogDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["problemReportActivityLogId"] = this.problemReportActivityLogId !== undefined ? this.problemReportActivityLogId : <any>null;
        data["notes"] = this.notes !== undefined ? this.notes : <any>null;
        data["isSystem"] = this.isSystem !== undefined ? this.isSystem : <any>null;
        data["createdByFirstName"] = this.createdByFirstName !== undefined ? this.createdByFirstName : <any>null;
        data["createdByLastName"] = this.createdByLastName !== undefined ? this.createdByLastName : <any>null;
        super.toJSON(data);
        return data;
    }
}

export abstract class ResponseModelBaseOfListOfDataChannel_SummaryDto {
    result?: DataChannel_SummaryDto[] | null;
    errors?: ErrorResponseModel[] | null;
    hasErrors?: boolean;
    hasNoErrors?: boolean;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result!.push(DataChannel_SummaryDto.fromJS(item));
            }
            else {
                this.result = <any>null;
            }
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ErrorResponseModel.fromJS(item));
            }
            else {
                this.errors = <any>null;
            }
            this.hasErrors = _data["hasErrors"] !== undefined ? _data["hasErrors"] : <any>null;
            this.hasNoErrors = _data["hasNoErrors"] !== undefined ? _data["hasNoErrors"] : <any>null;
        }
    }

    static fromJS(data: any): ResponseModelBaseOfListOfDataChannel_SummaryDto {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'ResponseModelBaseOfListOfDataChannel_SummaryDto' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["hasErrors"] = this.hasErrors !== undefined ? this.hasErrors : <any>null;
        data["hasNoErrors"] = this.hasNoErrors !== undefined ? this.hasNoErrors : <any>null;
        return data;
    }
}

export class ResponseModelOfListOfDataChannel_SummaryDto extends ResponseModelBaseOfListOfDataChannel_SummaryDto {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): ResponseModelOfListOfDataChannel_SummaryDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResponseModelOfListOfDataChannel_SummaryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class PagingResponseModelOfListOfDataChannel_SummaryDto extends ResponseModelOfListOfDataChannel_SummaryDto {
    paging?: Paging | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.paging = _data["paging"] ? Paging.fromJS(_data["paging"]) : <any>null;
        }
    }

    static fromJS(data: any): PagingResponseModelOfListOfDataChannel_SummaryDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagingResponseModelOfListOfDataChannel_SummaryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["paging"] = this.paging ? this.paging.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class DataChannel_SummaryDto {
    assetId?: string | null;
    dataChannelId?: string;
    description?: string | null;
    domainId?: string;
    rtuId?: string;
    shipToNumber?: string | null;
    assetTitle?: string | null;
    deviceId?: string | null;
    rtuDomainId?: string;
    channelNumber?: string | null;
    deviceNetworkAddress?: string | null;
    businessUnit?: string | null;
    region?: string | null;
    assetTimezoneId?: number | null;
    scaledMax?: number | null;

    init(_data?: any) {
        if (_data) {
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.rtuId = _data["rtuId"] !== undefined ? _data["rtuId"] : <any>null;
            this.shipToNumber = _data["shipToNumber"] !== undefined ? _data["shipToNumber"] : <any>null;
            this.assetTitle = _data["assetTitle"] !== undefined ? _data["assetTitle"] : <any>null;
            this.deviceId = _data["deviceId"] !== undefined ? _data["deviceId"] : <any>null;
            this.rtuDomainId = _data["rtuDomainId"] !== undefined ? _data["rtuDomainId"] : <any>null;
            this.channelNumber = _data["channelNumber"] !== undefined ? _data["channelNumber"] : <any>null;
            this.deviceNetworkAddress = _data["deviceNetworkAddress"] !== undefined ? _data["deviceNetworkAddress"] : <any>null;
            this.businessUnit = _data["businessUnit"] !== undefined ? _data["businessUnit"] : <any>null;
            this.region = _data["region"] !== undefined ? _data["region"] : <any>null;
            this.assetTimezoneId = _data["assetTimezoneId"] !== undefined ? _data["assetTimezoneId"] : <any>null;
            this.scaledMax = _data["scaledMax"] !== undefined ? _data["scaledMax"] : <any>null;
        }
    }

    static fromJS(data: any): DataChannel_SummaryDto {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannel_SummaryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["rtuId"] = this.rtuId !== undefined ? this.rtuId : <any>null;
        data["shipToNumber"] = this.shipToNumber !== undefined ? this.shipToNumber : <any>null;
        data["assetTitle"] = this.assetTitle !== undefined ? this.assetTitle : <any>null;
        data["deviceId"] = this.deviceId !== undefined ? this.deviceId : <any>null;
        data["rtuDomainId"] = this.rtuDomainId !== undefined ? this.rtuDomainId : <any>null;
        data["channelNumber"] = this.channelNumber !== undefined ? this.channelNumber : <any>null;
        data["deviceNetworkAddress"] = this.deviceNetworkAddress !== undefined ? this.deviceNetworkAddress : <any>null;
        data["businessUnit"] = this.businessUnit !== undefined ? this.businessUnit : <any>null;
        data["region"] = this.region !== undefined ? this.region : <any>null;
        data["assetTimezoneId"] = this.assetTimezoneId !== undefined ? this.assetTimezoneId : <any>null;
        data["scaledMax"] = this.scaledMax !== undefined ? this.scaledMax : <any>null;
        return data;
    }
}

export enum DataChannelFilter {
    ShipTo = 0,
    RTU = 1,
    AssetTitle = 2,
}

export class UserProblemReportSettingDto {
    userId?: string;
    domainId?: string;
    currentListProblemReportViewId?: ProblemReportViewEnum;
    currentEditorProblemReportViewId?: ProblemReportViewEnum;
    showAlarmVerified?: boolean | null;
    filterBy?: string | null;
    filterText?: string | null;
    tagIdList?: number[] | null;
    showStatusValue?: ProblemReportStatusEnum;
    timeRange?: TimeRangeTypeEnum;
    fromDate?: Date | null;
    toDate?: Date | null;
    isLoaded?: boolean;

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.currentListProblemReportViewId = _data["currentListProblemReportViewId"] !== undefined ? _data["currentListProblemReportViewId"] : <any>null;
            this.currentEditorProblemReportViewId = _data["currentEditorProblemReportViewId"] !== undefined ? _data["currentEditorProblemReportViewId"] : <any>null;
            this.showAlarmVerified = _data["showAlarmVerified"] !== undefined ? _data["showAlarmVerified"] : <any>null;
            this.filterBy = _data["filterBy"] !== undefined ? _data["filterBy"] : <any>null;
            this.filterText = _data["filterText"] !== undefined ? _data["filterText"] : <any>null;
            if (Array.isArray(_data["tagIdList"])) {
                this.tagIdList = [] as any;
                for (let item of _data["tagIdList"])
                    this.tagIdList!.push(item);
            }
            else {
                this.tagIdList = <any>null;
            }
            this.showStatusValue = _data["showStatusValue"] !== undefined ? _data["showStatusValue"] : <any>null;
            this.timeRange = _data["timeRange"] !== undefined ? _data["timeRange"] : <any>null;
            this.fromDate = _data["fromDate"] ? new Date(_data["fromDate"].toString()) : <any>null;
            this.toDate = _data["toDate"] ? new Date(_data["toDate"].toString()) : <any>null;
            this.isLoaded = _data["isLoaded"] !== undefined ? _data["isLoaded"] : <any>null;
        }
    }

    static fromJS(data: any): UserProblemReportSettingDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserProblemReportSettingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["currentListProblemReportViewId"] = this.currentListProblemReportViewId !== undefined ? this.currentListProblemReportViewId : <any>null;
        data["currentEditorProblemReportViewId"] = this.currentEditorProblemReportViewId !== undefined ? this.currentEditorProblemReportViewId : <any>null;
        data["showAlarmVerified"] = this.showAlarmVerified !== undefined ? this.showAlarmVerified : <any>null;
        data["filterBy"] = this.filterBy !== undefined ? this.filterBy : <any>null;
        data["filterText"] = this.filterText !== undefined ? this.filterText : <any>null;
        if (Array.isArray(this.tagIdList)) {
            data["tagIdList"] = [];
            for (let item of this.tagIdList)
                data["tagIdList"].push(item);
        }
        data["showStatusValue"] = this.showStatusValue !== undefined ? this.showStatusValue : <any>null;
        data["timeRange"] = this.timeRange !== undefined ? this.timeRange : <any>null;
        data["fromDate"] = this.fromDate ? this.fromDate.toISOString() : <any>null;
        data["toDate"] = this.toDate ? this.toDate.toISOString() : <any>null;
        data["isLoaded"] = this.isLoaded !== undefined ? this.isLoaded : <any>null;
        return data;
    }
}

export class MessageTemplateDto extends BaseDto {
    messageTemplateId?: number;
    description?: string | null;
    rosterCount?: number;
    messageTemplateTypeId?: MessageTemplateCategory;
    domainId?: string;
    timeZoneTypeId?: TimeZoneTypeEnum;
    timeZoneId?: number | null;
    dateFormat?: string | null;
    timeFormat?: string | null;
    subjectTemplate?: string | null;
    bodyTemplate?: string | null;
    replyTo?: string | null;
    sendToAddressList?: string | null;
    sendToCcAddressList?: string | null;
    sendToBccAddressList?: string | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.messageTemplateId = _data["messageTemplateId"] !== undefined ? _data["messageTemplateId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.rosterCount = _data["rosterCount"] !== undefined ? _data["rosterCount"] : <any>null;
            this.messageTemplateTypeId = _data["messageTemplateTypeId"] !== undefined ? _data["messageTemplateTypeId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.timeZoneTypeId = _data["timeZoneTypeId"] !== undefined ? _data["timeZoneTypeId"] : <any>null;
            this.timeZoneId = _data["timeZoneId"] !== undefined ? _data["timeZoneId"] : <any>null;
            this.dateFormat = _data["dateFormat"] !== undefined ? _data["dateFormat"] : <any>null;
            this.timeFormat = _data["timeFormat"] !== undefined ? _data["timeFormat"] : <any>null;
            this.subjectTemplate = _data["subjectTemplate"] !== undefined ? _data["subjectTemplate"] : <any>null;
            this.bodyTemplate = _data["bodyTemplate"] !== undefined ? _data["bodyTemplate"] : <any>null;
            this.replyTo = _data["replyTo"] !== undefined ? _data["replyTo"] : <any>null;
            this.sendToAddressList = _data["sendToAddressList"] !== undefined ? _data["sendToAddressList"] : <any>null;
            this.sendToCcAddressList = _data["sendToCcAddressList"] !== undefined ? _data["sendToCcAddressList"] : <any>null;
            this.sendToBccAddressList = _data["sendToBccAddressList"] !== undefined ? _data["sendToBccAddressList"] : <any>null;
        }
    }

    static fromJS(data: any): MessageTemplateDto {
        data = typeof data === 'object' ? data : {};
        let result = new MessageTemplateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["messageTemplateId"] = this.messageTemplateId !== undefined ? this.messageTemplateId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["rosterCount"] = this.rosterCount !== undefined ? this.rosterCount : <any>null;
        data["messageTemplateTypeId"] = this.messageTemplateTypeId !== undefined ? this.messageTemplateTypeId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["timeZoneTypeId"] = this.timeZoneTypeId !== undefined ? this.timeZoneTypeId : <any>null;
        data["timeZoneId"] = this.timeZoneId !== undefined ? this.timeZoneId : <any>null;
        data["dateFormat"] = this.dateFormat !== undefined ? this.dateFormat : <any>null;
        data["timeFormat"] = this.timeFormat !== undefined ? this.timeFormat : <any>null;
        data["subjectTemplate"] = this.subjectTemplate !== undefined ? this.subjectTemplate : <any>null;
        data["bodyTemplate"] = this.bodyTemplate !== undefined ? this.bodyTemplate : <any>null;
        data["replyTo"] = this.replyTo !== undefined ? this.replyTo : <any>null;
        data["sendToAddressList"] = this.sendToAddressList !== undefined ? this.sendToAddressList : <any>null;
        data["sendToCcAddressList"] = this.sendToCcAddressList !== undefined ? this.sendToCcAddressList : <any>null;
        data["sendToBccAddressList"] = this.sendToBccAddressList !== undefined ? this.sendToBccAddressList : <any>null;
        super.toJSON(data);
        return data;
    }
}

export enum MessageTemplateCategory {
    Roster = 0,
    ProblemReport = 1,
}

export enum TimeZoneTypeEnum {
    DomainAvailableTimeZone = 1,
    AssetLocalTimeZone = 2,
}

export class PacketRecordDto {
    packetId?: number | null;
    deviceId?: string | null;
    channelNumber?: string | null;
    payload?: string | null;
    additionalInformation?: string | null;
    communicationDirection?: RtuCommDirection | null;
    communicationMethod?: TelecommunicationsCarrier | null;
    address?: string | null;
    serverTimestamp?: Date;
    rtuTimestamp?: Date | null;
    packetType?: RtuPacketType | null;
    sequenceNumber?: number | null;
    processState?: RtuPacketStatus | null;
    processingCounter?: number | null;
    timeZoneId?: number;
    packetTypeGroup?: RtuPacketCategory | null;

    init(_data?: any) {
        if (_data) {
            this.packetId = _data["packetId"] !== undefined ? _data["packetId"] : <any>null;
            this.deviceId = _data["deviceId"] !== undefined ? _data["deviceId"] : <any>null;
            this.channelNumber = _data["channelNumber"] !== undefined ? _data["channelNumber"] : <any>null;
            this.payload = _data["payload"] !== undefined ? _data["payload"] : <any>null;
            this.additionalInformation = _data["additionalInformation"] !== undefined ? _data["additionalInformation"] : <any>null;
            this.communicationDirection = _data["communicationDirection"] !== undefined ? _data["communicationDirection"] : <any>null;
            this.communicationMethod = _data["communicationMethod"] !== undefined ? _data["communicationMethod"] : <any>null;
            this.address = _data["address"] !== undefined ? _data["address"] : <any>null;
            this.serverTimestamp = _data["serverTimestamp"] ? new Date(_data["serverTimestamp"].toString()) : <any>null;
            this.rtuTimestamp = _data["rtuTimestamp"] ? new Date(_data["rtuTimestamp"].toString()) : <any>null;
            this.packetType = _data["packetType"] !== undefined ? _data["packetType"] : <any>null;
            this.sequenceNumber = _data["sequenceNumber"] !== undefined ? _data["sequenceNumber"] : <any>null;
            this.processState = _data["processState"] !== undefined ? _data["processState"] : <any>null;
            this.processingCounter = _data["processingCounter"] !== undefined ? _data["processingCounter"] : <any>null;
            this.timeZoneId = _data["timeZoneId"] !== undefined ? _data["timeZoneId"] : <any>null;
            this.packetTypeGroup = _data["packetTypeGroup"] !== undefined ? _data["packetTypeGroup"] : <any>null;
        }
    }

    static fromJS(data: any): PacketRecordDto {
        data = typeof data === 'object' ? data : {};
        let result = new PacketRecordDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["packetId"] = this.packetId !== undefined ? this.packetId : <any>null;
        data["deviceId"] = this.deviceId !== undefined ? this.deviceId : <any>null;
        data["channelNumber"] = this.channelNumber !== undefined ? this.channelNumber : <any>null;
        data["payload"] = this.payload !== undefined ? this.payload : <any>null;
        data["additionalInformation"] = this.additionalInformation !== undefined ? this.additionalInformation : <any>null;
        data["communicationDirection"] = this.communicationDirection !== undefined ? this.communicationDirection : <any>null;
        data["communicationMethod"] = this.communicationMethod !== undefined ? this.communicationMethod : <any>null;
        data["address"] = this.address !== undefined ? this.address : <any>null;
        data["serverTimestamp"] = this.serverTimestamp ? this.serverTimestamp.toISOString() : <any>null;
        data["rtuTimestamp"] = this.rtuTimestamp ? this.rtuTimestamp.toISOString() : <any>null;
        data["packetType"] = this.packetType !== undefined ? this.packetType : <any>null;
        data["sequenceNumber"] = this.sequenceNumber !== undefined ? this.sequenceNumber : <any>null;
        data["processState"] = this.processState !== undefined ? this.processState : <any>null;
        data["processingCounter"] = this.processingCounter !== undefined ? this.processingCounter : <any>null;
        data["timeZoneId"] = this.timeZoneId !== undefined ? this.timeZoneId : <any>null;
        data["packetTypeGroup"] = this.packetTypeGroup !== undefined ? this.packetTypeGroup : <any>null;
        return data;
    }
}

export class RetrieveRTUNoteEditComponentsByIdRequest {
    rtuId?: string;

    init(_data?: any) {
        if (_data) {
            this.rtuId = _data["rtuId"] !== undefined ? _data["rtuId"] : <any>null;
        }
    }

    static fromJS(data: any): RetrieveRTUNoteEditComponentsByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveRTUNoteEditComponentsByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rtuId"] = this.rtuId !== undefined ? this.rtuId : <any>null;
        return data;
    }
}

export class EvolveRetrieveRtuNoteEditComponentsByIdRequest extends RetrieveRTUNoteEditComponentsByIdRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveRtuNoteEditComponentsByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveRtuNoteEditComponentsByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class SaveRTUNoteRequest extends WcfProxyUserDetails {
    rtuNote?: EditRTUNote | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.rtuNote = _data["rtuNote"] ? EditRTUNote.fromJS(_data["rtuNote"]) : <any>null;
        }
    }

    static fromJS(data: any): SaveRTUNoteRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SaveRTUNoteRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rtuNote"] = this.rtuNote ? this.rtuNote.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveSaveRtuNoteRequest extends SaveRTUNoteRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveSaveRtuNoteRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveRtuNoteRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class EditRTUNote extends EditBase {
    rtuId?: string;
    domainId?: string;
    rtuType?: RTUType;
    category?: RTUCategoryType;
    transportType?: RTUTransportType | null;
    deviceId?: string | null;
    description?: string | null;
    temporaryNotes?: string | null;
    permanentNotes?: string | null;
    installationDate?: Date | null;
    modelDescription?: string | null;
    functionalLocation?: string | null;
    simIntegratedCircuitCardId?: string | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.rtuId = _data["rtuId"] !== undefined ? _data["rtuId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.rtuType = _data["rtuType"] !== undefined ? _data["rtuType"] : <any>null;
            this.category = _data["category"] !== undefined ? _data["category"] : <any>null;
            this.transportType = _data["transportType"] !== undefined ? _data["transportType"] : <any>null;
            this.deviceId = _data["deviceId"] !== undefined ? _data["deviceId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.temporaryNotes = _data["temporaryNotes"] !== undefined ? _data["temporaryNotes"] : <any>null;
            this.permanentNotes = _data["permanentNotes"] !== undefined ? _data["permanentNotes"] : <any>null;
            this.installationDate = _data["installationDate"] ? new Date(_data["installationDate"].toString()) : <any>null;
            this.modelDescription = _data["modelDescription"] !== undefined ? _data["modelDescription"] : <any>null;
            this.functionalLocation = _data["functionalLocation"] !== undefined ? _data["functionalLocation"] : <any>null;
            this.simIntegratedCircuitCardId = _data["simIntegratedCircuitCardId"] !== undefined ? _data["simIntegratedCircuitCardId"] : <any>null;
        }
    }

    static fromJS(data: any): EditRTUNote {
        data = typeof data === 'object' ? data : {};
        let result = new EditRTUNote();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rtuId"] = this.rtuId !== undefined ? this.rtuId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["rtuType"] = this.rtuType !== undefined ? this.rtuType : <any>null;
        data["category"] = this.category !== undefined ? this.category : <any>null;
        data["transportType"] = this.transportType !== undefined ? this.transportType : <any>null;
        data["deviceId"] = this.deviceId !== undefined ? this.deviceId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["temporaryNotes"] = this.temporaryNotes !== undefined ? this.temporaryNotes : <any>null;
        data["permanentNotes"] = this.permanentNotes !== undefined ? this.permanentNotes : <any>null;
        data["installationDate"] = this.installationDate ? this.installationDate.toISOString() : <any>null;
        data["modelDescription"] = this.modelDescription !== undefined ? this.modelDescription : <any>null;
        data["functionalLocation"] = this.functionalLocation !== undefined ? this.functionalLocation : <any>null;
        data["simIntegratedCircuitCardId"] = this.simIntegratedCircuitCardId !== undefined ? this.simIntegratedCircuitCardId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export enum RTUType {
    FFD = 0,
    FFB = 1,
    FFE = 2,
    FF6 = 3,
    FF9 = 4,
    FF70 = 5,
    FFA = 6,
    FF8 = 7,
    Demo4Channel = 8,
    FakeWired4Channel = 9,
    FF5 = 10,
    FF1 = 11,
    FF4 = 12,
    Compak = 13,
    Infact = 14,
    FE = 15,
    FF78 = 16,
    FF74 = 17,
    FF7F = 18,
    None = 20,
    FF79 = 21,
    FF7E = 22,
    FE0 = 23,
    Metron2 = 24,
    FF7D = 25,
    FF71 = 26,
    FF7A = 27,
    FF7B = 28,
    Horner = 29,
    FF75 = 30,
    FA = 31,
    File = 32,
    TrippleHash = 33,
    FF72 = 34,
    GGPlant = 35,
    FF73 = 36,
    LC490 = 37,
    DP489 = 38,
    FF7C = 39,
    FF17 = 40,
    EaglePaymeter = 41,
    KT09 = 42,
    BC474 = 43,
    GU476 = 44,
    EG501 = 45,
}

export enum RTUCategoryType {
    Unknown = 0,
    SMS = 1,
    Modbus = 2,
    Clover = 3,
    Metron2 = 4,
    Horner = 5,
    File = 6,
    FourHundredSeries = 7,
}

export enum RTUTransportType {
    None = 0,
    Pstn = 1,
    Tcp = 2,
    Udp = 4,
}

export class DeleteFavouriteByIdResponse {
    deleteFavouriteByIdResult?: boolean;

    init(_data?: any) {
        if (_data) {
            this.deleteFavouriteByIdResult = _data["deleteFavouriteByIdResult"] !== undefined ? _data["deleteFavouriteByIdResult"] : <any>null;
        }
    }

    static fromJS(data: any): DeleteFavouriteByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteFavouriteByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deleteFavouriteByIdResult"] = this.deleteFavouriteByIdResult !== undefined ? this.deleteFavouriteByIdResult : <any>null;
        return data;
    }
}

export class EvolveDeleteFavouriteByIdResponse extends DeleteFavouriteByIdResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveDeleteFavouriteByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveDeleteFavouriteByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class DeleteFavouriteByIdRequest extends WcfProxyUserDetails {
    favouriteId?: number;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.favouriteId = _data["favouriteId"] !== undefined ? _data["favouriteId"] : <any>null;
        }
    }

    static fromJS(data: any): DeleteFavouriteByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteFavouriteByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["favouriteId"] = this.favouriteId !== undefined ? this.favouriteId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveDeleteFavouriteByIdRequest extends DeleteFavouriteByIdRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveDeleteFavouriteByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveDeleteFavouriteByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveIsInWatchListResponse {
    retrieveIsInWatchListResult?: boolean;

    init(_data?: any) {
        if (_data) {
            this.retrieveIsInWatchListResult = _data["retrieveIsInWatchListResult"] !== undefined ? _data["retrieveIsInWatchListResult"] : <any>null;
        }
    }

    static fromJS(data: any): RetrieveIsInWatchListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveIsInWatchListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["retrieveIsInWatchListResult"] = this.retrieveIsInWatchListResult !== undefined ? this.retrieveIsInWatchListResult : <any>null;
        return data;
    }
}

export class EvolveRetrieveIsInWatchListResponse extends RetrieveIsInWatchListResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveIsInWatchListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveIsInWatchListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveIsInWatchListRequest extends WcfProxyUserDetails {
    type?: WatchListType;
    guidItemId?: string | null;
    intItemId?: number | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.guidItemId = _data["guidItemId"] !== undefined ? _data["guidItemId"] : <any>null;
            this.intItemId = _data["intItemId"] !== undefined ? _data["intItemId"] : <any>null;
        }
    }

    static fromJS(data: any): RetrieveIsInWatchListRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveIsInWatchListRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["guidItemId"] = this.guidItemId !== undefined ? this.guidItemId : <any>null;
        data["intItemId"] = this.intItemId !== undefined ? this.intItemId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveIsInWatchListRequest extends RetrieveIsInWatchListRequest {
    watchListType?: WatchListType;
    guidItemId?: string | null;
    intItemId?: number | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.watchListType = _data["watchListType"] !== undefined ? _data["watchListType"] : <any>null;
            this.guidItemId = _data["guidItemId"] !== undefined ? _data["guidItemId"] : <any>null;
            this.intItemId = _data["intItemId"] !== undefined ? _data["intItemId"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveRetrieveIsInWatchListRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveIsInWatchListRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["watchListType"] = this.watchListType !== undefined ? this.watchListType : <any>null;
        data["guidItemId"] = this.guidItemId !== undefined ? this.guidItemId : <any>null;
        data["intItemId"] = this.intItemId !== undefined ? this.intItemId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class RetrieveSiteNoteEditComponentsByIdResponse {
    retrieveSiteNoteEditComponentsByIdResult?: RetrieveSiteNoteEditComponentsResult | null;

    init(_data?: any) {
        if (_data) {
            this.retrieveSiteNoteEditComponentsByIdResult = _data["retrieveSiteNoteEditComponentsByIdResult"] ? RetrieveSiteNoteEditComponentsResult.fromJS(_data["retrieveSiteNoteEditComponentsByIdResult"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveSiteNoteEditComponentsByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveSiteNoteEditComponentsByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["retrieveSiteNoteEditComponentsByIdResult"] = this.retrieveSiteNoteEditComponentsByIdResult ? this.retrieveSiteNoteEditComponentsByIdResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveRetrieveSiteNoteEditComponentsByIdResponse extends RetrieveSiteNoteEditComponentsByIdResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveSiteNoteEditComponentsByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveSiteNoteEditComponentsByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class BaseEditComponentsResultOfEditSiteNote {
    editObject?: EditSiteNote | null;
    areEditComponentsLoaded?: boolean;

    init(_data?: any) {
        if (_data) {
            this.editObject = _data["editObject"] ? EditSiteNote.fromJS(_data["editObject"]) : <any>null;
            this.areEditComponentsLoaded = _data["areEditComponentsLoaded"] !== undefined ? _data["areEditComponentsLoaded"] : <any>null;
        }
    }

    static fromJS(data: any): BaseEditComponentsResultOfEditSiteNote {
        data = typeof data === 'object' ? data : {};
        let result = new BaseEditComponentsResultOfEditSiteNote();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["editObject"] = this.editObject ? this.editObject.toJSON() : <any>null;
        data["areEditComponentsLoaded"] = this.areEditComponentsLoaded !== undefined ? this.areEditComponentsLoaded : <any>null;
        return data;
    }
}

export class RetrieveSiteNoteEditComponentsResult extends BaseEditComponentsResultOfEditSiteNote {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): RetrieveSiteNoteEditComponentsResult {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveSiteNoteEditComponentsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class EditSiteNote extends EditBase {
    siteId?: string;
    domainId?: string;
    notes?: string | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.siteId = _data["siteId"] !== undefined ? _data["siteId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.notes = _data["notes"] !== undefined ? _data["notes"] : <any>null;
        }
    }

    static fromJS(data: any): EditSiteNote {
        data = typeof data === 'object' ? data : {};
        let result = new EditSiteNote();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["siteId"] = this.siteId !== undefined ? this.siteId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["notes"] = this.notes !== undefined ? this.notes : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class RetrieveSiteNoteEditComponentsByIdRequest {
    siteId?: string;

    init(_data?: any) {
        if (_data) {
            this.siteId = _data["siteId"] !== undefined ? _data["siteId"] : <any>null;
        }
    }

    static fromJS(data: any): RetrieveSiteNoteEditComponentsByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveSiteNoteEditComponentsByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["siteId"] = this.siteId !== undefined ? this.siteId : <any>null;
        return data;
    }
}

export class EvolveRetrieveSiteNoteEditComponentsByIdRequest extends RetrieveSiteNoteEditComponentsByIdRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveSiteNoteEditComponentsByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveSiteNoteEditComponentsByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveWatchListTreeNodesByUserRequest extends WcfProxyUserDetails {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): RetrieveWatchListTreeNodesByUserRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveWatchListTreeNodesByUserRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveWatchListTreeNodesByUserRequest extends RetrieveWatchListTreeNodesByUserRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveWatchListTreeNodesByUserRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveWatchListTreeNodesByUserRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class SaveFavouriteResponse {
    saveFavouriteResult?: SaveFavouriteResult | null;

    init(_data?: any) {
        if (_data) {
            this.saveFavouriteResult = _data["saveFavouriteResult"] ? SaveFavouriteResult.fromJS(_data["saveFavouriteResult"]) : <any>null;
        }
    }

    static fromJS(data: any): SaveFavouriteResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SaveFavouriteResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["saveFavouriteResult"] = this.saveFavouriteResult ? this.saveFavouriteResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveSaveFavouriteResponse extends SaveFavouriteResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveSaveFavouriteResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveFavouriteResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class SaveResult {
    result?: SaveResultType;
    errorDescription?: string | null;

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] !== undefined ? _data["result"] : <any>null;
            this.errorDescription = _data["errorDescription"] !== undefined ? _data["errorDescription"] : <any>null;
        }
    }

    static fromJS(data: any): SaveResult {
        data = typeof data === 'object' ? data : {};
        let result = new SaveResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result !== undefined ? this.result : <any>null;
        data["errorDescription"] = this.errorDescription !== undefined ? this.errorDescription : <any>null;
        return data;
    }
}

export class BaseSaveResultOfEditFavourite extends SaveResult {
    editObject?: EditFavourite | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.editObject = _data["editObject"] ? EditFavourite.fromJS(_data["editObject"]) : <any>null;
        }
    }

    static fromJS(data: any): BaseSaveResultOfEditFavourite {
        data = typeof data === 'object' ? data : {};
        let result = new BaseSaveResultOfEditFavourite();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["editObject"] = this.editObject ? this.editObject.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class SaveFavouriteResult extends BaseSaveResultOfEditFavourite {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): SaveFavouriteResult {
        data = typeof data === 'object' ? data : {};
        let result = new SaveFavouriteResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class EditFavourite extends EditBase {
    favouriteId?: number;
    domainId?: string;
    userId?: string;
    description?: string | null;
    screenId?: number;
    filterByEnumValue?: string | null;
    filterText?: string | null;
    groupByEnumValue?: string | null;
    groupBySortDirection?: ListSortDirection;
    displayUnit?: UnitType | null;
    dataChannelTypes?: DataChannelType[] | null;
    inventoryStateTypes?: string[] | null;
    sortColumnName?: string | null;
    sortDirection?: ListSortDirection;
    assetSearchExpression?: string | null;
    isDefaultFavorite?: boolean;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.favouriteId = _data["favouriteId"] !== undefined ? _data["favouriteId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.screenId = _data["screenId"] !== undefined ? _data["screenId"] : <any>null;
            this.filterByEnumValue = _data["filterByEnumValue"] !== undefined ? _data["filterByEnumValue"] : <any>null;
            this.filterText = _data["filterText"] !== undefined ? _data["filterText"] : <any>null;
            this.groupByEnumValue = _data["groupByEnumValue"] !== undefined ? _data["groupByEnumValue"] : <any>null;
            this.groupBySortDirection = _data["groupBySortDirection"] !== undefined ? _data["groupBySortDirection"] : <any>null;
            this.displayUnit = _data["displayUnit"] !== undefined ? _data["displayUnit"] : <any>null;
            if (Array.isArray(_data["dataChannelTypes"])) {
                this.dataChannelTypes = [] as any;
                for (let item of _data["dataChannelTypes"])
                    this.dataChannelTypes!.push(item);
            }
            else {
                this.dataChannelTypes = <any>null;
            }
            if (Array.isArray(_data["inventoryStateTypes"])) {
                this.inventoryStateTypes = [] as any;
                for (let item of _data["inventoryStateTypes"])
                    this.inventoryStateTypes!.push(item);
            }
            else {
                this.inventoryStateTypes = <any>null;
            }
            this.sortColumnName = _data["sortColumnName"] !== undefined ? _data["sortColumnName"] : <any>null;
            this.sortDirection = _data["sortDirection"] !== undefined ? _data["sortDirection"] : <any>null;
            this.assetSearchExpression = _data["assetSearchExpression"] !== undefined ? _data["assetSearchExpression"] : <any>null;
            this.isDefaultFavorite = _data["isDefaultFavorite"] !== undefined ? _data["isDefaultFavorite"] : <any>null;
        }
    }

    static fromJS(data: any): EditFavourite {
        data = typeof data === 'object' ? data : {};
        let result = new EditFavourite();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["favouriteId"] = this.favouriteId !== undefined ? this.favouriteId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["screenId"] = this.screenId !== undefined ? this.screenId : <any>null;
        data["filterByEnumValue"] = this.filterByEnumValue !== undefined ? this.filterByEnumValue : <any>null;
        data["filterText"] = this.filterText !== undefined ? this.filterText : <any>null;
        data["groupByEnumValue"] = this.groupByEnumValue !== undefined ? this.groupByEnumValue : <any>null;
        data["groupBySortDirection"] = this.groupBySortDirection !== undefined ? this.groupBySortDirection : <any>null;
        data["displayUnit"] = this.displayUnit !== undefined ? this.displayUnit : <any>null;
        if (Array.isArray(this.dataChannelTypes)) {
            data["dataChannelTypes"] = [];
            for (let item of this.dataChannelTypes)
                data["dataChannelTypes"].push(item);
        }
        if (Array.isArray(this.inventoryStateTypes)) {
            data["inventoryStateTypes"] = [];
            for (let item of this.inventoryStateTypes)
                data["inventoryStateTypes"].push(item);
        }
        data["sortColumnName"] = this.sortColumnName !== undefined ? this.sortColumnName : <any>null;
        data["sortDirection"] = this.sortDirection !== undefined ? this.sortDirection : <any>null;
        data["assetSearchExpression"] = this.assetSearchExpression !== undefined ? this.assetSearchExpression : <any>null;
        data["isDefaultFavorite"] = this.isDefaultFavorite !== undefined ? this.isDefaultFavorite : <any>null;
        super.toJSON(data);
        return data;
    }
}

export enum SaveResultType {
    Success = 0,
    Invalid = 1,
    Error = 2,
    ConcurrencyError = 3,
}

export class EvolveSaveFavouriteRequest {
    favourite?: EvolveFavourite | null;

    init(_data?: any) {
        if (_data) {
            this.favourite = _data["favourite"] ? EvolveFavourite.fromJS(_data["favourite"]) : <any>null;
        }
    }

    static fromJS(data: any): EvolveSaveFavouriteRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveFavouriteRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["favourite"] = this.favourite ? this.favourite.toJSON() : <any>null;
        return data;
    }
}

export class SaveSiteNoteResponse {
    saveSiteNoteResult?: SaveSiteNoteResult | null;

    init(_data?: any) {
        if (_data) {
            this.saveSiteNoteResult = _data["saveSiteNoteResult"] ? SaveSiteNoteResult.fromJS(_data["saveSiteNoteResult"]) : <any>null;
        }
    }

    static fromJS(data: any): SaveSiteNoteResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SaveSiteNoteResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["saveSiteNoteResult"] = this.saveSiteNoteResult ? this.saveSiteNoteResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveSaveSiteNotesResponse extends SaveSiteNoteResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveSaveSiteNotesResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveSiteNotesResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class BaseSaveResultOfEditSiteNote extends SaveResult {
    editObject?: EditSiteNote | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.editObject = _data["editObject"] ? EditSiteNote.fromJS(_data["editObject"]) : <any>null;
        }
    }

    static fromJS(data: any): BaseSaveResultOfEditSiteNote {
        data = typeof data === 'object' ? data : {};
        let result = new BaseSaveResultOfEditSiteNote();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["editObject"] = this.editObject ? this.editObject.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class SaveSiteNoteResult extends BaseSaveResultOfEditSiteNote {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): SaveSiteNoteResult {
        data = typeof data === 'object' ? data : {};
        let result = new SaveSiteNoteResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class SaveSiteNoteRequest extends WcfProxyUserDetails {
    siteNote?: EditSiteNote | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.siteNote = _data["siteNote"] ? EditSiteNote.fromJS(_data["siteNote"]) : <any>null;
        }
    }

    static fromJS(data: any): SaveSiteNoteRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SaveSiteNoteRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["siteNote"] = this.siteNote ? this.siteNote.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveSaveSiteNotesRequest extends SaveSiteNoteRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveSaveSiteNotesRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveSiteNotesRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveEventDetailByIdResponse {
    retrieveEventDetailByIdResult?: RetrieveEventDetailResult | null;

    init(_data?: any) {
        if (_data) {
            this.retrieveEventDetailByIdResult = _data["retrieveEventDetailByIdResult"] ? RetrieveEventDetailResult.fromJS(_data["retrieveEventDetailByIdResult"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveEventDetailByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveEventDetailByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["retrieveEventDetailByIdResult"] = this.retrieveEventDetailByIdResult ? this.retrieveEventDetailByIdResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveRetrieveEventDetailByIdResponse extends RetrieveEventDetailByIdResponse {
    percentFull?: number | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.percentFull = _data["percentFull"] !== undefined ? _data["percentFull"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveRetrieveEventDetailByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveEventDetailByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["percentFull"] = this.percentFull !== undefined ? this.percentFull : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class RetrieveEventDetailResult {
    eventInfo?: EventInfoRecord | null;
    eventNotes?: EditEventNote[] | null;
    eventRosterDetails?: EventRosterDetailInfo[] | null;

    init(_data?: any) {
        if (_data) {
            this.eventInfo = _data["eventInfo"] ? EventInfoRecord.fromJS(_data["eventInfo"]) : <any>null;
            if (Array.isArray(_data["eventNotes"])) {
                this.eventNotes = [] as any;
                for (let item of _data["eventNotes"])
                    this.eventNotes!.push(EditEventNote.fromJS(item));
            }
            else {
                this.eventNotes = <any>null;
            }
            if (Array.isArray(_data["eventRosterDetails"])) {
                this.eventRosterDetails = [] as any;
                for (let item of _data["eventRosterDetails"])
                    this.eventRosterDetails!.push(EventRosterDetailInfo.fromJS(item));
            }
            else {
                this.eventRosterDetails = <any>null;
            }
        }
    }

    static fromJS(data: any): RetrieveEventDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveEventDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["eventInfo"] = this.eventInfo ? this.eventInfo.toJSON() : <any>null;
        if (Array.isArray(this.eventNotes)) {
            data["eventNotes"] = [];
            for (let item of this.eventNotes)
                data["eventNotes"].push(item.toJSON());
        }
        if (Array.isArray(this.eventRosterDetails)) {
            data["eventRosterDetails"] = [];
            for (let item of this.eventRosterDetails)
                data["eventRosterDetails"].push(item.toJSON());
        }
        return data;
    }
}

export class EventInfoRecord {
    eventId?: number;
    eventRuleId?: number | null;
    domainId?: string;
    eventStatus?: EventStatusType;
    message?: string | null;
    acknowledgedUserId?: string | null;
    readingScaledValue?: number | null;
    readingTimestamp?: Date;
    readingDisplayValue?: number | null;
    readingDisplayUnit?: string | null;
    createdDate?: Date;
    acknowledgeUserName?: string | null;
    acknowledgedOn?: Date | null;
    deactivatedOn?: Date | null;
    eventRuleDescription?: string | null;
    eventImportanceLevel?: EventImportanceLevelType;
    assetTitle?: string | null;
    assetId?: string | null;
    dataChannelId?: string | null;
    dataChannelType?: DataChannelType | null;
    dataChannelEventRuleId?: number;
    dataChannelDescription?: string | null;
    eventRuleType?: EventRuleType;
    firstRosterName?: string | null;
    rosterCount?: number;
    hasNotes?: boolean;
    siteTimeZoneId?: number | null;
    tagsAsText?: string | null;
    eventRosters?: EventRosterInfo[] | null;
    rtuEventType?: RTUEventType | null;

    init(_data?: any) {
        if (_data) {
            this.eventId = _data["eventId"] !== undefined ? _data["eventId"] : <any>null;
            this.eventRuleId = _data["eventRuleId"] !== undefined ? _data["eventRuleId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.eventStatus = _data["eventStatus"] !== undefined ? _data["eventStatus"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.acknowledgedUserId = _data["acknowledgedUserId"] !== undefined ? _data["acknowledgedUserId"] : <any>null;
            this.readingScaledValue = _data["readingScaledValue"] !== undefined ? _data["readingScaledValue"] : <any>null;
            this.readingTimestamp = _data["readingTimestamp"] ? new Date(_data["readingTimestamp"].toString()) : <any>null;
            this.readingDisplayValue = _data["readingDisplayValue"] !== undefined ? _data["readingDisplayValue"] : <any>null;
            this.readingDisplayUnit = _data["readingDisplayUnit"] !== undefined ? _data["readingDisplayUnit"] : <any>null;
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>null;
            this.acknowledgeUserName = _data["acknowledgeUserName"] !== undefined ? _data["acknowledgeUserName"] : <any>null;
            this.acknowledgedOn = _data["acknowledgedOn"] ? new Date(_data["acknowledgedOn"].toString()) : <any>null;
            this.deactivatedOn = _data["deactivatedOn"] ? new Date(_data["deactivatedOn"].toString()) : <any>null;
            this.eventRuleDescription = _data["eventRuleDescription"] !== undefined ? _data["eventRuleDescription"] : <any>null;
            this.eventImportanceLevel = _data["eventImportanceLevel"] !== undefined ? _data["eventImportanceLevel"] : <any>null;
            this.assetTitle = _data["assetTitle"] !== undefined ? _data["assetTitle"] : <any>null;
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.dataChannelType = _data["dataChannelType"] !== undefined ? _data["dataChannelType"] : <any>null;
            this.dataChannelEventRuleId = _data["dataChannelEventRuleId"] !== undefined ? _data["dataChannelEventRuleId"] : <any>null;
            this.dataChannelDescription = _data["dataChannelDescription"] !== undefined ? _data["dataChannelDescription"] : <any>null;
            this.eventRuleType = _data["eventRuleType"] !== undefined ? _data["eventRuleType"] : <any>null;
            this.firstRosterName = _data["firstRosterName"] !== undefined ? _data["firstRosterName"] : <any>null;
            this.rosterCount = _data["rosterCount"] !== undefined ? _data["rosterCount"] : <any>null;
            this.hasNotes = _data["hasNotes"] !== undefined ? _data["hasNotes"] : <any>null;
            this.siteTimeZoneId = _data["siteTimeZoneId"] !== undefined ? _data["siteTimeZoneId"] : <any>null;
            this.tagsAsText = _data["tagsAsText"] !== undefined ? _data["tagsAsText"] : <any>null;
            if (Array.isArray(_data["eventRosters"])) {
                this.eventRosters = [] as any;
                for (let item of _data["eventRosters"])
                    this.eventRosters!.push(EventRosterInfo.fromJS(item));
            }
            else {
                this.eventRosters = <any>null;
            }
            this.rtuEventType = _data["rtuEventType"] !== undefined ? _data["rtuEventType"] : <any>null;
        }
    }

    static fromJS(data: any): EventInfoRecord {
        data = typeof data === 'object' ? data : {};
        let result = new EventInfoRecord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["eventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["eventRuleId"] = this.eventRuleId !== undefined ? this.eventRuleId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["eventStatus"] = this.eventStatus !== undefined ? this.eventStatus : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["acknowledgedUserId"] = this.acknowledgedUserId !== undefined ? this.acknowledgedUserId : <any>null;
        data["readingScaledValue"] = this.readingScaledValue !== undefined ? this.readingScaledValue : <any>null;
        data["readingTimestamp"] = this.readingTimestamp ? this.readingTimestamp.toISOString() : <any>null;
        data["readingDisplayValue"] = this.readingDisplayValue !== undefined ? this.readingDisplayValue : <any>null;
        data["readingDisplayUnit"] = this.readingDisplayUnit !== undefined ? this.readingDisplayUnit : <any>null;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>null;
        data["acknowledgeUserName"] = this.acknowledgeUserName !== undefined ? this.acknowledgeUserName : <any>null;
        data["acknowledgedOn"] = this.acknowledgedOn ? this.acknowledgedOn.toISOString() : <any>null;
        data["deactivatedOn"] = this.deactivatedOn ? this.deactivatedOn.toISOString() : <any>null;
        data["eventRuleDescription"] = this.eventRuleDescription !== undefined ? this.eventRuleDescription : <any>null;
        data["eventImportanceLevel"] = this.eventImportanceLevel !== undefined ? this.eventImportanceLevel : <any>null;
        data["assetTitle"] = this.assetTitle !== undefined ? this.assetTitle : <any>null;
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["dataChannelType"] = this.dataChannelType !== undefined ? this.dataChannelType : <any>null;
        data["dataChannelEventRuleId"] = this.dataChannelEventRuleId !== undefined ? this.dataChannelEventRuleId : <any>null;
        data["dataChannelDescription"] = this.dataChannelDescription !== undefined ? this.dataChannelDescription : <any>null;
        data["eventRuleType"] = this.eventRuleType !== undefined ? this.eventRuleType : <any>null;
        data["firstRosterName"] = this.firstRosterName !== undefined ? this.firstRosterName : <any>null;
        data["rosterCount"] = this.rosterCount !== undefined ? this.rosterCount : <any>null;
        data["hasNotes"] = this.hasNotes !== undefined ? this.hasNotes : <any>null;
        data["siteTimeZoneId"] = this.siteTimeZoneId !== undefined ? this.siteTimeZoneId : <any>null;
        data["tagsAsText"] = this.tagsAsText !== undefined ? this.tagsAsText : <any>null;
        if (Array.isArray(this.eventRosters)) {
            data["eventRosters"] = [];
            for (let item of this.eventRosters)
                data["eventRosters"].push(item.toJSON());
        }
        data["rtuEventType"] = this.rtuEventType !== undefined ? this.rtuEventType : <any>null;
        return data;
    }
}

export enum EventStatusType {
    Active = 1,
    Inactive = 2,
}

export enum EventImportanceLevelType {
    Normal = 0,
    Information = 1,
    Warning = 2,
    High = 3,
    Urgent = 4,
}

export class EventRosterInfo {
    eventRosterId?: number;
    eventId?: number;
    rosterUserId?: number | null;
    rosterId?: number | null;
    rosterName?: string | null;

    init(_data?: any) {
        if (_data) {
            this.eventRosterId = _data["eventRosterId"] !== undefined ? _data["eventRosterId"] : <any>null;
            this.eventId = _data["eventId"] !== undefined ? _data["eventId"] : <any>null;
            this.rosterUserId = _data["rosterUserId"] !== undefined ? _data["rosterUserId"] : <any>null;
            this.rosterId = _data["rosterId"] !== undefined ? _data["rosterId"] : <any>null;
            this.rosterName = _data["rosterName"] !== undefined ? _data["rosterName"] : <any>null;
        }
    }

    static fromJS(data: any): EventRosterInfo {
        data = typeof data === 'object' ? data : {};
        let result = new EventRosterInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["eventRosterId"] = this.eventRosterId !== undefined ? this.eventRosterId : <any>null;
        data["eventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["rosterUserId"] = this.rosterUserId !== undefined ? this.rosterUserId : <any>null;
        data["rosterId"] = this.rosterId !== undefined ? this.rosterId : <any>null;
        data["rosterName"] = this.rosterName !== undefined ? this.rosterName : <any>null;
        return data;
    }
}

export enum RTUEventType {
    None = 0,
    MaintenanceInProgress = 7,
    CalloutFailed = 8,
    BatteryLow = 9,
    PollRequestFailure = 10,
    RtuSessionMaxRetriesExceeded = 11,
    DeliveryNotice = 12,
    ReversePollPending = 13,
    RS485CommunicationsTimeout = 14,
    SensorError = 15,
    SignalOutOfAllowedRange = 16,
    UsageRateAlarm = 17,
    RtuCommunicationFailure = 18,
    RtuConnectFailure = 19,
    MainsFailure = 20,
    ModemFailure = 21,
    PhoneLineFailure = 22,
    RS485SlaveFailure = 23,
    TestCalloutPending = 24,
    Inactive = 25,
    TransmitterLoopVoltageLow = 26,
    Recommission = 27,
    PatchedReading = 28,
    MipReading = 29,
    RtuColdBooted = 30,
    IOModuleCommunicationsError = 31,
    CallPending = 32,
    Autoconfig = 33,
}

export class EditEventNote extends EditBase {
    eventNoteId?: number;
    eventId?: number;
    subject?: string | null;
    note?: string | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.eventNoteId = _data["eventNoteId"] !== undefined ? _data["eventNoteId"] : <any>null;
            this.eventId = _data["eventId"] !== undefined ? _data["eventId"] : <any>null;
            this.subject = _data["subject"] !== undefined ? _data["subject"] : <any>null;
            this.note = _data["note"] !== undefined ? _data["note"] : <any>null;
        }
    }

    static fromJS(data: any): EditEventNote {
        data = typeof data === 'object' ? data : {};
        let result = new EditEventNote();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["eventNoteId"] = this.eventNoteId !== undefined ? this.eventNoteId : <any>null;
        data["eventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["subject"] = this.subject !== undefined ? this.subject : <any>null;
        data["note"] = this.note !== undefined ? this.note : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EventRosterDetailInfo {
    eventRosterId?: number;
    rosterUserId?: number | null;
    rosterId?: number | null;
    rosterName?: string | null;
    userName?: string | null;
    emailAddress?: string | null;
    emailToSMSAddress?: string | null;
    isSentSuccess?: boolean;
    createdDate?: Date;

    init(_data?: any) {
        if (_data) {
            this.eventRosterId = _data["eventRosterId"] !== undefined ? _data["eventRosterId"] : <any>null;
            this.rosterUserId = _data["rosterUserId"] !== undefined ? _data["rosterUserId"] : <any>null;
            this.rosterId = _data["rosterId"] !== undefined ? _data["rosterId"] : <any>null;
            this.rosterName = _data["rosterName"] !== undefined ? _data["rosterName"] : <any>null;
            this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
            this.emailAddress = _data["emailAddress"] !== undefined ? _data["emailAddress"] : <any>null;
            this.emailToSMSAddress = _data["emailToSMSAddress"] !== undefined ? _data["emailToSMSAddress"] : <any>null;
            this.isSentSuccess = _data["isSentSuccess"] !== undefined ? _data["isSentSuccess"] : <any>null;
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): EventRosterDetailInfo {
        data = typeof data === 'object' ? data : {};
        let result = new EventRosterDetailInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["eventRosterId"] = this.eventRosterId !== undefined ? this.eventRosterId : <any>null;
        data["rosterUserId"] = this.rosterUserId !== undefined ? this.rosterUserId : <any>null;
        data["rosterId"] = this.rosterId !== undefined ? this.rosterId : <any>null;
        data["rosterName"] = this.rosterName !== undefined ? this.rosterName : <any>null;
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : <any>null;
        data["emailToSMSAddress"] = this.emailToSMSAddress !== undefined ? this.emailToSMSAddress : <any>null;
        data["isSentSuccess"] = this.isSentSuccess !== undefined ? this.isSentSuccess : <any>null;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>null;
        return data;
    }
}

export class RetrieveEventDetailByIdRequest extends WcfProxyUserDetails {
    eventId?: number;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.eventId = _data["eventId"] !== undefined ? _data["eventId"] : <any>null;
        }
    }

    static fromJS(data: any): RetrieveEventDetailByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveEventDetailByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["eventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveEventDetailByIdRequest extends RetrieveEventDetailByIdRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveEventDetailByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveEventDetailByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveEventInfoRecordsByOptionsResponse {
    retrieveEventInfoRecordsByOptionsResult?: RetrieveEventInfoListResult | null;

    init(_data?: any) {
        if (_data) {
            this.retrieveEventInfoRecordsByOptionsResult = _data["retrieveEventInfoRecordsByOptionsResult"] ? RetrieveEventInfoListResult.fromJS(_data["retrieveEventInfoRecordsByOptionsResult"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveEventInfoRecordsByOptionsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveEventInfoRecordsByOptionsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["retrieveEventInfoRecordsByOptionsResult"] = this.retrieveEventInfoRecordsByOptionsResult ? this.retrieveEventInfoRecordsByOptionsResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveRetrieveEventInfoRecordsByOptionsResponse extends RetrieveEventInfoRecordsByOptionsResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveEventInfoRecordsByOptionsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveEventInfoRecordsByOptionsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class BaseListResultOfEventInfoRecord {
    records?: EventInfoRecord[] | null;
    totalRecords?: number | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["records"])) {
                this.records = [] as any;
                for (let item of _data["records"])
                    this.records!.push(EventInfoRecord.fromJS(item));
            }
            else {
                this.records = <any>null;
            }
            this.totalRecords = _data["totalRecords"] !== undefined ? _data["totalRecords"] : <any>null;
        }
    }

    static fromJS(data: any): BaseListResultOfEventInfoRecord {
        data = typeof data === 'object' ? data : {};
        let result = new BaseListResultOfEventInfoRecord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.records)) {
            data["records"] = [];
            for (let item of this.records)
                data["records"].push(item.toJSON());
        }
        data["totalRecords"] = this.totalRecords !== undefined ? this.totalRecords : <any>null;
        return data;
    }
}

export class RetrieveEventInfoListResult extends BaseListResultOfEventInfoRecord {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): RetrieveEventInfoListResult {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveEventInfoListResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class EventInfoRetrievalOptionsDto {
    eventStatus?: EventRecordStatus;
    eventDateFrom?: Date | null;
    eventDateTo?: Date | null;
    eventRuleTypeIds?: EventRuleType[] | null;
    assetSearchExpression?: string | null;
    showDataChannelIdList?: string[] | null;
    tagIds?: number[] | null;
    navigationDomainId?: string;
    itemsPerPage?: number;
    pageIndex?: number;
    sortColumnName?: string | null;
    sortDirection?: SortDirectionEnum;

    init(_data?: any) {
        if (_data) {
            this.eventStatus = _data["eventStatus"] !== undefined ? _data["eventStatus"] : <any>null;
            this.eventDateFrom = _data["eventDateFrom"] ? new Date(_data["eventDateFrom"].toString()) : <any>null;
            this.eventDateTo = _data["eventDateTo"] ? new Date(_data["eventDateTo"].toString()) : <any>null;
            if (Array.isArray(_data["eventRuleTypeIds"])) {
                this.eventRuleTypeIds = [] as any;
                for (let item of _data["eventRuleTypeIds"])
                    this.eventRuleTypeIds!.push(item);
            }
            else {
                this.eventRuleTypeIds = <any>null;
            }
            this.assetSearchExpression = _data["assetSearchExpression"] !== undefined ? _data["assetSearchExpression"] : <any>null;
            if (Array.isArray(_data["showDataChannelIdList"])) {
                this.showDataChannelIdList = [] as any;
                for (let item of _data["showDataChannelIdList"])
                    this.showDataChannelIdList!.push(item);
            }
            else {
                this.showDataChannelIdList = <any>null;
            }
            if (Array.isArray(_data["tagIds"])) {
                this.tagIds = [] as any;
                for (let item of _data["tagIds"])
                    this.tagIds!.push(item);
            }
            else {
                this.tagIds = <any>null;
            }
            this.navigationDomainId = _data["navigationDomainId"] !== undefined ? _data["navigationDomainId"] : <any>null;
            this.itemsPerPage = _data["itemsPerPage"] !== undefined ? _data["itemsPerPage"] : <any>null;
            this.pageIndex = _data["pageIndex"] !== undefined ? _data["pageIndex"] : <any>null;
            this.sortColumnName = _data["sortColumnName"] !== undefined ? _data["sortColumnName"] : <any>null;
            this.sortDirection = _data["sortDirection"] !== undefined ? _data["sortDirection"] : <any>null;
        }
    }

    static fromJS(data: any): EventInfoRetrievalOptionsDto {
        data = typeof data === 'object' ? data : {};
        let result = new EventInfoRetrievalOptionsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["eventStatus"] = this.eventStatus !== undefined ? this.eventStatus : <any>null;
        data["eventDateFrom"] = this.eventDateFrom ? this.eventDateFrom.toISOString() : <any>null;
        data["eventDateTo"] = this.eventDateTo ? this.eventDateTo.toISOString() : <any>null;
        if (Array.isArray(this.eventRuleTypeIds)) {
            data["eventRuleTypeIds"] = [];
            for (let item of this.eventRuleTypeIds)
                data["eventRuleTypeIds"].push(item);
        }
        data["assetSearchExpression"] = this.assetSearchExpression !== undefined ? this.assetSearchExpression : <any>null;
        if (Array.isArray(this.showDataChannelIdList)) {
            data["showDataChannelIdList"] = [];
            for (let item of this.showDataChannelIdList)
                data["showDataChannelIdList"].push(item);
        }
        if (Array.isArray(this.tagIds)) {
            data["tagIds"] = [];
            for (let item of this.tagIds)
                data["tagIds"].push(item);
        }
        data["navigationDomainId"] = this.navigationDomainId !== undefined ? this.navigationDomainId : <any>null;
        data["itemsPerPage"] = this.itemsPerPage !== undefined ? this.itemsPerPage : <any>null;
        data["pageIndex"] = this.pageIndex !== undefined ? this.pageIndex : <any>null;
        data["sortColumnName"] = this.sortColumnName !== undefined ? this.sortColumnName : <any>null;
        data["sortDirection"] = this.sortDirection !== undefined ? this.sortDirection : <any>null;
        return data;
    }
}

export enum EventRecordStatus {
    Active = 1,
    Inactive = 2,
}

export class SaveEventNoteResponse {
    saveEventNoteResult?: SaveEventNoteResult | null;

    init(_data?: any) {
        if (_data) {
            this.saveEventNoteResult = _data["saveEventNoteResult"] ? SaveEventNoteResult.fromJS(_data["saveEventNoteResult"]) : <any>null;
        }
    }

    static fromJS(data: any): SaveEventNoteResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SaveEventNoteResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["saveEventNoteResult"] = this.saveEventNoteResult ? this.saveEventNoteResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveSaveEventNoteResponse extends SaveEventNoteResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveSaveEventNoteResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveEventNoteResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class BaseSaveResultOfEditEventNote extends SaveResult {
    editObject?: EditEventNote | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.editObject = _data["editObject"] ? EditEventNote.fromJS(_data["editObject"]) : <any>null;
        }
    }

    static fromJS(data: any): BaseSaveResultOfEditEventNote {
        data = typeof data === 'object' ? data : {};
        let result = new BaseSaveResultOfEditEventNote();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["editObject"] = this.editObject ? this.editObject.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class SaveEventNoteResult extends BaseSaveResultOfEditEventNote {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): SaveEventNoteResult {
        data = typeof data === 'object' ? data : {};
        let result = new SaveEventNoteResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class SaveEventNoteRequest extends WcfProxyUserDetails {
    item?: EditEventNote | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.item = _data["item"] ? EditEventNote.fromJS(_data["item"]) : <any>null;
        }
    }

    static fromJS(data: any): SaveEventNoteRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SaveEventNoteRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item"] = this.item ? this.item.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveSaveEventNoteRequest extends SaveEventNoteRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveSaveEventNoteRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveEventNoteRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class UpdateEventToAcknowledgeEventResponse {
    updateEventToAcknowledgeEventResult?: boolean;

    init(_data?: any) {
        if (_data) {
            this.updateEventToAcknowledgeEventResult = _data["updateEventToAcknowledgeEventResult"] !== undefined ? _data["updateEventToAcknowledgeEventResult"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateEventToAcknowledgeEventResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateEventToAcknowledgeEventResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["updateEventToAcknowledgeEventResult"] = this.updateEventToAcknowledgeEventResult !== undefined ? this.updateEventToAcknowledgeEventResult : <any>null;
        return data;
    }
}

export class EvolveUpdateEventToAcknowledgeEventResponse extends UpdateEventToAcknowledgeEventResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveUpdateEventToAcknowledgeEventResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveUpdateEventToAcknowledgeEventResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class UpdateEventToAcknowledgeEventRequest extends WcfProxyUserDetails {
    eventId?: number;
    acknowledgedUserId?: string;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.eventId = _data["eventId"] !== undefined ? _data["eventId"] : <any>null;
            this.acknowledgedUserId = _data["acknowledgedUserId"] !== undefined ? _data["acknowledgedUserId"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateEventToAcknowledgeEventRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateEventToAcknowledgeEventRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["eventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["acknowledgedUserId"] = this.acknowledgedUserId !== undefined ? this.acknowledgedUserId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveUpdateEventToAcknowledgeEventRequest extends UpdateEventToAcknowledgeEventRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveUpdateEventToAcknowledgeEventRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveUpdateEventToAcknowledgeEventRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class DeleteDeliveryScheduleByIdRequest extends WcfProxyUserDetails {
    deliveryScheduleId?: string;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.deliveryScheduleId = _data["deliveryScheduleId"] !== undefined ? _data["deliveryScheduleId"] : <any>null;
        }
    }

    static fromJS(data: any): DeleteDeliveryScheduleByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteDeliveryScheduleByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deliveryScheduleId"] = this.deliveryScheduleId !== undefined ? this.deliveryScheduleId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveDeleteDeliveryScheduleByIdRequest extends DeleteDeliveryScheduleByIdRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveDeleteDeliveryScheduleByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveDeleteDeliveryScheduleByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveDataChannelGraphInfoByOptionsRequest {
    options?: DataChannelGraphInfoRetrievalOptions | null;

    init(_data?: any) {
        if (_data) {
            this.options = _data["options"] ? DataChannelGraphInfoRetrievalOptions.fromJS(_data["options"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveDataChannelGraphInfoByOptionsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveDataChannelGraphInfoByOptionsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["options"] = this.options ? this.options.toJSON() : <any>null;
        return data;
    }
}

export class EvolveRetrieveDataChannelGraphInfoByOptionsRequest extends RetrieveDataChannelGraphInfoByOptionsRequest {
    chosenUnit?: UnitTypeEnum;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.chosenUnit = _data["chosenUnit"] !== undefined ? _data["chosenUnit"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveRetrieveDataChannelGraphInfoByOptionsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveDataChannelGraphInfoByOptionsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["chosenUnit"] = this.chosenUnit !== undefined ? this.chosenUnit : <any>null;
        super.toJSON(data);
        return data;
    }
}

export enum UnitTypeEnum {
    WaterColumnMillimeters = 0,
    WaterColumnCentimeters = 1,
    WaterColumnMeters = 2,
    HydrogenMillimeters = 3,
    HydrogenCentimeters = 4,
    HydrogenMeters = 5,
    WaterColumnInches = 10,
    HydrogenInches = 11,
    Millimeters = 20,
    Centimeters = 21,
    Meters = 22,
    Inches = 30,
    Feet = 31,
    Yards = 32,
    Liters = 40,
    KiloLiters = 41,
    CubicMeters = 42,
    Default = 45,
    USGallons = 50,
    UKGallons = 51,
    CubicInches = 52,
    CubicFeet = 53,
    CubicYards = 54,
    Kilograms = 60,
    MetricTonne = 61,
    Pounds = 70,
    TonUS = 71,
    StandardCubicMeter = 80,
    StandardCubicFoot = 90,
    PercentFull = 100,
    DefaultScaled = 1000,
}

export class DataChannelGraphInfoRetrievalOptions {
    dataChannelIds?: string[] | null;
    startDate?: Date;
    endDate?: Date;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["dataChannelIds"])) {
                this.dataChannelIds = [] as any;
                for (let item of _data["dataChannelIds"])
                    this.dataChannelIds!.push(item);
            }
            else {
                this.dataChannelIds = <any>null;
            }
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>null;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): DataChannelGraphInfoRetrievalOptions {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelGraphInfoRetrievalOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dataChannelIds)) {
            data["dataChannelIds"] = [];
            for (let item of this.dataChannelIds)
                data["dataChannelIds"].push(item);
        }
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>null;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>null;
        return data;
    }
}

export class RetrieveDeliveryScheduleAmountsByOptionsRequest extends WcfProxyUserDetails {
    options?: DeliveryScheduleInfoRetrievalOptions | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.options = _data["options"] ? DeliveryScheduleInfoRetrievalOptions.fromJS(_data["options"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveDeliveryScheduleAmountsByOptionsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveDeliveryScheduleAmountsByOptionsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["options"] = this.options ? this.options.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveDeliveryScheduleAmountsByOptionsRequest extends RetrieveDeliveryScheduleAmountsByOptionsRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveDeliveryScheduleAmountsByOptionsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveDeliveryScheduleAmountsByOptionsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class BaseRetrievalOptions {
    isCountRequired?: boolean;
    userId?: string;
    domainId?: string;
    pageIndex?: number;
    itemsPerPage?: number;
    startIndex?: number;
    endIndex?: number;
    filterText?: string | null;
    sqlSafeFilterText?: string | null;
    sortColumnName?: string | null;
    sortDirection?: ListSortDirection;
    sortDirectionAsText?: string | null;

    init(_data?: any) {
        if (_data) {
            this.isCountRequired = _data["isCountRequired"] !== undefined ? _data["isCountRequired"] : <any>null;
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.pageIndex = _data["pageIndex"] !== undefined ? _data["pageIndex"] : <any>null;
            this.itemsPerPage = _data["itemsPerPage"] !== undefined ? _data["itemsPerPage"] : <any>null;
            this.startIndex = _data["startIndex"] !== undefined ? _data["startIndex"] : <any>null;
            this.endIndex = _data["endIndex"] !== undefined ? _data["endIndex"] : <any>null;
            this.filterText = _data["filterText"] !== undefined ? _data["filterText"] : <any>null;
            this.sqlSafeFilterText = _data["sqlSafeFilterText"] !== undefined ? _data["sqlSafeFilterText"] : <any>null;
            this.sortColumnName = _data["sortColumnName"] !== undefined ? _data["sortColumnName"] : <any>null;
            this.sortDirection = _data["sortDirection"] !== undefined ? _data["sortDirection"] : <any>null;
            this.sortDirectionAsText = _data["sortDirectionAsText"] !== undefined ? _data["sortDirectionAsText"] : <any>null;
        }
    }

    static fromJS(data: any): BaseRetrievalOptions {
        data = typeof data === 'object' ? data : {};
        let result = new BaseRetrievalOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isCountRequired"] = this.isCountRequired !== undefined ? this.isCountRequired : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["pageIndex"] = this.pageIndex !== undefined ? this.pageIndex : <any>null;
        data["itemsPerPage"] = this.itemsPerPage !== undefined ? this.itemsPerPage : <any>null;
        data["startIndex"] = this.startIndex !== undefined ? this.startIndex : <any>null;
        data["endIndex"] = this.endIndex !== undefined ? this.endIndex : <any>null;
        data["filterText"] = this.filterText !== undefined ? this.filterText : <any>null;
        data["sqlSafeFilterText"] = this.sqlSafeFilterText !== undefined ? this.sqlSafeFilterText : <any>null;
        data["sortColumnName"] = this.sortColumnName !== undefined ? this.sortColumnName : <any>null;
        data["sortDirection"] = this.sortDirection !== undefined ? this.sortDirection : <any>null;
        data["sortDirectionAsText"] = this.sortDirectionAsText !== undefined ? this.sortDirectionAsText : <any>null;
        return data;
    }
}

export class DeliveryScheduleInfoRetrievalOptions extends BaseRetrievalOptions {
    totalForecastDays?: number;
    searchExpression?: string | null;
    displayUnits?: UnitType;
    navigationDomainId?: string;
    startDate?: Date;
    endDate?: Date;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.totalForecastDays = _data["totalForecastDays"] !== undefined ? _data["totalForecastDays"] : <any>null;
            this.searchExpression = _data["searchExpression"] !== undefined ? _data["searchExpression"] : <any>null;
            this.displayUnits = _data["displayUnits"] !== undefined ? _data["displayUnits"] : <any>null;
            this.navigationDomainId = _data["navigationDomainId"] !== undefined ? _data["navigationDomainId"] : <any>null;
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>null;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): DeliveryScheduleInfoRetrievalOptions {
        data = typeof data === 'object' ? data : {};
        let result = new DeliveryScheduleInfoRetrievalOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalForecastDays"] = this.totalForecastDays !== undefined ? this.totalForecastDays : <any>null;
        data["searchExpression"] = this.searchExpression !== undefined ? this.searchExpression : <any>null;
        data["displayUnits"] = this.displayUnits !== undefined ? this.displayUnits : <any>null;
        data["navigationDomainId"] = this.navigationDomainId !== undefined ? this.navigationDomainId : <any>null;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>null;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class RetrieveDeliveryScheduleEditComponentsByIdRequest extends WcfProxyUserDetails {
    deliveryScheduleId?: string;
    dataChannelId?: string;
    loadEditComponents?: boolean;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.deliveryScheduleId = _data["deliveryScheduleId"] !== undefined ? _data["deliveryScheduleId"] : <any>null;
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.loadEditComponents = _data["loadEditComponents"] !== undefined ? _data["loadEditComponents"] : <any>null;
        }
    }

    static fromJS(data: any): RetrieveDeliveryScheduleEditComponentsByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveDeliveryScheduleEditComponentsByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deliveryScheduleId"] = this.deliveryScheduleId !== undefined ? this.deliveryScheduleId : <any>null;
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["loadEditComponents"] = this.loadEditComponents !== undefined ? this.loadEditComponents : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveDeliveryScheduleEditComponentsByIdRequest extends RetrieveDeliveryScheduleEditComponentsByIdRequest {
    deliveryScheduleId?: string;
    dataChannelId?: string;
    loadEditComponents?: boolean;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.deliveryScheduleId = _data["deliveryScheduleId"] !== undefined ? _data["deliveryScheduleId"] : <any>null;
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.loadEditComponents = _data["loadEditComponents"] !== undefined ? _data["loadEditComponents"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveRetrieveDeliveryScheduleEditComponentsByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveDeliveryScheduleEditComponentsByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deliveryScheduleId"] = this.deliveryScheduleId !== undefined ? this.deliveryScheduleId : <any>null;
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["loadEditComponents"] = this.loadEditComponents !== undefined ? this.loadEditComponents : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class RetrieveDeliveryScheduleInfoRecordsByOptionsRequest extends WcfProxyUserDetails {
    options?: DeliveryScheduleInfoRetrievalOptions | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.options = _data["options"] ? DeliveryScheduleInfoRetrievalOptions.fromJS(_data["options"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveDeliveryScheduleInfoRecordsByOptionsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveDeliveryScheduleInfoRecordsByOptionsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["options"] = this.options ? this.options.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveDeliveryScheduleInfoRecordsByOptionsRequest extends RetrieveDeliveryScheduleInfoRecordsByOptionsRequest {
    userTimeZoneSystemId?: string | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.userTimeZoneSystemId = _data["userTimeZoneSystemId"] !== undefined ? _data["userTimeZoneSystemId"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveRetrieveDeliveryScheduleInfoRecordsByOptionsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveDeliveryScheduleInfoRecordsByOptionsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userTimeZoneSystemId"] = this.userTimeZoneSystemId !== undefined ? this.userTimeZoneSystemId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class SaveDeliveryScheduleRequest extends WcfProxyUserDetails {
    deliverySchedule?: EditDeliverySchedule | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.deliverySchedule = _data["deliverySchedule"] ? EditDeliverySchedule.fromJS(_data["deliverySchedule"]) : <any>null;
        }
    }

    static fromJS(data: any): SaveDeliveryScheduleRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SaveDeliveryScheduleRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deliverySchedule"] = this.deliverySchedule ? this.deliverySchedule.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveSaveDeliveryScheduleRequest extends SaveDeliveryScheduleRequest {
    editDeliverySchedule?: EditDeliverySchedule | null;
    dcInfo?: EvolveDataChannelConversionInfo | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.editDeliverySchedule = _data["editDeliverySchedule"] ? EditDeliverySchedule.fromJS(_data["editDeliverySchedule"]) : <any>null;
            this.dcInfo = _data["dcInfo"] ? EvolveDataChannelConversionInfo.fromJS(_data["dcInfo"]) : <any>null;
        }
    }

    static fromJS(data: any): EvolveSaveDeliveryScheduleRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveDeliveryScheduleRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["editDeliverySchedule"] = this.editDeliverySchedule ? this.editDeliverySchedule.toJSON() : <any>null;
        data["dcInfo"] = this.dcInfo ? this.dcInfo.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EditDeliverySchedule extends EditBase {
    deliveryScheduleId?: string;
    dataChannelId?: string;
    scheduledTime?: Date;
    timeCompleted?: Date | null;
    isAutoFill?: boolean;
    deliveryAmount?: number | null;
    deliveryUnits?: UnitType | null;
    deliveryUnitsAsText?: string | null;
    orderNumber?: string | null;
    lateGracePeriodInMinutes?: number | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.deliveryScheduleId = _data["deliveryScheduleId"] !== undefined ? _data["deliveryScheduleId"] : <any>null;
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.scheduledTime = _data["scheduledTime"] ? new Date(_data["scheduledTime"].toString()) : <any>null;
            this.timeCompleted = _data["timeCompleted"] ? new Date(_data["timeCompleted"].toString()) : <any>null;
            this.isAutoFill = _data["isAutoFill"] !== undefined ? _data["isAutoFill"] : <any>null;
            this.deliveryAmount = _data["deliveryAmount"] !== undefined ? _data["deliveryAmount"] : <any>null;
            this.deliveryUnits = _data["deliveryUnits"] !== undefined ? _data["deliveryUnits"] : <any>null;
            this.deliveryUnitsAsText = _data["deliveryUnitsAsText"] !== undefined ? _data["deliveryUnitsAsText"] : <any>null;
            this.orderNumber = _data["orderNumber"] !== undefined ? _data["orderNumber"] : <any>null;
            this.lateGracePeriodInMinutes = _data["lateGracePeriodInMinutes"] !== undefined ? _data["lateGracePeriodInMinutes"] : <any>null;
        }
    }

    static fromJS(data: any): EditDeliverySchedule {
        data = typeof data === 'object' ? data : {};
        let result = new EditDeliverySchedule();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deliveryScheduleId"] = this.deliveryScheduleId !== undefined ? this.deliveryScheduleId : <any>null;
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["scheduledTime"] = this.scheduledTime ? this.scheduledTime.toISOString() : <any>null;
        data["timeCompleted"] = this.timeCompleted ? this.timeCompleted.toISOString() : <any>null;
        data["isAutoFill"] = this.isAutoFill !== undefined ? this.isAutoFill : <any>null;
        data["deliveryAmount"] = this.deliveryAmount !== undefined ? this.deliveryAmount : <any>null;
        data["deliveryUnits"] = this.deliveryUnits !== undefined ? this.deliveryUnits : <any>null;
        data["deliveryUnitsAsText"] = this.deliveryUnitsAsText !== undefined ? this.deliveryUnitsAsText : <any>null;
        data["orderNumber"] = this.orderNumber !== undefined ? this.orderNumber : <any>null;
        data["lateGracePeriodInMinutes"] = this.lateGracePeriodInMinutes !== undefined ? this.lateGracePeriodInMinutes : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveDataChannelConversionInfo {
    isVolumetric?: boolean;
    scaledMin?: number;
    scaledMax?: number;
    scaledMaxProductHeight?: number | null;
    maxProductHeight?: number | null;
    productSpecificGravity?: number | null;
    standardVolumePerCubicMeter?: number | null;
    tankType?: TankType | null;
    scaledUnitsAsText?: string | null;
    useStrappingChartForConversion?: boolean;
    tankDishHeightInMeters?: number | null;
    tankHeightInMeters?: number | null;
    tankWidthInMeters?: number | null;
    strappingChartInfo?: StrappingChartInfo[] | null;
    scaledUnits?: UnitType | null;
    dataChannelId?: string;
    dataChannelType?: DataChannelType;
    displayUnits?: UnitType | null;

    init(_data?: any) {
        if (_data) {
            this.isVolumetric = _data["isVolumetric"] !== undefined ? _data["isVolumetric"] : <any>null;
            this.scaledMin = _data["scaledMin"] !== undefined ? _data["scaledMin"] : <any>null;
            this.scaledMax = _data["scaledMax"] !== undefined ? _data["scaledMax"] : <any>null;
            this.scaledMaxProductHeight = _data["scaledMaxProductHeight"] !== undefined ? _data["scaledMaxProductHeight"] : <any>null;
            this.maxProductHeight = _data["maxProductHeight"] !== undefined ? _data["maxProductHeight"] : <any>null;
            this.productSpecificGravity = _data["productSpecificGravity"] !== undefined ? _data["productSpecificGravity"] : <any>null;
            this.standardVolumePerCubicMeter = _data["standardVolumePerCubicMeter"] !== undefined ? _data["standardVolumePerCubicMeter"] : <any>null;
            this.tankType = _data["tankType"] !== undefined ? _data["tankType"] : <any>null;
            this.scaledUnitsAsText = _data["scaledUnitsAsText"] !== undefined ? _data["scaledUnitsAsText"] : <any>null;
            this.useStrappingChartForConversion = _data["useStrappingChartForConversion"] !== undefined ? _data["useStrappingChartForConversion"] : <any>null;
            this.tankDishHeightInMeters = _data["tankDishHeightInMeters"] !== undefined ? _data["tankDishHeightInMeters"] : <any>null;
            this.tankHeightInMeters = _data["tankHeightInMeters"] !== undefined ? _data["tankHeightInMeters"] : <any>null;
            this.tankWidthInMeters = _data["tankWidthInMeters"] !== undefined ? _data["tankWidthInMeters"] : <any>null;
            if (Array.isArray(_data["strappingChartInfo"])) {
                this.strappingChartInfo = [] as any;
                for (let item of _data["strappingChartInfo"])
                    this.strappingChartInfo!.push(StrappingChartInfo.fromJS(item));
            }
            else {
                this.strappingChartInfo = <any>null;
            }
            this.scaledUnits = _data["scaledUnits"] !== undefined ? _data["scaledUnits"] : <any>null;
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.dataChannelType = _data["dataChannelType"] !== undefined ? _data["dataChannelType"] : <any>null;
            this.displayUnits = _data["displayUnits"] !== undefined ? _data["displayUnits"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveDataChannelConversionInfo {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveDataChannelConversionInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isVolumetric"] = this.isVolumetric !== undefined ? this.isVolumetric : <any>null;
        data["scaledMin"] = this.scaledMin !== undefined ? this.scaledMin : <any>null;
        data["scaledMax"] = this.scaledMax !== undefined ? this.scaledMax : <any>null;
        data["scaledMaxProductHeight"] = this.scaledMaxProductHeight !== undefined ? this.scaledMaxProductHeight : <any>null;
        data["maxProductHeight"] = this.maxProductHeight !== undefined ? this.maxProductHeight : <any>null;
        data["productSpecificGravity"] = this.productSpecificGravity !== undefined ? this.productSpecificGravity : <any>null;
        data["standardVolumePerCubicMeter"] = this.standardVolumePerCubicMeter !== undefined ? this.standardVolumePerCubicMeter : <any>null;
        data["tankType"] = this.tankType !== undefined ? this.tankType : <any>null;
        data["scaledUnitsAsText"] = this.scaledUnitsAsText !== undefined ? this.scaledUnitsAsText : <any>null;
        data["useStrappingChartForConversion"] = this.useStrappingChartForConversion !== undefined ? this.useStrappingChartForConversion : <any>null;
        data["tankDishHeightInMeters"] = this.tankDishHeightInMeters !== undefined ? this.tankDishHeightInMeters : <any>null;
        data["tankHeightInMeters"] = this.tankHeightInMeters !== undefined ? this.tankHeightInMeters : <any>null;
        data["tankWidthInMeters"] = this.tankWidthInMeters !== undefined ? this.tankWidthInMeters : <any>null;
        if (Array.isArray(this.strappingChartInfo)) {
            data["strappingChartInfo"] = [];
            for (let item of this.strappingChartInfo)
                data["strappingChartInfo"].push(item.toJSON());
        }
        data["scaledUnits"] = this.scaledUnits !== undefined ? this.scaledUnits : <any>null;
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["dataChannelType"] = this.dataChannelType !== undefined ? this.dataChannelType : <any>null;
        data["displayUnits"] = this.displayUnits !== undefined ? this.displayUnits : <any>null;
        return data;
    }
}

export enum TankType {
    None = 0,
    VerticalWith2To1EllipsoidalEnds = 1,
    VerticalWithHemisphericalEnds = 2,
    HorizontalWith2To1EllipsoidalEnds = 3,
    VerticalWithFlatEnds = 4,
    HorizontalWithFlatEnds = 5,
    VerticalWithVariableDishedEnds = 6,
    HorizontalWithVariableDishedEnds = 7,
    VerticalWithConicalBottomEnd = 8,
    RectangularBox = 9,
    SphericalTank = 10,
    HorizontalWithHemisphericalEnds = 11,
    TotalizedTank = 12,
}

export class StrappingChartInfo {
    heightInMeters?: number;
    volumeInCubicMeters?: number;

    init(_data?: any) {
        if (_data) {
            this.heightInMeters = _data["heightInMeters"] !== undefined ? _data["heightInMeters"] : <any>null;
            this.volumeInCubicMeters = _data["volumeInCubicMeters"] !== undefined ? _data["volumeInCubicMeters"] : <any>null;
        }
    }

    static fromJS(data: any): StrappingChartInfo {
        data = typeof data === 'object' ? data : {};
        let result = new StrappingChartInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["heightInMeters"] = this.heightInMeters !== undefined ? this.heightInMeters : <any>null;
        data["volumeInCubicMeters"] = this.volumeInCubicMeters !== undefined ? this.volumeInCubicMeters : <any>null;
        return data;
    }
}

export class RetrieveAssetDetailAndGraphInfoByIdResponse {
    retrieveAssetDetailAndGraphInfoByIdResult?: RetrieveAssetDetailAndGraphInfoResult | null;

    init(_data?: any) {
        if (_data) {
            this.retrieveAssetDetailAndGraphInfoByIdResult = _data["retrieveAssetDetailAndGraphInfoByIdResult"] ? RetrieveAssetDetailAndGraphInfoResult.fromJS(_data["retrieveAssetDetailAndGraphInfoByIdResult"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveAssetDetailAndGraphInfoByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveAssetDetailAndGraphInfoByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["retrieveAssetDetailAndGraphInfoByIdResult"] = this.retrieveAssetDetailAndGraphInfoByIdResult ? this.retrieveAssetDetailAndGraphInfoByIdResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveRetrieveAssetDetailAndGraphInfoByIdResponse extends RetrieveAssetDetailAndGraphInfoByIdResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveAssetDetailAndGraphInfoByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveAssetDetailAndGraphInfoByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveAssetDetailAndGraphInfoResult {
    asset?: AssetDetail | null;
    userAssetSettings?: UserAssetSettingsDetail | null;
    dataChannelGraphInfoList?: DataChannelGraphInfo[] | null;

    init(_data?: any) {
        if (_data) {
            this.asset = _data["asset"] ? AssetDetail.fromJS(_data["asset"]) : <any>null;
            this.userAssetSettings = _data["userAssetSettings"] ? UserAssetSettingsDetail.fromJS(_data["userAssetSettings"]) : <any>null;
            if (Array.isArray(_data["dataChannelGraphInfoList"])) {
                this.dataChannelGraphInfoList = [] as any;
                for (let item of _data["dataChannelGraphInfoList"])
                    this.dataChannelGraphInfoList!.push(DataChannelGraphInfo.fromJS(item));
            }
            else {
                this.dataChannelGraphInfoList = <any>null;
            }
        }
    }

    static fromJS(data: any): RetrieveAssetDetailAndGraphInfoResult {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveAssetDetailAndGraphInfoResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["asset"] = this.asset ? this.asset.toJSON() : <any>null;
        data["userAssetSettings"] = this.userAssetSettings ? this.userAssetSettings.toJSON() : <any>null;
        if (Array.isArray(this.dataChannelGraphInfoList)) {
            data["dataChannelGraphInfoList"] = [];
            for (let item of this.dataChannelGraphInfoList)
                data["dataChannelGraphInfoList"].push(item.toJSON());
        }
        return data;
    }
}

export class AssetDetail {
    assetId?: string;
    domainId?: string;
    assetType?: AssetType;
    assetDescription?: string | null;
    assetStatus?: Status;
    assetTitle?: string | null;
    assetNotes?: string | null;
    siteId?: string;
    latitude?: number | null;
    longitude?: number | null;
    installedTechName?: string | null;
    customerContactName?: string | null;
    customerContactPhone?: string | null;
    customerName?: string | null;
    siteNumber?: string | null;
    address1?: string | null;
    address2?: string | null;
    address3?: string | null;
    city?: string | null;
    state?: string | null;
    country?: string | null;
    postalCode?: string | null;
    siteNotes?: string | null;
    siteDescription?: string | null;
    siteTimeZoneId?: number | null;
    siteTimeZoneDisplayName?: string | null;
    isCrossDomainAccess?: boolean;
    eventRuleGroupName?: string | null;
    referenceDocumentUrl?: string | null;
    numberOfTubes?: number | null;
    tubeConfiguration?: string | null;
    requalifierIdNumber?: string | null;
    lastTestDate?: Date | null;
    testDueDate?: Date | null;
    lastExternalNeckInspection?: Date | null;
    visualInspectionDueDate?: Date | null;
    dotStampedPressure?: number | null;
    dotSpecialFillingLimit?: number | null;
    dotTestPressure?: number | null;
    dotWaterVolume?: number | null;
    imdgMaxWorkingPressure?: number | null;
    imdgTestPressure?: number | null;
    imdgWaterVolume?: number | null;
    fillCountSinceLastTestDate?: number | null;
    customProperties?: AssetDetailCustomPropertyInfo[] | null;
    dataChannels?: AssetDetailDataChannelInfo[] | null;
    dayZero?: Date | null;
    designCurveType?: DesignCurveType;

    init(_data?: any) {
        if (_data) {
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.assetType = _data["assetType"] !== undefined ? _data["assetType"] : <any>null;
            this.assetDescription = _data["assetDescription"] !== undefined ? _data["assetDescription"] : <any>null;
            this.assetStatus = _data["assetStatus"] !== undefined ? _data["assetStatus"] : <any>null;
            this.assetTitle = _data["assetTitle"] !== undefined ? _data["assetTitle"] : <any>null;
            this.assetNotes = _data["assetNotes"] !== undefined ? _data["assetNotes"] : <any>null;
            this.siteId = _data["siteId"] !== undefined ? _data["siteId"] : <any>null;
            this.latitude = _data["latitude"] !== undefined ? _data["latitude"] : <any>null;
            this.longitude = _data["longitude"] !== undefined ? _data["longitude"] : <any>null;
            this.installedTechName = _data["installedTechName"] !== undefined ? _data["installedTechName"] : <any>null;
            this.customerContactName = _data["customerContactName"] !== undefined ? _data["customerContactName"] : <any>null;
            this.customerContactPhone = _data["customerContactPhone"] !== undefined ? _data["customerContactPhone"] : <any>null;
            this.customerName = _data["customerName"] !== undefined ? _data["customerName"] : <any>null;
            this.siteNumber = _data["siteNumber"] !== undefined ? _data["siteNumber"] : <any>null;
            this.address1 = _data["address1"] !== undefined ? _data["address1"] : <any>null;
            this.address2 = _data["address2"] !== undefined ? _data["address2"] : <any>null;
            this.address3 = _data["address3"] !== undefined ? _data["address3"] : <any>null;
            this.city = _data["city"] !== undefined ? _data["city"] : <any>null;
            this.state = _data["state"] !== undefined ? _data["state"] : <any>null;
            this.country = _data["country"] !== undefined ? _data["country"] : <any>null;
            this.postalCode = _data["postalCode"] !== undefined ? _data["postalCode"] : <any>null;
            this.siteNotes = _data["siteNotes"] !== undefined ? _data["siteNotes"] : <any>null;
            this.siteDescription = _data["siteDescription"] !== undefined ? _data["siteDescription"] : <any>null;
            this.siteTimeZoneId = _data["siteTimeZoneId"] !== undefined ? _data["siteTimeZoneId"] : <any>null;
            this.siteTimeZoneDisplayName = _data["siteTimeZoneDisplayName"] !== undefined ? _data["siteTimeZoneDisplayName"] : <any>null;
            this.isCrossDomainAccess = _data["isCrossDomainAccess"] !== undefined ? _data["isCrossDomainAccess"] : <any>null;
            this.eventRuleGroupName = _data["eventRuleGroupName"] !== undefined ? _data["eventRuleGroupName"] : <any>null;
            this.referenceDocumentUrl = _data["referenceDocumentUrl"] !== undefined ? _data["referenceDocumentUrl"] : <any>null;
            this.numberOfTubes = _data["numberOfTubes"] !== undefined ? _data["numberOfTubes"] : <any>null;
            this.tubeConfiguration = _data["tubeConfiguration"] !== undefined ? _data["tubeConfiguration"] : <any>null;
            this.requalifierIdNumber = _data["requalifierIdNumber"] !== undefined ? _data["requalifierIdNumber"] : <any>null;
            this.lastTestDate = _data["lastTestDate"] ? new Date(_data["lastTestDate"].toString()) : <any>null;
            this.testDueDate = _data["testDueDate"] ? new Date(_data["testDueDate"].toString()) : <any>null;
            this.lastExternalNeckInspection = _data["lastExternalNeckInspection"] ? new Date(_data["lastExternalNeckInspection"].toString()) : <any>null;
            this.visualInspectionDueDate = _data["visualInspectionDueDate"] ? new Date(_data["visualInspectionDueDate"].toString()) : <any>null;
            this.dotStampedPressure = _data["dotStampedPressure"] !== undefined ? _data["dotStampedPressure"] : <any>null;
            this.dotSpecialFillingLimit = _data["dotSpecialFillingLimit"] !== undefined ? _data["dotSpecialFillingLimit"] : <any>null;
            this.dotTestPressure = _data["dotTestPressure"] !== undefined ? _data["dotTestPressure"] : <any>null;
            this.dotWaterVolume = _data["dotWaterVolume"] !== undefined ? _data["dotWaterVolume"] : <any>null;
            this.imdgMaxWorkingPressure = _data["imdgMaxWorkingPressure"] !== undefined ? _data["imdgMaxWorkingPressure"] : <any>null;
            this.imdgTestPressure = _data["imdgTestPressure"] !== undefined ? _data["imdgTestPressure"] : <any>null;
            this.imdgWaterVolume = _data["imdgWaterVolume"] !== undefined ? _data["imdgWaterVolume"] : <any>null;
            this.fillCountSinceLastTestDate = _data["fillCountSinceLastTestDate"] !== undefined ? _data["fillCountSinceLastTestDate"] : <any>null;
            if (Array.isArray(_data["customProperties"])) {
                this.customProperties = [] as any;
                for (let item of _data["customProperties"])
                    this.customProperties!.push(AssetDetailCustomPropertyInfo.fromJS(item));
            }
            else {
                this.customProperties = <any>null;
            }
            if (Array.isArray(_data["dataChannels"])) {
                this.dataChannels = [] as any;
                for (let item of _data["dataChannels"])
                    this.dataChannels!.push(AssetDetailDataChannelInfo.fromJS(item));
            }
            else {
                this.dataChannels = <any>null;
            }
            this.dayZero = _data["dayZero"] ? new Date(_data["dayZero"].toString()) : <any>null;
            this.designCurveType = _data["designCurveType"] !== undefined ? _data["designCurveType"] : <any>null;
        }
    }

    static fromJS(data: any): AssetDetail {
        data = typeof data === 'object' ? data : {};
        let result = new AssetDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["assetType"] = this.assetType !== undefined ? this.assetType : <any>null;
        data["assetDescription"] = this.assetDescription !== undefined ? this.assetDescription : <any>null;
        data["assetStatus"] = this.assetStatus !== undefined ? this.assetStatus : <any>null;
        data["assetTitle"] = this.assetTitle !== undefined ? this.assetTitle : <any>null;
        data["assetNotes"] = this.assetNotes !== undefined ? this.assetNotes : <any>null;
        data["siteId"] = this.siteId !== undefined ? this.siteId : <any>null;
        data["latitude"] = this.latitude !== undefined ? this.latitude : <any>null;
        data["longitude"] = this.longitude !== undefined ? this.longitude : <any>null;
        data["installedTechName"] = this.installedTechName !== undefined ? this.installedTechName : <any>null;
        data["customerContactName"] = this.customerContactName !== undefined ? this.customerContactName : <any>null;
        data["customerContactPhone"] = this.customerContactPhone !== undefined ? this.customerContactPhone : <any>null;
        data["customerName"] = this.customerName !== undefined ? this.customerName : <any>null;
        data["siteNumber"] = this.siteNumber !== undefined ? this.siteNumber : <any>null;
        data["address1"] = this.address1 !== undefined ? this.address1 : <any>null;
        data["address2"] = this.address2 !== undefined ? this.address2 : <any>null;
        data["address3"] = this.address3 !== undefined ? this.address3 : <any>null;
        data["city"] = this.city !== undefined ? this.city : <any>null;
        data["state"] = this.state !== undefined ? this.state : <any>null;
        data["country"] = this.country !== undefined ? this.country : <any>null;
        data["postalCode"] = this.postalCode !== undefined ? this.postalCode : <any>null;
        data["siteNotes"] = this.siteNotes !== undefined ? this.siteNotes : <any>null;
        data["siteDescription"] = this.siteDescription !== undefined ? this.siteDescription : <any>null;
        data["siteTimeZoneId"] = this.siteTimeZoneId !== undefined ? this.siteTimeZoneId : <any>null;
        data["siteTimeZoneDisplayName"] = this.siteTimeZoneDisplayName !== undefined ? this.siteTimeZoneDisplayName : <any>null;
        data["isCrossDomainAccess"] = this.isCrossDomainAccess !== undefined ? this.isCrossDomainAccess : <any>null;
        data["eventRuleGroupName"] = this.eventRuleGroupName !== undefined ? this.eventRuleGroupName : <any>null;
        data["referenceDocumentUrl"] = this.referenceDocumentUrl !== undefined ? this.referenceDocumentUrl : <any>null;
        data["numberOfTubes"] = this.numberOfTubes !== undefined ? this.numberOfTubes : <any>null;
        data["tubeConfiguration"] = this.tubeConfiguration !== undefined ? this.tubeConfiguration : <any>null;
        data["requalifierIdNumber"] = this.requalifierIdNumber !== undefined ? this.requalifierIdNumber : <any>null;
        data["lastTestDate"] = this.lastTestDate ? this.lastTestDate.toISOString() : <any>null;
        data["testDueDate"] = this.testDueDate ? this.testDueDate.toISOString() : <any>null;
        data["lastExternalNeckInspection"] = this.lastExternalNeckInspection ? this.lastExternalNeckInspection.toISOString() : <any>null;
        data["visualInspectionDueDate"] = this.visualInspectionDueDate ? this.visualInspectionDueDate.toISOString() : <any>null;
        data["dotStampedPressure"] = this.dotStampedPressure !== undefined ? this.dotStampedPressure : <any>null;
        data["dotSpecialFillingLimit"] = this.dotSpecialFillingLimit !== undefined ? this.dotSpecialFillingLimit : <any>null;
        data["dotTestPressure"] = this.dotTestPressure !== undefined ? this.dotTestPressure : <any>null;
        data["dotWaterVolume"] = this.dotWaterVolume !== undefined ? this.dotWaterVolume : <any>null;
        data["imdgMaxWorkingPressure"] = this.imdgMaxWorkingPressure !== undefined ? this.imdgMaxWorkingPressure : <any>null;
        data["imdgTestPressure"] = this.imdgTestPressure !== undefined ? this.imdgTestPressure : <any>null;
        data["imdgWaterVolume"] = this.imdgWaterVolume !== undefined ? this.imdgWaterVolume : <any>null;
        data["fillCountSinceLastTestDate"] = this.fillCountSinceLastTestDate !== undefined ? this.fillCountSinceLastTestDate : <any>null;
        if (Array.isArray(this.customProperties)) {
            data["customProperties"] = [];
            for (let item of this.customProperties)
                data["customProperties"].push(item.toJSON());
        }
        if (Array.isArray(this.dataChannels)) {
            data["dataChannels"] = [];
            for (let item of this.dataChannels)
                data["dataChannels"].push(item.toJSON());
        }
        data["dayZero"] = this.dayZero ? this.dayZero.toISOString() : <any>null;
        data["designCurveType"] = this.designCurveType !== undefined ? this.designCurveType : <any>null;
        return data;
    }
}

export enum AssetType {
    None = 0,
    Tank = 1,
    HeliumIsoContainer = 2,
    Vaporizer = 3,
    PressurePump = 4,
    CompositeAsset = 5,
    FlowMeter = 6,
    GasMixer = 7,
    Plant = 8,
    TubeTrailer = 9,
    Pipeline = 10,
    HVAC = 11,
    CFM = 12,
    EM = 13,
    MkLine = 14,
    FoodFreezer = 15,
}

export enum Status {
    Informational = 0,
    Warning = 1,
    High = 2,
    Critical = 3,
}

export class AssetDetailCustomPropertyInfo {
    customPropertyTypeId?: string;
    name?: string | null;
    alias?: string | null;
    value?: string | null;

    init(_data?: any) {
        if (_data) {
            this.customPropertyTypeId = _data["customPropertyTypeId"] !== undefined ? _data["customPropertyTypeId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.alias = _data["alias"] !== undefined ? _data["alias"] : <any>null;
            this.value = _data["value"] !== undefined ? _data["value"] : <any>null;
        }
    }

    static fromJS(data: any): AssetDetailCustomPropertyInfo {
        data = typeof data === 'object' ? data : {};
        let result = new AssetDetailCustomPropertyInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customPropertyTypeId"] = this.customPropertyTypeId !== undefined ? this.customPropertyTypeId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["alias"] = this.alias !== undefined ? this.alias : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        return data;
    }
}

export class AssetDetailDataChannelInfo {
    dataChannelId?: string;
    type?: DataChannelType;
    gasMixerDataChannelType?: GasMixerDataChannelType | null;
    dataLoggingRate?: string | null;
    description?: string | null;
    siteId?: string | null;
    siteNumber?: string | null;
    siteCustomerName?: string | null;
    siteCity?: string | null;
    siteState?: string | null;
    displayUnits?: UnitType | null;
    displayUnitsAsText?: string | null;
    latestScaledValue?: number | null;
    latestScaledValue2?: number | null;
    latestReadingTimestamp?: Date | null;
    graphMin?: number | null;
    graphMax?: number | null;
    ftpEnabled?: boolean | null;
    ftpDomainId?: string | null;
    ftpEnabled2?: boolean | null;
    ftpDomainId2?: string | null;
    forecastMode?: ForecastModeType;
    forecastState?: ForecastState;
    tankDimensionId?: string | null;
    productName?: string | null;
    productDescription?: string | null;
    displayPriority?: number;
    digitalState0Text?: string | null;
    digitalState1Text?: string | null;
    digitalState2Text?: string | null;
    digitalState3Text?: string | null;
    digitalState0Limit?: number | null;
    digitalState1Limit?: number | null;
    digitalState2Limit?: number | null;
    digitalState3Limit?: number | null;
    assetTimeZoneId?: number | null;
    rtuChannelId?: string | null;
    channelNumber?: string | null;
    channelType?: RTUChannelType | null;
    rtuId?: string | null;
    rtuDeviceId?: string | null;
    rtuTransportType?: RTUTransportType | null;
    dataSource?: DataChannelDataSourceType;
    rtuType?: RTUType | null;
    rtuCategory?: RTUCategoryType | null;
    isPollable?: boolean;
    eventStatus?: string | null;
    eventImportanceLevel?: EventImportanceLevelType | null;
    scaledUnits?: UnitType | null;
    scaledUnitsAsText?: string | null;
    isVolumetric?: boolean;
    scaledMin?: number;
    scaledMax?: number;
    maxProductHeight?: number | null;
    productSpecificGravity?: number | null;
    standardVolumePerCubicMeter?: number | null;
    tankType?: TankType | null;
    useStrappingChartForConversion?: boolean;
    strappingLevelUnits?: UnitType | null;
    strappingVolumeUnits?: UnitType | null;
    tankDiameterInMeters?: number | null;
    tankLengthInMeters?: number | null;
    tankDishHeightInMeters?: number | null;
    tankHeightInMeters?: number | null;
    tankWidthInMeters?: number | null;
    rcmPowerMode?: RTUPowerModeType | null;
    smsPollMode?: number | null;
    isRTUPublished?: boolean | null;
    isRTUPollingEnabled?: boolean;
    maxDeliverQuantity?: number | null;
    usePrescaling?: boolean;
    useLimits?: boolean;
    apciTankFunction?: APCITankFunctionType | null;
    isAPCISendToLBShell?: boolean;
    isAPCILBShellSubscriber?: boolean;
    apciUnits?: APCIUnitType | null;
    strappingChartInfo?: StrappingChartInfo[] | null;
    enabledEvents?: AssetDetailDataChannelEventInfo[] | null;
    scheduledDeliveries?: AssetDetailDeliveryScheduleInfo[] | null;

    init(_data?: any) {
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.gasMixerDataChannelType = _data["gasMixerDataChannelType"] !== undefined ? _data["gasMixerDataChannelType"] : <any>null;
            this.dataLoggingRate = _data["dataLoggingRate"] !== undefined ? _data["dataLoggingRate"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.siteId = _data["siteId"] !== undefined ? _data["siteId"] : <any>null;
            this.siteNumber = _data["siteNumber"] !== undefined ? _data["siteNumber"] : <any>null;
            this.siteCustomerName = _data["siteCustomerName"] !== undefined ? _data["siteCustomerName"] : <any>null;
            this.siteCity = _data["siteCity"] !== undefined ? _data["siteCity"] : <any>null;
            this.siteState = _data["siteState"] !== undefined ? _data["siteState"] : <any>null;
            this.displayUnits = _data["displayUnits"] !== undefined ? _data["displayUnits"] : <any>null;
            this.displayUnitsAsText = _data["displayUnitsAsText"] !== undefined ? _data["displayUnitsAsText"] : <any>null;
            this.latestScaledValue = _data["latestScaledValue"] !== undefined ? _data["latestScaledValue"] : <any>null;
            this.latestScaledValue2 = _data["latestScaledValue2"] !== undefined ? _data["latestScaledValue2"] : <any>null;
            this.latestReadingTimestamp = _data["latestReadingTimestamp"] ? new Date(_data["latestReadingTimestamp"].toString()) : <any>null;
            this.graphMin = _data["graphMin"] !== undefined ? _data["graphMin"] : <any>null;
            this.graphMax = _data["graphMax"] !== undefined ? _data["graphMax"] : <any>null;
            this.ftpEnabled = _data["ftpEnabled"] !== undefined ? _data["ftpEnabled"] : <any>null;
            this.ftpDomainId = _data["ftpDomainId"] !== undefined ? _data["ftpDomainId"] : <any>null;
            this.ftpEnabled2 = _data["ftpEnabled2"] !== undefined ? _data["ftpEnabled2"] : <any>null;
            this.ftpDomainId2 = _data["ftpDomainId2"] !== undefined ? _data["ftpDomainId2"] : <any>null;
            this.forecastMode = _data["forecastMode"] !== undefined ? _data["forecastMode"] : <any>null;
            this.forecastState = _data["forecastState"] !== undefined ? _data["forecastState"] : <any>null;
            this.tankDimensionId = _data["tankDimensionId"] !== undefined ? _data["tankDimensionId"] : <any>null;
            this.productName = _data["productName"] !== undefined ? _data["productName"] : <any>null;
            this.productDescription = _data["productDescription"] !== undefined ? _data["productDescription"] : <any>null;
            this.displayPriority = _data["displayPriority"] !== undefined ? _data["displayPriority"] : <any>null;
            this.digitalState0Text = _data["digitalState0Text"] !== undefined ? _data["digitalState0Text"] : <any>null;
            this.digitalState1Text = _data["digitalState1Text"] !== undefined ? _data["digitalState1Text"] : <any>null;
            this.digitalState2Text = _data["digitalState2Text"] !== undefined ? _data["digitalState2Text"] : <any>null;
            this.digitalState3Text = _data["digitalState3Text"] !== undefined ? _data["digitalState3Text"] : <any>null;
            this.digitalState0Limit = _data["digitalState0Limit"] !== undefined ? _data["digitalState0Limit"] : <any>null;
            this.digitalState1Limit = _data["digitalState1Limit"] !== undefined ? _data["digitalState1Limit"] : <any>null;
            this.digitalState2Limit = _data["digitalState2Limit"] !== undefined ? _data["digitalState2Limit"] : <any>null;
            this.digitalState3Limit = _data["digitalState3Limit"] !== undefined ? _data["digitalState3Limit"] : <any>null;
            this.assetTimeZoneId = _data["assetTimeZoneId"] !== undefined ? _data["assetTimeZoneId"] : <any>null;
            this.rtuChannelId = _data["rtuChannelId"] !== undefined ? _data["rtuChannelId"] : <any>null;
            this.channelNumber = _data["channelNumber"] !== undefined ? _data["channelNumber"] : <any>null;
            this.channelType = _data["channelType"] !== undefined ? _data["channelType"] : <any>null;
            this.rtuId = _data["rtuId"] !== undefined ? _data["rtuId"] : <any>null;
            this.rtuDeviceId = _data["rtuDeviceId"] !== undefined ? _data["rtuDeviceId"] : <any>null;
            this.rtuTransportType = _data["rtuTransportType"] !== undefined ? _data["rtuTransportType"] : <any>null;
            this.dataSource = _data["dataSource"] !== undefined ? _data["dataSource"] : <any>null;
            this.rtuType = _data["rtuType"] !== undefined ? _data["rtuType"] : <any>null;
            this.rtuCategory = _data["rtuCategory"] !== undefined ? _data["rtuCategory"] : <any>null;
            this.isPollable = _data["isPollable"] !== undefined ? _data["isPollable"] : <any>null;
            this.eventStatus = _data["eventStatus"] !== undefined ? _data["eventStatus"] : <any>null;
            this.eventImportanceLevel = _data["eventImportanceLevel"] !== undefined ? _data["eventImportanceLevel"] : <any>null;
            this.scaledUnits = _data["scaledUnits"] !== undefined ? _data["scaledUnits"] : <any>null;
            this.scaledUnitsAsText = _data["scaledUnitsAsText"] !== undefined ? _data["scaledUnitsAsText"] : <any>null;
            this.isVolumetric = _data["isVolumetric"] !== undefined ? _data["isVolumetric"] : <any>null;
            this.scaledMin = _data["scaledMin"] !== undefined ? _data["scaledMin"] : <any>null;
            this.scaledMax = _data["scaledMax"] !== undefined ? _data["scaledMax"] : <any>null;
            this.maxProductHeight = _data["maxProductHeight"] !== undefined ? _data["maxProductHeight"] : <any>null;
            this.productSpecificGravity = _data["productSpecificGravity"] !== undefined ? _data["productSpecificGravity"] : <any>null;
            this.standardVolumePerCubicMeter = _data["standardVolumePerCubicMeter"] !== undefined ? _data["standardVolumePerCubicMeter"] : <any>null;
            this.tankType = _data["tankType"] !== undefined ? _data["tankType"] : <any>null;
            this.useStrappingChartForConversion = _data["useStrappingChartForConversion"] !== undefined ? _data["useStrappingChartForConversion"] : <any>null;
            this.strappingLevelUnits = _data["strappingLevelUnits"] !== undefined ? _data["strappingLevelUnits"] : <any>null;
            this.strappingVolumeUnits = _data["strappingVolumeUnits"] !== undefined ? _data["strappingVolumeUnits"] : <any>null;
            this.tankDiameterInMeters = _data["tankDiameterInMeters"] !== undefined ? _data["tankDiameterInMeters"] : <any>null;
            this.tankLengthInMeters = _data["tankLengthInMeters"] !== undefined ? _data["tankLengthInMeters"] : <any>null;
            this.tankDishHeightInMeters = _data["tankDishHeightInMeters"] !== undefined ? _data["tankDishHeightInMeters"] : <any>null;
            this.tankHeightInMeters = _data["tankHeightInMeters"] !== undefined ? _data["tankHeightInMeters"] : <any>null;
            this.tankWidthInMeters = _data["tankWidthInMeters"] !== undefined ? _data["tankWidthInMeters"] : <any>null;
            this.rcmPowerMode = _data["rcmPowerMode"] !== undefined ? _data["rcmPowerMode"] : <any>null;
            this.smsPollMode = _data["smsPollMode"] !== undefined ? _data["smsPollMode"] : <any>null;
            this.isRTUPublished = _data["isRTUPublished"] !== undefined ? _data["isRTUPublished"] : <any>null;
            this.isRTUPollingEnabled = _data["isRTUPollingEnabled"] !== undefined ? _data["isRTUPollingEnabled"] : <any>null;
            this.maxDeliverQuantity = _data["maxDeliverQuantity"] !== undefined ? _data["maxDeliverQuantity"] : <any>null;
            this.usePrescaling = _data["usePrescaling"] !== undefined ? _data["usePrescaling"] : <any>null;
            this.useLimits = _data["useLimits"] !== undefined ? _data["useLimits"] : <any>null;
            this.apciTankFunction = _data["apciTankFunction"] !== undefined ? _data["apciTankFunction"] : <any>null;
            this.isAPCISendToLBShell = _data["isAPCISendToLBShell"] !== undefined ? _data["isAPCISendToLBShell"] : <any>null;
            this.isAPCILBShellSubscriber = _data["isAPCILBShellSubscriber"] !== undefined ? _data["isAPCILBShellSubscriber"] : <any>null;
            this.apciUnits = _data["apciUnits"] !== undefined ? _data["apciUnits"] : <any>null;
            if (Array.isArray(_data["strappingChartInfo"])) {
                this.strappingChartInfo = [] as any;
                for (let item of _data["strappingChartInfo"])
                    this.strappingChartInfo!.push(StrappingChartInfo.fromJS(item));
            }
            else {
                this.strappingChartInfo = <any>null;
            }
            if (Array.isArray(_data["enabledEvents"])) {
                this.enabledEvents = [] as any;
                for (let item of _data["enabledEvents"])
                    this.enabledEvents!.push(AssetDetailDataChannelEventInfo.fromJS(item));
            }
            else {
                this.enabledEvents = <any>null;
            }
            if (Array.isArray(_data["scheduledDeliveries"])) {
                this.scheduledDeliveries = [] as any;
                for (let item of _data["scheduledDeliveries"])
                    this.scheduledDeliveries!.push(AssetDetailDeliveryScheduleInfo.fromJS(item));
            }
            else {
                this.scheduledDeliveries = <any>null;
            }
        }
    }

    static fromJS(data: any): AssetDetailDataChannelInfo {
        data = typeof data === 'object' ? data : {};
        let result = new AssetDetailDataChannelInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["gasMixerDataChannelType"] = this.gasMixerDataChannelType !== undefined ? this.gasMixerDataChannelType : <any>null;
        data["dataLoggingRate"] = this.dataLoggingRate !== undefined ? this.dataLoggingRate : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["siteId"] = this.siteId !== undefined ? this.siteId : <any>null;
        data["siteNumber"] = this.siteNumber !== undefined ? this.siteNumber : <any>null;
        data["siteCustomerName"] = this.siteCustomerName !== undefined ? this.siteCustomerName : <any>null;
        data["siteCity"] = this.siteCity !== undefined ? this.siteCity : <any>null;
        data["siteState"] = this.siteState !== undefined ? this.siteState : <any>null;
        data["displayUnits"] = this.displayUnits !== undefined ? this.displayUnits : <any>null;
        data["displayUnitsAsText"] = this.displayUnitsAsText !== undefined ? this.displayUnitsAsText : <any>null;
        data["latestScaledValue"] = this.latestScaledValue !== undefined ? this.latestScaledValue : <any>null;
        data["latestScaledValue2"] = this.latestScaledValue2 !== undefined ? this.latestScaledValue2 : <any>null;
        data["latestReadingTimestamp"] = this.latestReadingTimestamp ? this.latestReadingTimestamp.toISOString() : <any>null;
        data["graphMin"] = this.graphMin !== undefined ? this.graphMin : <any>null;
        data["graphMax"] = this.graphMax !== undefined ? this.graphMax : <any>null;
        data["ftpEnabled"] = this.ftpEnabled !== undefined ? this.ftpEnabled : <any>null;
        data["ftpDomainId"] = this.ftpDomainId !== undefined ? this.ftpDomainId : <any>null;
        data["ftpEnabled2"] = this.ftpEnabled2 !== undefined ? this.ftpEnabled2 : <any>null;
        data["ftpDomainId2"] = this.ftpDomainId2 !== undefined ? this.ftpDomainId2 : <any>null;
        data["forecastMode"] = this.forecastMode !== undefined ? this.forecastMode : <any>null;
        data["forecastState"] = this.forecastState !== undefined ? this.forecastState : <any>null;
        data["tankDimensionId"] = this.tankDimensionId !== undefined ? this.tankDimensionId : <any>null;
        data["productName"] = this.productName !== undefined ? this.productName : <any>null;
        data["productDescription"] = this.productDescription !== undefined ? this.productDescription : <any>null;
        data["displayPriority"] = this.displayPriority !== undefined ? this.displayPriority : <any>null;
        data["digitalState0Text"] = this.digitalState0Text !== undefined ? this.digitalState0Text : <any>null;
        data["digitalState1Text"] = this.digitalState1Text !== undefined ? this.digitalState1Text : <any>null;
        data["digitalState2Text"] = this.digitalState2Text !== undefined ? this.digitalState2Text : <any>null;
        data["digitalState3Text"] = this.digitalState3Text !== undefined ? this.digitalState3Text : <any>null;
        data["digitalState0Limit"] = this.digitalState0Limit !== undefined ? this.digitalState0Limit : <any>null;
        data["digitalState1Limit"] = this.digitalState1Limit !== undefined ? this.digitalState1Limit : <any>null;
        data["digitalState2Limit"] = this.digitalState2Limit !== undefined ? this.digitalState2Limit : <any>null;
        data["digitalState3Limit"] = this.digitalState3Limit !== undefined ? this.digitalState3Limit : <any>null;
        data["assetTimeZoneId"] = this.assetTimeZoneId !== undefined ? this.assetTimeZoneId : <any>null;
        data["rtuChannelId"] = this.rtuChannelId !== undefined ? this.rtuChannelId : <any>null;
        data["channelNumber"] = this.channelNumber !== undefined ? this.channelNumber : <any>null;
        data["channelType"] = this.channelType !== undefined ? this.channelType : <any>null;
        data["rtuId"] = this.rtuId !== undefined ? this.rtuId : <any>null;
        data["rtuDeviceId"] = this.rtuDeviceId !== undefined ? this.rtuDeviceId : <any>null;
        data["rtuTransportType"] = this.rtuTransportType !== undefined ? this.rtuTransportType : <any>null;
        data["dataSource"] = this.dataSource !== undefined ? this.dataSource : <any>null;
        data["rtuType"] = this.rtuType !== undefined ? this.rtuType : <any>null;
        data["rtuCategory"] = this.rtuCategory !== undefined ? this.rtuCategory : <any>null;
        data["isPollable"] = this.isPollable !== undefined ? this.isPollable : <any>null;
        data["eventStatus"] = this.eventStatus !== undefined ? this.eventStatus : <any>null;
        data["eventImportanceLevel"] = this.eventImportanceLevel !== undefined ? this.eventImportanceLevel : <any>null;
        data["scaledUnits"] = this.scaledUnits !== undefined ? this.scaledUnits : <any>null;
        data["scaledUnitsAsText"] = this.scaledUnitsAsText !== undefined ? this.scaledUnitsAsText : <any>null;
        data["isVolumetric"] = this.isVolumetric !== undefined ? this.isVolumetric : <any>null;
        data["scaledMin"] = this.scaledMin !== undefined ? this.scaledMin : <any>null;
        data["scaledMax"] = this.scaledMax !== undefined ? this.scaledMax : <any>null;
        data["maxProductHeight"] = this.maxProductHeight !== undefined ? this.maxProductHeight : <any>null;
        data["productSpecificGravity"] = this.productSpecificGravity !== undefined ? this.productSpecificGravity : <any>null;
        data["standardVolumePerCubicMeter"] = this.standardVolumePerCubicMeter !== undefined ? this.standardVolumePerCubicMeter : <any>null;
        data["tankType"] = this.tankType !== undefined ? this.tankType : <any>null;
        data["useStrappingChartForConversion"] = this.useStrappingChartForConversion !== undefined ? this.useStrappingChartForConversion : <any>null;
        data["strappingLevelUnits"] = this.strappingLevelUnits !== undefined ? this.strappingLevelUnits : <any>null;
        data["strappingVolumeUnits"] = this.strappingVolumeUnits !== undefined ? this.strappingVolumeUnits : <any>null;
        data["tankDiameterInMeters"] = this.tankDiameterInMeters !== undefined ? this.tankDiameterInMeters : <any>null;
        data["tankLengthInMeters"] = this.tankLengthInMeters !== undefined ? this.tankLengthInMeters : <any>null;
        data["tankDishHeightInMeters"] = this.tankDishHeightInMeters !== undefined ? this.tankDishHeightInMeters : <any>null;
        data["tankHeightInMeters"] = this.tankHeightInMeters !== undefined ? this.tankHeightInMeters : <any>null;
        data["tankWidthInMeters"] = this.tankWidthInMeters !== undefined ? this.tankWidthInMeters : <any>null;
        data["rcmPowerMode"] = this.rcmPowerMode !== undefined ? this.rcmPowerMode : <any>null;
        data["smsPollMode"] = this.smsPollMode !== undefined ? this.smsPollMode : <any>null;
        data["isRTUPublished"] = this.isRTUPublished !== undefined ? this.isRTUPublished : <any>null;
        data["isRTUPollingEnabled"] = this.isRTUPollingEnabled !== undefined ? this.isRTUPollingEnabled : <any>null;
        data["maxDeliverQuantity"] = this.maxDeliverQuantity !== undefined ? this.maxDeliverQuantity : <any>null;
        data["usePrescaling"] = this.usePrescaling !== undefined ? this.usePrescaling : <any>null;
        data["useLimits"] = this.useLimits !== undefined ? this.useLimits : <any>null;
        data["apciTankFunction"] = this.apciTankFunction !== undefined ? this.apciTankFunction : <any>null;
        data["isAPCISendToLBShell"] = this.isAPCISendToLBShell !== undefined ? this.isAPCISendToLBShell : <any>null;
        data["isAPCILBShellSubscriber"] = this.isAPCILBShellSubscriber !== undefined ? this.isAPCILBShellSubscriber : <any>null;
        data["apciUnits"] = this.apciUnits !== undefined ? this.apciUnits : <any>null;
        if (Array.isArray(this.strappingChartInfo)) {
            data["strappingChartInfo"] = [];
            for (let item of this.strappingChartInfo)
                data["strappingChartInfo"].push(item.toJSON());
        }
        if (Array.isArray(this.enabledEvents)) {
            data["enabledEvents"] = [];
            for (let item of this.enabledEvents)
                data["enabledEvents"].push(item.toJSON());
        }
        if (Array.isArray(this.scheduledDeliveries)) {
            data["scheduledDeliveries"] = [];
            for (let item of this.scheduledDeliveries)
                data["scheduledDeliveries"].push(item.toJSON());
        }
        return data;
    }
}

export enum GasMixerDataChannelType {
    None = 0,
    Gas1Pressure = 1,
    Gas2Pressure = 2,
    Gas3Pressure = 3,
    DigitalGasInValve = 4,
    MixingTankPressure = 5,
    GasOutAnalyzer = 6,
    MixerOutputPressure = 7,
}

export enum ForecastModeType {
    NoForecast = 0,
    HistoricalUsageRate = 1,
    ManualUsageRate = 2,
    Unsmoothed = 3,
}

export enum ForecastState {
    Valid = 0,
    InProgress = 1,
    InValid = 2,
}

export enum RTUChannelType {
    Analog = 1,
    Digital = 2,
    BatteryVoltage = 3,
    SupplyVoltage = 4,
    TransmitterLoopVoltage = 5,
    ExpansionBoardSupplyVoltage = 6,
    CaseTemperature = 7,
    DigitalOutput = 8,
    Gps = 9,
    AnalogOutput = 10,
    CounterInput = 11,
    SignalStrength = 12,
    ChargeCurrent = 13,
}

export enum DataChannelDataSourceType {
    RTU = 0,
    PublishedDataChannel = 1,
}

export enum RTUPowerModeType {
    LowPower = 0,
    Pollable = 1,
}

export enum APCITankFunctionType {
    Main = 0,
    Reserve1 = 1,
    Reserve2 = 2,
    Reserve3 = 3,
    Reserve4 = 4,
    Reserve5 = 5,
    Reserve6 = 6,
    Reserve7 = 7,
    Reserve8 = 8,
    Reserve9 = 9,
}

export enum APCIUnitType {
    WaterColumnMillimeters = 1000,
    WaterColumnCentimeters = 1001,
    WaterColumnMeters = 1002,
    HydrogenMillimeters = 1003,
    HydrogenCentimeters = 1004,
    HydrogenMeters = 1005,
    WaterColumnInches = 1010,
    HydrogenInches = 1011,
    Millimeters = 1020,
    Centimeters = 1021,
    Meters = 1022,
    Inches = 1030,
    Liters = 1040,
    USGallons = 1050,
    Kilograms = 1060,
    Pounds = 1070,
    StandardCubicFoot = 1090,
    PercentageFull = 1100,
    GaugePressureBarg = 2001,
    GaugePressurePSI = 2002,
    Volt = 2003,
    Amp = 2004,
    Counts = 2005,
    DegreeCelcius = 2006,
    DegreeFahrenheit = 2007,
    DegreeKelvin = 2008,
    Hours = 2009,
    KilogramPerHour = 2010,
    KilogramMin = 2011,
    KiloWatt = 2012,
    KiloWattHour = 2013,
    MilliAmp = 2014,
    MilliBar = 2015,
    Minute = 2016,
    NormalCubicMeter = 2017,
    NormalCubicMeterPerHr = 2018,
    Ohms = 2019,
    PartPerMillion = 2020,
    PartPerMillionO2 = 2021,
    GaugePressurePSIAbsolute = 2022,
    StandardCubicFootPerHr = 2023,
    Tonne = 2024,
    Second = 2025,
}

export class AssetDetailDataChannelEventInfo {
    dataChannelEventRuleId?: number;
    dataChannelId?: string;
    eventRuleId?: number;
    description?: string | null;
    ruleType?: EventRuleType;
    inventoryStatus?: EventInventoryStatusType;
    importanceLevel?: EventImportanceLevelType;
    comparator?: EventComparatorType;
    scaledEventValue?: number | null;
    isActive?: boolean;
    sortIndex?: number;
    rtuChannelEventType?: RTUChannelEventHistoryType | null;
    usageRate?: number | null;
    minimumReadingPeriod?: number | null;

    init(_data?: any) {
        if (_data) {
            this.dataChannelEventRuleId = _data["dataChannelEventRuleId"] !== undefined ? _data["dataChannelEventRuleId"] : <any>null;
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.eventRuleId = _data["eventRuleId"] !== undefined ? _data["eventRuleId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.ruleType = _data["ruleType"] !== undefined ? _data["ruleType"] : <any>null;
            this.inventoryStatus = _data["inventoryStatus"] !== undefined ? _data["inventoryStatus"] : <any>null;
            this.importanceLevel = _data["importanceLevel"] !== undefined ? _data["importanceLevel"] : <any>null;
            this.comparator = _data["comparator"] !== undefined ? _data["comparator"] : <any>null;
            this.scaledEventValue = _data["scaledEventValue"] !== undefined ? _data["scaledEventValue"] : <any>null;
            this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
            this.sortIndex = _data["sortIndex"] !== undefined ? _data["sortIndex"] : <any>null;
            this.rtuChannelEventType = _data["rtuChannelEventType"] !== undefined ? _data["rtuChannelEventType"] : <any>null;
            this.usageRate = _data["usageRate"] !== undefined ? _data["usageRate"] : <any>null;
            this.minimumReadingPeriod = _data["minimumReadingPeriod"] !== undefined ? _data["minimumReadingPeriod"] : <any>null;
        }
    }

    static fromJS(data: any): AssetDetailDataChannelEventInfo {
        data = typeof data === 'object' ? data : {};
        let result = new AssetDetailDataChannelEventInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelEventRuleId"] = this.dataChannelEventRuleId !== undefined ? this.dataChannelEventRuleId : <any>null;
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["eventRuleId"] = this.eventRuleId !== undefined ? this.eventRuleId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["ruleType"] = this.ruleType !== undefined ? this.ruleType : <any>null;
        data["inventoryStatus"] = this.inventoryStatus !== undefined ? this.inventoryStatus : <any>null;
        data["importanceLevel"] = this.importanceLevel !== undefined ? this.importanceLevel : <any>null;
        data["comparator"] = this.comparator !== undefined ? this.comparator : <any>null;
        data["scaledEventValue"] = this.scaledEventValue !== undefined ? this.scaledEventValue : <any>null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["sortIndex"] = this.sortIndex !== undefined ? this.sortIndex : <any>null;
        data["rtuChannelEventType"] = this.rtuChannelEventType !== undefined ? this.rtuChannelEventType : <any>null;
        data["usageRate"] = this.usageRate !== undefined ? this.usageRate : <any>null;
        data["minimumReadingPeriod"] = this.minimumReadingPeriod !== undefined ? this.minimumReadingPeriod : <any>null;
        return data;
    }
}

export enum EventInventoryStatusType {
    Full = 1,
    Reorder = 2,
    Critical = 3,
    UserDefined = 4,
    Empty = 5,
}

export enum EventComparatorType {
    EqualTo = 1,
    GreaterThan = 2,
    GreaterThanEqualTo = 3,
    LessThan = 4,
    LessThanEqualTo = 5,
}

export enum RTUChannelEventHistoryType {
    Unknown = 0,
    ReversePollPending = 1,
    SensorError = 2,
    IOCommunicationsFailure = 3,
    DeliveryNotice = 4,
    UsageRateAlarm = 5,
    RS485CommunicationsTimeout = 6,
    SignalOutOfAllowedRange = 7,
}

export class AssetDetailDeliveryScheduleInfo {
    deliveryScheduleId?: string;
    dataChannelId?: string;
    scheduledTime?: Date | null;
    isAutoFill?: boolean;
    deliveryAmount?: number | null;
    deliveryUnits?: UnitType | null;
    deliveryUnitsAsText?: string | null;

    init(_data?: any) {
        if (_data) {
            this.deliveryScheduleId = _data["deliveryScheduleId"] !== undefined ? _data["deliveryScheduleId"] : <any>null;
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.scheduledTime = _data["scheduledTime"] ? new Date(_data["scheduledTime"].toString()) : <any>null;
            this.isAutoFill = _data["isAutoFill"] !== undefined ? _data["isAutoFill"] : <any>null;
            this.deliveryAmount = _data["deliveryAmount"] !== undefined ? _data["deliveryAmount"] : <any>null;
            this.deliveryUnits = _data["deliveryUnits"] !== undefined ? _data["deliveryUnits"] : <any>null;
            this.deliveryUnitsAsText = _data["deliveryUnitsAsText"] !== undefined ? _data["deliveryUnitsAsText"] : <any>null;
        }
    }

    static fromJS(data: any): AssetDetailDeliveryScheduleInfo {
        data = typeof data === 'object' ? data : {};
        let result = new AssetDetailDeliveryScheduleInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deliveryScheduleId"] = this.deliveryScheduleId !== undefined ? this.deliveryScheduleId : <any>null;
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["scheduledTime"] = this.scheduledTime ? this.scheduledTime.toISOString() : <any>null;
        data["isAutoFill"] = this.isAutoFill !== undefined ? this.isAutoFill : <any>null;
        data["deliveryAmount"] = this.deliveryAmount !== undefined ? this.deliveryAmount : <any>null;
        data["deliveryUnits"] = this.deliveryUnits !== undefined ? this.deliveryUnits : <any>null;
        data["deliveryUnitsAsText"] = this.deliveryUnitsAsText !== undefined ? this.deliveryUnitsAsText : <any>null;
        return data;
    }
}

export enum DesignCurveType {
    None = 0,
    Tank1 = 1,
    Tank2 = 2,
    Tank3 = 3,
}

export class UserAssetSettingsDetail {
    userId?: string;
    assetId?: string;
    graphZoomLevelInHours?: number | null;
    graphStartDate?: Date | null;
    graphEndDate?: Date | null;
    datachannelSelections?: DataChannelSelectionSetup[] | null;

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.graphZoomLevelInHours = _data["graphZoomLevelInHours"] !== undefined ? _data["graphZoomLevelInHours"] : <any>null;
            this.graphStartDate = _data["graphStartDate"] ? new Date(_data["graphStartDate"].toString()) : <any>null;
            this.graphEndDate = _data["graphEndDate"] ? new Date(_data["graphEndDate"].toString()) : <any>null;
            if (Array.isArray(_data["datachannelSelections"])) {
                this.datachannelSelections = [] as any;
                for (let item of _data["datachannelSelections"])
                    this.datachannelSelections!.push(DataChannelSelectionSetup.fromJS(item));
            }
            else {
                this.datachannelSelections = <any>null;
            }
        }
    }

    static fromJS(data: any): UserAssetSettingsDetail {
        data = typeof data === 'object' ? data : {};
        let result = new UserAssetSettingsDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["graphZoomLevelInHours"] = this.graphZoomLevelInHours !== undefined ? this.graphZoomLevelInHours : <any>null;
        data["graphStartDate"] = this.graphStartDate ? this.graphStartDate.toISOString() : <any>null;
        data["graphEndDate"] = this.graphEndDate ? this.graphEndDate.toISOString() : <any>null;
        if (Array.isArray(this.datachannelSelections)) {
            data["datachannelSelections"] = [];
            for (let item of this.datachannelSelections)
                data["datachannelSelections"].push(item.toJSON());
        }
        return data;
    }
}

export class DataChannelSelectionSetup {
    dataChannelId?: string;
    isSelected?: boolean;

    init(_data?: any) {
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.isSelected = _data["isSelected"] !== undefined ? _data["isSelected"] : <any>null;
        }
    }

    static fromJS(data: any): DataChannelSelectionSetup {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelSelectionSetup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["isSelected"] = this.isSelected !== undefined ? this.isSelected : <any>null;
        return data;
    }
}

export class DataChannelGraphInfo {
    dataChannelId?: string;
    dataChannelType?: DataChannelType;
    dataLoggingRate?: string | null;
    description?: string | null;
    displayUnits?: UnitType | null;
    displayUnitsAsText?: string | null;
    scaledGraphMin?: number | null;
    scaledGraphMax?: number | null;
    productName?: string | null;
    productDescription?: string | null;
    displayPriority?: number;
    digitalState0Text?: string | null;
    digitalState1Text?: string | null;
    digitalState2Text?: string | null;
    digitalState3Text?: string | null;
    forecastStatus?: ForecastState;
    levelRules?: DataChannelGraphLevelRuleInfo[] | null;
    delimitedReadingsAsText?: string | null;
    delimitedForecastReadingsAsText?: string | null;
    delimitedHighForecastReadingsAsText?: string | null;
    delimitedLowForecastReadingsAsText?: string | null;
    assetTimeZoneId?: number | null;
    scaledUnits?: UnitType | null;
    scaledUnitsAsText?: string | null;
    isVolumetric?: boolean;
    scaledMin?: number;
    scaledMax?: number;
    scaledMaxProductHeight?: number | null;
    maxDeliverQuantity?: number | null;
    maxProductHeight?: number | null;
    productSpecificGravity?: number | null;
    standardVolumePerCubicMeter?: number | null;
    tankType?: TankType | null;
    useStrappingChartForConversion?: boolean;
    strappingLevelUnits?: UnitType | null;
    strappingVolumeUnits?: UnitType | null;
    tankDiameterInMeters?: number | null;
    tankLengthInMeters?: number | null;
    tankDishHeightInMeters?: number | null;
    tankHeightInMeters?: number | null;
    tankWidthInMeters?: number | null;
    readingTimeSliceSize?: string | null;
    strappingChartInfo?: StrappingChartInfo[] | null;
    scheduledDeliveries?: DeliveryScheduleDetail[] | null;
    highLowForecastEnabled?: boolean;
    designCurveEnabled?: boolean;

    init(_data?: any) {
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.dataChannelType = _data["dataChannelType"] !== undefined ? _data["dataChannelType"] : <any>null;
            this.dataLoggingRate = _data["dataLoggingRate"] !== undefined ? _data["dataLoggingRate"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.displayUnits = _data["displayUnits"] !== undefined ? _data["displayUnits"] : <any>null;
            this.displayUnitsAsText = _data["displayUnitsAsText"] !== undefined ? _data["displayUnitsAsText"] : <any>null;
            this.scaledGraphMin = _data["scaledGraphMin"] !== undefined ? _data["scaledGraphMin"] : <any>null;
            this.scaledGraphMax = _data["scaledGraphMax"] !== undefined ? _data["scaledGraphMax"] : <any>null;
            this.productName = _data["productName"] !== undefined ? _data["productName"] : <any>null;
            this.productDescription = _data["productDescription"] !== undefined ? _data["productDescription"] : <any>null;
            this.displayPriority = _data["displayPriority"] !== undefined ? _data["displayPriority"] : <any>null;
            this.digitalState0Text = _data["digitalState0Text"] !== undefined ? _data["digitalState0Text"] : <any>null;
            this.digitalState1Text = _data["digitalState1Text"] !== undefined ? _data["digitalState1Text"] : <any>null;
            this.digitalState2Text = _data["digitalState2Text"] !== undefined ? _data["digitalState2Text"] : <any>null;
            this.digitalState3Text = _data["digitalState3Text"] !== undefined ? _data["digitalState3Text"] : <any>null;
            this.forecastStatus = _data["forecastStatus"] !== undefined ? _data["forecastStatus"] : <any>null;
            if (Array.isArray(_data["levelRules"])) {
                this.levelRules = [] as any;
                for (let item of _data["levelRules"])
                    this.levelRules!.push(DataChannelGraphLevelRuleInfo.fromJS(item));
            }
            else {
                this.levelRules = <any>null;
            }
            this.delimitedReadingsAsText = _data["delimitedReadingsAsText"] !== undefined ? _data["delimitedReadingsAsText"] : <any>null;
            this.delimitedForecastReadingsAsText = _data["delimitedForecastReadingsAsText"] !== undefined ? _data["delimitedForecastReadingsAsText"] : <any>null;
            this.delimitedHighForecastReadingsAsText = _data["delimitedHighForecastReadingsAsText"] !== undefined ? _data["delimitedHighForecastReadingsAsText"] : <any>null;
            this.delimitedLowForecastReadingsAsText = _data["delimitedLowForecastReadingsAsText"] !== undefined ? _data["delimitedLowForecastReadingsAsText"] : <any>null;
            this.assetTimeZoneId = _data["assetTimeZoneId"] !== undefined ? _data["assetTimeZoneId"] : <any>null;
            this.scaledUnits = _data["scaledUnits"] !== undefined ? _data["scaledUnits"] : <any>null;
            this.scaledUnitsAsText = _data["scaledUnitsAsText"] !== undefined ? _data["scaledUnitsAsText"] : <any>null;
            this.isVolumetric = _data["isVolumetric"] !== undefined ? _data["isVolumetric"] : <any>null;
            this.scaledMin = _data["scaledMin"] !== undefined ? _data["scaledMin"] : <any>null;
            this.scaledMax = _data["scaledMax"] !== undefined ? _data["scaledMax"] : <any>null;
            this.scaledMaxProductHeight = _data["scaledMaxProductHeight"] !== undefined ? _data["scaledMaxProductHeight"] : <any>null;
            this.maxDeliverQuantity = _data["maxDeliverQuantity"] !== undefined ? _data["maxDeliverQuantity"] : <any>null;
            this.maxProductHeight = _data["maxProductHeight"] !== undefined ? _data["maxProductHeight"] : <any>null;
            this.productSpecificGravity = _data["productSpecificGravity"] !== undefined ? _data["productSpecificGravity"] : <any>null;
            this.standardVolumePerCubicMeter = _data["standardVolumePerCubicMeter"] !== undefined ? _data["standardVolumePerCubicMeter"] : <any>null;
            this.tankType = _data["tankType"] !== undefined ? _data["tankType"] : <any>null;
            this.useStrappingChartForConversion = _data["useStrappingChartForConversion"] !== undefined ? _data["useStrappingChartForConversion"] : <any>null;
            this.strappingLevelUnits = _data["strappingLevelUnits"] !== undefined ? _data["strappingLevelUnits"] : <any>null;
            this.strappingVolumeUnits = _data["strappingVolumeUnits"] !== undefined ? _data["strappingVolumeUnits"] : <any>null;
            this.tankDiameterInMeters = _data["tankDiameterInMeters"] !== undefined ? _data["tankDiameterInMeters"] : <any>null;
            this.tankLengthInMeters = _data["tankLengthInMeters"] !== undefined ? _data["tankLengthInMeters"] : <any>null;
            this.tankDishHeightInMeters = _data["tankDishHeightInMeters"] !== undefined ? _data["tankDishHeightInMeters"] : <any>null;
            this.tankHeightInMeters = _data["tankHeightInMeters"] !== undefined ? _data["tankHeightInMeters"] : <any>null;
            this.tankWidthInMeters = _data["tankWidthInMeters"] !== undefined ? _data["tankWidthInMeters"] : <any>null;
            this.readingTimeSliceSize = _data["readingTimeSliceSize"] !== undefined ? _data["readingTimeSliceSize"] : <any>null;
            if (Array.isArray(_data["strappingChartInfo"])) {
                this.strappingChartInfo = [] as any;
                for (let item of _data["strappingChartInfo"])
                    this.strappingChartInfo!.push(StrappingChartInfo.fromJS(item));
            }
            else {
                this.strappingChartInfo = <any>null;
            }
            if (Array.isArray(_data["scheduledDeliveries"])) {
                this.scheduledDeliveries = [] as any;
                for (let item of _data["scheduledDeliveries"])
                    this.scheduledDeliveries!.push(DeliveryScheduleDetail.fromJS(item));
            }
            else {
                this.scheduledDeliveries = <any>null;
            }
            this.highLowForecastEnabled = _data["highLowForecastEnabled"] !== undefined ? _data["highLowForecastEnabled"] : <any>null;
            this.designCurveEnabled = _data["designCurveEnabled"] !== undefined ? _data["designCurveEnabled"] : <any>null;
        }
    }

    static fromJS(data: any): DataChannelGraphInfo {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelGraphInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["dataChannelType"] = this.dataChannelType !== undefined ? this.dataChannelType : <any>null;
        data["dataLoggingRate"] = this.dataLoggingRate !== undefined ? this.dataLoggingRate : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["displayUnits"] = this.displayUnits !== undefined ? this.displayUnits : <any>null;
        data["displayUnitsAsText"] = this.displayUnitsAsText !== undefined ? this.displayUnitsAsText : <any>null;
        data["scaledGraphMin"] = this.scaledGraphMin !== undefined ? this.scaledGraphMin : <any>null;
        data["scaledGraphMax"] = this.scaledGraphMax !== undefined ? this.scaledGraphMax : <any>null;
        data["productName"] = this.productName !== undefined ? this.productName : <any>null;
        data["productDescription"] = this.productDescription !== undefined ? this.productDescription : <any>null;
        data["displayPriority"] = this.displayPriority !== undefined ? this.displayPriority : <any>null;
        data["digitalState0Text"] = this.digitalState0Text !== undefined ? this.digitalState0Text : <any>null;
        data["digitalState1Text"] = this.digitalState1Text !== undefined ? this.digitalState1Text : <any>null;
        data["digitalState2Text"] = this.digitalState2Text !== undefined ? this.digitalState2Text : <any>null;
        data["digitalState3Text"] = this.digitalState3Text !== undefined ? this.digitalState3Text : <any>null;
        data["forecastStatus"] = this.forecastStatus !== undefined ? this.forecastStatus : <any>null;
        if (Array.isArray(this.levelRules)) {
            data["levelRules"] = [];
            for (let item of this.levelRules)
                data["levelRules"].push(item.toJSON());
        }
        data["delimitedReadingsAsText"] = this.delimitedReadingsAsText !== undefined ? this.delimitedReadingsAsText : <any>null;
        data["delimitedForecastReadingsAsText"] = this.delimitedForecastReadingsAsText !== undefined ? this.delimitedForecastReadingsAsText : <any>null;
        data["delimitedHighForecastReadingsAsText"] = this.delimitedHighForecastReadingsAsText !== undefined ? this.delimitedHighForecastReadingsAsText : <any>null;
        data["delimitedLowForecastReadingsAsText"] = this.delimitedLowForecastReadingsAsText !== undefined ? this.delimitedLowForecastReadingsAsText : <any>null;
        data["assetTimeZoneId"] = this.assetTimeZoneId !== undefined ? this.assetTimeZoneId : <any>null;
        data["scaledUnits"] = this.scaledUnits !== undefined ? this.scaledUnits : <any>null;
        data["scaledUnitsAsText"] = this.scaledUnitsAsText !== undefined ? this.scaledUnitsAsText : <any>null;
        data["isVolumetric"] = this.isVolumetric !== undefined ? this.isVolumetric : <any>null;
        data["scaledMin"] = this.scaledMin !== undefined ? this.scaledMin : <any>null;
        data["scaledMax"] = this.scaledMax !== undefined ? this.scaledMax : <any>null;
        data["scaledMaxProductHeight"] = this.scaledMaxProductHeight !== undefined ? this.scaledMaxProductHeight : <any>null;
        data["maxDeliverQuantity"] = this.maxDeliverQuantity !== undefined ? this.maxDeliverQuantity : <any>null;
        data["maxProductHeight"] = this.maxProductHeight !== undefined ? this.maxProductHeight : <any>null;
        data["productSpecificGravity"] = this.productSpecificGravity !== undefined ? this.productSpecificGravity : <any>null;
        data["standardVolumePerCubicMeter"] = this.standardVolumePerCubicMeter !== undefined ? this.standardVolumePerCubicMeter : <any>null;
        data["tankType"] = this.tankType !== undefined ? this.tankType : <any>null;
        data["useStrappingChartForConversion"] = this.useStrappingChartForConversion !== undefined ? this.useStrappingChartForConversion : <any>null;
        data["strappingLevelUnits"] = this.strappingLevelUnits !== undefined ? this.strappingLevelUnits : <any>null;
        data["strappingVolumeUnits"] = this.strappingVolumeUnits !== undefined ? this.strappingVolumeUnits : <any>null;
        data["tankDiameterInMeters"] = this.tankDiameterInMeters !== undefined ? this.tankDiameterInMeters : <any>null;
        data["tankLengthInMeters"] = this.tankLengthInMeters !== undefined ? this.tankLengthInMeters : <any>null;
        data["tankDishHeightInMeters"] = this.tankDishHeightInMeters !== undefined ? this.tankDishHeightInMeters : <any>null;
        data["tankHeightInMeters"] = this.tankHeightInMeters !== undefined ? this.tankHeightInMeters : <any>null;
        data["tankWidthInMeters"] = this.tankWidthInMeters !== undefined ? this.tankWidthInMeters : <any>null;
        data["readingTimeSliceSize"] = this.readingTimeSliceSize !== undefined ? this.readingTimeSliceSize : <any>null;
        if (Array.isArray(this.strappingChartInfo)) {
            data["strappingChartInfo"] = [];
            for (let item of this.strappingChartInfo)
                data["strappingChartInfo"].push(item.toJSON());
        }
        if (Array.isArray(this.scheduledDeliveries)) {
            data["scheduledDeliveries"] = [];
            for (let item of this.scheduledDeliveries)
                data["scheduledDeliveries"].push(item.toJSON());
        }
        data["highLowForecastEnabled"] = this.highLowForecastEnabled !== undefined ? this.highLowForecastEnabled : <any>null;
        data["designCurveEnabled"] = this.designCurveEnabled !== undefined ? this.designCurveEnabled : <any>null;
        return data;
    }
}

export class DataChannelGraphLevelRuleInfo {
    name?: string | null;
    scaledLevel?: number;
    statusType?: EventInventoryStatusType;

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.scaledLevel = _data["scaledLevel"] !== undefined ? _data["scaledLevel"] : <any>null;
            this.statusType = _data["statusType"] !== undefined ? _data["statusType"] : <any>null;
        }
    }

    static fromJS(data: any): DataChannelGraphLevelRuleInfo {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelGraphLevelRuleInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["scaledLevel"] = this.scaledLevel !== undefined ? this.scaledLevel : <any>null;
        data["statusType"] = this.statusType !== undefined ? this.statusType : <any>null;
        return data;
    }
}

export class DeliveryScheduleDetail {
    deliveryScheduleId?: string;
    scheduledTime?: Date | null;
    isAutoFill?: boolean;
    deliveryAmount?: number | null;
    deliveryUnits?: UnitType | null;
    deliveryUnitsAsText?: string | null;

    init(_data?: any) {
        if (_data) {
            this.deliveryScheduleId = _data["deliveryScheduleId"] !== undefined ? _data["deliveryScheduleId"] : <any>null;
            this.scheduledTime = _data["scheduledTime"] ? new Date(_data["scheduledTime"].toString()) : <any>null;
            this.isAutoFill = _data["isAutoFill"] !== undefined ? _data["isAutoFill"] : <any>null;
            this.deliveryAmount = _data["deliveryAmount"] !== undefined ? _data["deliveryAmount"] : <any>null;
            this.deliveryUnits = _data["deliveryUnits"] !== undefined ? _data["deliveryUnits"] : <any>null;
            this.deliveryUnitsAsText = _data["deliveryUnitsAsText"] !== undefined ? _data["deliveryUnitsAsText"] : <any>null;
        }
    }

    static fromJS(data: any): DeliveryScheduleDetail {
        data = typeof data === 'object' ? data : {};
        let result = new DeliveryScheduleDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deliveryScheduleId"] = this.deliveryScheduleId !== undefined ? this.deliveryScheduleId : <any>null;
        data["scheduledTime"] = this.scheduledTime ? this.scheduledTime.toISOString() : <any>null;
        data["isAutoFill"] = this.isAutoFill !== undefined ? this.isAutoFill : <any>null;
        data["deliveryAmount"] = this.deliveryAmount !== undefined ? this.deliveryAmount : <any>null;
        data["deliveryUnits"] = this.deliveryUnits !== undefined ? this.deliveryUnits : <any>null;
        data["deliveryUnitsAsText"] = this.deliveryUnitsAsText !== undefined ? this.deliveryUnitsAsText : <any>null;
        return data;
    }
}

export class RetrieveAssetDetailAndGraphInfoByIdRequest extends WcfProxyUserDetails {
    assetId?: string;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
        }
    }

    static fromJS(data: any): RetrieveAssetDetailAndGraphInfoByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveAssetDetailAndGraphInfoByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveAssetDetailAndGraphInfoByIdRequest extends RetrieveAssetDetailAndGraphInfoByIdRequest {
    unitType?: UnitType;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.unitType = _data["unitType"] !== undefined ? _data["unitType"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveRetrieveAssetDetailAndGraphInfoByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveAssetDetailAndGraphInfoByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["unitType"] = this.unitType !== undefined ? this.unitType : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class RetrieveAssetMapSiteDetailsByOptionsRequest extends WcfProxyUserDetails {
    options?: AssetMapSiteDetailsRetrievalOptions | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.options = _data["options"] ? AssetMapSiteDetailsRetrievalOptions.fromJS(_data["options"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveAssetMapSiteDetailsByOptionsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveAssetMapSiteDetailsByOptionsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["options"] = this.options ? this.options.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveAssetMapSiteDetailsByOptionsRequest extends RetrieveAssetMapSiteDetailsByOptionsRequest {
    chosenUnit?: string | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.chosenUnit = _data["chosenUnit"] !== undefined ? _data["chosenUnit"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveRetrieveAssetMapSiteDetailsByOptionsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveAssetMapSiteDetailsByOptionsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["chosenUnit"] = this.chosenUnit !== undefined ? this.chosenUnit : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class AssetMapSiteDetailsRetrievalOptions extends BaseRetrievalOptions {
    filterBy?: AssetListFilterOptions;
    showDataChannelTypes?: DataChannelType[] | null;
    assetSearchExpression?: string | null;
    navigationDomain?: string;
    latitude?: number;
    longitude?: number;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.filterBy = _data["filterBy"] !== undefined ? _data["filterBy"] : <any>null;
            if (Array.isArray(_data["showDataChannelTypes"])) {
                this.showDataChannelTypes = [] as any;
                for (let item of _data["showDataChannelTypes"])
                    this.showDataChannelTypes!.push(item);
            }
            else {
                this.showDataChannelTypes = <any>null;
            }
            this.assetSearchExpression = _data["assetSearchExpression"] !== undefined ? _data["assetSearchExpression"] : <any>null;
            this.navigationDomain = _data["navigationDomain"] !== undefined ? _data["navigationDomain"] : <any>null;
            this.latitude = _data["latitude"] !== undefined ? _data["latitude"] : <any>null;
            this.longitude = _data["longitude"] !== undefined ? _data["longitude"] : <any>null;
        }
    }

    static fromJS(data: any): AssetMapSiteDetailsRetrievalOptions {
        data = typeof data === 'object' ? data : {};
        let result = new AssetMapSiteDetailsRetrievalOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["filterBy"] = this.filterBy !== undefined ? this.filterBy : <any>null;
        if (Array.isArray(this.showDataChannelTypes)) {
            data["showDataChannelTypes"] = [];
            for (let item of this.showDataChannelTypes)
                data["showDataChannelTypes"].push(item);
        }
        data["assetSearchExpression"] = this.assetSearchExpression !== undefined ? this.assetSearchExpression : <any>null;
        data["navigationDomain"] = this.navigationDomain !== undefined ? this.navigationDomain : <any>null;
        data["latitude"] = this.latitude !== undefined ? this.latitude : <any>null;
        data["longitude"] = this.longitude !== undefined ? this.longitude : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveAssetMapSiteInfoRecordsByOptionsResponse {
    records?: EvolveAssetMapSiteInfoRecord[] | null;
    totalRecords?: number | null;
    dataChannelTypes?: DataChannelType[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["records"])) {
                this.records = [] as any;
                for (let item of _data["records"])
                    this.records!.push(EvolveAssetMapSiteInfoRecord.fromJS(item));
            }
            else {
                this.records = <any>null;
            }
            this.totalRecords = _data["totalRecords"] !== undefined ? _data["totalRecords"] : <any>null;
            if (Array.isArray(_data["dataChannelTypes"])) {
                this.dataChannelTypes = [] as any;
                for (let item of _data["dataChannelTypes"])
                    this.dataChannelTypes!.push(item);
            }
            else {
                this.dataChannelTypes = <any>null;
            }
        }
    }

    static fromJS(data: any): EvolveAssetMapSiteInfoRecordsByOptionsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveAssetMapSiteInfoRecordsByOptionsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.records)) {
            data["records"] = [];
            for (let item of this.records)
                data["records"].push(item.toJSON());
        }
        data["totalRecords"] = this.totalRecords !== undefined ? this.totalRecords : <any>null;
        if (Array.isArray(this.dataChannelTypes)) {
            data["dataChannelTypes"] = [];
            for (let item of this.dataChannelTypes)
                data["dataChannelTypes"].push(item);
        }
        return data;
    }
}

export class EvolveAssetMapSiteInfoRecord {
    siteId?: string;
    customerName?: string | null;
    address1?: string | null;
    address2?: string | null;
    address3?: string | null;
    city?: string | null;
    state?: string | null;
    latitude?: number;
    longitude?: number;
    siteTimeZoneId?: number;
    assets?: EvolveAssetMapAssetInfoRecord[] | null;

    init(_data?: any) {
        if (_data) {
            this.siteId = _data["siteId"] !== undefined ? _data["siteId"] : <any>null;
            this.customerName = _data["customerName"] !== undefined ? _data["customerName"] : <any>null;
            this.address1 = _data["address1"] !== undefined ? _data["address1"] : <any>null;
            this.address2 = _data["address2"] !== undefined ? _data["address2"] : <any>null;
            this.address3 = _data["address3"] !== undefined ? _data["address3"] : <any>null;
            this.city = _data["city"] !== undefined ? _data["city"] : <any>null;
            this.state = _data["state"] !== undefined ? _data["state"] : <any>null;
            this.latitude = _data["latitude"] !== undefined ? _data["latitude"] : <any>null;
            this.longitude = _data["longitude"] !== undefined ? _data["longitude"] : <any>null;
            this.siteTimeZoneId = _data["siteTimeZoneId"] !== undefined ? _data["siteTimeZoneId"] : <any>null;
            if (Array.isArray(_data["assets"])) {
                this.assets = [] as any;
                for (let item of _data["assets"])
                    this.assets!.push(EvolveAssetMapAssetInfoRecord.fromJS(item));
            }
            else {
                this.assets = <any>null;
            }
        }
    }

    static fromJS(data: any): EvolveAssetMapSiteInfoRecord {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveAssetMapSiteInfoRecord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["siteId"] = this.siteId !== undefined ? this.siteId : <any>null;
        data["customerName"] = this.customerName !== undefined ? this.customerName : <any>null;
        data["address1"] = this.address1 !== undefined ? this.address1 : <any>null;
        data["address2"] = this.address2 !== undefined ? this.address2 : <any>null;
        data["address3"] = this.address3 !== undefined ? this.address3 : <any>null;
        data["city"] = this.city !== undefined ? this.city : <any>null;
        data["state"] = this.state !== undefined ? this.state : <any>null;
        data["latitude"] = this.latitude !== undefined ? this.latitude : <any>null;
        data["longitude"] = this.longitude !== undefined ? this.longitude : <any>null;
        data["siteTimeZoneId"] = this.siteTimeZoneId !== undefined ? this.siteTimeZoneId : <any>null;
        if (Array.isArray(this.assets)) {
            data["assets"] = [];
            for (let item of this.assets)
                data["assets"].push(item.toJSON());
        }
        return data;
    }
}

export class EvolveAssetMapAssetInfoRecord {
    assetId?: string;
    assetTitle?: string | null;
    assetDescription?: string | null;
    dataChannels?: EvolveAssetMapDataChannelInfoRecord[] | null;

    init(_data?: any) {
        if (_data) {
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.assetTitle = _data["assetTitle"] !== undefined ? _data["assetTitle"] : <any>null;
            this.assetDescription = _data["assetDescription"] !== undefined ? _data["assetDescription"] : <any>null;
            if (Array.isArray(_data["dataChannels"])) {
                this.dataChannels = [] as any;
                for (let item of _data["dataChannels"])
                    this.dataChannels!.push(EvolveAssetMapDataChannelInfoRecord.fromJS(item));
            }
            else {
                this.dataChannels = <any>null;
            }
        }
    }

    static fromJS(data: any): EvolveAssetMapAssetInfoRecord {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveAssetMapAssetInfoRecord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["assetTitle"] = this.assetTitle !== undefined ? this.assetTitle : <any>null;
        data["assetDescription"] = this.assetDescription !== undefined ? this.assetDescription : <any>null;
        if (Array.isArray(this.dataChannels)) {
            data["dataChannels"] = [];
            for (let item of this.dataChannels)
                data["dataChannels"].push(item.toJSON());
        }
        return data;
    }
}

export class EvolveAssetMapDataChannelInfoRecord {
    chosenUnit?: UnitTypeEnum | null;
    chosenUnitAsText?: string | null;
    latestReadingValue?: number | null;
    readingUnitsAsText?: string | null;
    percentFull?: number | null;
    digitalStateAsText?: string | null;
    dataChannelId?: string;
    type?: DataChannelCategory;
    description?: string | null;
    displayPriority?: number;
    inventoryState?: string | null;
    latestReadingTimestamp?: Date | null;
    productDescription?: string | null;
    productName?: string | null;
    isVolumetric?: boolean;
    tankType?: TankType | null;
    hasMissingData?: boolean;
    eventInventoryStatus?: EventInventoryStatusType | null;
    eventImportanceLevel?: EventImportanceLevelType | null;

    init(_data?: any) {
        if (_data) {
            this.chosenUnit = _data["chosenUnit"] !== undefined ? _data["chosenUnit"] : <any>null;
            this.chosenUnitAsText = _data["chosenUnitAsText"] !== undefined ? _data["chosenUnitAsText"] : <any>null;
            this.latestReadingValue = _data["latestReadingValue"] !== undefined ? _data["latestReadingValue"] : <any>null;
            this.readingUnitsAsText = _data["readingUnitsAsText"] !== undefined ? _data["readingUnitsAsText"] : <any>null;
            this.percentFull = _data["percentFull"] !== undefined ? _data["percentFull"] : <any>null;
            this.digitalStateAsText = _data["digitalStateAsText"] !== undefined ? _data["digitalStateAsText"] : <any>null;
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.displayPriority = _data["displayPriority"] !== undefined ? _data["displayPriority"] : <any>null;
            this.inventoryState = _data["inventoryState"] !== undefined ? _data["inventoryState"] : <any>null;
            this.latestReadingTimestamp = _data["latestReadingTimestamp"] ? new Date(_data["latestReadingTimestamp"].toString()) : <any>null;
            this.productDescription = _data["productDescription"] !== undefined ? _data["productDescription"] : <any>null;
            this.productName = _data["productName"] !== undefined ? _data["productName"] : <any>null;
            this.isVolumetric = _data["isVolumetric"] !== undefined ? _data["isVolumetric"] : <any>null;
            this.tankType = _data["tankType"] !== undefined ? _data["tankType"] : <any>null;
            this.hasMissingData = _data["hasMissingData"] !== undefined ? _data["hasMissingData"] : <any>null;
            this.eventInventoryStatus = _data["eventInventoryStatus"] !== undefined ? _data["eventInventoryStatus"] : <any>null;
            this.eventImportanceLevel = _data["eventImportanceLevel"] !== undefined ? _data["eventImportanceLevel"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveAssetMapDataChannelInfoRecord {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveAssetMapDataChannelInfoRecord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["chosenUnit"] = this.chosenUnit !== undefined ? this.chosenUnit : <any>null;
        data["chosenUnitAsText"] = this.chosenUnitAsText !== undefined ? this.chosenUnitAsText : <any>null;
        data["latestReadingValue"] = this.latestReadingValue !== undefined ? this.latestReadingValue : <any>null;
        data["readingUnitsAsText"] = this.readingUnitsAsText !== undefined ? this.readingUnitsAsText : <any>null;
        data["percentFull"] = this.percentFull !== undefined ? this.percentFull : <any>null;
        data["digitalStateAsText"] = this.digitalStateAsText !== undefined ? this.digitalStateAsText : <any>null;
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["displayPriority"] = this.displayPriority !== undefined ? this.displayPriority : <any>null;
        data["inventoryState"] = this.inventoryState !== undefined ? this.inventoryState : <any>null;
        data["latestReadingTimestamp"] = this.latestReadingTimestamp ? this.latestReadingTimestamp.toISOString() : <any>null;
        data["productDescription"] = this.productDescription !== undefined ? this.productDescription : <any>null;
        data["productName"] = this.productName !== undefined ? this.productName : <any>null;
        data["isVolumetric"] = this.isVolumetric !== undefined ? this.isVolumetric : <any>null;
        data["tankType"] = this.tankType !== undefined ? this.tankType : <any>null;
        data["hasMissingData"] = this.hasMissingData !== undefined ? this.hasMissingData : <any>null;
        data["eventInventoryStatus"] = this.eventInventoryStatus !== undefined ? this.eventInventoryStatus : <any>null;
        data["eventImportanceLevel"] = this.eventImportanceLevel !== undefined ? this.eventImportanceLevel : <any>null;
        return data;
    }
}

export enum DataChannelCategory {
    None = 0,
    Level = 1,
    Pressure = 2,
    DigitalInput = 3,
    BatteryVoltage = 4,
    Gps = 5,
    FlowMeter = 6,
    Counter = 7,
    Temperature = 8,
    OtherAnalog = 9,
    RtuCaseTemperature = 10,
    Diagnostic = 11,
    TotalizedLevel = 12,
    VirtualChannel = 13,
    Rtu = 14,
    Shock = 15,
    RateOfChange = 16,
    SignalStrength = 17,
    ChargeCurrent = 18,
}

export class RetrieveAssetMapSiteInfoRecordsByOptionsRequest extends WcfProxyUserDetails {
    options?: AssetMapRetrievalOptions | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.options = _data["options"] ? AssetMapRetrievalOptions.fromJS(_data["options"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveAssetMapSiteInfoRecordsByOptionsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveAssetMapSiteInfoRecordsByOptionsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["options"] = this.options ? this.options.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveAssetMapSiteInfoRecordsByOptionsRequest extends RetrieveAssetMapSiteInfoRecordsByOptionsRequest {
    chosenUnit?: string | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.chosenUnit = _data["chosenUnit"] !== undefined ? _data["chosenUnit"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveAssetMapSiteInfoRecordsByOptionsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveAssetMapSiteInfoRecordsByOptionsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["chosenUnit"] = this.chosenUnit !== undefined ? this.chosenUnit : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class AssetMapRetrievalOptions extends BaseRetrievalOptions {
    filterBy?: AssetListFilterOptions;
    areDataChannelTypesRequired?: boolean;
    showDataChannelTypes?: DataChannelType[] | null;
    showInventoryStatesTypes?: string[] | null;
    assetSearchExpression?: string | null;
    navigationDomain?: string;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.filterBy = _data["filterBy"] !== undefined ? _data["filterBy"] : <any>null;
            this.areDataChannelTypesRequired = _data["areDataChannelTypesRequired"] !== undefined ? _data["areDataChannelTypesRequired"] : <any>null;
            if (Array.isArray(_data["showDataChannelTypes"])) {
                this.showDataChannelTypes = [] as any;
                for (let item of _data["showDataChannelTypes"])
                    this.showDataChannelTypes!.push(item);
            }
            else {
                this.showDataChannelTypes = <any>null;
            }
            if (Array.isArray(_data["showInventoryStatesTypes"])) {
                this.showInventoryStatesTypes = [] as any;
                for (let item of _data["showInventoryStatesTypes"])
                    this.showInventoryStatesTypes!.push(item);
            }
            else {
                this.showInventoryStatesTypes = <any>null;
            }
            this.assetSearchExpression = _data["assetSearchExpression"] !== undefined ? _data["assetSearchExpression"] : <any>null;
            this.navigationDomain = _data["navigationDomain"] !== undefined ? _data["navigationDomain"] : <any>null;
        }
    }

    static fromJS(data: any): AssetMapRetrievalOptions {
        data = typeof data === 'object' ? data : {};
        let result = new AssetMapRetrievalOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["filterBy"] = this.filterBy !== undefined ? this.filterBy : <any>null;
        data["areDataChannelTypesRequired"] = this.areDataChannelTypesRequired !== undefined ? this.areDataChannelTypesRequired : <any>null;
        if (Array.isArray(this.showDataChannelTypes)) {
            data["showDataChannelTypes"] = [];
            for (let item of this.showDataChannelTypes)
                data["showDataChannelTypes"].push(item);
        }
        if (Array.isArray(this.showInventoryStatesTypes)) {
            data["showInventoryStatesTypes"] = [];
            for (let item of this.showInventoryStatesTypes)
                data["showInventoryStatesTypes"].push(item);
        }
        data["assetSearchExpression"] = this.assetSearchExpression !== undefined ? this.assetSearchExpression : <any>null;
        data["navigationDomain"] = this.navigationDomain !== undefined ? this.navigationDomain : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class SaveUserAssetSettingsRequest extends WcfProxyUserDetails {
    userAssetSettings?: UserAssetSettingsDetail | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.userAssetSettings = _data["userAssetSettings"] ? UserAssetSettingsDetail.fromJS(_data["userAssetSettings"]) : <any>null;
        }
    }

    static fromJS(data: any): SaveUserAssetSettingsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SaveUserAssetSettingsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userAssetSettings"] = this.userAssetSettings ? this.userAssetSettings.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveSaveUserAssetSettingsRequest extends SaveUserAssetSettingsRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveSaveUserAssetSettingsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveUserAssetSettingsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class UpdateAssetNotesRequest extends WcfProxyUserDetails {
    assetId?: string;
    notes?: string | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.notes = _data["notes"] !== undefined ? _data["notes"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateAssetNotesRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateAssetNotesRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["notes"] = this.notes !== undefined ? this.notes : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveUpdateAssetNotesRequest extends UpdateAssetNotesRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveUpdateAssetNotesRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveUpdateAssetNotesRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class EvolveProbeRequest {
    userId?: string | null;

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveProbeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveProbeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        return data;
    }
}

export class EvolveLogoutRequest {
    userId?: string | null;

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveLogoutRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveLogoutRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        return data;
    }
}

export class EvolveGetUnitTypesResponse {
    result?: EvolveUnitType[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result!.push(EvolveUnitType.fromJS(item));
            }
            else {
                this.result = <any>null;
            }
        }
    }

    static fromJS(data: any): EvolveGetUnitTypesResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveGetUnitTypesResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        return data;
    }
}

export class EvolveUnitType {
    unitTypeId?: UnitType;
    name?: string | null;
    displayUnit?: string | null;

    init(_data?: any) {
        if (_data) {
            this.unitTypeId = _data["unitTypeId"] !== undefined ? _data["unitTypeId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.displayUnit = _data["displayUnit"] !== undefined ? _data["displayUnit"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveUnitType {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveUnitType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["unitTypeId"] = this.unitTypeId !== undefined ? this.unitTypeId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["displayUnit"] = this.displayUnit !== undefined ? this.displayUnit : <any>null;
        return data;
    }
}

export class EvolveGetUnitTypesRequest {

    init(_data?: any) {
    }

    static fromJS(data: any): EvolveGetUnitTypesRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveGetUnitTypesRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

/** Response object containing inventory states with default domain. */
export class EvolveGetAvailableInventoryStatesWithDomainDefaultResponse {
    /** The inventory states for the domain that the user has access to.
             */
    inventoryStates?: EvolveInventoryState[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["inventoryStates"])) {
                this.inventoryStates = [] as any;
                for (let item of _data["inventoryStates"])
                    this.inventoryStates!.push(EvolveInventoryState.fromJS(item));
            }
            else {
                this.inventoryStates = <any>null;
            }
        }
    }

    static fromJS(data: any): EvolveGetAvailableInventoryStatesWithDomainDefaultResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveGetAvailableInventoryStatesWithDomainDefaultResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.inventoryStates)) {
            data["inventoryStates"] = [];
            for (let item of this.inventoryStates)
                data["inventoryStates"].push(item.toJSON());
        }
        return data;
    }
}

/** Object to represent inventory state. */
export class EvolveInventoryState {
    /** The description as defined by the event rule group using in the domain.
             */
    description?: string | null;
    /** Nullable because the "Normal" state isn't technically an enum utilized by the system. When it's in the default
state, the event inventory status is null.
             */
    eventInventoryStatus?: EventInventoryStatusType | null;

    init(_data?: any) {
        if (_data) {
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.eventInventoryStatus = _data["eventInventoryStatus"] !== undefined ? _data["eventInventoryStatus"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveInventoryState {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveInventoryState();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["eventInventoryStatus"] = this.eventInventoryStatus !== undefined ? this.eventInventoryStatus : <any>null;
        return data;
    }
}

/** Available inventory states including the domain default event description. */
export class EvolveGetAvailableInventoryStatesWithDomainDefaultRequest {
    /** The domain id to filter by.
             */
    domainId?: string;

    init(_data?: any) {
        if (_data) {
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveGetAvailableInventoryStatesWithDomainDefaultRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveGetAvailableInventoryStatesWithDomainDefaultRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        return data;
    }
}

export class EvolveGetInventoryStatesByDomainIdAndUserIdResponse {
    result?: string[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result!.push(item);
            }
            else {
                this.result = <any>null;
            }
        }
    }

    static fromJS(data: any): EvolveGetInventoryStatesByDomainIdAndUserIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveGetInventoryStatesByDomainIdAndUserIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item);
        }
        return data;
    }
}

export class EvolveGetInventoryStatesByDomainIdAndUserIdRequest {
    domainId?: string;
    userId?: string;

    init(_data?: any) {
        if (_data) {
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveGetInventoryStatesByDomainIdAndUserIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveGetInventoryStatesByDomainIdAndUserIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        return data;
    }
}

export class EvolveGetDataChannelInfoByIdAndUOMDisplayTypeResponse {
    dataChannel?: EvolveAssetDetailDataChannelInfo | null;

    init(_data?: any) {
        if (_data) {
            this.dataChannel = _data["dataChannel"] ? EvolveAssetDetailDataChannelInfo.fromJS(_data["dataChannel"]) : <any>null;
        }
    }

    static fromJS(data: any): EvolveGetDataChannelInfoByIdAndUOMDisplayTypeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveGetDataChannelInfoByIdAndUOMDisplayTypeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannel"] = this.dataChannel ? this.dataChannel.toJSON() : <any>null;
        return data;
    }
}

export class EvolveAssetDetailDataChannelInfo {
    domainId?: string;
    dataChannelId?: string;
    description?: string | null;
    type?: DataChannelType;
    isVolumetric?: boolean;
    availableUOM?: DataChannelAvailableUOM | null;
    selectedUOM?: UOMDisplayType;
    unitAsText?: string | null;
    unit?: UnitType | null;
    decimalPlaces?: number;
    graphMin?: number | null;
    graphMax?: number | null;
    productDescription?: string | null;
    tankType?: TankType;
    rtuId?: string | null;
    rtuCategory?: RTUCategoryType | null;
    rtuType?: RTUType | null;
    rtuDeviceId?: string | null;
    channelNumber?: string | null;
    rtuChannelId?: string | null;
    dataLoggingRate?: number | null;
    latestReadingTimestamp?: Date | null;
    latestReadingValue?: number | null;
    latestReadingValue2?: number | null;
    tankFillPercentage?: number | null;
    maxDeliverQuantity?: number | null;
    forecastMode?: ForecastModeType;
    displayPriority?: number;
    dataSource?: DataChannelDataSourceType;
    digitalState3Limit?: number | null;
    digitalState2Limit?: number | null;
    digitalState1Limit?: number | null;
    digitalState0Limit?: number | null;
    digitalState3Text?: string | null;
    digitalState2Text?: string | null;
    digitalState1Text?: string | null;
    digitalState0Text?: string | null;
    eventImportanceLevel?: EventImportanceLevelType | null;
    eventStatus?: string | null;
    enabledEvents?: EvolveAssetDetailDataChannelEventInfo[] | null;
    scheduledDeliveries?: EvolveAssetDetailDeliveryScheduleInfo[] | null;
    asset_SiteNumber?: string | null;
    dataChannel_SiteNumber?: string | null;
    hasRtuNotes?: boolean;
    isLBShellEnabled?: boolean;
    rtuChannelType?: RtuChannelSensor | null;

    init(_data?: any) {
        if (_data) {
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.isVolumetric = _data["isVolumetric"] !== undefined ? _data["isVolumetric"] : <any>null;
            this.availableUOM = _data["availableUOM"] ? DataChannelAvailableUOM.fromJS(_data["availableUOM"]) : <any>null;
            this.selectedUOM = _data["selectedUOM"] !== undefined ? _data["selectedUOM"] : <any>null;
            this.unitAsText = _data["unitAsText"] !== undefined ? _data["unitAsText"] : <any>null;
            this.unit = _data["unit"] !== undefined ? _data["unit"] : <any>null;
            this.decimalPlaces = _data["decimalPlaces"] !== undefined ? _data["decimalPlaces"] : <any>null;
            this.graphMin = _data["graphMin"] !== undefined ? _data["graphMin"] : <any>null;
            this.graphMax = _data["graphMax"] !== undefined ? _data["graphMax"] : <any>null;
            this.productDescription = _data["productDescription"] !== undefined ? _data["productDescription"] : <any>null;
            this.tankType = _data["tankType"] !== undefined ? _data["tankType"] : <any>null;
            this.rtuId = _data["rtuId"] !== undefined ? _data["rtuId"] : <any>null;
            this.rtuCategory = _data["rtuCategory"] !== undefined ? _data["rtuCategory"] : <any>null;
            this.rtuType = _data["rtuType"] !== undefined ? _data["rtuType"] : <any>null;
            this.rtuDeviceId = _data["rtuDeviceId"] !== undefined ? _data["rtuDeviceId"] : <any>null;
            this.channelNumber = _data["channelNumber"] !== undefined ? _data["channelNumber"] : <any>null;
            this.rtuChannelId = _data["rtuChannelId"] !== undefined ? _data["rtuChannelId"] : <any>null;
            this.dataLoggingRate = _data["dataLoggingRate"] !== undefined ? _data["dataLoggingRate"] : <any>null;
            this.latestReadingTimestamp = _data["latestReadingTimestamp"] ? new Date(_data["latestReadingTimestamp"].toString()) : <any>null;
            this.latestReadingValue = _data["latestReadingValue"] !== undefined ? _data["latestReadingValue"] : <any>null;
            this.latestReadingValue2 = _data["latestReadingValue2"] !== undefined ? _data["latestReadingValue2"] : <any>null;
            this.tankFillPercentage = _data["tankFillPercentage"] !== undefined ? _data["tankFillPercentage"] : <any>null;
            this.maxDeliverQuantity = _data["maxDeliverQuantity"] !== undefined ? _data["maxDeliverQuantity"] : <any>null;
            this.forecastMode = _data["forecastMode"] !== undefined ? _data["forecastMode"] : <any>null;
            this.displayPriority = _data["displayPriority"] !== undefined ? _data["displayPriority"] : <any>null;
            this.dataSource = _data["dataSource"] !== undefined ? _data["dataSource"] : <any>null;
            this.digitalState3Limit = _data["digitalState3Limit"] !== undefined ? _data["digitalState3Limit"] : <any>null;
            this.digitalState2Limit = _data["digitalState2Limit"] !== undefined ? _data["digitalState2Limit"] : <any>null;
            this.digitalState1Limit = _data["digitalState1Limit"] !== undefined ? _data["digitalState1Limit"] : <any>null;
            this.digitalState0Limit = _data["digitalState0Limit"] !== undefined ? _data["digitalState0Limit"] : <any>null;
            this.digitalState3Text = _data["digitalState3Text"] !== undefined ? _data["digitalState3Text"] : <any>null;
            this.digitalState2Text = _data["digitalState2Text"] !== undefined ? _data["digitalState2Text"] : <any>null;
            this.digitalState1Text = _data["digitalState1Text"] !== undefined ? _data["digitalState1Text"] : <any>null;
            this.digitalState0Text = _data["digitalState0Text"] !== undefined ? _data["digitalState0Text"] : <any>null;
            this.eventImportanceLevel = _data["eventImportanceLevel"] !== undefined ? _data["eventImportanceLevel"] : <any>null;
            this.eventStatus = _data["eventStatus"] !== undefined ? _data["eventStatus"] : <any>null;
            if (Array.isArray(_data["enabledEvents"])) {
                this.enabledEvents = [] as any;
                for (let item of _data["enabledEvents"])
                    this.enabledEvents!.push(EvolveAssetDetailDataChannelEventInfo.fromJS(item));
            }
            else {
                this.enabledEvents = <any>null;
            }
            if (Array.isArray(_data["scheduledDeliveries"])) {
                this.scheduledDeliveries = [] as any;
                for (let item of _data["scheduledDeliveries"])
                    this.scheduledDeliveries!.push(EvolveAssetDetailDeliveryScheduleInfo.fromJS(item));
            }
            else {
                this.scheduledDeliveries = <any>null;
            }
            this.asset_SiteNumber = _data["asset_SiteNumber"] !== undefined ? _data["asset_SiteNumber"] : <any>null;
            this.dataChannel_SiteNumber = _data["dataChannel_SiteNumber"] !== undefined ? _data["dataChannel_SiteNumber"] : <any>null;
            this.hasRtuNotes = _data["hasRtuNotes"] !== undefined ? _data["hasRtuNotes"] : <any>null;
            this.isLBShellEnabled = _data["isLBShellEnabled"] !== undefined ? _data["isLBShellEnabled"] : <any>null;
            this.rtuChannelType = _data["rtuChannelType"] !== undefined ? _data["rtuChannelType"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveAssetDetailDataChannelInfo {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveAssetDetailDataChannelInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["isVolumetric"] = this.isVolumetric !== undefined ? this.isVolumetric : <any>null;
        data["availableUOM"] = this.availableUOM ? this.availableUOM.toJSON() : <any>null;
        data["selectedUOM"] = this.selectedUOM !== undefined ? this.selectedUOM : <any>null;
        data["unitAsText"] = this.unitAsText !== undefined ? this.unitAsText : <any>null;
        data["unit"] = this.unit !== undefined ? this.unit : <any>null;
        data["decimalPlaces"] = this.decimalPlaces !== undefined ? this.decimalPlaces : <any>null;
        data["graphMin"] = this.graphMin !== undefined ? this.graphMin : <any>null;
        data["graphMax"] = this.graphMax !== undefined ? this.graphMax : <any>null;
        data["productDescription"] = this.productDescription !== undefined ? this.productDescription : <any>null;
        data["tankType"] = this.tankType !== undefined ? this.tankType : <any>null;
        data["rtuId"] = this.rtuId !== undefined ? this.rtuId : <any>null;
        data["rtuCategory"] = this.rtuCategory !== undefined ? this.rtuCategory : <any>null;
        data["rtuType"] = this.rtuType !== undefined ? this.rtuType : <any>null;
        data["rtuDeviceId"] = this.rtuDeviceId !== undefined ? this.rtuDeviceId : <any>null;
        data["channelNumber"] = this.channelNumber !== undefined ? this.channelNumber : <any>null;
        data["rtuChannelId"] = this.rtuChannelId !== undefined ? this.rtuChannelId : <any>null;
        data["dataLoggingRate"] = this.dataLoggingRate !== undefined ? this.dataLoggingRate : <any>null;
        data["latestReadingTimestamp"] = this.latestReadingTimestamp ? this.latestReadingTimestamp.toISOString() : <any>null;
        data["latestReadingValue"] = this.latestReadingValue !== undefined ? this.latestReadingValue : <any>null;
        data["latestReadingValue2"] = this.latestReadingValue2 !== undefined ? this.latestReadingValue2 : <any>null;
        data["tankFillPercentage"] = this.tankFillPercentage !== undefined ? this.tankFillPercentage : <any>null;
        data["maxDeliverQuantity"] = this.maxDeliverQuantity !== undefined ? this.maxDeliverQuantity : <any>null;
        data["forecastMode"] = this.forecastMode !== undefined ? this.forecastMode : <any>null;
        data["displayPriority"] = this.displayPriority !== undefined ? this.displayPriority : <any>null;
        data["dataSource"] = this.dataSource !== undefined ? this.dataSource : <any>null;
        data["digitalState3Limit"] = this.digitalState3Limit !== undefined ? this.digitalState3Limit : <any>null;
        data["digitalState2Limit"] = this.digitalState2Limit !== undefined ? this.digitalState2Limit : <any>null;
        data["digitalState1Limit"] = this.digitalState1Limit !== undefined ? this.digitalState1Limit : <any>null;
        data["digitalState0Limit"] = this.digitalState0Limit !== undefined ? this.digitalState0Limit : <any>null;
        data["digitalState3Text"] = this.digitalState3Text !== undefined ? this.digitalState3Text : <any>null;
        data["digitalState2Text"] = this.digitalState2Text !== undefined ? this.digitalState2Text : <any>null;
        data["digitalState1Text"] = this.digitalState1Text !== undefined ? this.digitalState1Text : <any>null;
        data["digitalState0Text"] = this.digitalState0Text !== undefined ? this.digitalState0Text : <any>null;
        data["eventImportanceLevel"] = this.eventImportanceLevel !== undefined ? this.eventImportanceLevel : <any>null;
        data["eventStatus"] = this.eventStatus !== undefined ? this.eventStatus : <any>null;
        if (Array.isArray(this.enabledEvents)) {
            data["enabledEvents"] = [];
            for (let item of this.enabledEvents)
                data["enabledEvents"].push(item.toJSON());
        }
        if (Array.isArray(this.scheduledDeliveries)) {
            data["scheduledDeliveries"] = [];
            for (let item of this.scheduledDeliveries)
                data["scheduledDeliveries"].push(item.toJSON());
        }
        data["asset_SiteNumber"] = this.asset_SiteNumber !== undefined ? this.asset_SiteNumber : <any>null;
        data["dataChannel_SiteNumber"] = this.dataChannel_SiteNumber !== undefined ? this.dataChannel_SiteNumber : <any>null;
        data["hasRtuNotes"] = this.hasRtuNotes !== undefined ? this.hasRtuNotes : <any>null;
        data["isLBShellEnabled"] = this.isLBShellEnabled !== undefined ? this.isLBShellEnabled : <any>null;
        data["rtuChannelType"] = this.rtuChannelType !== undefined ? this.rtuChannelType : <any>null;
        return data;
    }
}

export class DataChannelAvailableUOM {
    scaledUOM?: string | null;
    displayUOM?: string | null;
    percentUOM?: string | null;

    init(_data?: any) {
        if (_data) {
            this.scaledUOM = _data["scaledUOM"] !== undefined ? _data["scaledUOM"] : <any>null;
            this.displayUOM = _data["displayUOM"] !== undefined ? _data["displayUOM"] : <any>null;
            this.percentUOM = _data["percentUOM"] !== undefined ? _data["percentUOM"] : <any>null;
        }
    }

    static fromJS(data: any): DataChannelAvailableUOM {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelAvailableUOM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["scaledUOM"] = this.scaledUOM !== undefined ? this.scaledUOM : <any>null;
        data["displayUOM"] = this.displayUOM !== undefined ? this.displayUOM : <any>null;
        data["percentUOM"] = this.percentUOM !== undefined ? this.percentUOM : <any>null;
        return data;
    }
}

export class EvolveAssetDetailDataChannelEventInfo {
    dataChannelEventRuleId?: number;
    description?: string | null;
    eventRuleType?: EventRuleType;
    inventoryStatus?: EventInventoryStatusType | null;
    importanceLevel?: EventImportanceLevelType;
    comparator?: EventComparatorType;
    eventValue?: number | null;
    isActive?: boolean;
    isDisplayedOnGraph?: boolean;
    sortIndex?: number;
    rtuChannelEventType?: RTUChannelEventHistoryType | null;
    usageRate?: number | null;
    minimumReadingPeriod?: number | null;

    init(_data?: any) {
        if (_data) {
            this.dataChannelEventRuleId = _data["dataChannelEventRuleId"] !== undefined ? _data["dataChannelEventRuleId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.eventRuleType = _data["eventRuleType"] !== undefined ? _data["eventRuleType"] : <any>null;
            this.inventoryStatus = _data["inventoryStatus"] !== undefined ? _data["inventoryStatus"] : <any>null;
            this.importanceLevel = _data["importanceLevel"] !== undefined ? _data["importanceLevel"] : <any>null;
            this.comparator = _data["comparator"] !== undefined ? _data["comparator"] : <any>null;
            this.eventValue = _data["eventValue"] !== undefined ? _data["eventValue"] : <any>null;
            this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
            this.isDisplayedOnGraph = _data["isDisplayedOnGraph"] !== undefined ? _data["isDisplayedOnGraph"] : <any>null;
            this.sortIndex = _data["sortIndex"] !== undefined ? _data["sortIndex"] : <any>null;
            this.rtuChannelEventType = _data["rtuChannelEventType"] !== undefined ? _data["rtuChannelEventType"] : <any>null;
            this.usageRate = _data["usageRate"] !== undefined ? _data["usageRate"] : <any>null;
            this.minimumReadingPeriod = _data["minimumReadingPeriod"] !== undefined ? _data["minimumReadingPeriod"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveAssetDetailDataChannelEventInfo {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveAssetDetailDataChannelEventInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelEventRuleId"] = this.dataChannelEventRuleId !== undefined ? this.dataChannelEventRuleId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["eventRuleType"] = this.eventRuleType !== undefined ? this.eventRuleType : <any>null;
        data["inventoryStatus"] = this.inventoryStatus !== undefined ? this.inventoryStatus : <any>null;
        data["importanceLevel"] = this.importanceLevel !== undefined ? this.importanceLevel : <any>null;
        data["comparator"] = this.comparator !== undefined ? this.comparator : <any>null;
        data["eventValue"] = this.eventValue !== undefined ? this.eventValue : <any>null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["isDisplayedOnGraph"] = this.isDisplayedOnGraph !== undefined ? this.isDisplayedOnGraph : <any>null;
        data["sortIndex"] = this.sortIndex !== undefined ? this.sortIndex : <any>null;
        data["rtuChannelEventType"] = this.rtuChannelEventType !== undefined ? this.rtuChannelEventType : <any>null;
        data["usageRate"] = this.usageRate !== undefined ? this.usageRate : <any>null;
        data["minimumReadingPeriod"] = this.minimumReadingPeriod !== undefined ? this.minimumReadingPeriod : <any>null;
        return data;
    }
}

export class EvolveAssetDetailDeliveryScheduleInfo {
    deliveryScheduleId?: string;
    scheduledTime?: Date | null;
    isAutoFill?: boolean;
    deliveryAmount?: number | null;

    init(_data?: any) {
        if (_data) {
            this.deliveryScheduleId = _data["deliveryScheduleId"] !== undefined ? _data["deliveryScheduleId"] : <any>null;
            this.scheduledTime = _data["scheduledTime"] ? new Date(_data["scheduledTime"].toString()) : <any>null;
            this.isAutoFill = _data["isAutoFill"] !== undefined ? _data["isAutoFill"] : <any>null;
            this.deliveryAmount = _data["deliveryAmount"] !== undefined ? _data["deliveryAmount"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveAssetDetailDeliveryScheduleInfo {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveAssetDetailDeliveryScheduleInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deliveryScheduleId"] = this.deliveryScheduleId !== undefined ? this.deliveryScheduleId : <any>null;
        data["scheduledTime"] = this.scheduledTime ? this.scheduledTime.toISOString() : <any>null;
        data["isAutoFill"] = this.isAutoFill !== undefined ? this.isAutoFill : <any>null;
        data["deliveryAmount"] = this.deliveryAmount !== undefined ? this.deliveryAmount : <any>null;
        return data;
    }
}

export class EvolveGetDataChannelInfoByIdAndUOMDisplayTypeRequest {
    /** The data channel id.
             */
    dataChannelId?: string;
    /** UOM display type.
             */
    uomDisplayType?: UOMDisplayType;
    domainId?: string;

    init(_data?: any) {
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.uomDisplayType = _data["uomDisplayType"] !== undefined ? _data["uomDisplayType"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveGetDataChannelInfoByIdAndUOMDisplayTypeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveGetDataChannelInfoByIdAndUOMDisplayTypeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["uomDisplayType"] = this.uomDisplayType !== undefined ? this.uomDisplayType : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        return data;
    }
}

export class EvolveGetDataChannelsByDomainIdAndUserIdResponse {
    result?: DataChannelType[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result!.push(item);
            }
            else {
                this.result = <any>null;
            }
        }
    }

    static fromJS(data: any): EvolveGetDataChannelsByDomainIdAndUserIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveGetDataChannelsByDomainIdAndUserIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item);
        }
        return data;
    }
}

export class EvolveGetDataChannelsByDomainIdAndUserIdRequest {
    domainId?: string;
    userId?: string;

    init(_data?: any) {
        if (_data) {
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveGetDataChannelsByDomainIdAndUserIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveGetDataChannelsByDomainIdAndUserIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        return data;
    }
}

export class EvolveGetDaysRemainingUntilNextInventoryStateRequest {
    dataChannelId?: string;

    init(_data?: any) {
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveGetDaysRemainingUntilNextInventoryStateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveGetDaysRemainingUntilNextInventoryStateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        return data;
    }
}

/** Response object for active inventory level events. */
export class EvolveGetActiveInventoryLevelEventsByDomainIdAndProductIdResponse {
    /** The active events and their counts.
             */
    events?: EvolveActiveInventoryLevelEvent[] | null;
    /** The total number of events within all the active events.
             */
    totalEvents?: number;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["events"])) {
                this.events = [] as any;
                for (let item of _data["events"])
                    this.events!.push(EvolveActiveInventoryLevelEvent.fromJS(item));
            }
            else {
                this.events = <any>null;
            }
            this.totalEvents = _data["totalEvents"] !== undefined ? _data["totalEvents"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveGetActiveInventoryLevelEventsByDomainIdAndProductIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveGetActiveInventoryLevelEventsByDomainIdAndProductIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.events)) {
            data["events"] = [];
            for (let item of this.events)
                data["events"].push(item.toJSON());
        }
        data["totalEvents"] = this.totalEvents !== undefined ? this.totalEvents : <any>null;
        return data;
    }
}

/** A class to represent the total number of active inventory level events in a particular inventory state. */
export class EvolveActiveInventoryLevelEvent {
    /** The name of the inventory state. This name is defined by the name used in the event rule group.
             */
    inventoryState?: string | null;
    /** The total number of active events for data channels within this inventory state.
             */
    total?: number;

    init(_data?: any) {
        if (_data) {
            this.inventoryState = _data["inventoryState"] !== undefined ? _data["inventoryState"] : <any>null;
            this.total = _data["total"] !== undefined ? _data["total"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveActiveInventoryLevelEvent {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveActiveInventoryLevelEvent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["inventoryState"] = this.inventoryState !== undefined ? this.inventoryState : <any>null;
        data["total"] = this.total !== undefined ? this.total : <any>null;
        return data;
    }
}

/** Active inventory level events apiRequest object. */
export class EvolveGetActiveInventoryLevelEventsByDomainIdAndProductIdRequest {
    /** The domain id to search upon.
             */
    domainId?: string;
    /** The product id to filter by.
             */
    productId?: string | null;

    init(_data?: any) {
        if (_data) {
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.productId = _data["productId"] !== undefined ? _data["productId"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveGetActiveInventoryLevelEventsByDomainIdAndProductIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveGetActiveInventoryLevelEventsByDomainIdAndProductIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["productId"] = this.productId !== undefined ? this.productId : <any>null;
        return data;
    }
}

export class EvolveGetActiveInventoryLevelEventsResponse {
    result?: EvolveInventoryEvent | null;

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? EvolveInventoryEvent.fromJS(_data["result"]) : <any>null;
        }
    }

    static fromJS(data: any): EvolveGetActiveInventoryLevelEventsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveGetActiveInventoryLevelEventsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>null;
        return data;
    }
}

/** The active inventory events for a domain and product (if specified). */
export class EvolveInventoryEvent {
    /** Total number of full events.
             */
    fullCount?: number;
    /** Total number of reorder events.
             */
    reorderCount?: number;
    /** Total number of critical events.
             */
    criticalCount?: number;
    /** Total number of empty events.
             */
    emptyCount?: number;

    init(_data?: any) {
        if (_data) {
            this.fullCount = _data["fullCount"] !== undefined ? _data["fullCount"] : <any>null;
            this.reorderCount = _data["reorderCount"] !== undefined ? _data["reorderCount"] : <any>null;
            this.criticalCount = _data["criticalCount"] !== undefined ? _data["criticalCount"] : <any>null;
            this.emptyCount = _data["emptyCount"] !== undefined ? _data["emptyCount"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveInventoryEvent {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveInventoryEvent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fullCount"] = this.fullCount !== undefined ? this.fullCount : <any>null;
        data["reorderCount"] = this.reorderCount !== undefined ? this.reorderCount : <any>null;
        data["criticalCount"] = this.criticalCount !== undefined ? this.criticalCount : <any>null;
        data["emptyCount"] = this.emptyCount !== undefined ? this.emptyCount : <any>null;
        return data;
    }
}

/** Active inventory level events apiRequest object. */
export class EvolveGetActiveInventoryLevelEventsRequest {
    /** The domain id to search upon.
             */
    domainId?: string;
    /** The product id to filter by.
             */
    productId?: string | null;

    init(_data?: any) {
        if (_data) {
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.productId = _data["productId"] !== undefined ? _data["productId"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveGetActiveInventoryLevelEventsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveGetActiveInventoryLevelEventsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["productId"] = this.productId !== undefined ? this.productId : <any>null;
        return data;
    }
}

export class EvolveGetActiveNonInventoryEventsRequest {
    userId?: string;
    effectiveDomainId?: string;
    navigationDomainId?: string;
    onlyUnacknowledged?: boolean;
    assetTypeId?: AssetType | null;
    productId?: string | null;
    searchString?: string | null;
    withDefaultStatus?: boolean;

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.effectiveDomainId = _data["effectiveDomainId"] !== undefined ? _data["effectiveDomainId"] : <any>null;
            this.navigationDomainId = _data["navigationDomainId"] !== undefined ? _data["navigationDomainId"] : <any>null;
            this.onlyUnacknowledged = _data["onlyUnacknowledged"] !== undefined ? _data["onlyUnacknowledged"] : <any>null;
            this.assetTypeId = _data["assetTypeId"] !== undefined ? _data["assetTypeId"] : <any>null;
            this.productId = _data["productId"] !== undefined ? _data["productId"] : <any>null;
            this.searchString = _data["searchString"] !== undefined ? _data["searchString"] : <any>null;
            this.withDefaultStatus = _data["withDefaultStatus"] !== undefined ? _data["withDefaultStatus"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveGetActiveNonInventoryEventsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveGetActiveNonInventoryEventsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["effectiveDomainId"] = this.effectiveDomainId !== undefined ? this.effectiveDomainId : <any>null;
        data["navigationDomainId"] = this.navigationDomainId !== undefined ? this.navigationDomainId : <any>null;
        data["onlyUnacknowledged"] = this.onlyUnacknowledged !== undefined ? this.onlyUnacknowledged : <any>null;
        data["assetTypeId"] = this.assetTypeId !== undefined ? this.assetTypeId : <any>null;
        data["productId"] = this.productId !== undefined ? this.productId : <any>null;
        data["searchString"] = this.searchString !== undefined ? this.searchString : <any>null;
        data["withDefaultStatus"] = this.withDefaultStatus !== undefined ? this.withDefaultStatus : <any>null;
        return data;
    }
}

export class EvolveGetAssetTypesRequest {

    init(_data?: any) {
    }

    static fromJS(data: any): EvolveGetAssetTypesRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveGetAssetTypesRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

/** A class representing information about delivery performance for a particular domain. */
export class EvolveGetDeliveryPerformanceByDomainIdAndProductIdsResponse {
    /** A list of delivery performance statistics.
             */
    deliveries?: EvolveDeliveryPerformance[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["deliveries"])) {
                this.deliveries = [] as any;
                for (let item of _data["deliveries"])
                    this.deliveries!.push(EvolveDeliveryPerformance.fromJS(item));
            }
            else {
                this.deliveries = <any>null;
            }
        }
    }

    static fromJS(data: any): EvolveGetDeliveryPerformanceByDomainIdAndProductIdsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveGetDeliveryPerformanceByDomainIdAndProductIdsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.deliveries)) {
            data["deliveries"] = [];
            for (let item of this.deliveries)
                data["deliveries"].push(item.toJSON());
        }
        return data;
    }
}

/** The delivery performance for evolve assets. */
export class EvolveDeliveryPerformance {
    /** The date at which deliveries were made.
             */
    date?: Date;
    /** The total number of on time deliveries.
             */
    onTime?: number;
    /** The total number of early deliveries.
             */
    early?: number;
    /** The total number of late deliveries.
             */
    late?: number;

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>null;
            this.onTime = _data["onTime"] !== undefined ? _data["onTime"] : <any>null;
            this.early = _data["early"] !== undefined ? _data["early"] : <any>null;
            this.late = _data["late"] !== undefined ? _data["late"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveDeliveryPerformance {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveDeliveryPerformance();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>null;
        data["onTime"] = this.onTime !== undefined ? this.onTime : <any>null;
        data["early"] = this.early !== undefined ? this.early : <any>null;
        data["late"] = this.late !== undefined ? this.late : <any>null;
        return data;
    }
}

/** The apiRequest for retrieving delivery performance for a particular domain. */
export class EvolveGetDeliveryPerformanceByDomainIdAndProductIdsRequest {
    /** The domain to query by.
             */
    domainId?: string;
    /** The product id to filter on.
             */
    productIds?: string[] | null;
    /** The year to search by.
             */
    year?: number;
    /** The month to search by.
             */
    month?: number;

    init(_data?: any) {
        if (_data) {
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            if (Array.isArray(_data["productIds"])) {
                this.productIds = [] as any;
                for (let item of _data["productIds"])
                    this.productIds!.push(item);
            }
            else {
                this.productIds = <any>null;
            }
            this.year = _data["year"] !== undefined ? _data["year"] : <any>null;
            this.month = _data["month"] !== undefined ? _data["month"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveGetDeliveryPerformanceByDomainIdAndProductIdsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveGetDeliveryPerformanceByDomainIdAndProductIdsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        if (Array.isArray(this.productIds)) {
            data["productIds"] = [];
            for (let item of this.productIds)
                data["productIds"].push(item);
        }
        data["year"] = this.year !== undefined ? this.year : <any>null;
        data["month"] = this.month !== undefined ? this.month : <any>null;
        return data;
    }
}

export class EvolveGetHistoricalActiveEventsResponse {
    result?: EvolveHistoricalActiveEvent[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result!.push(EvolveHistoricalActiveEvent.fromJS(item));
            }
            else {
                this.result = <any>null;
            }
        }
    }

    static fromJS(data: any): EvolveGetHistoricalActiveEventsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveGetHistoricalActiveEventsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        return data;
    }
}

/** Historical events for evolve. */
export class EvolveHistoricalActiveEvent {
    /** The name of the event.
             */
    eventName?: string | null;
    /** The event date.
             */
    eventDate?: Date;
    /** The event total.
             */
    eventTotal?: number;
    /** The event rule type id.
             */
    eventRuleTypeId?: number;
    /** The data channel type id.
             */
    dataChannelTypeId?: number;

    init(_data?: any) {
        if (_data) {
            this.eventName = _data["eventName"] !== undefined ? _data["eventName"] : <any>null;
            this.eventDate = _data["eventDate"] ? new Date(_data["eventDate"].toString()) : <any>null;
            this.eventTotal = _data["eventTotal"] !== undefined ? _data["eventTotal"] : <any>null;
            this.eventRuleTypeId = _data["eventRuleTypeId"] !== undefined ? _data["eventRuleTypeId"] : <any>null;
            this.dataChannelTypeId = _data["dataChannelTypeId"] !== undefined ? _data["dataChannelTypeId"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveHistoricalActiveEvent {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveHistoricalActiveEvent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["eventName"] = this.eventName !== undefined ? this.eventName : <any>null;
        data["eventDate"] = this.eventDate ? this.eventDate.toISOString() : <any>null;
        data["eventTotal"] = this.eventTotal !== undefined ? this.eventTotal : <any>null;
        data["eventRuleTypeId"] = this.eventRuleTypeId !== undefined ? this.eventRuleTypeId : <any>null;
        data["dataChannelTypeId"] = this.dataChannelTypeId !== undefined ? this.dataChannelTypeId : <any>null;
        return data;
    }
}

export class EvolveGetHistoricalActiveEventsRequest {
    domainId?: string;
    timeZoneSystemId?: string | null;

    init(_data?: any) {
        if (_data) {
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.timeZoneSystemId = _data["timeZoneSystemId"] !== undefined ? _data["timeZoneSystemId"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveGetHistoricalActiveEventsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveGetHistoricalActiveEventsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["timeZoneSystemId"] = this.timeZoneSystemId !== undefined ? this.timeZoneSystemId : <any>null;
        return data;
    }
}

export class EvolveGetHistoricalActiveInventoryLevelEventsRequest {
    userId?: string;
    effectiveDomainId?: string;
    navigationDomainId?: string;
    onlyUnacknowledged?: boolean;
    assetTypeId?: AssetType | null;
    productId?: string | null;
    searchString?: string | null;
    startDate?: Date;
    endDate?: Date;

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.effectiveDomainId = _data["effectiveDomainId"] !== undefined ? _data["effectiveDomainId"] : <any>null;
            this.navigationDomainId = _data["navigationDomainId"] !== undefined ? _data["navigationDomainId"] : <any>null;
            this.onlyUnacknowledged = _data["onlyUnacknowledged"] !== undefined ? _data["onlyUnacknowledged"] : <any>null;
            this.assetTypeId = _data["assetTypeId"] !== undefined ? _data["assetTypeId"] : <any>null;
            this.productId = _data["productId"] !== undefined ? _data["productId"] : <any>null;
            this.searchString = _data["searchString"] !== undefined ? _data["searchString"] : <any>null;
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>null;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): EvolveGetHistoricalActiveInventoryLevelEventsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveGetHistoricalActiveInventoryLevelEventsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["effectiveDomainId"] = this.effectiveDomainId !== undefined ? this.effectiveDomainId : <any>null;
        data["navigationDomainId"] = this.navigationDomainId !== undefined ? this.navigationDomainId : <any>null;
        data["onlyUnacknowledged"] = this.onlyUnacknowledged !== undefined ? this.onlyUnacknowledged : <any>null;
        data["assetTypeId"] = this.assetTypeId !== undefined ? this.assetTypeId : <any>null;
        data["productId"] = this.productId !== undefined ? this.productId : <any>null;
        data["searchString"] = this.searchString !== undefined ? this.searchString : <any>null;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>null;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>null;
        return data;
    }
}

export class EvolveGetHistoricalActiveNonInventoryEventsRequest {
    userId?: string;
    effectiveDomainId?: string;
    navigationDomainId?: string;
    onlyUnacknowledged?: boolean;
    assetTypeId?: AssetType | null;
    productId?: string | null;
    searchString?: string | null;
    startDate?: Date;
    endDate?: Date;

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.effectiveDomainId = _data["effectiveDomainId"] !== undefined ? _data["effectiveDomainId"] : <any>null;
            this.navigationDomainId = _data["navigationDomainId"] !== undefined ? _data["navigationDomainId"] : <any>null;
            this.onlyUnacknowledged = _data["onlyUnacknowledged"] !== undefined ? _data["onlyUnacknowledged"] : <any>null;
            this.assetTypeId = _data["assetTypeId"] !== undefined ? _data["assetTypeId"] : <any>null;
            this.productId = _data["productId"] !== undefined ? _data["productId"] : <any>null;
            this.searchString = _data["searchString"] !== undefined ? _data["searchString"] : <any>null;
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>null;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): EvolveGetHistoricalActiveNonInventoryEventsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveGetHistoricalActiveNonInventoryEventsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["effectiveDomainId"] = this.effectiveDomainId !== undefined ? this.effectiveDomainId : <any>null;
        data["navigationDomainId"] = this.navigationDomainId !== undefined ? this.navigationDomainId : <any>null;
        data["onlyUnacknowledged"] = this.onlyUnacknowledged !== undefined ? this.onlyUnacknowledged : <any>null;
        data["assetTypeId"] = this.assetTypeId !== undefined ? this.assetTypeId : <any>null;
        data["productId"] = this.productId !== undefined ? this.productId : <any>null;
        data["searchString"] = this.searchString !== undefined ? this.searchString : <any>null;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>null;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>null;
        return data;
    }
}

export class EvolveGetProductsByDomainIdResponse {
    result?: EvolveProduct[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result!.push(EvolveProduct.fromJS(item));
            }
            else {
                this.result = <any>null;
            }
        }
    }

    static fromJS(data: any): EvolveGetProductsByDomainIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveGetProductsByDomainIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        return data;
    }
}

export class EvolveProduct {
    id?: string;
    productGroup?: string | null;
    specificGravity?: number | null;
    name?: string | null;
    description?: string | null;
    standardVolumePerCubicMeter?: number | null;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.productGroup = _data["productGroup"] !== undefined ? _data["productGroup"] : <any>null;
            this.specificGravity = _data["specificGravity"] !== undefined ? _data["specificGravity"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.standardVolumePerCubicMeter = _data["standardVolumePerCubicMeter"] !== undefined ? _data["standardVolumePerCubicMeter"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveProduct {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveProduct();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["productGroup"] = this.productGroup !== undefined ? this.productGroup : <any>null;
        data["specificGravity"] = this.specificGravity !== undefined ? this.specificGravity : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["standardVolumePerCubicMeter"] = this.standardVolumePerCubicMeter !== undefined ? this.standardVolumePerCubicMeter : <any>null;
        return data;
    }
}

export class EvolveGetProductsByDomainIdRequest {
    domainId?: string;

    init(_data?: any) {
        if (_data) {
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveGetProductsByDomainIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveGetProductsByDomainIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        return data;
    }
}

export class EvolveGetAssetSummaryRecordsByOptionsResponse {
    records?: EvolveAssetSummaryDto[] | null;
    count?: number;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["records"])) {
                this.records = [] as any;
                for (let item of _data["records"])
                    this.records!.push(EvolveAssetSummaryDto.fromJS(item));
            }
            else {
                this.records = <any>null;
            }
            this.count = _data["count"] !== undefined ? _data["count"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveGetAssetSummaryRecordsByOptionsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveGetAssetSummaryRecordsByOptionsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.records)) {
            data["records"] = [];
            for (let item of this.records)
                data["records"].push(item.toJSON());
        }
        data["count"] = this.count !== undefined ? this.count : <any>null;
        return data;
    }
}

/** Technically, these are not asset records. They are data channel records that are displayed in a grouped format on the asset summary page. The property names that exist within this object map 1 to 1 with the possible columns that exist in an asset summary template with the exception of certain reference columns located at the bottom. */
export class EvolveAssetSummaryDto {
    /** The description of the asset.
             */
    assetDescription?: string | null;
    /** The title of the asset.
             */
    assetTitle?: string | null;
    /** The type of asset.
             */
    assetType?: string | null;
    /** The channel number of the RTU.
             */
    channelNumber?: string | null;
    /** The city the asset is located.
             */
    city?: string | null;
    /** The country the asset is located.
             */
    country?: string | null;
    /** The customer name of the asset.
             */
    customerName?: string | null;
    /** A duration of time in hours from today to the data channels last recorded reading time.
             */
    dataAge?: number | null;
    /** The data channel description.
             */
    dataChannelDescription?: string | null;
    /** The type of data channel.
             */
    dataChannelType?: DataChannelType | null;
    /** The domain name of the asset.
             */
    domainName?: string | null;
    /** The ftp domain name if set.
             */
    ftpDomain?: string | null;
    /** If ftp for this asset is enabled.
             */
    ftpEnabled?: boolean | null;
    /** The ftp id if set.
             */
    ftpId?: string | null;
    /** The event importance level enumeration.
This property name doesn't make sense
but that's what the asset summary
template has so this is
what I'm calling it.
Update: 09/23/2020 this won't be used by the FE.
             */
    importanceLevelImage?: EventImportanceLevelType;
    /** The data channel event Importance Level
             */
    eventImportanceLevel?: EventImportanceLevelType | null;
    /** The name of the tech who installed the RTU.
             */
    installedTechName?: string | null;
    /** The current inventory state. Will be null if it's not a level data channel.
             */
    inventoryState?: string | null;
    /** The percent full value if the data channel is a level type.
             */
    percentFull?: number | null;
    /** The product description.
             */
    productDescription?: string | null;
    /** Will only contain a reading if the data channel type is DigitalInput or Gps.
This column is calculated in the stored procedure to reduce size of the payload.
             */
    reading?: string | null;
    /** The datetime at which the reading occurred.
             */
    readingTime?: Date | null;
    /** The device id of the rtu.
             */
    rtuDeviceId?: string | null;
    /** When a refill is scheduled if any.
             */
    scheduledRefill?: Date | null;
    /** The time zone name the asset resides in.
             */
    siteTimeZoneDisplayName?: string | null;
    /** The state/province of the asset.
             */
    state?: string | null;
    /** The event status.
             */
    status?: string | null;
    /** The street address for the asset.
             */
    streetAddress?: string | null;
    /** Custom field 1.
             */
    customField1?: string | null;
    /** Custom field 2.
             */
    customField2?: string | null;
    /** Custom field 3.
             */
    customField3?: string | null;
    /** Custom field 4.
             */
    customField4?: string | null;
    /** Custom field 5.
             */
    customField5?: string | null;
    /** Custom field 6.
             */
    customField6?: string | null;
    /** Custom field 7.
             */
    customField7?: string | null;
    /** Custom field 8.
             */
    customField8?: string | null;
    /** Custom field 9.
             */
    customField9?: string | null;
    /** Custom field 10.
             */
    customField10?: string | null;
    /** The id of the asset.
             */
    assetId?: string;
    /** The id of the data channel.
             */
    dataChannelId?: string;
    /** The scaled units string representation in asset summary table.
             */
    scaledUnits?: string | null;
    /** The reading in scaled units.
             */
    scaledReading?: number | null;
    /** Alarm levels converted to scaled.
             */
    scaledAlarmLevels?: string | null;
    /** Deliverable in scaled units.
             */
    scaledDeliverable?: number | null;
    /** The display units string representation in asset summary table.
             */
    displayUnits?: string | null;
    /** The reading in the default display units.
             */
    displayReading?: number | null;
    /** Alarm level in display units.
             */
    displayAlarmLevels?: string | null;
    /** Deliverable in display units.
             */
    displayDeliverable?: number | null;
    /** The percent full deliverable.
             */
    percentFullDeliverable?: number | null;
    /** The percent full alarm levels.
             */
    percentFullAlarmLevels?: string | null;
    /** The inventory status of the data channel if its applicable. Only level or totalized level.
             */
    eventInventoryStatusId?: EventInventoryStatusType | null;
    /** The display priority for group sorting.
             */
    displayPriority?: number;
    /** A flag tat indicates wether the DC has a missing data active event.
             */
    hasMissingData?: boolean;
    /** SiteNumber for data channel */
    dataChannel_SiteNumber?: string | null;
    /** SiteNumber for asset */
    asset_SiteNumber?: string | null;
    /** Tank type, example VerticalWith2To1EllipsoidalEnds */
    tankType?: TankType | null;

    init(_data?: any) {
        if (_data) {
            this.assetDescription = _data["assetDescription"] !== undefined ? _data["assetDescription"] : <any>null;
            this.assetTitle = _data["assetTitle"] !== undefined ? _data["assetTitle"] : <any>null;
            this.assetType = _data["assetType"] !== undefined ? _data["assetType"] : <any>null;
            this.channelNumber = _data["channelNumber"] !== undefined ? _data["channelNumber"] : <any>null;
            this.city = _data["city"] !== undefined ? _data["city"] : <any>null;
            this.country = _data["country"] !== undefined ? _data["country"] : <any>null;
            this.customerName = _data["customerName"] !== undefined ? _data["customerName"] : <any>null;
            this.dataAge = _data["dataAge"] !== undefined ? _data["dataAge"] : <any>null;
            this.dataChannelDescription = _data["dataChannelDescription"] !== undefined ? _data["dataChannelDescription"] : <any>null;
            this.dataChannelType = _data["dataChannelType"] !== undefined ? _data["dataChannelType"] : <any>null;
            this.domainName = _data["domainName"] !== undefined ? _data["domainName"] : <any>null;
            this.ftpDomain = _data["ftpDomain"] !== undefined ? _data["ftpDomain"] : <any>null;
            this.ftpEnabled = _data["ftpEnabled"] !== undefined ? _data["ftpEnabled"] : <any>null;
            this.ftpId = _data["ftpId"] !== undefined ? _data["ftpId"] : <any>null;
            this.importanceLevelImage = _data["importanceLevelImage"] !== undefined ? _data["importanceLevelImage"] : <any>null;
            this.eventImportanceLevel = _data["eventImportanceLevel"] !== undefined ? _data["eventImportanceLevel"] : <any>null;
            this.installedTechName = _data["installedTechName"] !== undefined ? _data["installedTechName"] : <any>null;
            this.inventoryState = _data["inventoryState"] !== undefined ? _data["inventoryState"] : <any>null;
            this.percentFull = _data["percentFull"] !== undefined ? _data["percentFull"] : <any>null;
            this.productDescription = _data["productDescription"] !== undefined ? _data["productDescription"] : <any>null;
            this.reading = _data["reading"] !== undefined ? _data["reading"] : <any>null;
            this.readingTime = _data["readingTime"] ? new Date(_data["readingTime"].toString()) : <any>null;
            this.rtuDeviceId = _data["rtuDeviceId"] !== undefined ? _data["rtuDeviceId"] : <any>null;
            this.scheduledRefill = _data["scheduledRefill"] ? new Date(_data["scheduledRefill"].toString()) : <any>null;
            this.siteTimeZoneDisplayName = _data["siteTimeZoneDisplayName"] !== undefined ? _data["siteTimeZoneDisplayName"] : <any>null;
            this.state = _data["state"] !== undefined ? _data["state"] : <any>null;
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
            this.streetAddress = _data["streetAddress"] !== undefined ? _data["streetAddress"] : <any>null;
            this.customField1 = _data["customField1"] !== undefined ? _data["customField1"] : <any>null;
            this.customField2 = _data["customField2"] !== undefined ? _data["customField2"] : <any>null;
            this.customField3 = _data["customField3"] !== undefined ? _data["customField3"] : <any>null;
            this.customField4 = _data["customField4"] !== undefined ? _data["customField4"] : <any>null;
            this.customField5 = _data["customField5"] !== undefined ? _data["customField5"] : <any>null;
            this.customField6 = _data["customField6"] !== undefined ? _data["customField6"] : <any>null;
            this.customField7 = _data["customField7"] !== undefined ? _data["customField7"] : <any>null;
            this.customField8 = _data["customField8"] !== undefined ? _data["customField8"] : <any>null;
            this.customField9 = _data["customField9"] !== undefined ? _data["customField9"] : <any>null;
            this.customField10 = _data["customField10"] !== undefined ? _data["customField10"] : <any>null;
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.scaledUnits = _data["scaledUnits"] !== undefined ? _data["scaledUnits"] : <any>null;
            this.scaledReading = _data["scaledReading"] !== undefined ? _data["scaledReading"] : <any>null;
            this.scaledAlarmLevels = _data["scaledAlarmLevels"] !== undefined ? _data["scaledAlarmLevels"] : <any>null;
            this.scaledDeliverable = _data["scaledDeliverable"] !== undefined ? _data["scaledDeliverable"] : <any>null;
            this.displayUnits = _data["displayUnits"] !== undefined ? _data["displayUnits"] : <any>null;
            this.displayReading = _data["displayReading"] !== undefined ? _data["displayReading"] : <any>null;
            this.displayAlarmLevels = _data["displayAlarmLevels"] !== undefined ? _data["displayAlarmLevels"] : <any>null;
            this.displayDeliverable = _data["displayDeliverable"] !== undefined ? _data["displayDeliverable"] : <any>null;
            this.percentFullDeliverable = _data["percentFullDeliverable"] !== undefined ? _data["percentFullDeliverable"] : <any>null;
            this.percentFullAlarmLevels = _data["percentFullAlarmLevels"] !== undefined ? _data["percentFullAlarmLevels"] : <any>null;
            this.eventInventoryStatusId = _data["eventInventoryStatusId"] !== undefined ? _data["eventInventoryStatusId"] : <any>null;
            this.displayPriority = _data["displayPriority"] !== undefined ? _data["displayPriority"] : <any>null;
            this.hasMissingData = _data["hasMissingData"] !== undefined ? _data["hasMissingData"] : <any>null;
            this.dataChannel_SiteNumber = _data["dataChannel_SiteNumber"] !== undefined ? _data["dataChannel_SiteNumber"] : <any>null;
            this.asset_SiteNumber = _data["asset_SiteNumber"] !== undefined ? _data["asset_SiteNumber"] : <any>null;
            this.tankType = _data["tankType"] !== undefined ? _data["tankType"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveAssetSummaryDto {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveAssetSummaryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetDescription"] = this.assetDescription !== undefined ? this.assetDescription : <any>null;
        data["assetTitle"] = this.assetTitle !== undefined ? this.assetTitle : <any>null;
        data["assetType"] = this.assetType !== undefined ? this.assetType : <any>null;
        data["channelNumber"] = this.channelNumber !== undefined ? this.channelNumber : <any>null;
        data["city"] = this.city !== undefined ? this.city : <any>null;
        data["country"] = this.country !== undefined ? this.country : <any>null;
        data["customerName"] = this.customerName !== undefined ? this.customerName : <any>null;
        data["dataAge"] = this.dataAge !== undefined ? this.dataAge : <any>null;
        data["dataChannelDescription"] = this.dataChannelDescription !== undefined ? this.dataChannelDescription : <any>null;
        data["dataChannelType"] = this.dataChannelType !== undefined ? this.dataChannelType : <any>null;
        data["domainName"] = this.domainName !== undefined ? this.domainName : <any>null;
        data["ftpDomain"] = this.ftpDomain !== undefined ? this.ftpDomain : <any>null;
        data["ftpEnabled"] = this.ftpEnabled !== undefined ? this.ftpEnabled : <any>null;
        data["ftpId"] = this.ftpId !== undefined ? this.ftpId : <any>null;
        data["importanceLevelImage"] = this.importanceLevelImage !== undefined ? this.importanceLevelImage : <any>null;
        data["eventImportanceLevel"] = this.eventImportanceLevel !== undefined ? this.eventImportanceLevel : <any>null;
        data["installedTechName"] = this.installedTechName !== undefined ? this.installedTechName : <any>null;
        data["inventoryState"] = this.inventoryState !== undefined ? this.inventoryState : <any>null;
        data["percentFull"] = this.percentFull !== undefined ? this.percentFull : <any>null;
        data["productDescription"] = this.productDescription !== undefined ? this.productDescription : <any>null;
        data["reading"] = this.reading !== undefined ? this.reading : <any>null;
        data["readingTime"] = this.readingTime ? this.readingTime.toISOString() : <any>null;
        data["rtuDeviceId"] = this.rtuDeviceId !== undefined ? this.rtuDeviceId : <any>null;
        data["scheduledRefill"] = this.scheduledRefill ? this.scheduledRefill.toISOString() : <any>null;
        data["siteTimeZoneDisplayName"] = this.siteTimeZoneDisplayName !== undefined ? this.siteTimeZoneDisplayName : <any>null;
        data["state"] = this.state !== undefined ? this.state : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["streetAddress"] = this.streetAddress !== undefined ? this.streetAddress : <any>null;
        data["customField1"] = this.customField1 !== undefined ? this.customField1 : <any>null;
        data["customField2"] = this.customField2 !== undefined ? this.customField2 : <any>null;
        data["customField3"] = this.customField3 !== undefined ? this.customField3 : <any>null;
        data["customField4"] = this.customField4 !== undefined ? this.customField4 : <any>null;
        data["customField5"] = this.customField5 !== undefined ? this.customField5 : <any>null;
        data["customField6"] = this.customField6 !== undefined ? this.customField6 : <any>null;
        data["customField7"] = this.customField7 !== undefined ? this.customField7 : <any>null;
        data["customField8"] = this.customField8 !== undefined ? this.customField8 : <any>null;
        data["customField9"] = this.customField9 !== undefined ? this.customField9 : <any>null;
        data["customField10"] = this.customField10 !== undefined ? this.customField10 : <any>null;
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["scaledUnits"] = this.scaledUnits !== undefined ? this.scaledUnits : <any>null;
        data["scaledReading"] = this.scaledReading !== undefined ? this.scaledReading : <any>null;
        data["scaledAlarmLevels"] = this.scaledAlarmLevels !== undefined ? this.scaledAlarmLevels : <any>null;
        data["scaledDeliverable"] = this.scaledDeliverable !== undefined ? this.scaledDeliverable : <any>null;
        data["displayUnits"] = this.displayUnits !== undefined ? this.displayUnits : <any>null;
        data["displayReading"] = this.displayReading !== undefined ? this.displayReading : <any>null;
        data["displayAlarmLevels"] = this.displayAlarmLevels !== undefined ? this.displayAlarmLevels : <any>null;
        data["displayDeliverable"] = this.displayDeliverable !== undefined ? this.displayDeliverable : <any>null;
        data["percentFullDeliverable"] = this.percentFullDeliverable !== undefined ? this.percentFullDeliverable : <any>null;
        data["percentFullAlarmLevels"] = this.percentFullAlarmLevels !== undefined ? this.percentFullAlarmLevels : <any>null;
        data["eventInventoryStatusId"] = this.eventInventoryStatusId !== undefined ? this.eventInventoryStatusId : <any>null;
        data["displayPriority"] = this.displayPriority !== undefined ? this.displayPriority : <any>null;
        data["hasMissingData"] = this.hasMissingData !== undefined ? this.hasMissingData : <any>null;
        data["dataChannel_SiteNumber"] = this.dataChannel_SiteNumber !== undefined ? this.dataChannel_SiteNumber : <any>null;
        data["asset_SiteNumber"] = this.asset_SiteNumber !== undefined ? this.asset_SiteNumber : <any>null;
        data["tankType"] = this.tankType !== undefined ? this.tankType : <any>null;
        return data;
    }
}

export class EvolveGetAssetSummaryRecordsByOptionsRequest {
    options?: EvolveAssetSummaryOptions | null;

    init(_data?: any) {
        if (_data) {
            this.options = _data["options"] ? EvolveAssetSummaryOptions.fromJS(_data["options"]) : <any>null;
        }
    }

    static fromJS(data: any): EvolveGetAssetSummaryRecordsByOptionsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveGetAssetSummaryRecordsByOptionsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["options"] = this.options ? this.options.toJSON() : <any>null;
        return data;
    }
}

export class EvolveAssetSummaryOptions {
    /** The effective domain id.
             */
    domainId?: string;
    /** The user id.
             */
    userId?: string;
    /** The page number. Starts at 1.
             */
    pageNumber?: number;
    /** The size of the page.
             */
    pageSize?: number | null;
    /** The column to sort by.
             */
    sortBy?: string | null;
    /** The SQL sort direction.
             */
    sortDirection?: ListSortDirection;
    /** The SQL column to filter by.
             */
    filterBy?: AssetListFilterOptions;
    /** The filter text.
             */
    filterText?: string | null;
    /** The "group by" which isn't really a group by, more of a complex order by.
             */
    groupBy?: AssetSummaryGroupingOptions;
    /** The "group by" sort direction.
             */
    groupSortDirection?: ListSortDirection;
    /** The where clause attached to asset tree nodes and asset groups.
             */
    assetSearchExpression?: string | null;
    /** The data channel types.
             */
    dataChannelTypes?: DataChannelType[] | null;
    /** The inventory states to filter by.
             */
    inventoryStates?: string[] | null;
    /** The asset group search domain if the asset group was published from another domain.
             */
    assetSearchDomainId?: string | null;

    init(_data?: any) {
        if (_data) {
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.pageNumber = _data["pageNumber"] !== undefined ? _data["pageNumber"] : <any>null;
            this.pageSize = _data["pageSize"] !== undefined ? _data["pageSize"] : <any>null;
            this.sortBy = _data["sortBy"] !== undefined ? _data["sortBy"] : <any>null;
            this.sortDirection = _data["sortDirection"] !== undefined ? _data["sortDirection"] : <any>null;
            this.filterBy = _data["filterBy"] !== undefined ? _data["filterBy"] : <any>null;
            this.filterText = _data["filterText"] !== undefined ? _data["filterText"] : <any>null;
            this.groupBy = _data["groupBy"] !== undefined ? _data["groupBy"] : <any>null;
            this.groupSortDirection = _data["groupSortDirection"] !== undefined ? _data["groupSortDirection"] : <any>null;
            this.assetSearchExpression = _data["assetSearchExpression"] !== undefined ? _data["assetSearchExpression"] : <any>null;
            if (Array.isArray(_data["dataChannelTypes"])) {
                this.dataChannelTypes = [] as any;
                for (let item of _data["dataChannelTypes"])
                    this.dataChannelTypes!.push(item);
            }
            else {
                this.dataChannelTypes = <any>null;
            }
            if (Array.isArray(_data["inventoryStates"])) {
                this.inventoryStates = [] as any;
                for (let item of _data["inventoryStates"])
                    this.inventoryStates!.push(item);
            }
            else {
                this.inventoryStates = <any>null;
            }
            this.assetSearchDomainId = _data["assetSearchDomainId"] !== undefined ? _data["assetSearchDomainId"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveAssetSummaryOptions {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveAssetSummaryOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["pageNumber"] = this.pageNumber !== undefined ? this.pageNumber : <any>null;
        data["pageSize"] = this.pageSize !== undefined ? this.pageSize : <any>null;
        data["sortBy"] = this.sortBy !== undefined ? this.sortBy : <any>null;
        data["sortDirection"] = this.sortDirection !== undefined ? this.sortDirection : <any>null;
        data["filterBy"] = this.filterBy !== undefined ? this.filterBy : <any>null;
        data["filterText"] = this.filterText !== undefined ? this.filterText : <any>null;
        data["groupBy"] = this.groupBy !== undefined ? this.groupBy : <any>null;
        data["groupSortDirection"] = this.groupSortDirection !== undefined ? this.groupSortDirection : <any>null;
        data["assetSearchExpression"] = this.assetSearchExpression !== undefined ? this.assetSearchExpression : <any>null;
        if (Array.isArray(this.dataChannelTypes)) {
            data["dataChannelTypes"] = [];
            for (let item of this.dataChannelTypes)
                data["dataChannelTypes"].push(item);
        }
        if (Array.isArray(this.inventoryStates)) {
            data["inventoryStates"] = [];
            for (let item of this.inventoryStates)
                data["inventoryStates"].push(item);
        }
        data["assetSearchDomainId"] = this.assetSearchDomainId !== undefined ? this.assetSearchDomainId : <any>null;
        return data;
    }
}

export class EvolveRetrieveAssetMapRecordsByOptionsResponse {
    locations?: EvolveAssetLocationDto[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["locations"])) {
                this.locations = [] as any;
                for (let item of _data["locations"])
                    this.locations!.push(EvolveAssetLocationDto.fromJS(item));
            }
            else {
                this.locations = <any>null;
            }
        }
    }

    static fromJS(data: any): EvolveRetrieveAssetMapRecordsByOptionsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveAssetMapRecordsByOptionsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.locations)) {
            data["locations"] = [];
            for (let item of this.locations)
                data["locations"].push(item.toJSON());
        }
        return data;
    }
}

export class EvolveAssetLocationDto {
    latitude?: number | null;
    longitude?: number | null;
    assets?: AssetMapInfo[] | null;

    init(_data?: any) {
        if (_data) {
            this.latitude = _data["latitude"] !== undefined ? _data["latitude"] : <any>null;
            this.longitude = _data["longitude"] !== undefined ? _data["longitude"] : <any>null;
            if (Array.isArray(_data["assets"])) {
                this.assets = [] as any;
                for (let item of _data["assets"])
                    this.assets!.push(AssetMapInfo.fromJS(item));
            }
            else {
                this.assets = <any>null;
            }
        }
    }

    static fromJS(data: any): EvolveAssetLocationDto {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveAssetLocationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["latitude"] = this.latitude !== undefined ? this.latitude : <any>null;
        data["longitude"] = this.longitude !== undefined ? this.longitude : <any>null;
        if (Array.isArray(this.assets)) {
            data["assets"] = [];
            for (let item of this.assets)
                data["assets"].push(item.toJSON());
        }
        return data;
    }
}

export class AssetMapInfo {
    assetId?: string;
    assetTitle?: string | null;
    assetType?: AssetType;
    hasGpsTrackingChannel?: boolean;
    dataChannels?: AssetMapDataChannelInfo[] | null;

    init(_data?: any) {
        if (_data) {
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.assetTitle = _data["assetTitle"] !== undefined ? _data["assetTitle"] : <any>null;
            this.assetType = _data["assetType"] !== undefined ? _data["assetType"] : <any>null;
            this.hasGpsTrackingChannel = _data["hasGpsTrackingChannel"] !== undefined ? _data["hasGpsTrackingChannel"] : <any>null;
            if (Array.isArray(_data["dataChannels"])) {
                this.dataChannels = [] as any;
                for (let item of _data["dataChannels"])
                    this.dataChannels!.push(AssetMapDataChannelInfo.fromJS(item));
            }
            else {
                this.dataChannels = <any>null;
            }
        }
    }

    static fromJS(data: any): AssetMapInfo {
        data = typeof data === 'object' ? data : {};
        let result = new AssetMapInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["assetTitle"] = this.assetTitle !== undefined ? this.assetTitle : <any>null;
        data["assetType"] = this.assetType !== undefined ? this.assetType : <any>null;
        data["hasGpsTrackingChannel"] = this.hasGpsTrackingChannel !== undefined ? this.hasGpsTrackingChannel : <any>null;
        if (Array.isArray(this.dataChannels)) {
            data["dataChannels"] = [];
            for (let item of this.dataChannels)
                data["dataChannels"].push(item.toJSON());
        }
        return data;
    }
}

export class AssetMapDataChannelInfo {
    /** The data channel Id.
             */
    dataChannelId?: string;
    /** The data channel description.
             */
    dataChannelDescription?: string | null;
    /** The data channel type.
             */
    dataChannelType?: DataChannelType;
    /** Product Name.
             */
    productName?: string | null;
    /** Tank type.
             */
    tankType?: TankType | null;
    /** The data channel description.
             */
    percentfull?: number | null;
    /** The reading value.
             */
    latestReadingValue?: number | null;
    /** The DC unit
             */
    unit?: string | null;
    /** The DC DecimalPlaces
             */
    decimalPlaces?: number;
    /** The datetime at which the reading occurred.
             */
    readingTime?: Date | null;
    /** The inventory status of the data channel if its applicable.
             */
    eventInventoryStatusId?: EventInventoryStatusType | null;
    /** The importance level for this active event rule.
             */
    eventImportanceLevel?: EventImportanceLevelType | null;
    /** A flag that indicates wether the DC has a missing data active event.
             */
    hasMissingData?: boolean;
    /** The event status.
             */
    eventStatus?: string | null;

    init(_data?: any) {
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.dataChannelDescription = _data["dataChannelDescription"] !== undefined ? _data["dataChannelDescription"] : <any>null;
            this.dataChannelType = _data["dataChannelType"] !== undefined ? _data["dataChannelType"] : <any>null;
            this.productName = _data["productName"] !== undefined ? _data["productName"] : <any>null;
            this.tankType = _data["tankType"] !== undefined ? _data["tankType"] : <any>null;
            this.percentfull = _data["percentfull"] !== undefined ? _data["percentfull"] : <any>null;
            this.latestReadingValue = _data["latestReadingValue"] !== undefined ? _data["latestReadingValue"] : <any>null;
            this.unit = _data["unit"] !== undefined ? _data["unit"] : <any>null;
            this.decimalPlaces = _data["decimalPlaces"] !== undefined ? _data["decimalPlaces"] : <any>null;
            this.readingTime = _data["readingTime"] ? new Date(_data["readingTime"].toString()) : <any>null;
            this.eventInventoryStatusId = _data["eventInventoryStatusId"] !== undefined ? _data["eventInventoryStatusId"] : <any>null;
            this.eventImportanceLevel = _data["eventImportanceLevel"] !== undefined ? _data["eventImportanceLevel"] : <any>null;
            this.hasMissingData = _data["hasMissingData"] !== undefined ? _data["hasMissingData"] : <any>null;
            this.eventStatus = _data["eventStatus"] !== undefined ? _data["eventStatus"] : <any>null;
        }
    }

    static fromJS(data: any): AssetMapDataChannelInfo {
        data = typeof data === 'object' ? data : {};
        let result = new AssetMapDataChannelInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["dataChannelDescription"] = this.dataChannelDescription !== undefined ? this.dataChannelDescription : <any>null;
        data["dataChannelType"] = this.dataChannelType !== undefined ? this.dataChannelType : <any>null;
        data["productName"] = this.productName !== undefined ? this.productName : <any>null;
        data["tankType"] = this.tankType !== undefined ? this.tankType : <any>null;
        data["percentfull"] = this.percentfull !== undefined ? this.percentfull : <any>null;
        data["latestReadingValue"] = this.latestReadingValue !== undefined ? this.latestReadingValue : <any>null;
        data["unit"] = this.unit !== undefined ? this.unit : <any>null;
        data["decimalPlaces"] = this.decimalPlaces !== undefined ? this.decimalPlaces : <any>null;
        data["readingTime"] = this.readingTime ? this.readingTime.toISOString() : <any>null;
        data["eventInventoryStatusId"] = this.eventInventoryStatusId !== undefined ? this.eventInventoryStatusId : <any>null;
        data["eventImportanceLevel"] = this.eventImportanceLevel !== undefined ? this.eventImportanceLevel : <any>null;
        data["hasMissingData"] = this.hasMissingData !== undefined ? this.hasMissingData : <any>null;
        data["eventStatus"] = this.eventStatus !== undefined ? this.eventStatus : <any>null;
        return data;
    }
}

export class EvolveRetrieveAssetMapRecordsByOptionsRequest {
    options?: EvolveAssetMapOptions | null;

    init(_data?: any) {
        if (_data) {
            this.options = _data["options"] ? EvolveAssetMapOptions.fromJS(_data["options"]) : <any>null;
        }
    }

    static fromJS(data: any): EvolveRetrieveAssetMapRecordsByOptionsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveAssetMapRecordsByOptionsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["options"] = this.options ? this.options.toJSON() : <any>null;
        return data;
    }
}

export class EvolveAssetMapOptions {
    /** The effective domain id.
             */
    domainId?: string;
    /** The where clause attached to asset tree nodes and asset groups.
             */
    assetSearchExpression?: string | null;
    /** The asset group search domain if the asset group was published from another domain.
             */
    assetSearchDomainId?: string | null;
    /** The SQL column to filter by.
             */
    filterBy?: AssetListFilterOptions;
    /** The filter text.
             */
    filterText?: string | null;
    /** The data channel types.
             */
    dataChannelTypes?: DataChannelType[] | null;
    /** The inventory states to filter by.
             */
    inventoryStates?: string[] | null;

    init(_data?: any) {
        if (_data) {
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.assetSearchExpression = _data["assetSearchExpression"] !== undefined ? _data["assetSearchExpression"] : <any>null;
            this.assetSearchDomainId = _data["assetSearchDomainId"] !== undefined ? _data["assetSearchDomainId"] : <any>null;
            this.filterBy = _data["filterBy"] !== undefined ? _data["filterBy"] : <any>null;
            this.filterText = _data["filterText"] !== undefined ? _data["filterText"] : <any>null;
            if (Array.isArray(_data["dataChannelTypes"])) {
                this.dataChannelTypes = [] as any;
                for (let item of _data["dataChannelTypes"])
                    this.dataChannelTypes!.push(item);
            }
            else {
                this.dataChannelTypes = <any>null;
            }
            if (Array.isArray(_data["inventoryStates"])) {
                this.inventoryStates = [] as any;
                for (let item of _data["inventoryStates"])
                    this.inventoryStates!.push(item);
            }
            else {
                this.inventoryStates = <any>null;
            }
        }
    }

    static fromJS(data: any): EvolveAssetMapOptions {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveAssetMapOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["assetSearchExpression"] = this.assetSearchExpression !== undefined ? this.assetSearchExpression : <any>null;
        data["assetSearchDomainId"] = this.assetSearchDomainId !== undefined ? this.assetSearchDomainId : <any>null;
        data["filterBy"] = this.filterBy !== undefined ? this.filterBy : <any>null;
        data["filterText"] = this.filterText !== undefined ? this.filterText : <any>null;
        if (Array.isArray(this.dataChannelTypes)) {
            data["dataChannelTypes"] = [];
            for (let item of this.dataChannelTypes)
                data["dataChannelTypes"].push(item);
        }
        if (Array.isArray(this.inventoryStates)) {
            data["inventoryStates"] = [];
            for (let item of this.inventoryStates)
                data["inventoryStates"].push(item);
        }
        return data;
    }
}

export class EvolveSaveEditAssetDetailsInfoResponse {
    asset?: EvolveAssetDetails | null;

    init(_data?: any) {
        if (_data) {
            this.asset = _data["asset"] ? EvolveAssetDetails.fromJS(_data["asset"]) : <any>null;
        }
    }

    static fromJS(data: any): EvolveSaveEditAssetDetailsInfoResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveEditAssetDetailsInfoResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["asset"] = this.asset ? this.asset.toJSON() : <any>null;
        return data;
    }
}

export class EvolveAssetDetails {
    assetId?: string;
    domainId?: string;
    domainName?: string | null;
    isPublishedAsset?: boolean;
    publishedDomainName?: string | null;
    assetType?: AssetType;
    assetDescription?: string | null;
    technician?: string | null;
    integrationId?: string | null;
    assetTitle?: string | null;
    tubeTrailer?: TubeTrailerInfo | null;
    designCurveType?: DesignCurveType;
    assetNotes?: string | null;
    referenceDocumentUrl?: string | null;
    siteInfo?: AssetDetailsSiteInfo | null;
    customProperties?: EvolveAssetCustomPropertyDetail[] | null;
    dataChannels?: EvolveAssetDetailDataChannelInfo[] | null;

    init(_data?: any) {
        if (_data) {
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.domainName = _data["domainName"] !== undefined ? _data["domainName"] : <any>null;
            this.isPublishedAsset = _data["isPublishedAsset"] !== undefined ? _data["isPublishedAsset"] : <any>null;
            this.publishedDomainName = _data["publishedDomainName"] !== undefined ? _data["publishedDomainName"] : <any>null;
            this.assetType = _data["assetType"] !== undefined ? _data["assetType"] : <any>null;
            this.assetDescription = _data["assetDescription"] !== undefined ? _data["assetDescription"] : <any>null;
            this.technician = _data["technician"] !== undefined ? _data["technician"] : <any>null;
            this.integrationId = _data["integrationId"] !== undefined ? _data["integrationId"] : <any>null;
            this.assetTitle = _data["assetTitle"] !== undefined ? _data["assetTitle"] : <any>null;
            this.tubeTrailer = _data["tubeTrailer"] ? TubeTrailerInfo.fromJS(_data["tubeTrailer"]) : <any>null;
            this.designCurveType = _data["designCurveType"] !== undefined ? _data["designCurveType"] : <any>null;
            this.assetNotes = _data["assetNotes"] !== undefined ? _data["assetNotes"] : <any>null;
            this.referenceDocumentUrl = _data["referenceDocumentUrl"] !== undefined ? _data["referenceDocumentUrl"] : <any>null;
            this.siteInfo = _data["siteInfo"] ? AssetDetailsSiteInfo.fromJS(_data["siteInfo"]) : <any>null;
            if (Array.isArray(_data["customProperties"])) {
                this.customProperties = [] as any;
                for (let item of _data["customProperties"])
                    this.customProperties!.push(EvolveAssetCustomPropertyDetail.fromJS(item));
            }
            else {
                this.customProperties = <any>null;
            }
            if (Array.isArray(_data["dataChannels"])) {
                this.dataChannels = [] as any;
                for (let item of _data["dataChannels"])
                    this.dataChannels!.push(EvolveAssetDetailDataChannelInfo.fromJS(item));
            }
            else {
                this.dataChannels = <any>null;
            }
        }
    }

    static fromJS(data: any): EvolveAssetDetails {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveAssetDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["domainName"] = this.domainName !== undefined ? this.domainName : <any>null;
        data["isPublishedAsset"] = this.isPublishedAsset !== undefined ? this.isPublishedAsset : <any>null;
        data["publishedDomainName"] = this.publishedDomainName !== undefined ? this.publishedDomainName : <any>null;
        data["assetType"] = this.assetType !== undefined ? this.assetType : <any>null;
        data["assetDescription"] = this.assetDescription !== undefined ? this.assetDescription : <any>null;
        data["technician"] = this.technician !== undefined ? this.technician : <any>null;
        data["integrationId"] = this.integrationId !== undefined ? this.integrationId : <any>null;
        data["assetTitle"] = this.assetTitle !== undefined ? this.assetTitle : <any>null;
        data["tubeTrailer"] = this.tubeTrailer ? this.tubeTrailer.toJSON() : <any>null;
        data["designCurveType"] = this.designCurveType !== undefined ? this.designCurveType : <any>null;
        data["assetNotes"] = this.assetNotes !== undefined ? this.assetNotes : <any>null;
        data["referenceDocumentUrl"] = this.referenceDocumentUrl !== undefined ? this.referenceDocumentUrl : <any>null;
        data["siteInfo"] = this.siteInfo ? this.siteInfo.toJSON() : <any>null;
        if (Array.isArray(this.customProperties)) {
            data["customProperties"] = [];
            for (let item of this.customProperties)
                data["customProperties"].push(item.toJSON());
        }
        if (Array.isArray(this.dataChannels)) {
            data["dataChannels"] = [];
            for (let item of this.dataChannels)
                data["dataChannels"].push(item.toJSON());
        }
        return data;
    }
}

export class TubeTrailerInfo {
    numberOfTubes?: number | null;
    tubeConfiguration?: string | null;
    requalifierIdNumber?: string | null;
    lastTestDate?: Date | null;
    testDueDate?: Date | null;
    lastExternalNeckInspection?: Date | null;
    visualInspectionDueDate?: Date | null;
    dotStampedPressure?: number | null;
    dotSpecialFillingLimit?: number | null;
    dotTestPressure?: number | null;
    dotWaterVolume?: number | null;
    imdgMaxWorkingPressure?: number | null;
    imdgTestPressure?: number | null;
    imdgWaterVolume?: number | null;
    fillCountSinceLastTestDate?: number | null;

    init(_data?: any) {
        if (_data) {
            this.numberOfTubes = _data["numberOfTubes"] !== undefined ? _data["numberOfTubes"] : <any>null;
            this.tubeConfiguration = _data["tubeConfiguration"] !== undefined ? _data["tubeConfiguration"] : <any>null;
            this.requalifierIdNumber = _data["requalifierIdNumber"] !== undefined ? _data["requalifierIdNumber"] : <any>null;
            this.lastTestDate = _data["lastTestDate"] ? new Date(_data["lastTestDate"].toString()) : <any>null;
            this.testDueDate = _data["testDueDate"] ? new Date(_data["testDueDate"].toString()) : <any>null;
            this.lastExternalNeckInspection = _data["lastExternalNeckInspection"] ? new Date(_data["lastExternalNeckInspection"].toString()) : <any>null;
            this.visualInspectionDueDate = _data["visualInspectionDueDate"] ? new Date(_data["visualInspectionDueDate"].toString()) : <any>null;
            this.dotStampedPressure = _data["dotStampedPressure"] !== undefined ? _data["dotStampedPressure"] : <any>null;
            this.dotSpecialFillingLimit = _data["dotSpecialFillingLimit"] !== undefined ? _data["dotSpecialFillingLimit"] : <any>null;
            this.dotTestPressure = _data["dotTestPressure"] !== undefined ? _data["dotTestPressure"] : <any>null;
            this.dotWaterVolume = _data["dotWaterVolume"] !== undefined ? _data["dotWaterVolume"] : <any>null;
            this.imdgMaxWorkingPressure = _data["imdgMaxWorkingPressure"] !== undefined ? _data["imdgMaxWorkingPressure"] : <any>null;
            this.imdgTestPressure = _data["imdgTestPressure"] !== undefined ? _data["imdgTestPressure"] : <any>null;
            this.imdgWaterVolume = _data["imdgWaterVolume"] !== undefined ? _data["imdgWaterVolume"] : <any>null;
            this.fillCountSinceLastTestDate = _data["fillCountSinceLastTestDate"] !== undefined ? _data["fillCountSinceLastTestDate"] : <any>null;
        }
    }

    static fromJS(data: any): TubeTrailerInfo {
        data = typeof data === 'object' ? data : {};
        let result = new TubeTrailerInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["numberOfTubes"] = this.numberOfTubes !== undefined ? this.numberOfTubes : <any>null;
        data["tubeConfiguration"] = this.tubeConfiguration !== undefined ? this.tubeConfiguration : <any>null;
        data["requalifierIdNumber"] = this.requalifierIdNumber !== undefined ? this.requalifierIdNumber : <any>null;
        data["lastTestDate"] = this.lastTestDate ? this.lastTestDate.toISOString() : <any>null;
        data["testDueDate"] = this.testDueDate ? this.testDueDate.toISOString() : <any>null;
        data["lastExternalNeckInspection"] = this.lastExternalNeckInspection ? this.lastExternalNeckInspection.toISOString() : <any>null;
        data["visualInspectionDueDate"] = this.visualInspectionDueDate ? this.visualInspectionDueDate.toISOString() : <any>null;
        data["dotStampedPressure"] = this.dotStampedPressure !== undefined ? this.dotStampedPressure : <any>null;
        data["dotSpecialFillingLimit"] = this.dotSpecialFillingLimit !== undefined ? this.dotSpecialFillingLimit : <any>null;
        data["dotTestPressure"] = this.dotTestPressure !== undefined ? this.dotTestPressure : <any>null;
        data["dotWaterVolume"] = this.dotWaterVolume !== undefined ? this.dotWaterVolume : <any>null;
        data["imdgMaxWorkingPressure"] = this.imdgMaxWorkingPressure !== undefined ? this.imdgMaxWorkingPressure : <any>null;
        data["imdgTestPressure"] = this.imdgTestPressure !== undefined ? this.imdgTestPressure : <any>null;
        data["imdgWaterVolume"] = this.imdgWaterVolume !== undefined ? this.imdgWaterVolume : <any>null;
        data["fillCountSinceLastTestDate"] = this.fillCountSinceLastTestDate !== undefined ? this.fillCountSinceLastTestDate : <any>null;
        return data;
    }
}

export class AssetDetailsSiteInfo {
    siteId?: string;
    siteDescription?: string | null;
    siteTimeZoneId?: number | null;
    siteTimeZoneDisplayName?: string | null;
    latitude?: number | null;
    longitude?: number | null;
    customerContactName?: string | null;
    customerContactPhone?: string | null;
    customerName?: string | null;
    siteNumber?: string | null;
    address1?: string | null;
    address2?: string | null;
    address3?: string | null;
    city?: string | null;
    state?: string | null;
    country?: string | null;
    postalCode?: string | null;
    siteNotes?: string | null;

    init(_data?: any) {
        if (_data) {
            this.siteId = _data["siteId"] !== undefined ? _data["siteId"] : <any>null;
            this.siteDescription = _data["siteDescription"] !== undefined ? _data["siteDescription"] : <any>null;
            this.siteTimeZoneId = _data["siteTimeZoneId"] !== undefined ? _data["siteTimeZoneId"] : <any>null;
            this.siteTimeZoneDisplayName = _data["siteTimeZoneDisplayName"] !== undefined ? _data["siteTimeZoneDisplayName"] : <any>null;
            this.latitude = _data["latitude"] !== undefined ? _data["latitude"] : <any>null;
            this.longitude = _data["longitude"] !== undefined ? _data["longitude"] : <any>null;
            this.customerContactName = _data["customerContactName"] !== undefined ? _data["customerContactName"] : <any>null;
            this.customerContactPhone = _data["customerContactPhone"] !== undefined ? _data["customerContactPhone"] : <any>null;
            this.customerName = _data["customerName"] !== undefined ? _data["customerName"] : <any>null;
            this.siteNumber = _data["siteNumber"] !== undefined ? _data["siteNumber"] : <any>null;
            this.address1 = _data["address1"] !== undefined ? _data["address1"] : <any>null;
            this.address2 = _data["address2"] !== undefined ? _data["address2"] : <any>null;
            this.address3 = _data["address3"] !== undefined ? _data["address3"] : <any>null;
            this.city = _data["city"] !== undefined ? _data["city"] : <any>null;
            this.state = _data["state"] !== undefined ? _data["state"] : <any>null;
            this.country = _data["country"] !== undefined ? _data["country"] : <any>null;
            this.postalCode = _data["postalCode"] !== undefined ? _data["postalCode"] : <any>null;
            this.siteNotes = _data["siteNotes"] !== undefined ? _data["siteNotes"] : <any>null;
        }
    }

    static fromJS(data: any): AssetDetailsSiteInfo {
        data = typeof data === 'object' ? data : {};
        let result = new AssetDetailsSiteInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["siteId"] = this.siteId !== undefined ? this.siteId : <any>null;
        data["siteDescription"] = this.siteDescription !== undefined ? this.siteDescription : <any>null;
        data["siteTimeZoneId"] = this.siteTimeZoneId !== undefined ? this.siteTimeZoneId : <any>null;
        data["siteTimeZoneDisplayName"] = this.siteTimeZoneDisplayName !== undefined ? this.siteTimeZoneDisplayName : <any>null;
        data["latitude"] = this.latitude !== undefined ? this.latitude : <any>null;
        data["longitude"] = this.longitude !== undefined ? this.longitude : <any>null;
        data["customerContactName"] = this.customerContactName !== undefined ? this.customerContactName : <any>null;
        data["customerContactPhone"] = this.customerContactPhone !== undefined ? this.customerContactPhone : <any>null;
        data["customerName"] = this.customerName !== undefined ? this.customerName : <any>null;
        data["siteNumber"] = this.siteNumber !== undefined ? this.siteNumber : <any>null;
        data["address1"] = this.address1 !== undefined ? this.address1 : <any>null;
        data["address2"] = this.address2 !== undefined ? this.address2 : <any>null;
        data["address3"] = this.address3 !== undefined ? this.address3 : <any>null;
        data["city"] = this.city !== undefined ? this.city : <any>null;
        data["state"] = this.state !== undefined ? this.state : <any>null;
        data["country"] = this.country !== undefined ? this.country : <any>null;
        data["postalCode"] = this.postalCode !== undefined ? this.postalCode : <any>null;
        data["siteNotes"] = this.siteNotes !== undefined ? this.siteNotes : <any>null;
        return data;
    }
}

export class EvolveAssetCustomPropertyDetail {
    customPropertyTypeId?: string;
    propertyTypeId?: string;
    name?: string | null;
    value?: string | null;
    dataType?: CustomPropertyDataType;
    listValues?: string | null;

    init(_data?: any) {
        if (_data) {
            this.customPropertyTypeId = _data["customPropertyTypeId"] !== undefined ? _data["customPropertyTypeId"] : <any>null;
            this.propertyTypeId = _data["propertyTypeId"] !== undefined ? _data["propertyTypeId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.value = _data["value"] !== undefined ? _data["value"] : <any>null;
            this.dataType = _data["dataType"] !== undefined ? _data["dataType"] : <any>null;
            this.listValues = _data["listValues"] !== undefined ? _data["listValues"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveAssetCustomPropertyDetail {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveAssetCustomPropertyDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customPropertyTypeId"] = this.customPropertyTypeId !== undefined ? this.customPropertyTypeId : <any>null;
        data["propertyTypeId"] = this.propertyTypeId !== undefined ? this.propertyTypeId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        data["dataType"] = this.dataType !== undefined ? this.dataType : <any>null;
        data["listValues"] = this.listValues !== undefined ? this.listValues : <any>null;
        return data;
    }
}

export class EvolveSaveEditAssetDetailsInfoRequest {
    assetId?: string;
    assetDescription?: string | null;
    domainId?: string;
    siteId?: string;
    assetNotes?: string | null;
    referenceDocumentUrl?: string | null;
    siteNotes?: string | null;
    assetIntegrationId?: string | null;
    technician?: string | null;
    customProperties?: EvolveAssetCustomProperty[] | null;

    init(_data?: any) {
        if (_data) {
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.assetDescription = _data["assetDescription"] !== undefined ? _data["assetDescription"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.siteId = _data["siteId"] !== undefined ? _data["siteId"] : <any>null;
            this.assetNotes = _data["assetNotes"] !== undefined ? _data["assetNotes"] : <any>null;
            this.referenceDocumentUrl = _data["referenceDocumentUrl"] !== undefined ? _data["referenceDocumentUrl"] : <any>null;
            this.siteNotes = _data["siteNotes"] !== undefined ? _data["siteNotes"] : <any>null;
            this.assetIntegrationId = _data["assetIntegrationId"] !== undefined ? _data["assetIntegrationId"] : <any>null;
            this.technician = _data["technician"] !== undefined ? _data["technician"] : <any>null;
            if (Array.isArray(_data["customProperties"])) {
                this.customProperties = [] as any;
                for (let item of _data["customProperties"])
                    this.customProperties!.push(EvolveAssetCustomProperty.fromJS(item));
            }
            else {
                this.customProperties = <any>null;
            }
        }
    }

    static fromJS(data: any): EvolveSaveEditAssetDetailsInfoRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveEditAssetDetailsInfoRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["assetDescription"] = this.assetDescription !== undefined ? this.assetDescription : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["siteId"] = this.siteId !== undefined ? this.siteId : <any>null;
        data["assetNotes"] = this.assetNotes !== undefined ? this.assetNotes : <any>null;
        data["referenceDocumentUrl"] = this.referenceDocumentUrl !== undefined ? this.referenceDocumentUrl : <any>null;
        data["siteNotes"] = this.siteNotes !== undefined ? this.siteNotes : <any>null;
        data["assetIntegrationId"] = this.assetIntegrationId !== undefined ? this.assetIntegrationId : <any>null;
        data["technician"] = this.technician !== undefined ? this.technician : <any>null;
        if (Array.isArray(this.customProperties)) {
            data["customProperties"] = [];
            for (let item of this.customProperties)
                data["customProperties"].push(item.toJSON());
        }
        return data;
    }
}

export class EvolveAssetCustomProperty {
    propertyTypeId?: string;
    name?: string | null;
    value?: string | null;

    init(_data?: any) {
        if (_data) {
            this.propertyTypeId = _data["propertyTypeId"] !== undefined ? _data["propertyTypeId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.value = _data["value"] !== undefined ? _data["value"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveAssetCustomProperty {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveAssetCustomProperty();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["propertyTypeId"] = this.propertyTypeId !== undefined ? this.propertyTypeId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        return data;
    }
}

export class EvolveSaveUserAssetDetailsSettingResponse {

    init(_data?: any) {
    }

    static fromJS(data: any): EvolveSaveUserAssetDetailsSettingResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveUserAssetDetailsSettingResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export class EvovleSaveUserAssetDetailsSettingRequest {
    assetId?: string;
    domainId?: string;
    graphZoomLevelInHours?: number | null;
    graphStartDate?: Date | null;
    graphEndDate?: Date | null;
    graphedDataChannel?: string[] | null;

    init(_data?: any) {
        if (_data) {
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.graphZoomLevelInHours = _data["graphZoomLevelInHours"] !== undefined ? _data["graphZoomLevelInHours"] : <any>null;
            this.graphStartDate = _data["graphStartDate"] ? new Date(_data["graphStartDate"].toString()) : <any>null;
            this.graphEndDate = _data["graphEndDate"] ? new Date(_data["graphEndDate"].toString()) : <any>null;
            if (Array.isArray(_data["graphedDataChannel"])) {
                this.graphedDataChannel = [] as any;
                for (let item of _data["graphedDataChannel"])
                    this.graphedDataChannel!.push(item);
            }
            else {
                this.graphedDataChannel = <any>null;
            }
        }
    }

    static fromJS(data: any): EvovleSaveUserAssetDetailsSettingRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvovleSaveUserAssetDetailsSettingRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["graphZoomLevelInHours"] = this.graphZoomLevelInHours !== undefined ? this.graphZoomLevelInHours : <any>null;
        data["graphStartDate"] = this.graphStartDate ? this.graphStartDate.toISOString() : <any>null;
        data["graphEndDate"] = this.graphEndDate ? this.graphEndDate.toISOString() : <any>null;
        if (Array.isArray(this.graphedDataChannel)) {
            data["graphedDataChannel"] = [];
            for (let item of this.graphedDataChannel)
                data["graphedDataChannel"].push(item);
        }
        return data;
    }
}

export class DropDownListDtoOfLong {
    id?: number;
    value?: string | null;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.value = _data["value"] !== undefined ? _data["value"] : <any>null;
        }
    }

    static fromJS(data: any): DropDownListDtoOfLong {
        data = typeof data === 'object' ? data : {};
        let result = new DropDownListDtoOfLong();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        return data;
    }
}

export class MessageTemplate_SummaryDto {
    messageTemplateId?: number;
    description?: string | null;
    rosterCount?: string | null;
    messageTemplateTypeId?: MessageTemplateCategory;

    init(_data?: any) {
        if (_data) {
            this.messageTemplateId = _data["messageTemplateId"] !== undefined ? _data["messageTemplateId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.rosterCount = _data["rosterCount"] !== undefined ? _data["rosterCount"] : <any>null;
            this.messageTemplateTypeId = _data["messageTemplateTypeId"] !== undefined ? _data["messageTemplateTypeId"] : <any>null;
        }
    }

    static fromJS(data: any): MessageTemplate_SummaryDto {
        data = typeof data === 'object' ? data : {};
        let result = new MessageTemplate_SummaryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["messageTemplateId"] = this.messageTemplateId !== undefined ? this.messageTemplateId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["rosterCount"] = this.rosterCount !== undefined ? this.rosterCount : <any>null;
        data["messageTemplateTypeId"] = this.messageTemplateTypeId !== undefined ? this.messageTemplateTypeId : <any>null;
        return data;
    }
}

export class DropDownListDtoOfString {
    id?: string | null;
    value?: string | null;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.value = _data["value"] !== undefined ? _data["value"] : <any>null;
        }
    }

    static fromJS(data: any): DropDownListDtoOfString {
        data = typeof data === 'object' ? data : {};
        let result = new DropDownListDtoOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        return data;
    }
}

export class GetInstallationHistoryListResponseDto {
    paging?: Paging | null;
    items?: GetDeviceInstallationHistoryListItemDto[] | null;

    init(_data?: any) {
        if (_data) {
            this.paging = _data["paging"] ? Paging.fromJS(_data["paging"]) : <any>null;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetDeviceInstallationHistoryListItemDto.fromJS(item));
            }
            else {
                this.items = <any>null;
            }
        }
    }

    static fromJS(data: any): GetInstallationHistoryListResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetInstallationHistoryListResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["paging"] = this.paging ? this.paging.toJSON() : <any>null;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export class GetDeviceInstallationHistoryListItemDto {
    deviceId?: string;
    domainId?: string;
    assetId?: string;
    assetTitle?: string | null;
    customerName?: string | null;
    technicianName?: string | null;
    technicianId?: string;
    city?: string | null;
    productId?: string;
    productName?: string | null;
    startDate?: Date;
    completionDate?: Date | null;
    installState?: string | null;
    errorCount?: number;
    pageNumber?: number;
    pageSize?: number;
    totalCount?: number;

    init(_data?: any) {
        if (_data) {
            this.deviceId = _data["deviceId"] !== undefined ? _data["deviceId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.assetTitle = _data["assetTitle"] !== undefined ? _data["assetTitle"] : <any>null;
            this.customerName = _data["customerName"] !== undefined ? _data["customerName"] : <any>null;
            this.technicianName = _data["technicianName"] !== undefined ? _data["technicianName"] : <any>null;
            this.technicianId = _data["technicianId"] !== undefined ? _data["technicianId"] : <any>null;
            this.city = _data["city"] !== undefined ? _data["city"] : <any>null;
            this.productId = _data["productId"] !== undefined ? _data["productId"] : <any>null;
            this.productName = _data["productName"] !== undefined ? _data["productName"] : <any>null;
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>null;
            this.completionDate = _data["completionDate"] ? new Date(_data["completionDate"].toString()) : <any>null;
            this.installState = _data["installState"] !== undefined ? _data["installState"] : <any>null;
            this.errorCount = _data["errorCount"] !== undefined ? _data["errorCount"] : <any>null;
            this.pageNumber = _data["pageNumber"] !== undefined ? _data["pageNumber"] : <any>null;
            this.pageSize = _data["pageSize"] !== undefined ? _data["pageSize"] : <any>null;
            this.totalCount = _data["totalCount"] !== undefined ? _data["totalCount"] : <any>null;
        }
    }

    static fromJS(data: any): GetDeviceInstallationHistoryListItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetDeviceInstallationHistoryListItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deviceId"] = this.deviceId !== undefined ? this.deviceId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["assetTitle"] = this.assetTitle !== undefined ? this.assetTitle : <any>null;
        data["customerName"] = this.customerName !== undefined ? this.customerName : <any>null;
        data["technicianName"] = this.technicianName !== undefined ? this.technicianName : <any>null;
        data["technicianId"] = this.technicianId !== undefined ? this.technicianId : <any>null;
        data["city"] = this.city !== undefined ? this.city : <any>null;
        data["productId"] = this.productId !== undefined ? this.productId : <any>null;
        data["productName"] = this.productName !== undefined ? this.productName : <any>null;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>null;
        data["completionDate"] = this.completionDate ? this.completionDate.toISOString() : <any>null;
        data["installState"] = this.installState !== undefined ? this.installState : <any>null;
        data["errorCount"] = this.errorCount !== undefined ? this.errorCount : <any>null;
        data["pageNumber"] = this.pageNumber !== undefined ? this.pageNumber : <any>null;
        data["pageSize"] = this.pageSize !== undefined ? this.pageSize : <any>null;
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : <any>null;
        return data;
    }
}

export class ActiveEventGetResp {
    eventId?: number;
    hasNotes?: boolean;
    createdOn?: Date;
    eventDescription?: string | null;
    eventImportanceLevel?: EventImportanceLevelType;
    assetId?: string;
    assetTitle?: string | null;
    dataChannelDescription?: string | null;
    message?: string | null;
    readingTimestamp?: Date;
    readingValue?: number;
    readingUnit?: string | null;
    acknowledgedOn?: Date | null;
    acknowledgeUserName?: string | null;
    rosters?: string[] | null;
    tags?: string[] | null;
    eventType?: EventRuleType;

    init(_data?: any) {
        if (_data) {
            this.eventId = _data["eventId"] !== undefined ? _data["eventId"] : <any>null;
            this.hasNotes = _data["hasNotes"] !== undefined ? _data["hasNotes"] : <any>null;
            this.createdOn = _data["createdOn"] ? new Date(_data["createdOn"].toString()) : <any>null;
            this.eventDescription = _data["eventDescription"] !== undefined ? _data["eventDescription"] : <any>null;
            this.eventImportanceLevel = _data["eventImportanceLevel"] !== undefined ? _data["eventImportanceLevel"] : <any>null;
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.assetTitle = _data["assetTitle"] !== undefined ? _data["assetTitle"] : <any>null;
            this.dataChannelDescription = _data["dataChannelDescription"] !== undefined ? _data["dataChannelDescription"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.readingTimestamp = _data["readingTimestamp"] ? new Date(_data["readingTimestamp"].toString()) : <any>null;
            this.readingValue = _data["readingValue"] !== undefined ? _data["readingValue"] : <any>null;
            this.readingUnit = _data["readingUnit"] !== undefined ? _data["readingUnit"] : <any>null;
            this.acknowledgedOn = _data["acknowledgedOn"] ? new Date(_data["acknowledgedOn"].toString()) : <any>null;
            this.acknowledgeUserName = _data["acknowledgeUserName"] !== undefined ? _data["acknowledgeUserName"] : <any>null;
            if (Array.isArray(_data["rosters"])) {
                this.rosters = [] as any;
                for (let item of _data["rosters"])
                    this.rosters!.push(item);
            }
            else {
                this.rosters = <any>null;
            }
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags!.push(item);
            }
            else {
                this.tags = <any>null;
            }
            this.eventType = _data["eventType"] !== undefined ? _data["eventType"] : <any>null;
        }
    }

    static fromJS(data: any): ActiveEventGetResp {
        data = typeof data === 'object' ? data : {};
        let result = new ActiveEventGetResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["eventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["hasNotes"] = this.hasNotes !== undefined ? this.hasNotes : <any>null;
        data["createdOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["eventDescription"] = this.eventDescription !== undefined ? this.eventDescription : <any>null;
        data["eventImportanceLevel"] = this.eventImportanceLevel !== undefined ? this.eventImportanceLevel : <any>null;
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["assetTitle"] = this.assetTitle !== undefined ? this.assetTitle : <any>null;
        data["dataChannelDescription"] = this.dataChannelDescription !== undefined ? this.dataChannelDescription : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["readingTimestamp"] = this.readingTimestamp ? this.readingTimestamp.toISOString() : <any>null;
        data["readingValue"] = this.readingValue !== undefined ? this.readingValue : <any>null;
        data["readingUnit"] = this.readingUnit !== undefined ? this.readingUnit : <any>null;
        data["acknowledgedOn"] = this.acknowledgedOn ? this.acknowledgedOn.toISOString() : <any>null;
        data["acknowledgeUserName"] = this.acknowledgeUserName !== undefined ? this.acknowledgeUserName : <any>null;
        if (Array.isArray(this.rosters)) {
            data["rosters"] = [];
            for (let item of this.rosters)
                data["rosters"].push(item);
        }
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item);
        }
        data["eventType"] = this.eventType !== undefined ? this.eventType : <any>null;
        return data;
    }
}

export class ActiveEventGetReq {
    dataChannelIds?: string[] | null;
    eventTypeIds?: EventRuleCategory[] | null;
    assetSearchString?: string | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["dataChannelIds"])) {
                this.dataChannelIds = [] as any;
                for (let item of _data["dataChannelIds"])
                    this.dataChannelIds!.push(item);
            }
            else {
                this.dataChannelIds = <any>null;
            }
            if (Array.isArray(_data["eventTypeIds"])) {
                this.eventTypeIds = [] as any;
                for (let item of _data["eventTypeIds"])
                    this.eventTypeIds!.push(item);
            }
            else {
                this.eventTypeIds = <any>null;
            }
            this.assetSearchString = _data["assetSearchString"] !== undefined ? _data["assetSearchString"] : <any>null;
        }
    }

    static fromJS(data: any): ActiveEventGetReq {
        data = typeof data === 'object' ? data : {};
        let result = new ActiveEventGetReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dataChannelIds)) {
            data["dataChannelIds"] = [];
            for (let item of this.dataChannelIds)
                data["dataChannelIds"].push(item);
        }
        if (Array.isArray(this.eventTypeIds)) {
            data["eventTypeIds"] = [];
            for (let item of this.eventTypeIds)
                data["eventTypeIds"].push(item);
        }
        data["assetSearchString"] = this.assetSearchString !== undefined ? this.assetSearchString : <any>null;
        return data;
    }
}

export enum EventRuleCategory {
    Level = 1,
    MissingData = 2,
    ScheduledDeliveryTooEarly = 3,
    ScheduledDeliveryTooLate = 4,
    ScheduledDeliveryMissed = 5,
    RTUChannelEvent = 6,
    UsageRate = 7,
    GeoFencing = 8,
}

export class DomainEventsDto {
    eventId?: number;
    hasNotes?: boolean;
    createdOn?: Date;
    eventDescription?: string | null;
    eventImportanceLevel?: EventRuleImportanceLevel;
    assetId?: string;
    assetTitle?: string | null;
    dataChannelDescription?: string | null;
    message?: string | null;
    readingTimestamp?: Date;
    readingValue?: number;
    readingUnit?: string | null;
    acknowledgedOn?: Date | null;
    acknowledgeUserName?: string | null;
    rosters?: string[] | null;
    tags?: string[] | null;
    eventType?: EventRuleCategory;

    init(_data?: any) {
        if (_data) {
            this.eventId = _data["eventId"] !== undefined ? _data["eventId"] : <any>null;
            this.hasNotes = _data["hasNotes"] !== undefined ? _data["hasNotes"] : <any>null;
            this.createdOn = _data["createdOn"] ? new Date(_data["createdOn"].toString()) : <any>null;
            this.eventDescription = _data["eventDescription"] !== undefined ? _data["eventDescription"] : <any>null;
            this.eventImportanceLevel = _data["eventImportanceLevel"] !== undefined ? _data["eventImportanceLevel"] : <any>null;
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.assetTitle = _data["assetTitle"] !== undefined ? _data["assetTitle"] : <any>null;
            this.dataChannelDescription = _data["dataChannelDescription"] !== undefined ? _data["dataChannelDescription"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.readingTimestamp = _data["readingTimestamp"] ? new Date(_data["readingTimestamp"].toString()) : <any>null;
            this.readingValue = _data["readingValue"] !== undefined ? _data["readingValue"] : <any>null;
            this.readingUnit = _data["readingUnit"] !== undefined ? _data["readingUnit"] : <any>null;
            this.acknowledgedOn = _data["acknowledgedOn"] ? new Date(_data["acknowledgedOn"].toString()) : <any>null;
            this.acknowledgeUserName = _data["acknowledgeUserName"] !== undefined ? _data["acknowledgeUserName"] : <any>null;
            if (Array.isArray(_data["rosters"])) {
                this.rosters = [] as any;
                for (let item of _data["rosters"])
                    this.rosters!.push(item);
            }
            else {
                this.rosters = <any>null;
            }
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags!.push(item);
            }
            else {
                this.tags = <any>null;
            }
            this.eventType = _data["eventType"] !== undefined ? _data["eventType"] : <any>null;
        }
    }

    static fromJS(data: any): DomainEventsDto {
        data = typeof data === 'object' ? data : {};
        let result = new DomainEventsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["eventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["hasNotes"] = this.hasNotes !== undefined ? this.hasNotes : <any>null;
        data["createdOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["eventDescription"] = this.eventDescription !== undefined ? this.eventDescription : <any>null;
        data["eventImportanceLevel"] = this.eventImportanceLevel !== undefined ? this.eventImportanceLevel : <any>null;
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["assetTitle"] = this.assetTitle !== undefined ? this.assetTitle : <any>null;
        data["dataChannelDescription"] = this.dataChannelDescription !== undefined ? this.dataChannelDescription : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["readingTimestamp"] = this.readingTimestamp ? this.readingTimestamp.toISOString() : <any>null;
        data["readingValue"] = this.readingValue !== undefined ? this.readingValue : <any>null;
        data["readingUnit"] = this.readingUnit !== undefined ? this.readingUnit : <any>null;
        data["acknowledgedOn"] = this.acknowledgedOn ? this.acknowledgedOn.toISOString() : <any>null;
        data["acknowledgeUserName"] = this.acknowledgeUserName !== undefined ? this.acknowledgeUserName : <any>null;
        if (Array.isArray(this.rosters)) {
            data["rosters"] = [];
            for (let item of this.rosters)
                data["rosters"].push(item);
        }
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item);
        }
        data["eventType"] = this.eventType !== undefined ? this.eventType : <any>null;
        return data;
    }
}

export class InactiveEventGetResp {
    eventId?: number;
    hasNotes?: boolean;
    createdOn?: Date;
    deactivatedOn?: Date;
    eventDescription?: string | null;
    eventImportanceLevel?: EventImportanceLevelType;
    assetId?: string;
    assetTitle?: string | null;
    dataChannelDescription?: string | null;
    message?: string | null;
    readingTimestamp?: Date;
    readingValue?: number;
    readingUnit?: string | null;
    acknowledgedOn?: Date | null;
    acknowledgeUserName?: string | null;
    rosters?: string[] | null;
    tags?: string[] | null;
    eventType?: EventRuleType;

    init(_data?: any) {
        if (_data) {
            this.eventId = _data["eventId"] !== undefined ? _data["eventId"] : <any>null;
            this.hasNotes = _data["hasNotes"] !== undefined ? _data["hasNotes"] : <any>null;
            this.createdOn = _data["createdOn"] ? new Date(_data["createdOn"].toString()) : <any>null;
            this.deactivatedOn = _data["deactivatedOn"] ? new Date(_data["deactivatedOn"].toString()) : <any>null;
            this.eventDescription = _data["eventDescription"] !== undefined ? _data["eventDescription"] : <any>null;
            this.eventImportanceLevel = _data["eventImportanceLevel"] !== undefined ? _data["eventImportanceLevel"] : <any>null;
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.assetTitle = _data["assetTitle"] !== undefined ? _data["assetTitle"] : <any>null;
            this.dataChannelDescription = _data["dataChannelDescription"] !== undefined ? _data["dataChannelDescription"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.readingTimestamp = _data["readingTimestamp"] ? new Date(_data["readingTimestamp"].toString()) : <any>null;
            this.readingValue = _data["readingValue"] !== undefined ? _data["readingValue"] : <any>null;
            this.readingUnit = _data["readingUnit"] !== undefined ? _data["readingUnit"] : <any>null;
            this.acknowledgedOn = _data["acknowledgedOn"] ? new Date(_data["acknowledgedOn"].toString()) : <any>null;
            this.acknowledgeUserName = _data["acknowledgeUserName"] !== undefined ? _data["acknowledgeUserName"] : <any>null;
            if (Array.isArray(_data["rosters"])) {
                this.rosters = [] as any;
                for (let item of _data["rosters"])
                    this.rosters!.push(item);
            }
            else {
                this.rosters = <any>null;
            }
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags!.push(item);
            }
            else {
                this.tags = <any>null;
            }
            this.eventType = _data["eventType"] !== undefined ? _data["eventType"] : <any>null;
        }
    }

    static fromJS(data: any): InactiveEventGetResp {
        data = typeof data === 'object' ? data : {};
        let result = new InactiveEventGetResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["eventId"] = this.eventId !== undefined ? this.eventId : <any>null;
        data["hasNotes"] = this.hasNotes !== undefined ? this.hasNotes : <any>null;
        data["createdOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["deactivatedOn"] = this.deactivatedOn ? this.deactivatedOn.toISOString() : <any>null;
        data["eventDescription"] = this.eventDescription !== undefined ? this.eventDescription : <any>null;
        data["eventImportanceLevel"] = this.eventImportanceLevel !== undefined ? this.eventImportanceLevel : <any>null;
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["assetTitle"] = this.assetTitle !== undefined ? this.assetTitle : <any>null;
        data["dataChannelDescription"] = this.dataChannelDescription !== undefined ? this.dataChannelDescription : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["readingTimestamp"] = this.readingTimestamp ? this.readingTimestamp.toISOString() : <any>null;
        data["readingValue"] = this.readingValue !== undefined ? this.readingValue : <any>null;
        data["readingUnit"] = this.readingUnit !== undefined ? this.readingUnit : <any>null;
        data["acknowledgedOn"] = this.acknowledgedOn ? this.acknowledgedOn.toISOString() : <any>null;
        data["acknowledgeUserName"] = this.acknowledgeUserName !== undefined ? this.acknowledgeUserName : <any>null;
        if (Array.isArray(this.rosters)) {
            data["rosters"] = [];
            for (let item of this.rosters)
                data["rosters"].push(item);
        }
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item);
        }
        data["eventType"] = this.eventType !== undefined ? this.eventType : <any>null;
        return data;
    }
}

export class InactiveEventGetReq {
    dataChannelIds?: string[] | null;
    eventTypeIds?: EventRuleType[] | null;
    startDate?: Date;
    endDate?: Date;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["dataChannelIds"])) {
                this.dataChannelIds = [] as any;
                for (let item of _data["dataChannelIds"])
                    this.dataChannelIds!.push(item);
            }
            else {
                this.dataChannelIds = <any>null;
            }
            if (Array.isArray(_data["eventTypeIds"])) {
                this.eventTypeIds = [] as any;
                for (let item of _data["eventTypeIds"])
                    this.eventTypeIds!.push(item);
            }
            else {
                this.eventTypeIds = <any>null;
            }
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>null;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): InactiveEventGetReq {
        data = typeof data === 'object' ? data : {};
        let result = new InactiveEventGetReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dataChannelIds)) {
            data["dataChannelIds"] = [];
            for (let item of this.dataChannelIds)
                data["dataChannelIds"].push(item);
        }
        if (Array.isArray(this.eventTypeIds)) {
            data["eventTypeIds"] = [];
            for (let item of this.eventTypeIds)
                data["eventTypeIds"].push(item);
        }
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>null;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>null;
        return data;
    }
}

export class UserEventSettingUpdateReq {
    userId?: string;
    domainId?: string;
    eventTypeIds?: EventRuleType[] | null;
    tagIds?: number[] | null;
    isPlaySoundOnNewEvent?: boolean;

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            if (Array.isArray(_data["eventTypeIds"])) {
                this.eventTypeIds = [] as any;
                for (let item of _data["eventTypeIds"])
                    this.eventTypeIds!.push(item);
            }
            else {
                this.eventTypeIds = <any>null;
            }
            if (Array.isArray(_data["tagIds"])) {
                this.tagIds = [] as any;
                for (let item of _data["tagIds"])
                    this.tagIds!.push(item);
            }
            else {
                this.tagIds = <any>null;
            }
            this.isPlaySoundOnNewEvent = _data["isPlaySoundOnNewEvent"] !== undefined ? _data["isPlaySoundOnNewEvent"] : <any>null;
        }
    }

    static fromJS(data: any): UserEventSettingUpdateReq {
        data = typeof data === 'object' ? data : {};
        let result = new UserEventSettingUpdateReq();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        if (Array.isArray(this.eventTypeIds)) {
            data["eventTypeIds"] = [];
            for (let item of this.eventTypeIds)
                data["eventTypeIds"].push(item);
        }
        if (Array.isArray(this.tagIds)) {
            data["tagIds"] = [];
            for (let item of this.tagIds)
                data["tagIds"].push(item);
        }
        data["isPlaySoundOnNewEvent"] = this.isPlaySoundOnNewEvent !== undefined ? this.isPlaySoundOnNewEvent : <any>null;
        return data;
    }
}

export class UserEventSettingGetResp {
    eventTypeIds?: EventRuleType[] | null;
    tagIds?: number[] | null;
    isPlaySoundOnNewEvent?: boolean;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["eventTypeIds"])) {
                this.eventTypeIds = [] as any;
                for (let item of _data["eventTypeIds"])
                    this.eventTypeIds!.push(item);
            }
            else {
                this.eventTypeIds = <any>null;
            }
            if (Array.isArray(_data["tagIds"])) {
                this.tagIds = [] as any;
                for (let item of _data["tagIds"])
                    this.tagIds!.push(item);
            }
            else {
                this.tagIds = <any>null;
            }
            this.isPlaySoundOnNewEvent = _data["isPlaySoundOnNewEvent"] !== undefined ? _data["isPlaySoundOnNewEvent"] : <any>null;
        }
    }

    static fromJS(data: any): UserEventSettingGetResp {
        data = typeof data === 'object' ? data : {};
        let result = new UserEventSettingGetResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.eventTypeIds)) {
            data["eventTypeIds"] = [];
            for (let item of this.eventTypeIds)
                data["eventTypeIds"].push(item);
        }
        if (Array.isArray(this.tagIds)) {
            data["tagIds"] = [];
            for (let item of this.tagIds)
                data["tagIds"].push(item);
        }
        data["isPlaySoundOnNewEvent"] = this.isPlaySoundOnNewEvent !== undefined ? this.isPlaySoundOnNewEvent : <any>null;
        return data;
    }
}

export class EventRuleGroupListItemDto {
    eventRuleGroupId?: number;
    eventRuleGroupAsText?: string | null;

    init(_data?: any) {
        if (_data) {
            this.eventRuleGroupId = _data["eventRuleGroupId"] !== undefined ? _data["eventRuleGroupId"] : <any>null;
            this.eventRuleGroupAsText = _data["eventRuleGroupAsText"] !== undefined ? _data["eventRuleGroupAsText"] : <any>null;
        }
    }

    static fromJS(data: any): EventRuleGroupListItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new EventRuleGroupListItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["eventRuleGroupId"] = this.eventRuleGroupId !== undefined ? this.eventRuleGroupId : <any>null;
        data["eventRuleGroupAsText"] = this.eventRuleGroupAsText !== undefined ? this.eventRuleGroupAsText : <any>null;
        return data;
    }
}

export class DataChannelEventRulesDTO {
    dataChannelId?: string;
    dataChannelTypeId?: DataChannelCategory;
    dataChannelDescription?: string | null;
    productDescription?: string | null;
    hasIntegrationEnabled?: boolean;
    inventoryEvents?: DataChannelEventRuleInventoryDTO[] | null;
    levelEvents?: DataChannelEventRuleLevelDTO[] | null;
    deliveryScheduleEvents?: DataChannelEventRuleDeliveryScheduleDTO[] | null;
    missingDataEvent?: DataChannelEventRuleMissingDataDTO | null;
    usageRateEvent?: DataChannelEventRuleByUsageRateDTO | null;
    displayPriority?: number | null;
    eventRuleGroupId?: number | null;
    eventRuleGroupAsText?: string | null;
    setpointSelectionLists?: DataChannelEventRuleSetpointSelectListsDTO | null;
    domainTags?: string[] | null;

    init(_data?: any) {
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.dataChannelTypeId = _data["dataChannelTypeId"] !== undefined ? _data["dataChannelTypeId"] : <any>null;
            this.dataChannelDescription = _data["dataChannelDescription"] !== undefined ? _data["dataChannelDescription"] : <any>null;
            this.productDescription = _data["productDescription"] !== undefined ? _data["productDescription"] : <any>null;
            this.hasIntegrationEnabled = _data["hasIntegrationEnabled"] !== undefined ? _data["hasIntegrationEnabled"] : <any>null;
            if (Array.isArray(_data["inventoryEvents"])) {
                this.inventoryEvents = [] as any;
                for (let item of _data["inventoryEvents"])
                    this.inventoryEvents!.push(DataChannelEventRuleInventoryDTO.fromJS(item));
            }
            else {
                this.inventoryEvents = <any>null;
            }
            if (Array.isArray(_data["levelEvents"])) {
                this.levelEvents = [] as any;
                for (let item of _data["levelEvents"])
                    this.levelEvents!.push(DataChannelEventRuleLevelDTO.fromJS(item));
            }
            else {
                this.levelEvents = <any>null;
            }
            if (Array.isArray(_data["deliveryScheduleEvents"])) {
                this.deliveryScheduleEvents = [] as any;
                for (let item of _data["deliveryScheduleEvents"])
                    this.deliveryScheduleEvents!.push(DataChannelEventRuleDeliveryScheduleDTO.fromJS(item));
            }
            else {
                this.deliveryScheduleEvents = <any>null;
            }
            this.missingDataEvent = _data["missingDataEvent"] ? DataChannelEventRuleMissingDataDTO.fromJS(_data["missingDataEvent"]) : <any>null;
            this.usageRateEvent = _data["usageRateEvent"] ? DataChannelEventRuleByUsageRateDTO.fromJS(_data["usageRateEvent"]) : <any>null;
            this.displayPriority = _data["displayPriority"] !== undefined ? _data["displayPriority"] : <any>null;
            this.eventRuleGroupId = _data["eventRuleGroupId"] !== undefined ? _data["eventRuleGroupId"] : <any>null;
            this.eventRuleGroupAsText = _data["eventRuleGroupAsText"] !== undefined ? _data["eventRuleGroupAsText"] : <any>null;
            this.setpointSelectionLists = _data["setpointSelectionLists"] ? DataChannelEventRuleSetpointSelectListsDTO.fromJS(_data["setpointSelectionLists"]) : <any>null;
            if (Array.isArray(_data["domainTags"])) {
                this.domainTags = [] as any;
                for (let item of _data["domainTags"])
                    this.domainTags!.push(item);
            }
            else {
                this.domainTags = <any>null;
            }
        }
    }

    static fromJS(data: any): DataChannelEventRulesDTO {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelEventRulesDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["dataChannelTypeId"] = this.dataChannelTypeId !== undefined ? this.dataChannelTypeId : <any>null;
        data["dataChannelDescription"] = this.dataChannelDescription !== undefined ? this.dataChannelDescription : <any>null;
        data["productDescription"] = this.productDescription !== undefined ? this.productDescription : <any>null;
        data["hasIntegrationEnabled"] = this.hasIntegrationEnabled !== undefined ? this.hasIntegrationEnabled : <any>null;
        if (Array.isArray(this.inventoryEvents)) {
            data["inventoryEvents"] = [];
            for (let item of this.inventoryEvents)
                data["inventoryEvents"].push(item.toJSON());
        }
        if (Array.isArray(this.levelEvents)) {
            data["levelEvents"] = [];
            for (let item of this.levelEvents)
                data["levelEvents"].push(item.toJSON());
        }
        if (Array.isArray(this.deliveryScheduleEvents)) {
            data["deliveryScheduleEvents"] = [];
            for (let item of this.deliveryScheduleEvents)
                data["deliveryScheduleEvents"].push(item.toJSON());
        }
        data["missingDataEvent"] = this.missingDataEvent ? this.missingDataEvent.toJSON() : <any>null;
        data["usageRateEvent"] = this.usageRateEvent ? this.usageRateEvent.toJSON() : <any>null;
        data["displayPriority"] = this.displayPriority !== undefined ? this.displayPriority : <any>null;
        data["eventRuleGroupId"] = this.eventRuleGroupId !== undefined ? this.eventRuleGroupId : <any>null;
        data["eventRuleGroupAsText"] = this.eventRuleGroupAsText !== undefined ? this.eventRuleGroupAsText : <any>null;
        data["setpointSelectionLists"] = this.setpointSelectionLists ? this.setpointSelectionLists.toJSON() : <any>null;
        if (Array.isArray(this.domainTags)) {
            data["domainTags"] = [];
            for (let item of this.domainTags)
                data["domainTags"].push(item);
        }
        return data;
    }
}

export class DataChannelEventRuleBaseDTO {
    dataChannelEventRuleId?: number;
    eventRuleId?: number;
    description?: string | null;
    eventValue?: number | null;
    eventImportanceLevelId?: EventRuleImportanceLevel | null;
    isEnabled?: boolean;
    isLinkedToEventRule?: boolean;
    integrationName?: string | null;
    rosters?: string | null;
    isAcknowledgementRequired?: boolean;
    eventTemplate?: string | null;
    tags?: string | null;

    init(_data?: any) {
        if (_data) {
            this.dataChannelEventRuleId = _data["dataChannelEventRuleId"] !== undefined ? _data["dataChannelEventRuleId"] : <any>null;
            this.eventRuleId = _data["eventRuleId"] !== undefined ? _data["eventRuleId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.eventValue = _data["eventValue"] !== undefined ? _data["eventValue"] : <any>null;
            this.eventImportanceLevelId = _data["eventImportanceLevelId"] !== undefined ? _data["eventImportanceLevelId"] : <any>null;
            this.isEnabled = _data["isEnabled"] !== undefined ? _data["isEnabled"] : <any>null;
            this.isLinkedToEventRule = _data["isLinkedToEventRule"] !== undefined ? _data["isLinkedToEventRule"] : <any>null;
            this.integrationName = _data["integrationName"] !== undefined ? _data["integrationName"] : <any>null;
            this.rosters = _data["rosters"] !== undefined ? _data["rosters"] : <any>null;
            this.isAcknowledgementRequired = _data["isAcknowledgementRequired"] !== undefined ? _data["isAcknowledgementRequired"] : <any>null;
            this.eventTemplate = _data["eventTemplate"] !== undefined ? _data["eventTemplate"] : <any>null;
            this.tags = _data["tags"] !== undefined ? _data["tags"] : <any>null;
        }
    }

    static fromJS(data: any): DataChannelEventRuleBaseDTO {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelEventRuleBaseDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelEventRuleId"] = this.dataChannelEventRuleId !== undefined ? this.dataChannelEventRuleId : <any>null;
        data["eventRuleId"] = this.eventRuleId !== undefined ? this.eventRuleId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["eventValue"] = this.eventValue !== undefined ? this.eventValue : <any>null;
        data["eventImportanceLevelId"] = this.eventImportanceLevelId !== undefined ? this.eventImportanceLevelId : <any>null;
        data["isEnabled"] = this.isEnabled !== undefined ? this.isEnabled : <any>null;
        data["isLinkedToEventRule"] = this.isLinkedToEventRule !== undefined ? this.isLinkedToEventRule : <any>null;
        data["integrationName"] = this.integrationName !== undefined ? this.integrationName : <any>null;
        data["rosters"] = this.rosters !== undefined ? this.rosters : <any>null;
        data["isAcknowledgementRequired"] = this.isAcknowledgementRequired !== undefined ? this.isAcknowledgementRequired : <any>null;
        data["eventTemplate"] = this.eventTemplate !== undefined ? this.eventTemplate : <any>null;
        data["tags"] = this.tags !== undefined ? this.tags : <any>null;
        return data;
    }
}

export class DataChannelEventRuleLevelDTO extends DataChannelEventRuleBaseDTO {
    rtuSetPointSyncStatusId?: RtuSetPointSyncStatusEnum;
    rtuChannelSetpointIndex?: number | null;
    eventComparatorTypeId?: EventRuleComparator;
    currentUOMTypeId?: UnitTypeEnum;
    scaledUOM?: string | null;
    decimalPlaces?: number;
    isSetpointUpdateSupported?: boolean;
    isAlwaysTriggered?: boolean;
    isDisplayedOnGraph?: boolean;
    isDisplayedInSummary?: boolean;
    hysteresis?: number;
    delay?: number | null;
    isAutoCreateProblemReport?: boolean;
    isAutoCloseProblemReport?: boolean;
    problemReportImportanceLevelId?: EventRuleImportanceLevel | null;
    descriptionAbbreviation?: string | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.rtuSetPointSyncStatusId = _data["rtuSetPointSyncStatusId"] !== undefined ? _data["rtuSetPointSyncStatusId"] : <any>null;
            this.rtuChannelSetpointIndex = _data["rtuChannelSetpointIndex"] !== undefined ? _data["rtuChannelSetpointIndex"] : <any>null;
            this.eventComparatorTypeId = _data["eventComparatorTypeId"] !== undefined ? _data["eventComparatorTypeId"] : <any>null;
            this.currentUOMTypeId = _data["currentUOMTypeId"] !== undefined ? _data["currentUOMTypeId"] : <any>null;
            this.scaledUOM = _data["scaledUOM"] !== undefined ? _data["scaledUOM"] : <any>null;
            this.decimalPlaces = _data["decimalPlaces"] !== undefined ? _data["decimalPlaces"] : <any>null;
            this.isSetpointUpdateSupported = _data["isSetpointUpdateSupported"] !== undefined ? _data["isSetpointUpdateSupported"] : <any>null;
            this.isAlwaysTriggered = _data["isAlwaysTriggered"] !== undefined ? _data["isAlwaysTriggered"] : <any>null;
            this.isDisplayedOnGraph = _data["isDisplayedOnGraph"] !== undefined ? _data["isDisplayedOnGraph"] : <any>null;
            this.isDisplayedInSummary = _data["isDisplayedInSummary"] !== undefined ? _data["isDisplayedInSummary"] : <any>null;
            this.hysteresis = _data["hysteresis"] !== undefined ? _data["hysteresis"] : <any>null;
            this.delay = _data["delay"] !== undefined ? _data["delay"] : <any>null;
            this.isAutoCreateProblemReport = _data["isAutoCreateProblemReport"] !== undefined ? _data["isAutoCreateProblemReport"] : <any>null;
            this.isAutoCloseProblemReport = _data["isAutoCloseProblemReport"] !== undefined ? _data["isAutoCloseProblemReport"] : <any>null;
            this.problemReportImportanceLevelId = _data["problemReportImportanceLevelId"] !== undefined ? _data["problemReportImportanceLevelId"] : <any>null;
            this.descriptionAbbreviation = _data["descriptionAbbreviation"] !== undefined ? _data["descriptionAbbreviation"] : <any>null;
        }
    }

    static fromJS(data: any): DataChannelEventRuleLevelDTO {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelEventRuleLevelDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rtuSetPointSyncStatusId"] = this.rtuSetPointSyncStatusId !== undefined ? this.rtuSetPointSyncStatusId : <any>null;
        data["rtuChannelSetpointIndex"] = this.rtuChannelSetpointIndex !== undefined ? this.rtuChannelSetpointIndex : <any>null;
        data["eventComparatorTypeId"] = this.eventComparatorTypeId !== undefined ? this.eventComparatorTypeId : <any>null;
        data["currentUOMTypeId"] = this.currentUOMTypeId !== undefined ? this.currentUOMTypeId : <any>null;
        data["scaledUOM"] = this.scaledUOM !== undefined ? this.scaledUOM : <any>null;
        data["decimalPlaces"] = this.decimalPlaces !== undefined ? this.decimalPlaces : <any>null;
        data["isSetpointUpdateSupported"] = this.isSetpointUpdateSupported !== undefined ? this.isSetpointUpdateSupported : <any>null;
        data["isAlwaysTriggered"] = this.isAlwaysTriggered !== undefined ? this.isAlwaysTriggered : <any>null;
        data["isDisplayedOnGraph"] = this.isDisplayedOnGraph !== undefined ? this.isDisplayedOnGraph : <any>null;
        data["isDisplayedInSummary"] = this.isDisplayedInSummary !== undefined ? this.isDisplayedInSummary : <any>null;
        data["hysteresis"] = this.hysteresis !== undefined ? this.hysteresis : <any>null;
        data["delay"] = this.delay !== undefined ? this.delay : <any>null;
        data["isAutoCreateProblemReport"] = this.isAutoCreateProblemReport !== undefined ? this.isAutoCreateProblemReport : <any>null;
        data["isAutoCloseProblemReport"] = this.isAutoCloseProblemReport !== undefined ? this.isAutoCloseProblemReport : <any>null;
        data["problemReportImportanceLevelId"] = this.problemReportImportanceLevelId !== undefined ? this.problemReportImportanceLevelId : <any>null;
        data["descriptionAbbreviation"] = this.descriptionAbbreviation !== undefined ? this.descriptionAbbreviation : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class DataChannelEventRuleInventoryDTO extends DataChannelEventRuleLevelDTO {
    eventInventoryStatusTypeId?: EventRuleInventoryStatus;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.eventInventoryStatusTypeId = _data["eventInventoryStatusTypeId"] !== undefined ? _data["eventInventoryStatusTypeId"] : <any>null;
        }
    }

    static fromJS(data: any): DataChannelEventRuleInventoryDTO {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelEventRuleInventoryDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["eventInventoryStatusTypeId"] = this.eventInventoryStatusTypeId !== undefined ? this.eventInventoryStatusTypeId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export enum EventRuleInventoryStatus {
    Normal = 0,
    Full = 1,
    Reorder = 2,
    Critical = 3,
    UserDefined = 4,
    Empty = 5,
}

export enum RtuSetPointSyncStatusEnum {
    Unknown = 0,
    NotLinked = 1,
    LinkedAndInSync = 2,
    LinkedAndOutOfSync = 3,
}

export enum EventRuleComparator {
    EqualTo = 1,
    GreaterThan = 2,
    GreaterThanEqualTo = 3,
    LessThan = 4,
    LessThanEqualTo = 5,
}

export class DataChannelEventRuleDeliveryScheduleDTO extends DataChannelEventRuleBaseDTO {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): DataChannelEventRuleDeliveryScheduleDTO {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelEventRuleDeliveryScheduleDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class DataChannelEventRuleMissingDataDTO extends DataChannelEventRuleBaseDTO {
    maxDataAgeByHour?: number;
    maxDataAgeByMinute?: number;
    isAutoCreateProblemReport?: boolean;
    isAutoCloseProblemReport?: boolean;
    problemReportImportanceLevelId?: EventRuleImportanceLevel | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.maxDataAgeByHour = _data["maxDataAgeByHour"] !== undefined ? _data["maxDataAgeByHour"] : <any>null;
            this.maxDataAgeByMinute = _data["maxDataAgeByMinute"] !== undefined ? _data["maxDataAgeByMinute"] : <any>null;
            this.isAutoCreateProblemReport = _data["isAutoCreateProblemReport"] !== undefined ? _data["isAutoCreateProblemReport"] : <any>null;
            this.isAutoCloseProblemReport = _data["isAutoCloseProblemReport"] !== undefined ? _data["isAutoCloseProblemReport"] : <any>null;
            this.problemReportImportanceLevelId = _data["problemReportImportanceLevelId"] !== undefined ? _data["problemReportImportanceLevelId"] : <any>null;
        }
    }

    static fromJS(data: any): DataChannelEventRuleMissingDataDTO {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelEventRuleMissingDataDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxDataAgeByHour"] = this.maxDataAgeByHour !== undefined ? this.maxDataAgeByHour : <any>null;
        data["maxDataAgeByMinute"] = this.maxDataAgeByMinute !== undefined ? this.maxDataAgeByMinute : <any>null;
        data["isAutoCreateProblemReport"] = this.isAutoCreateProblemReport !== undefined ? this.isAutoCreateProblemReport : <any>null;
        data["isAutoCloseProblemReport"] = this.isAutoCloseProblemReport !== undefined ? this.isAutoCloseProblemReport : <any>null;
        data["problemReportImportanceLevelId"] = this.problemReportImportanceLevelId !== undefined ? this.problemReportImportanceLevelId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class DataChannelEventRuleByUsageRateDTO extends DataChannelEventRuleBaseDTO {
    minimumReadingPeriod?: number;
    rtuChannelSetpointIndex?: number | null;
    currentUOMTypeId?: UnitTypeEnum;
    scaledUOM?: string | null;
    isSetpointUpdateSupported?: boolean;
    eventComparatorTypeId?: EventRuleComparator;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.minimumReadingPeriod = _data["minimumReadingPeriod"] !== undefined ? _data["minimumReadingPeriod"] : <any>null;
            this.rtuChannelSetpointIndex = _data["rtuChannelSetpointIndex"] !== undefined ? _data["rtuChannelSetpointIndex"] : <any>null;
            this.currentUOMTypeId = _data["currentUOMTypeId"] !== undefined ? _data["currentUOMTypeId"] : <any>null;
            this.scaledUOM = _data["scaledUOM"] !== undefined ? _data["scaledUOM"] : <any>null;
            this.isSetpointUpdateSupported = _data["isSetpointUpdateSupported"] !== undefined ? _data["isSetpointUpdateSupported"] : <any>null;
            this.eventComparatorTypeId = _data["eventComparatorTypeId"] !== undefined ? _data["eventComparatorTypeId"] : <any>null;
        }
    }

    static fromJS(data: any): DataChannelEventRuleByUsageRateDTO {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelEventRuleByUsageRateDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["minimumReadingPeriod"] = this.minimumReadingPeriod !== undefined ? this.minimumReadingPeriod : <any>null;
        data["rtuChannelSetpointIndex"] = this.rtuChannelSetpointIndex !== undefined ? this.rtuChannelSetpointIndex : <any>null;
        data["currentUOMTypeId"] = this.currentUOMTypeId !== undefined ? this.currentUOMTypeId : <any>null;
        data["scaledUOM"] = this.scaledUOM !== undefined ? this.scaledUOM : <any>null;
        data["isSetpointUpdateSupported"] = this.isSetpointUpdateSupported !== undefined ? this.isSetpointUpdateSupported : <any>null;
        data["eventComparatorTypeId"] = this.eventComparatorTypeId !== undefined ? this.eventComparatorTypeId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class DataChannelEventRuleSetpointSelectListsDTO {
    levelSetpoints?: string[] | null;
    localSetpoints?: string[] | null;
    usageRateSetpoints?: string[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["levelSetpoints"])) {
                this.levelSetpoints = [] as any;
                for (let item of _data["levelSetpoints"])
                    this.levelSetpoints!.push(item);
            }
            else {
                this.levelSetpoints = <any>null;
            }
            if (Array.isArray(_data["localSetpoints"])) {
                this.localSetpoints = [] as any;
                for (let item of _data["localSetpoints"])
                    this.localSetpoints!.push(item);
            }
            else {
                this.localSetpoints = <any>null;
            }
            if (Array.isArray(_data["usageRateSetpoints"])) {
                this.usageRateSetpoints = [] as any;
                for (let item of _data["usageRateSetpoints"])
                    this.usageRateSetpoints!.push(item);
            }
            else {
                this.usageRateSetpoints = <any>null;
            }
        }
    }

    static fromJS(data: any): DataChannelEventRuleSetpointSelectListsDTO {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelEventRuleSetpointSelectListsDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.levelSetpoints)) {
            data["levelSetpoints"] = [];
            for (let item of this.levelSetpoints)
                data["levelSetpoints"].push(item);
        }
        if (Array.isArray(this.localSetpoints)) {
            data["localSetpoints"] = [];
            for (let item of this.localSetpoints)
                data["localSetpoints"].push(item);
        }
        if (Array.isArray(this.usageRateSetpoints)) {
            data["usageRateSetpoints"] = [];
            for (let item of this.usageRateSetpoints)
                data["usageRateSetpoints"].push(item);
        }
        return data;
    }
}

export class DomainAssetGroupsDTO {
    level?: number;
    domainId?: string;
    name?: string | null;
    domainAssetGroups?: AssetGroupDto[] | null;

    init(_data?: any) {
        if (_data) {
            this.level = _data["level"] !== undefined ? _data["level"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            if (Array.isArray(_data["domainAssetGroups"])) {
                this.domainAssetGroups = [] as any;
                for (let item of _data["domainAssetGroups"])
                    this.domainAssetGroups!.push(AssetGroupDto.fromJS(item));
            }
            else {
                this.domainAssetGroups = <any>null;
            }
        }
    }

    static fromJS(data: any): DomainAssetGroupsDTO {
        data = typeof data === 'object' ? data : {};
        let result = new DomainAssetGroupsDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["level"] = this.level !== undefined ? this.level : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        if (Array.isArray(this.domainAssetGroups)) {
            data["domainAssetGroups"] = [];
            for (let item of this.domainAssetGroups)
                data["domainAssetGroups"].push(item.toJSON());
        }
        return data;
    }
}

export class DomainInfoDto {
    id?: string;
    name?: string | null;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
        }
    }

    static fromJS(data: any): DomainInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new DomainInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        return data;
    }
}

export class DomainInfoReportDto {
    domainId?: string;
    name?: string | null;
    domainLevel?: number | null;
    parentDomainName?: string | null;
    screenTitle?: string | null;
    disableUserLogins?: boolean | null;
    ftpFileFormat?: FtpFileFormat | null;
    isDomainDeleted?: boolean | null;
    isFtpProcessingEnabled?: boolean | null;
    defaultEventStateDescription?: string | null;
    hasNotes?: boolean;

    init(_data?: any) {
        if (_data) {
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.domainLevel = _data["domainLevel"] !== undefined ? _data["domainLevel"] : <any>null;
            this.parentDomainName = _data["parentDomainName"] !== undefined ? _data["parentDomainName"] : <any>null;
            this.screenTitle = _data["screenTitle"] !== undefined ? _data["screenTitle"] : <any>null;
            this.disableUserLogins = _data["disableUserLogins"] !== undefined ? _data["disableUserLogins"] : <any>null;
            this.ftpFileFormat = _data["ftpFileFormat"] !== undefined ? _data["ftpFileFormat"] : <any>null;
            this.isDomainDeleted = _data["isDomainDeleted"] !== undefined ? _data["isDomainDeleted"] : <any>null;
            this.isFtpProcessingEnabled = _data["isFtpProcessingEnabled"] !== undefined ? _data["isFtpProcessingEnabled"] : <any>null;
            this.defaultEventStateDescription = _data["defaultEventStateDescription"] !== undefined ? _data["defaultEventStateDescription"] : <any>null;
            this.hasNotes = _data["hasNotes"] !== undefined ? _data["hasNotes"] : <any>null;
        }
    }

    static fromJS(data: any): DomainInfoReportDto {
        data = typeof data === 'object' ? data : {};
        let result = new DomainInfoReportDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["domainLevel"] = this.domainLevel !== undefined ? this.domainLevel : <any>null;
        data["parentDomainName"] = this.parentDomainName !== undefined ? this.parentDomainName : <any>null;
        data["screenTitle"] = this.screenTitle !== undefined ? this.screenTitle : <any>null;
        data["disableUserLogins"] = this.disableUserLogins !== undefined ? this.disableUserLogins : <any>null;
        data["ftpFileFormat"] = this.ftpFileFormat !== undefined ? this.ftpFileFormat : <any>null;
        data["isDomainDeleted"] = this.isDomainDeleted !== undefined ? this.isDomainDeleted : <any>null;
        data["isFtpProcessingEnabled"] = this.isFtpProcessingEnabled !== undefined ? this.isFtpProcessingEnabled : <any>null;
        data["defaultEventStateDescription"] = this.defaultEventStateDescription !== undefined ? this.defaultEventStateDescription : <any>null;
        data["hasNotes"] = this.hasNotes !== undefined ? this.hasNotes : <any>null;
        return data;
    }
}

export class DomainNotesDto {
    id?: string;
    notes?: string | null;
    createdDate?: Date;
    createdBy?: string;
    createdByUsername?: string | null;
    lastUpdatedDate?: Date | null;
    lastUpdateUserId?: string | null;
    lastUpdateUsername?: string | null;
    domainId?: string;
    rowVersion?: string | null;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.notes = _data["notes"] !== undefined ? _data["notes"] : <any>null;
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>null;
            this.createdBy = _data["createdBy"] !== undefined ? _data["createdBy"] : <any>null;
            this.createdByUsername = _data["createdByUsername"] !== undefined ? _data["createdByUsername"] : <any>null;
            this.lastUpdatedDate = _data["lastUpdatedDate"] ? new Date(_data["lastUpdatedDate"].toString()) : <any>null;
            this.lastUpdateUserId = _data["lastUpdateUserId"] !== undefined ? _data["lastUpdateUserId"] : <any>null;
            this.lastUpdateUsername = _data["lastUpdateUsername"] !== undefined ? _data["lastUpdateUsername"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.rowVersion = _data["rowVersion"] !== undefined ? _data["rowVersion"] : <any>null;
        }
    }

    static fromJS(data: any): DomainNotesDto {
        data = typeof data === 'object' ? data : {};
        let result = new DomainNotesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["notes"] = this.notes !== undefined ? this.notes : <any>null;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>null;
        data["createdBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["createdByUsername"] = this.createdByUsername !== undefined ? this.createdByUsername : <any>null;
        data["lastUpdatedDate"] = this.lastUpdatedDate ? this.lastUpdatedDate.toISOString() : <any>null;
        data["lastUpdateUserId"] = this.lastUpdateUserId !== undefined ? this.lastUpdateUserId : <any>null;
        data["lastUpdateUsername"] = this.lastUpdateUsername !== undefined ? this.lastUpdateUsername : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["rowVersion"] = this.rowVersion !== undefined ? this.rowVersion : <any>null;
        return data;
    }
}

export class UpdateDomainNotesResponse {
    notes?: string | null;
    domainId?: string;
    rowVersion?: string | null;

    init(_data?: any) {
        if (_data) {
            this.notes = _data["notes"] !== undefined ? _data["notes"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.rowVersion = _data["rowVersion"] !== undefined ? _data["rowVersion"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateDomainNotesResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateDomainNotesResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["notes"] = this.notes !== undefined ? this.notes : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["rowVersion"] = this.rowVersion !== undefined ? this.rowVersion : <any>null;
        return data;
    }
}

export class UpdateDomainNotesRequest {
    notes?: string | null;
    domainId?: string;
    rowVersion?: string | null;

    init(_data?: any) {
        if (_data) {
            this.notes = _data["notes"] !== undefined ? _data["notes"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.rowVersion = _data["rowVersion"] !== undefined ? _data["rowVersion"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateDomainNotesRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateDomainNotesRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["notes"] = this.notes !== undefined ? this.notes : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["rowVersion"] = this.rowVersion !== undefined ? this.rowVersion : <any>null;
        return data;
    }
}

export class DomainUserRolesDTO {
    level?: number;
    domainId?: string;
    parentDomainid?: string;
    name?: string | null;
    indentedName?: string | null;
    domainRoles?: ApplicationUserRoleDto[] | null;

    init(_data?: any) {
        if (_data) {
            this.level = _data["level"] !== undefined ? _data["level"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.parentDomainid = _data["parentDomainid"] !== undefined ? _data["parentDomainid"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.indentedName = _data["indentedName"] !== undefined ? _data["indentedName"] : <any>null;
            if (Array.isArray(_data["domainRoles"])) {
                this.domainRoles = [] as any;
                for (let item of _data["domainRoles"])
                    this.domainRoles!.push(ApplicationUserRoleDto.fromJS(item));
            }
            else {
                this.domainRoles = <any>null;
            }
        }
    }

    static fromJS(data: any): DomainUserRolesDTO {
        data = typeof data === 'object' ? data : {};
        let result = new DomainUserRolesDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["level"] = this.level !== undefined ? this.level : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["parentDomainid"] = this.parentDomainid !== undefined ? this.parentDomainid : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["indentedName"] = this.indentedName !== undefined ? this.indentedName : <any>null;
        if (Array.isArray(this.domainRoles)) {
            data["domainRoles"] = [];
            for (let item of this.domainRoles)
                data["domainRoles"].push(item.toJSON());
        }
        return data;
    }
}

export class ApplicationUserRoleDto {
    applicationUserRoleId?: number;
    userRoleTypeEnumId?: UserRoleTypeEnum;
    name?: string | null;
    isAdministrator?: boolean;

    init(_data?: any) {
        if (_data) {
            this.applicationUserRoleId = _data["applicationUserRoleId"] !== undefined ? _data["applicationUserRoleId"] : <any>null;
            this.userRoleTypeEnumId = _data["userRoleTypeEnumId"] !== undefined ? _data["userRoleTypeEnumId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.isAdministrator = _data["isAdministrator"] !== undefined ? _data["isAdministrator"] : <any>null;
        }
    }

    static fromJS(data: any): ApplicationUserRoleDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationUserRoleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["applicationUserRoleId"] = this.applicationUserRoleId !== undefined ? this.applicationUserRoleId : <any>null;
        data["userRoleTypeEnumId"] = this.userRoleTypeEnumId !== undefined ? this.userRoleTypeEnumId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["isAdministrator"] = this.isAdministrator !== undefined ? this.isAdministrator : <any>null;
        return data;
    }
}

export class ScheduledDeliveryDto {
    deliveryScheduleId?: string;
    dataChannelId?: string;
    scheduledTime?: Date;
    timeCompleted?: Date | null;
    isAutoFill?: boolean;
    deliveryAmount?: number | null;
    lateGracePeriodInMinutes?: number | null;

    init(_data?: any) {
        if (_data) {
            this.deliveryScheduleId = _data["deliveryScheduleId"] !== undefined ? _data["deliveryScheduleId"] : <any>null;
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.scheduledTime = _data["scheduledTime"] ? new Date(_data["scheduledTime"].toString()) : <any>null;
            this.timeCompleted = _data["timeCompleted"] ? new Date(_data["timeCompleted"].toString()) : <any>null;
            this.isAutoFill = _data["isAutoFill"] !== undefined ? _data["isAutoFill"] : <any>null;
            this.deliveryAmount = _data["deliveryAmount"] !== undefined ? _data["deliveryAmount"] : <any>null;
            this.lateGracePeriodInMinutes = _data["lateGracePeriodInMinutes"] !== undefined ? _data["lateGracePeriodInMinutes"] : <any>null;
        }
    }

    static fromJS(data: any): ScheduledDeliveryDto {
        data = typeof data === 'object' ? data : {};
        let result = new ScheduledDeliveryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deliveryScheduleId"] = this.deliveryScheduleId !== undefined ? this.deliveryScheduleId : <any>null;
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["scheduledTime"] = this.scheduledTime ? this.scheduledTime.toISOString() : <any>null;
        data["timeCompleted"] = this.timeCompleted ? this.timeCompleted.toISOString() : <any>null;
        data["isAutoFill"] = this.isAutoFill !== undefined ? this.isAutoFill : <any>null;
        data["deliveryAmount"] = this.deliveryAmount !== undefined ? this.deliveryAmount : <any>null;
        data["lateGracePeriodInMinutes"] = this.lateGracePeriodInMinutes !== undefined ? this.lateGracePeriodInMinutes : <any>null;
        return data;
    }
}

export class DataChannelDTO {
    dataChannelId?: string;
    description?: string | null;
    dataChannelTypeId?: DataChannelCategory;
    isVolumetric?: boolean;
    scaledUnit?: string | null;
    uomParams?: UOMParamsDTO | null;
    productDescription?: string | null;
    tankType?: TankTypeEnum;
    rtuId?: string | null;
    rtuCategory?: RtuDeviceCategory | null;
    rtuType?: RtuDeviceType | null;
    rtuDeviceId?: string | null;
    channelNumber?: string | null;
    rtuChannelId?: string | null;
    dataLoggingRate?: number | null;
    latestReadingTimestamp?: Date | null;
    forecastMode?: ForecastMode;
    displayPriority?: number;
    dataSource?: DataChannelDataSource;
    digitalState3Limit?: number | null;
    digitalState2Limit?: number | null;
    digitalState1Limit?: number | null;
    digitalState0Limit?: number | null;
    digitalState3Text?: string | null;
    digitalState2Text?: string | null;
    digitalState1Text?: string | null;
    digitalState0Text?: string | null;
    eventImportanceLevel?: EventRuleImportanceLevel | null;
    eventStatus?: string | null;
    asset_SiteNumber?: string | null;
    dataChannel_SiteNumber?: string | null;
    hasRtuNotes?: boolean;
    isLBShellEnabled?: boolean;
    rtuPollStatus?: RtuPollStatusEnum;
    rtuChannelType?: RtuChannelSensor | null;
    publishedParams?: PublishedDataChannelDTO | null;

    init(_data?: any) {
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.dataChannelTypeId = _data["dataChannelTypeId"] !== undefined ? _data["dataChannelTypeId"] : <any>null;
            this.isVolumetric = _data["isVolumetric"] !== undefined ? _data["isVolumetric"] : <any>null;
            this.scaledUnit = _data["scaledUnit"] !== undefined ? _data["scaledUnit"] : <any>null;
            this.uomParams = _data["uomParams"] ? UOMParamsDTO.fromJS(_data["uomParams"]) : <any>null;
            this.productDescription = _data["productDescription"] !== undefined ? _data["productDescription"] : <any>null;
            this.tankType = _data["tankType"] !== undefined ? _data["tankType"] : <any>null;
            this.rtuId = _data["rtuId"] !== undefined ? _data["rtuId"] : <any>null;
            this.rtuCategory = _data["rtuCategory"] !== undefined ? _data["rtuCategory"] : <any>null;
            this.rtuType = _data["rtuType"] !== undefined ? _data["rtuType"] : <any>null;
            this.rtuDeviceId = _data["rtuDeviceId"] !== undefined ? _data["rtuDeviceId"] : <any>null;
            this.channelNumber = _data["channelNumber"] !== undefined ? _data["channelNumber"] : <any>null;
            this.rtuChannelId = _data["rtuChannelId"] !== undefined ? _data["rtuChannelId"] : <any>null;
            this.dataLoggingRate = _data["dataLoggingRate"] !== undefined ? _data["dataLoggingRate"] : <any>null;
            this.latestReadingTimestamp = _data["latestReadingTimestamp"] ? new Date(_data["latestReadingTimestamp"].toString()) : <any>null;
            this.forecastMode = _data["forecastMode"] !== undefined ? _data["forecastMode"] : <any>null;
            this.displayPriority = _data["displayPriority"] !== undefined ? _data["displayPriority"] : <any>null;
            this.dataSource = _data["dataSource"] !== undefined ? _data["dataSource"] : <any>null;
            this.digitalState3Limit = _data["digitalState3Limit"] !== undefined ? _data["digitalState3Limit"] : <any>null;
            this.digitalState2Limit = _data["digitalState2Limit"] !== undefined ? _data["digitalState2Limit"] : <any>null;
            this.digitalState1Limit = _data["digitalState1Limit"] !== undefined ? _data["digitalState1Limit"] : <any>null;
            this.digitalState0Limit = _data["digitalState0Limit"] !== undefined ? _data["digitalState0Limit"] : <any>null;
            this.digitalState3Text = _data["digitalState3Text"] !== undefined ? _data["digitalState3Text"] : <any>null;
            this.digitalState2Text = _data["digitalState2Text"] !== undefined ? _data["digitalState2Text"] : <any>null;
            this.digitalState1Text = _data["digitalState1Text"] !== undefined ? _data["digitalState1Text"] : <any>null;
            this.digitalState0Text = _data["digitalState0Text"] !== undefined ? _data["digitalState0Text"] : <any>null;
            this.eventImportanceLevel = _data["eventImportanceLevel"] !== undefined ? _data["eventImportanceLevel"] : <any>null;
            this.eventStatus = _data["eventStatus"] !== undefined ? _data["eventStatus"] : <any>null;
            this.asset_SiteNumber = _data["asset_SiteNumber"] !== undefined ? _data["asset_SiteNumber"] : <any>null;
            this.dataChannel_SiteNumber = _data["dataChannel_SiteNumber"] !== undefined ? _data["dataChannel_SiteNumber"] : <any>null;
            this.hasRtuNotes = _data["hasRtuNotes"] !== undefined ? _data["hasRtuNotes"] : <any>null;
            this.isLBShellEnabled = _data["isLBShellEnabled"] !== undefined ? _data["isLBShellEnabled"] : <any>null;
            this.rtuPollStatus = _data["rtuPollStatus"] !== undefined ? _data["rtuPollStatus"] : <any>null;
            this.rtuChannelType = _data["rtuChannelType"] !== undefined ? _data["rtuChannelType"] : <any>null;
            this.publishedParams = _data["publishedParams"] ? PublishedDataChannelDTO.fromJS(_data["publishedParams"]) : <any>null;
        }
    }

    static fromJS(data: any): DataChannelDTO {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["dataChannelTypeId"] = this.dataChannelTypeId !== undefined ? this.dataChannelTypeId : <any>null;
        data["isVolumetric"] = this.isVolumetric !== undefined ? this.isVolumetric : <any>null;
        data["scaledUnit"] = this.scaledUnit !== undefined ? this.scaledUnit : <any>null;
        data["uomParams"] = this.uomParams ? this.uomParams.toJSON() : <any>null;
        data["productDescription"] = this.productDescription !== undefined ? this.productDescription : <any>null;
        data["tankType"] = this.tankType !== undefined ? this.tankType : <any>null;
        data["rtuId"] = this.rtuId !== undefined ? this.rtuId : <any>null;
        data["rtuCategory"] = this.rtuCategory !== undefined ? this.rtuCategory : <any>null;
        data["rtuType"] = this.rtuType !== undefined ? this.rtuType : <any>null;
        data["rtuDeviceId"] = this.rtuDeviceId !== undefined ? this.rtuDeviceId : <any>null;
        data["channelNumber"] = this.channelNumber !== undefined ? this.channelNumber : <any>null;
        data["rtuChannelId"] = this.rtuChannelId !== undefined ? this.rtuChannelId : <any>null;
        data["dataLoggingRate"] = this.dataLoggingRate !== undefined ? this.dataLoggingRate : <any>null;
        data["latestReadingTimestamp"] = this.latestReadingTimestamp ? this.latestReadingTimestamp.toISOString() : <any>null;
        data["forecastMode"] = this.forecastMode !== undefined ? this.forecastMode : <any>null;
        data["displayPriority"] = this.displayPriority !== undefined ? this.displayPriority : <any>null;
        data["dataSource"] = this.dataSource !== undefined ? this.dataSource : <any>null;
        data["digitalState3Limit"] = this.digitalState3Limit !== undefined ? this.digitalState3Limit : <any>null;
        data["digitalState2Limit"] = this.digitalState2Limit !== undefined ? this.digitalState2Limit : <any>null;
        data["digitalState1Limit"] = this.digitalState1Limit !== undefined ? this.digitalState1Limit : <any>null;
        data["digitalState0Limit"] = this.digitalState0Limit !== undefined ? this.digitalState0Limit : <any>null;
        data["digitalState3Text"] = this.digitalState3Text !== undefined ? this.digitalState3Text : <any>null;
        data["digitalState2Text"] = this.digitalState2Text !== undefined ? this.digitalState2Text : <any>null;
        data["digitalState1Text"] = this.digitalState1Text !== undefined ? this.digitalState1Text : <any>null;
        data["digitalState0Text"] = this.digitalState0Text !== undefined ? this.digitalState0Text : <any>null;
        data["eventImportanceLevel"] = this.eventImportanceLevel !== undefined ? this.eventImportanceLevel : <any>null;
        data["eventStatus"] = this.eventStatus !== undefined ? this.eventStatus : <any>null;
        data["asset_SiteNumber"] = this.asset_SiteNumber !== undefined ? this.asset_SiteNumber : <any>null;
        data["dataChannel_SiteNumber"] = this.dataChannel_SiteNumber !== undefined ? this.dataChannel_SiteNumber : <any>null;
        data["hasRtuNotes"] = this.hasRtuNotes !== undefined ? this.hasRtuNotes : <any>null;
        data["isLBShellEnabled"] = this.isLBShellEnabled !== undefined ? this.isLBShellEnabled : <any>null;
        data["rtuPollStatus"] = this.rtuPollStatus !== undefined ? this.rtuPollStatus : <any>null;
        data["rtuChannelType"] = this.rtuChannelType !== undefined ? this.rtuChannelType : <any>null;
        data["publishedParams"] = this.publishedParams ? this.publishedParams.toJSON() : <any>null;
        return data;
    }
}

export class UOMParamsDTO {
    graphMin?: number | null;
    graphMax?: number | null;
    latestReadingValue?: number | null;
    latestReadingValue2?: number | null;
    latestReadingValueInPercentFull?: number | null;
    maxProductHeightInScaledUnits?: number | null;
    maxProductHeightInDisplayUnits?: number | null;
    eventRules?: EventRuleModel[] | null;
    maxDeliverQuantity?: number | null;
    deliverySchedules?: DataChannelDeliveryScheduleModel[] | null;
    scaledMax?: number | null;
    scaledMin?: number | null;
    rawUnitsAtZero?: number | null;
    rawUnitsAtFullScale?: number | null;
    rawUnitsAtUnderRange?: number | null;
    rawUnitsAtOverRange?: number | null;
    unit?: string | null;
    unitTypeId?: UnitTypeEnum | null;
    decimalPlaces?: number;
    supportedUOMTypeId?: SupportedUOMType;

    init(_data?: any) {
        if (_data) {
            this.graphMin = _data["graphMin"] !== undefined ? _data["graphMin"] : <any>null;
            this.graphMax = _data["graphMax"] !== undefined ? _data["graphMax"] : <any>null;
            this.latestReadingValue = _data["latestReadingValue"] !== undefined ? _data["latestReadingValue"] : <any>null;
            this.latestReadingValue2 = _data["latestReadingValue2"] !== undefined ? _data["latestReadingValue2"] : <any>null;
            this.latestReadingValueInPercentFull = _data["latestReadingValueInPercentFull"] !== undefined ? _data["latestReadingValueInPercentFull"] : <any>null;
            this.maxProductHeightInScaledUnits = _data["maxProductHeightInScaledUnits"] !== undefined ? _data["maxProductHeightInScaledUnits"] : <any>null;
            this.maxProductHeightInDisplayUnits = _data["maxProductHeightInDisplayUnits"] !== undefined ? _data["maxProductHeightInDisplayUnits"] : <any>null;
            if (Array.isArray(_data["eventRules"])) {
                this.eventRules = [] as any;
                for (let item of _data["eventRules"])
                    this.eventRules!.push(EventRuleModel.fromJS(item));
            }
            else {
                this.eventRules = <any>null;
            }
            this.maxDeliverQuantity = _data["maxDeliverQuantity"] !== undefined ? _data["maxDeliverQuantity"] : <any>null;
            if (Array.isArray(_data["deliverySchedules"])) {
                this.deliverySchedules = [] as any;
                for (let item of _data["deliverySchedules"])
                    this.deliverySchedules!.push(DataChannelDeliveryScheduleModel.fromJS(item));
            }
            else {
                this.deliverySchedules = <any>null;
            }
            this.scaledMax = _data["scaledMax"] !== undefined ? _data["scaledMax"] : <any>null;
            this.scaledMin = _data["scaledMin"] !== undefined ? _data["scaledMin"] : <any>null;
            this.rawUnitsAtZero = _data["rawUnitsAtZero"] !== undefined ? _data["rawUnitsAtZero"] : <any>null;
            this.rawUnitsAtFullScale = _data["rawUnitsAtFullScale"] !== undefined ? _data["rawUnitsAtFullScale"] : <any>null;
            this.rawUnitsAtUnderRange = _data["rawUnitsAtUnderRange"] !== undefined ? _data["rawUnitsAtUnderRange"] : <any>null;
            this.rawUnitsAtOverRange = _data["rawUnitsAtOverRange"] !== undefined ? _data["rawUnitsAtOverRange"] : <any>null;
            this.unit = _data["unit"] !== undefined ? _data["unit"] : <any>null;
            this.unitTypeId = _data["unitTypeId"] !== undefined ? _data["unitTypeId"] : <any>null;
            this.decimalPlaces = _data["decimalPlaces"] !== undefined ? _data["decimalPlaces"] : <any>null;
            this.supportedUOMTypeId = _data["supportedUOMTypeId"] !== undefined ? _data["supportedUOMTypeId"] : <any>null;
        }
    }

    static fromJS(data: any): UOMParamsDTO {
        data = typeof data === 'object' ? data : {};
        let result = new UOMParamsDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["graphMin"] = this.graphMin !== undefined ? this.graphMin : <any>null;
        data["graphMax"] = this.graphMax !== undefined ? this.graphMax : <any>null;
        data["latestReadingValue"] = this.latestReadingValue !== undefined ? this.latestReadingValue : <any>null;
        data["latestReadingValue2"] = this.latestReadingValue2 !== undefined ? this.latestReadingValue2 : <any>null;
        data["latestReadingValueInPercentFull"] = this.latestReadingValueInPercentFull !== undefined ? this.latestReadingValueInPercentFull : <any>null;
        data["maxProductHeightInScaledUnits"] = this.maxProductHeightInScaledUnits !== undefined ? this.maxProductHeightInScaledUnits : <any>null;
        data["maxProductHeightInDisplayUnits"] = this.maxProductHeightInDisplayUnits !== undefined ? this.maxProductHeightInDisplayUnits : <any>null;
        if (Array.isArray(this.eventRules)) {
            data["eventRules"] = [];
            for (let item of this.eventRules)
                data["eventRules"].push(item.toJSON());
        }
        data["maxDeliverQuantity"] = this.maxDeliverQuantity !== undefined ? this.maxDeliverQuantity : <any>null;
        if (Array.isArray(this.deliverySchedules)) {
            data["deliverySchedules"] = [];
            for (let item of this.deliverySchedules)
                data["deliverySchedules"].push(item.toJSON());
        }
        data["scaledMax"] = this.scaledMax !== undefined ? this.scaledMax : <any>null;
        data["scaledMin"] = this.scaledMin !== undefined ? this.scaledMin : <any>null;
        data["rawUnitsAtZero"] = this.rawUnitsAtZero !== undefined ? this.rawUnitsAtZero : <any>null;
        data["rawUnitsAtFullScale"] = this.rawUnitsAtFullScale !== undefined ? this.rawUnitsAtFullScale : <any>null;
        data["rawUnitsAtUnderRange"] = this.rawUnitsAtUnderRange !== undefined ? this.rawUnitsAtUnderRange : <any>null;
        data["rawUnitsAtOverRange"] = this.rawUnitsAtOverRange !== undefined ? this.rawUnitsAtOverRange : <any>null;
        data["unit"] = this.unit !== undefined ? this.unit : <any>null;
        data["unitTypeId"] = this.unitTypeId !== undefined ? this.unitTypeId : <any>null;
        data["decimalPlaces"] = this.decimalPlaces !== undefined ? this.decimalPlaces : <any>null;
        data["supportedUOMTypeId"] = this.supportedUOMTypeId !== undefined ? this.supportedUOMTypeId : <any>null;
        return data;
    }
}

export class EventRuleModel {
    dataChannelEventRuleId?: number;
    dataChannelId?: string;
    description?: string | null;
    eventRuleType?: EventRuleCategory;
    dataChannelType?: DataChannelCategory;
    inventoryStatus?: EventRuleInventoryStatus | null;
    importanceLevel?: EventRuleImportanceLevel;
    comparator?: EventRuleComparator;
    eventValue?: number | null;
    isActive?: boolean;
    isDisplayedOnGraph?: boolean;
    sortIndex?: number;
    rtuChannelEventType?: RtuChannelEventHistoryTypeEnum | null;
    minimumReadingPeriod?: number | null;

    init(_data?: any) {
        if (_data) {
            this.dataChannelEventRuleId = _data["dataChannelEventRuleId"] !== undefined ? _data["dataChannelEventRuleId"] : <any>null;
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.eventRuleType = _data["eventRuleType"] !== undefined ? _data["eventRuleType"] : <any>null;
            this.dataChannelType = _data["dataChannelType"] !== undefined ? _data["dataChannelType"] : <any>null;
            this.inventoryStatus = _data["inventoryStatus"] !== undefined ? _data["inventoryStatus"] : <any>null;
            this.importanceLevel = _data["importanceLevel"] !== undefined ? _data["importanceLevel"] : <any>null;
            this.comparator = _data["comparator"] !== undefined ? _data["comparator"] : <any>null;
            this.eventValue = _data["eventValue"] !== undefined ? _data["eventValue"] : <any>null;
            this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : <any>null;
            this.isDisplayedOnGraph = _data["isDisplayedOnGraph"] !== undefined ? _data["isDisplayedOnGraph"] : <any>null;
            this.sortIndex = _data["sortIndex"] !== undefined ? _data["sortIndex"] : <any>null;
            this.rtuChannelEventType = _data["rtuChannelEventType"] !== undefined ? _data["rtuChannelEventType"] : <any>null;
            this.minimumReadingPeriod = _data["minimumReadingPeriod"] !== undefined ? _data["minimumReadingPeriod"] : <any>null;
        }
    }

    static fromJS(data: any): EventRuleModel {
        data = typeof data === 'object' ? data : {};
        let result = new EventRuleModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelEventRuleId"] = this.dataChannelEventRuleId !== undefined ? this.dataChannelEventRuleId : <any>null;
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["eventRuleType"] = this.eventRuleType !== undefined ? this.eventRuleType : <any>null;
        data["dataChannelType"] = this.dataChannelType !== undefined ? this.dataChannelType : <any>null;
        data["inventoryStatus"] = this.inventoryStatus !== undefined ? this.inventoryStatus : <any>null;
        data["importanceLevel"] = this.importanceLevel !== undefined ? this.importanceLevel : <any>null;
        data["comparator"] = this.comparator !== undefined ? this.comparator : <any>null;
        data["eventValue"] = this.eventValue !== undefined ? this.eventValue : <any>null;
        data["isActive"] = this.isActive !== undefined ? this.isActive : <any>null;
        data["isDisplayedOnGraph"] = this.isDisplayedOnGraph !== undefined ? this.isDisplayedOnGraph : <any>null;
        data["sortIndex"] = this.sortIndex !== undefined ? this.sortIndex : <any>null;
        data["rtuChannelEventType"] = this.rtuChannelEventType !== undefined ? this.rtuChannelEventType : <any>null;
        data["minimumReadingPeriod"] = this.minimumReadingPeriod !== undefined ? this.minimumReadingPeriod : <any>null;
        return data;
    }
}

export enum RtuChannelEventHistoryTypeEnum {
    Unknown = 0,
    ReversePollPending = 1,
    SensorError = 2,
    IOCommunicationsFailure = 3,
    DeliveryNotice = 4,
    UsageRateAlarm = 5,
    RS485CommunicationsTimeout = 6,
    SignalOutOfAllowedRange = 7,
}

export class DataChannelDeliveryScheduleModel {
    deliveryScheduleId?: string;
    dataChannelId?: string;
    scheduledTime?: Date | null;
    isAutoFill?: boolean;
    deliveryAmount?: number | null;

    init(_data?: any) {
        if (_data) {
            this.deliveryScheduleId = _data["deliveryScheduleId"] !== undefined ? _data["deliveryScheduleId"] : <any>null;
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.scheduledTime = _data["scheduledTime"] ? new Date(_data["scheduledTime"].toString()) : <any>null;
            this.isAutoFill = _data["isAutoFill"] !== undefined ? _data["isAutoFill"] : <any>null;
            this.deliveryAmount = _data["deliveryAmount"] !== undefined ? _data["deliveryAmount"] : <any>null;
        }
    }

    static fromJS(data: any): DataChannelDeliveryScheduleModel {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelDeliveryScheduleModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deliveryScheduleId"] = this.deliveryScheduleId !== undefined ? this.deliveryScheduleId : <any>null;
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["scheduledTime"] = this.scheduledTime ? this.scheduledTime.toISOString() : <any>null;
        data["isAutoFill"] = this.isAutoFill !== undefined ? this.isAutoFill : <any>null;
        data["deliveryAmount"] = this.deliveryAmount !== undefined ? this.deliveryAmount : <any>null;
        return data;
    }
}

export enum SupportedUOMType {
    Basic = 0,
    BasicWithPercentFull = 1,
    SimplifiedVolumetric = 2,
    Volumetric = 3,
}

export enum TankTypeEnum {
    None = 0,
    VerticalWith2To1EllipsoidalEnds = 1,
    VerticalWithHemisphericalEnds = 2,
    HorizontalWith2To1EllipsoidalEnds = 3,
    VerticalWithFlatEnds = 4,
    HorizontalWithFlatEnds = 5,
    VerticalWithVariableDishedEnds = 6,
    HorizontalWithVariableDishedEnds = 7,
    VerticalWithConicalBottomEnd = 8,
    RectangularBox = 9,
    SphericalTank = 10,
    HorizontalWithHemisphericalEnds = 11,
    TotalizedTank = 12,
}

export enum ForecastMode {
    NoForecast = 0,
    HistoricalUsageRate = 1,
    ManualUsageRate = 2,
    Unsmoothed = 3,
}

export enum DataChannelDataSource {
    RTU = 0,
    PublishedDataChannel = 1,
    Manual = 2,
    DataChannel = 3,
}

export class PublishedDataChannelDTO {
    publishedDataChannelSourceDomainId?: string;
    publishedDataChannelSourceDomainName?: string | null;
    publishedComments?: string | null;

    init(_data?: any) {
        if (_data) {
            this.publishedDataChannelSourceDomainId = _data["publishedDataChannelSourceDomainId"] !== undefined ? _data["publishedDataChannelSourceDomainId"] : <any>null;
            this.publishedDataChannelSourceDomainName = _data["publishedDataChannelSourceDomainName"] !== undefined ? _data["publishedDataChannelSourceDomainName"] : <any>null;
            this.publishedComments = _data["publishedComments"] !== undefined ? _data["publishedComments"] : <any>null;
        }
    }

    static fromJS(data: any): PublishedDataChannelDTO {
        data = typeof data === 'object' ? data : {};
        let result = new PublishedDataChannelDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["publishedDataChannelSourceDomainId"] = this.publishedDataChannelSourceDomainId !== undefined ? this.publishedDataChannelSourceDomainId : <any>null;
        data["publishedDataChannelSourceDomainName"] = this.publishedDataChannelSourceDomainName !== undefined ? this.publishedDataChannelSourceDomainName : <any>null;
        data["publishedComments"] = this.publishedComments !== undefined ? this.publishedComments : <any>null;
        return data;
    }
}

export class ForecastDTO {
    timeOfForecast?: Date | null;
    forecasts?: EvolveForecastReadingResponse[] | null;

    init(_data?: any) {
        if (_data) {
            this.timeOfForecast = _data["timeOfForecast"] ? new Date(_data["timeOfForecast"].toString()) : <any>null;
            if (Array.isArray(_data["forecasts"])) {
                this.forecasts = [] as any;
                for (let item of _data["forecasts"])
                    this.forecasts!.push(EvolveForecastReadingResponse.fromJS(item));
            }
            else {
                this.forecasts = <any>null;
            }
        }
    }

    static fromJS(data: any): ForecastDTO {
        data = typeof data === 'object' ? data : {};
        let result = new ForecastDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["timeOfForecast"] = this.timeOfForecast ? this.timeOfForecast.toISOString() : <any>null;
        if (Array.isArray(this.forecasts)) {
            data["forecasts"] = [];
            for (let item of this.forecasts)
                data["forecasts"].push(item.toJSON());
        }
        return data;
    }
}

export class DataChannelReportDTO {
    dataChannelId?: string;
    assetInfo?: AssetInfoDTO | null;
    dataSourceInfo?: DataSourceTypeInfoDTO | null;
    dataChannelTypeId?: DataChannelCategory;
    dataChannelTypeAsText?: string | null;
    dataChannelDescription?: string | null;
    dataChannelTemplateId?: string;
    dataChannelTemplateDescription?: string | null;
    serialNumber?: string | null;
    sensorCalibration?: SensorCalibrationInfoDTO | null;
    digitalInputSensorCalibration?: DigitalInputSensorCalibrationInfoDTO | null;
    tankSetupInfo?: TankSetupInfoDTO | null;
    forecastDeliveryInfo?: DataChannelForecastDeliveryInfoDTO | null;
    integrationInfo?: IntegrationInfoDTO | null;
    createdBy?: string;
    createdDate?: Date;
    lastUpdateUserId?: string | null;
    lastUpdatedDate?: Date | null;
    createdByName?: string | null;
    lastUpdateUserName?: string | null;
    rtuChannelSetpointsSyncTypeId?: RtuChannelSetpointsSyncTypeEnum | null;

    init(_data?: any) {
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.assetInfo = _data["assetInfo"] ? AssetInfoDTO.fromJS(_data["assetInfo"]) : <any>null;
            this.dataSourceInfo = _data["dataSourceInfo"] ? DataSourceTypeInfoDTO.fromJS(_data["dataSourceInfo"]) : <any>null;
            this.dataChannelTypeId = _data["dataChannelTypeId"] !== undefined ? _data["dataChannelTypeId"] : <any>null;
            this.dataChannelTypeAsText = _data["dataChannelTypeAsText"] !== undefined ? _data["dataChannelTypeAsText"] : <any>null;
            this.dataChannelDescription = _data["dataChannelDescription"] !== undefined ? _data["dataChannelDescription"] : <any>null;
            this.dataChannelTemplateId = _data["dataChannelTemplateId"] !== undefined ? _data["dataChannelTemplateId"] : <any>null;
            this.dataChannelTemplateDescription = _data["dataChannelTemplateDescription"] !== undefined ? _data["dataChannelTemplateDescription"] : <any>null;
            this.serialNumber = _data["serialNumber"] !== undefined ? _data["serialNumber"] : <any>null;
            this.sensorCalibration = _data["sensorCalibration"] ? SensorCalibrationInfoDTO.fromJS(_data["sensorCalibration"]) : <any>null;
            this.digitalInputSensorCalibration = _data["digitalInputSensorCalibration"] ? DigitalInputSensorCalibrationInfoDTO.fromJS(_data["digitalInputSensorCalibration"]) : <any>null;
            this.tankSetupInfo = _data["tankSetupInfo"] ? TankSetupInfoDTO.fromJS(_data["tankSetupInfo"]) : <any>null;
            this.forecastDeliveryInfo = _data["forecastDeliveryInfo"] ? DataChannelForecastDeliveryInfoDTO.fromJS(_data["forecastDeliveryInfo"]) : <any>null;
            this.integrationInfo = _data["integrationInfo"] ? IntegrationInfoDTO.fromJS(_data["integrationInfo"]) : <any>null;
            this.createdBy = _data["createdBy"] !== undefined ? _data["createdBy"] : <any>null;
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>null;
            this.lastUpdateUserId = _data["lastUpdateUserId"] !== undefined ? _data["lastUpdateUserId"] : <any>null;
            this.lastUpdatedDate = _data["lastUpdatedDate"] ? new Date(_data["lastUpdatedDate"].toString()) : <any>null;
            this.createdByName = _data["createdByName"] !== undefined ? _data["createdByName"] : <any>null;
            this.lastUpdateUserName = _data["lastUpdateUserName"] !== undefined ? _data["lastUpdateUserName"] : <any>null;
            this.rtuChannelSetpointsSyncTypeId = _data["rtuChannelSetpointsSyncTypeId"] !== undefined ? _data["rtuChannelSetpointsSyncTypeId"] : <any>null;
        }
    }

    static fromJS(data: any): DataChannelReportDTO {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelReportDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["assetInfo"] = this.assetInfo ? this.assetInfo.toJSON() : <any>null;
        data["dataSourceInfo"] = this.dataSourceInfo ? this.dataSourceInfo.toJSON() : <any>null;
        data["dataChannelTypeId"] = this.dataChannelTypeId !== undefined ? this.dataChannelTypeId : <any>null;
        data["dataChannelTypeAsText"] = this.dataChannelTypeAsText !== undefined ? this.dataChannelTypeAsText : <any>null;
        data["dataChannelDescription"] = this.dataChannelDescription !== undefined ? this.dataChannelDescription : <any>null;
        data["dataChannelTemplateId"] = this.dataChannelTemplateId !== undefined ? this.dataChannelTemplateId : <any>null;
        data["dataChannelTemplateDescription"] = this.dataChannelTemplateDescription !== undefined ? this.dataChannelTemplateDescription : <any>null;
        data["serialNumber"] = this.serialNumber !== undefined ? this.serialNumber : <any>null;
        data["sensorCalibration"] = this.sensorCalibration ? this.sensorCalibration.toJSON() : <any>null;
        data["digitalInputSensorCalibration"] = this.digitalInputSensorCalibration ? this.digitalInputSensorCalibration.toJSON() : <any>null;
        data["tankSetupInfo"] = this.tankSetupInfo ? this.tankSetupInfo.toJSON() : <any>null;
        data["forecastDeliveryInfo"] = this.forecastDeliveryInfo ? this.forecastDeliveryInfo.toJSON() : <any>null;
        data["integrationInfo"] = this.integrationInfo ? this.integrationInfo.toJSON() : <any>null;
        data["createdBy"] = this.createdBy !== undefined ? this.createdBy : <any>null;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>null;
        data["lastUpdateUserId"] = this.lastUpdateUserId !== undefined ? this.lastUpdateUserId : <any>null;
        data["lastUpdatedDate"] = this.lastUpdatedDate ? this.lastUpdatedDate.toISOString() : <any>null;
        data["createdByName"] = this.createdByName !== undefined ? this.createdByName : <any>null;
        data["lastUpdateUserName"] = this.lastUpdateUserName !== undefined ? this.lastUpdateUserName : <any>null;
        data["rtuChannelSetpointsSyncTypeId"] = this.rtuChannelSetpointsSyncTypeId !== undefined ? this.rtuChannelSetpointsSyncTypeId : <any>null;
        return data;
    }
}

export class AssetInfoDTO {
    assetId?: string;
    assetTypeId?: AssetDeviceType;
    assetTypeAsText?: string | null;
    assetTitle?: string | null;
    assetDescription?: string | null;
    gasMixerAssetInfo?: GasMixerAssetInfoDTO | null;
    heliumIsoAssetInfo?: HeliumIsoAssetInfoDTO | null;

    init(_data?: any) {
        if (_data) {
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.assetTypeId = _data["assetTypeId"] !== undefined ? _data["assetTypeId"] : <any>null;
            this.assetTypeAsText = _data["assetTypeAsText"] !== undefined ? _data["assetTypeAsText"] : <any>null;
            this.assetTitle = _data["assetTitle"] !== undefined ? _data["assetTitle"] : <any>null;
            this.assetDescription = _data["assetDescription"] !== undefined ? _data["assetDescription"] : <any>null;
            this.gasMixerAssetInfo = _data["gasMixerAssetInfo"] ? GasMixerAssetInfoDTO.fromJS(_data["gasMixerAssetInfo"]) : <any>null;
            this.heliumIsoAssetInfo = _data["heliumIsoAssetInfo"] ? HeliumIsoAssetInfoDTO.fromJS(_data["heliumIsoAssetInfo"]) : <any>null;
        }
    }

    static fromJS(data: any): AssetInfoDTO {
        data = typeof data === 'object' ? data : {};
        let result = new AssetInfoDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["assetTypeId"] = this.assetTypeId !== undefined ? this.assetTypeId : <any>null;
        data["assetTypeAsText"] = this.assetTypeAsText !== undefined ? this.assetTypeAsText : <any>null;
        data["assetTitle"] = this.assetTitle !== undefined ? this.assetTitle : <any>null;
        data["assetDescription"] = this.assetDescription !== undefined ? this.assetDescription : <any>null;
        data["gasMixerAssetInfo"] = this.gasMixerAssetInfo ? this.gasMixerAssetInfo.toJSON() : <any>null;
        data["heliumIsoAssetInfo"] = this.heliumIsoAssetInfo ? this.heliumIsoAssetInfo.toJSON() : <any>null;
        return data;
    }
}

export enum AssetDeviceType {
    None = 0,
    Tank = 1,
    HeliumIsoContainer = 2,
    Vaporizer = 3,
    PressurePump = 4,
    CompositeAsset = 5,
    FlowMeter = 6,
    GasMixer = 7,
    Plant = 8,
    TubeTrailer = 9,
    Pipeline = 10,
    HVAC = 11,
    CFM = 12,
    EM = 13,
    MkLine = 14,
    FoodFreezer = 15,
}

export class GasMixerAssetInfoDTO {
    gasMixerDataChannelTypeId?: GasMixerCategory;
    gasMixerDataChannelTypeAsText?: string | null;

    init(_data?: any) {
        if (_data) {
            this.gasMixerDataChannelTypeId = _data["gasMixerDataChannelTypeId"] !== undefined ? _data["gasMixerDataChannelTypeId"] : <any>null;
            this.gasMixerDataChannelTypeAsText = _data["gasMixerDataChannelTypeAsText"] !== undefined ? _data["gasMixerDataChannelTypeAsText"] : <any>null;
        }
    }

    static fromJS(data: any): GasMixerAssetInfoDTO {
        data = typeof data === 'object' ? data : {};
        let result = new GasMixerAssetInfoDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["gasMixerDataChannelTypeId"] = this.gasMixerDataChannelTypeId !== undefined ? this.gasMixerDataChannelTypeId : <any>null;
        data["gasMixerDataChannelTypeAsText"] = this.gasMixerDataChannelTypeAsText !== undefined ? this.gasMixerDataChannelTypeAsText : <any>null;
        return data;
    }
}

export enum GasMixerCategory {
    None = 0,
    Gas1Pressure = 1,
    Gas2Pressure = 2,
    Gas3Pressure = 3,
    DigitalGasInValve = 4,
    MixingTankPressure = 5,
    GasOutAnalyzer = 6,
    MixerOutputPressure = 7,
}

export class HeliumIsoAssetInfoDTO {
    isDesignCurveEnabled?: boolean;
    designCurveTypeAsText?: string | null;

    init(_data?: any) {
        if (_data) {
            this.isDesignCurveEnabled = _data["isDesignCurveEnabled"] !== undefined ? _data["isDesignCurveEnabled"] : <any>null;
            this.designCurveTypeAsText = _data["designCurveTypeAsText"] !== undefined ? _data["designCurveTypeAsText"] : <any>null;
        }
    }

    static fromJS(data: any): HeliumIsoAssetInfoDTO {
        data = typeof data === 'object' ? data : {};
        let result = new HeliumIsoAssetInfoDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isDesignCurveEnabled"] = this.isDesignCurveEnabled !== undefined ? this.isDesignCurveEnabled : <any>null;
        data["designCurveTypeAsText"] = this.designCurveTypeAsText !== undefined ? this.designCurveTypeAsText : <any>null;
        return data;
    }
}

export class DataSourceTypeInfoDTO {
    dataChannelDataSourceTypeId?: DataChannelDataSource;
    rtuDataSourceTypeInfo?: RtuDataSourceTypeInfoDTO | null;
    publishedDataSourceTypeInfo?: PublishedDataSourceTypeInfoDTO | null;
    dataChannelDataSourceTypeInfo?: DataChannelDataSourceTypeInfoDTO | null;

    init(_data?: any) {
        if (_data) {
            this.dataChannelDataSourceTypeId = _data["dataChannelDataSourceTypeId"] !== undefined ? _data["dataChannelDataSourceTypeId"] : <any>null;
            this.rtuDataSourceTypeInfo = _data["rtuDataSourceTypeInfo"] ? RtuDataSourceTypeInfoDTO.fromJS(_data["rtuDataSourceTypeInfo"]) : <any>null;
            this.publishedDataSourceTypeInfo = _data["publishedDataSourceTypeInfo"] ? PublishedDataSourceTypeInfoDTO.fromJS(_data["publishedDataSourceTypeInfo"]) : <any>null;
            this.dataChannelDataSourceTypeInfo = _data["dataChannelDataSourceTypeInfo"] ? DataChannelDataSourceTypeInfoDTO.fromJS(_data["dataChannelDataSourceTypeInfo"]) : <any>null;
        }
    }

    static fromJS(data: any): DataSourceTypeInfoDTO {
        data = typeof data === 'object' ? data : {};
        let result = new DataSourceTypeInfoDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelDataSourceTypeId"] = this.dataChannelDataSourceTypeId !== undefined ? this.dataChannelDataSourceTypeId : <any>null;
        data["rtuDataSourceTypeInfo"] = this.rtuDataSourceTypeInfo ? this.rtuDataSourceTypeInfo.toJSON() : <any>null;
        data["publishedDataSourceTypeInfo"] = this.publishedDataSourceTypeInfo ? this.publishedDataSourceTypeInfo.toJSON() : <any>null;
        data["dataChannelDataSourceTypeInfo"] = this.dataChannelDataSourceTypeInfo ? this.dataChannelDataSourceTypeInfo.toJSON() : <any>null;
        return data;
    }
}

export class RtuDataSourceTypeInfoDTO {
    rtuId?: string;
    rtuDeviceId?: string | null;
    rtuChannelId?: string;
    rtuChannelNumber?: string | null;
    rtuPriorityLevelTypeId?: RtuPriorityLevelTypeEnum;
    rtuPriorityLevelTypeAsText?: string | null;

    init(_data?: any) {
        if (_data) {
            this.rtuId = _data["rtuId"] !== undefined ? _data["rtuId"] : <any>null;
            this.rtuDeviceId = _data["rtuDeviceId"] !== undefined ? _data["rtuDeviceId"] : <any>null;
            this.rtuChannelId = _data["rtuChannelId"] !== undefined ? _data["rtuChannelId"] : <any>null;
            this.rtuChannelNumber = _data["rtuChannelNumber"] !== undefined ? _data["rtuChannelNumber"] : <any>null;
            this.rtuPriorityLevelTypeId = _data["rtuPriorityLevelTypeId"] !== undefined ? _data["rtuPriorityLevelTypeId"] : <any>null;
            this.rtuPriorityLevelTypeAsText = _data["rtuPriorityLevelTypeAsText"] !== undefined ? _data["rtuPriorityLevelTypeAsText"] : <any>null;
        }
    }

    static fromJS(data: any): RtuDataSourceTypeInfoDTO {
        data = typeof data === 'object' ? data : {};
        let result = new RtuDataSourceTypeInfoDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rtuId"] = this.rtuId !== undefined ? this.rtuId : <any>null;
        data["rtuDeviceId"] = this.rtuDeviceId !== undefined ? this.rtuDeviceId : <any>null;
        data["rtuChannelId"] = this.rtuChannelId !== undefined ? this.rtuChannelId : <any>null;
        data["rtuChannelNumber"] = this.rtuChannelNumber !== undefined ? this.rtuChannelNumber : <any>null;
        data["rtuPriorityLevelTypeId"] = this.rtuPriorityLevelTypeId !== undefined ? this.rtuPriorityLevelTypeId : <any>null;
        data["rtuPriorityLevelTypeAsText"] = this.rtuPriorityLevelTypeAsText !== undefined ? this.rtuPriorityLevelTypeAsText : <any>null;
        return data;
    }
}

export enum RtuPriorityLevelTypeEnum {
    Secondary = 0,
    Master = 1,
}

export class PublishedDataSourceTypeInfoDTO {
    publishedDataChannelSourceDataChannelId?: string;
    publishedDataChannelSourceDomainId?: string;
    publishedDataChannelSourceDomainName?: string | null;
    publishedCommentsId?: number;
    publishedComments?: string | null;

    init(_data?: any) {
        if (_data) {
            this.publishedDataChannelSourceDataChannelId = _data["publishedDataChannelSourceDataChannelId"] !== undefined ? _data["publishedDataChannelSourceDataChannelId"] : <any>null;
            this.publishedDataChannelSourceDomainId = _data["publishedDataChannelSourceDomainId"] !== undefined ? _data["publishedDataChannelSourceDomainId"] : <any>null;
            this.publishedDataChannelSourceDomainName = _data["publishedDataChannelSourceDomainName"] !== undefined ? _data["publishedDataChannelSourceDomainName"] : <any>null;
            this.publishedCommentsId = _data["publishedCommentsId"] !== undefined ? _data["publishedCommentsId"] : <any>null;
            this.publishedComments = _data["publishedComments"] !== undefined ? _data["publishedComments"] : <any>null;
        }
    }

    static fromJS(data: any): PublishedDataSourceTypeInfoDTO {
        data = typeof data === 'object' ? data : {};
        let result = new PublishedDataSourceTypeInfoDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["publishedDataChannelSourceDataChannelId"] = this.publishedDataChannelSourceDataChannelId !== undefined ? this.publishedDataChannelSourceDataChannelId : <any>null;
        data["publishedDataChannelSourceDomainId"] = this.publishedDataChannelSourceDomainId !== undefined ? this.publishedDataChannelSourceDomainId : <any>null;
        data["publishedDataChannelSourceDomainName"] = this.publishedDataChannelSourceDomainName !== undefined ? this.publishedDataChannelSourceDomainName : <any>null;
        data["publishedCommentsId"] = this.publishedCommentsId !== undefined ? this.publishedCommentsId : <any>null;
        data["publishedComments"] = this.publishedComments !== undefined ? this.publishedComments : <any>null;
        return data;
    }
}

export class DataChannelDataSourceTypeInfoDTO {
    isVolumetric?: boolean;
    components?: DataChannelComponentDTO[] | null;

    init(_data?: any) {
        if (_data) {
            this.isVolumetric = _data["isVolumetric"] !== undefined ? _data["isVolumetric"] : <any>null;
            if (Array.isArray(_data["components"])) {
                this.components = [] as any;
                for (let item of _data["components"])
                    this.components!.push(DataChannelComponentDTO.fromJS(item));
            }
            else {
                this.components = <any>null;
            }
        }
    }

    static fromJS(data: any): DataChannelDataSourceTypeInfoDTO {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelDataSourceTypeInfoDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isVolumetric"] = this.isVolumetric !== undefined ? this.isVolumetric : <any>null;
        if (Array.isArray(this.components)) {
            data["components"] = [];
            for (let item of this.components)
                data["components"].push(item.toJSON());
        }
        return data;
    }
}

export class DataChannelComponentDTO {
    dataChannelId?: string;
    description?: string | null;

    init(_data?: any) {
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
        }
    }

    static fromJS(data: any): DataChannelComponentDTO {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelComponentDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        return data;
    }
}

export class SensorCalibrationInfoDTO {
    scalingModeId?: ScalingModeTypeEnum;
    scalingModeAsText?: string | null;
    scaledUnitsId?: UnitTypeEnum | null;
    scaledUnitsAsText?: string | null;
    scaledMin?: number | null;
    scaledMax?: number | null;
    prescaledSensorCalibrationInfo?: PrescaledSensorCalibrationInfoDTO | null;
    linearSensorCalibrationInfo?: LinearSensorCalibrationInfoDTO | null;
    mappedSensorCalibrationInfo?: MappedSensorCalibrationInfoDTO | null;

    init(_data?: any) {
        if (_data) {
            this.scalingModeId = _data["scalingModeId"] !== undefined ? _data["scalingModeId"] : <any>null;
            this.scalingModeAsText = _data["scalingModeAsText"] !== undefined ? _data["scalingModeAsText"] : <any>null;
            this.scaledUnitsId = _data["scaledUnitsId"] !== undefined ? _data["scaledUnitsId"] : <any>null;
            this.scaledUnitsAsText = _data["scaledUnitsAsText"] !== undefined ? _data["scaledUnitsAsText"] : <any>null;
            this.scaledMin = _data["scaledMin"] !== undefined ? _data["scaledMin"] : <any>null;
            this.scaledMax = _data["scaledMax"] !== undefined ? _data["scaledMax"] : <any>null;
            this.prescaledSensorCalibrationInfo = _data["prescaledSensorCalibrationInfo"] ? PrescaledSensorCalibrationInfoDTO.fromJS(_data["prescaledSensorCalibrationInfo"]) : <any>null;
            this.linearSensorCalibrationInfo = _data["linearSensorCalibrationInfo"] ? LinearSensorCalibrationInfoDTO.fromJS(_data["linearSensorCalibrationInfo"]) : <any>null;
            this.mappedSensorCalibrationInfo = _data["mappedSensorCalibrationInfo"] ? MappedSensorCalibrationInfoDTO.fromJS(_data["mappedSensorCalibrationInfo"]) : <any>null;
        }
    }

    static fromJS(data: any): SensorCalibrationInfoDTO {
        data = typeof data === 'object' ? data : {};
        let result = new SensorCalibrationInfoDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["scalingModeId"] = this.scalingModeId !== undefined ? this.scalingModeId : <any>null;
        data["scalingModeAsText"] = this.scalingModeAsText !== undefined ? this.scalingModeAsText : <any>null;
        data["scaledUnitsId"] = this.scaledUnitsId !== undefined ? this.scaledUnitsId : <any>null;
        data["scaledUnitsAsText"] = this.scaledUnitsAsText !== undefined ? this.scaledUnitsAsText : <any>null;
        data["scaledMin"] = this.scaledMin !== undefined ? this.scaledMin : <any>null;
        data["scaledMax"] = this.scaledMax !== undefined ? this.scaledMax : <any>null;
        data["prescaledSensorCalibrationInfo"] = this.prescaledSensorCalibrationInfo ? this.prescaledSensorCalibrationInfo.toJSON() : <any>null;
        data["linearSensorCalibrationInfo"] = this.linearSensorCalibrationInfo ? this.linearSensorCalibrationInfo.toJSON() : <any>null;
        data["mappedSensorCalibrationInfo"] = this.mappedSensorCalibrationInfo ? this.mappedSensorCalibrationInfo.toJSON() : <any>null;
        return data;
    }
}

export enum ScalingModeTypeEnum {
    NotSet = 1,
    Linear = 2,
    Ratio = 3,
    Mapped = 4,
    Prescaled = 5,
}

export class PrescaledSensorCalibrationInfoDTO {
    limitsRawParams?: LimitsRawParamsDTO | null;

    init(_data?: any) {
        if (_data) {
            this.limitsRawParams = _data["limitsRawParams"] ? LimitsRawParamsDTO.fromJS(_data["limitsRawParams"]) : <any>null;
        }
    }

    static fromJS(data: any): PrescaledSensorCalibrationInfoDTO {
        data = typeof data === 'object' ? data : {};
        let result = new PrescaledSensorCalibrationInfoDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["limitsRawParams"] = this.limitsRawParams ? this.limitsRawParams.toJSON() : <any>null;
        return data;
    }
}

export class LimitsRawParamsDTO {
    useLimits?: boolean;
    rawUnitsAtUnderRange?: number | null;
    rawUnitsAtOverRange?: number | null;

    init(_data?: any) {
        if (_data) {
            this.useLimits = _data["useLimits"] !== undefined ? _data["useLimits"] : <any>null;
            this.rawUnitsAtUnderRange = _data["rawUnitsAtUnderRange"] !== undefined ? _data["rawUnitsAtUnderRange"] : <any>null;
            this.rawUnitsAtOverRange = _data["rawUnitsAtOverRange"] !== undefined ? _data["rawUnitsAtOverRange"] : <any>null;
        }
    }

    static fromJS(data: any): LimitsRawParamsDTO {
        data = typeof data === 'object' ? data : {};
        let result = new LimitsRawParamsDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["useLimits"] = this.useLimits !== undefined ? this.useLimits : <any>null;
        data["rawUnitsAtUnderRange"] = this.rawUnitsAtUnderRange !== undefined ? this.rawUnitsAtUnderRange : <any>null;
        data["rawUnitsAtOverRange"] = this.rawUnitsAtOverRange !== undefined ? this.rawUnitsAtOverRange : <any>null;
        return data;
    }
}

export class LinearSensorCalibrationInfoDTO {
    prescalingRawParams?: PrescalingRawParamsDTO | null;
    limitsRawParams?: LimitsRawParamsDTO | null;
    rawParams?: RawParamsDTO | null;
    sensorPosition?: number | null;

    init(_data?: any) {
        if (_data) {
            this.prescalingRawParams = _data["prescalingRawParams"] ? PrescalingRawParamsDTO.fromJS(_data["prescalingRawParams"]) : <any>null;
            this.limitsRawParams = _data["limitsRawParams"] ? LimitsRawParamsDTO.fromJS(_data["limitsRawParams"]) : <any>null;
            this.rawParams = _data["rawParams"] ? RawParamsDTO.fromJS(_data["rawParams"]) : <any>null;
            this.sensorPosition = _data["sensorPosition"] !== undefined ? _data["sensorPosition"] : <any>null;
        }
    }

    static fromJS(data: any): LinearSensorCalibrationInfoDTO {
        data = typeof data === 'object' ? data : {};
        let result = new LinearSensorCalibrationInfoDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["prescalingRawParams"] = this.prescalingRawParams ? this.prescalingRawParams.toJSON() : <any>null;
        data["limitsRawParams"] = this.limitsRawParams ? this.limitsRawParams.toJSON() : <any>null;
        data["rawParams"] = this.rawParams ? this.rawParams.toJSON() : <any>null;
        data["sensorPosition"] = this.sensorPosition !== undefined ? this.sensorPosition : <any>null;
        return data;
    }
}

export class PrescalingRawParamsDTO {
    usePrescaling?: boolean;
    rawUnitsAtZero?: number | null;
    rawUnitsAtFullScale?: number | null;

    init(_data?: any) {
        if (_data) {
            this.usePrescaling = _data["usePrescaling"] !== undefined ? _data["usePrescaling"] : <any>null;
            this.rawUnitsAtZero = _data["rawUnitsAtZero"] !== undefined ? _data["rawUnitsAtZero"] : <any>null;
            this.rawUnitsAtFullScale = _data["rawUnitsAtFullScale"] !== undefined ? _data["rawUnitsAtFullScale"] : <any>null;
        }
    }

    static fromJS(data: any): PrescalingRawParamsDTO {
        data = typeof data === 'object' ? data : {};
        let result = new PrescalingRawParamsDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["usePrescaling"] = this.usePrescaling !== undefined ? this.usePrescaling : <any>null;
        data["rawUnitsAtZero"] = this.rawUnitsAtZero !== undefined ? this.rawUnitsAtZero : <any>null;
        data["rawUnitsAtFullScale"] = this.rawUnitsAtFullScale !== undefined ? this.rawUnitsAtFullScale : <any>null;
        return data;
    }
}

export class RawParamsDTO {
    rawUnits?: number | null;
    rawUnitsAsText?: string | null;
    rawUnitsAtScaleMin?: number | null;
    rawUnitsAtScaleMax?: number | null;
    isRawDataInverted?: boolean;

    init(_data?: any) {
        if (_data) {
            this.rawUnits = _data["rawUnits"] !== undefined ? _data["rawUnits"] : <any>null;
            this.rawUnitsAsText = _data["rawUnitsAsText"] !== undefined ? _data["rawUnitsAsText"] : <any>null;
            this.rawUnitsAtScaleMin = _data["rawUnitsAtScaleMin"] !== undefined ? _data["rawUnitsAtScaleMin"] : <any>null;
            this.rawUnitsAtScaleMax = _data["rawUnitsAtScaleMax"] !== undefined ? _data["rawUnitsAtScaleMax"] : <any>null;
            this.isRawDataInverted = _data["isRawDataInverted"] !== undefined ? _data["isRawDataInverted"] : <any>null;
        }
    }

    static fromJS(data: any): RawParamsDTO {
        data = typeof data === 'object' ? data : {};
        let result = new RawParamsDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rawUnits"] = this.rawUnits !== undefined ? this.rawUnits : <any>null;
        data["rawUnitsAsText"] = this.rawUnitsAsText !== undefined ? this.rawUnitsAsText : <any>null;
        data["rawUnitsAtScaleMin"] = this.rawUnitsAtScaleMin !== undefined ? this.rawUnitsAtScaleMin : <any>null;
        data["rawUnitsAtScaleMax"] = this.rawUnitsAtScaleMax !== undefined ? this.rawUnitsAtScaleMax : <any>null;
        data["isRawDataInverted"] = this.isRawDataInverted !== undefined ? this.isRawDataInverted : <any>null;
        return data;
    }
}

export class MappedSensorCalibrationInfoDTO {
    prescalingRawParams?: PrescalingRawParamsDTO | null;
    scalingdMap?: ValueTupleOfDoubleAndDouble[] | null;
    rawParams?: RawParamsDTO | null;

    init(_data?: any) {
        if (_data) {
            this.prescalingRawParams = _data["prescalingRawParams"] ? PrescalingRawParamsDTO.fromJS(_data["prescalingRawParams"]) : <any>null;
            if (Array.isArray(_data["scalingdMap"])) {
                this.scalingdMap = [] as any;
                for (let item of _data["scalingdMap"])
                    this.scalingdMap!.push(ValueTupleOfDoubleAndDouble.fromJS(item));
            }
            else {
                this.scalingdMap = <any>null;
            }
            this.rawParams = _data["rawParams"] ? RawParamsDTO.fromJS(_data["rawParams"]) : <any>null;
        }
    }

    static fromJS(data: any): MappedSensorCalibrationInfoDTO {
        data = typeof data === 'object' ? data : {};
        let result = new MappedSensorCalibrationInfoDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["prescalingRawParams"] = this.prescalingRawParams ? this.prescalingRawParams.toJSON() : <any>null;
        if (Array.isArray(this.scalingdMap)) {
            data["scalingdMap"] = [];
            for (let item of this.scalingdMap)
                data["scalingdMap"].push(item.toJSON());
        }
        data["rawParams"] = this.rawParams ? this.rawParams.toJSON() : <any>null;
        return data;
    }
}

export class ValueTupleOfDoubleAndDouble {
    item1?: number;
    item2?: number;

    init(_data?: any) {
        if (_data) {
            this.item1 = _data["item1"] !== undefined ? _data["item1"] : <any>null;
            this.item2 = _data["item2"] !== undefined ? _data["item2"] : <any>null;
        }
    }

    static fromJS(data: any): ValueTupleOfDoubleAndDouble {
        data = typeof data === 'object' ? data : {};
        let result = new ValueTupleOfDoubleAndDouble();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item1"] = this.item1 !== undefined ? this.item1 : <any>null;
        data["item2"] = this.item2 !== undefined ? this.item2 : <any>null;
        return data;
    }
}

export class DigitalInputSensorCalibrationInfoDTO {
    isRawDataInverted?: boolean;
    digitalStateProfiles?: DigitalStateProfileDTO[] | null;

    init(_data?: any) {
        if (_data) {
            this.isRawDataInverted = _data["isRawDataInverted"] !== undefined ? _data["isRawDataInverted"] : <any>null;
            if (Array.isArray(_data["digitalStateProfiles"])) {
                this.digitalStateProfiles = [] as any;
                for (let item of _data["digitalStateProfiles"])
                    this.digitalStateProfiles!.push(DigitalStateProfileDTO.fromJS(item));
            }
            else {
                this.digitalStateProfiles = <any>null;
            }
        }
    }

    static fromJS(data: any): DigitalInputSensorCalibrationInfoDTO {
        data = typeof data === 'object' ? data : {};
        let result = new DigitalInputSensorCalibrationInfoDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isRawDataInverted"] = this.isRawDataInverted !== undefined ? this.isRawDataInverted : <any>null;
        if (Array.isArray(this.digitalStateProfiles)) {
            data["digitalStateProfiles"] = [];
            for (let item of this.digitalStateProfiles)
                data["digitalStateProfiles"].push(item.toJSON());
        }
        return data;
    }
}

export class DigitalStateProfileDTO {
    index?: number;
    isConfigured?: boolean;
    text?: string | null;
    value?: number;

    init(_data?: any) {
        if (_data) {
            this.index = _data["index"] !== undefined ? _data["index"] : <any>null;
            this.isConfigured = _data["isConfigured"] !== undefined ? _data["isConfigured"] : <any>null;
            this.text = _data["text"] !== undefined ? _data["text"] : <any>null;
            this.value = _data["value"] !== undefined ? _data["value"] : <any>null;
        }
    }

    static fromJS(data: any): DigitalStateProfileDTO {
        data = typeof data === 'object' ? data : {};
        let result = new DigitalStateProfileDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["index"] = this.index !== undefined ? this.index : <any>null;
        data["isConfigured"] = this.isConfigured !== undefined ? this.isConfigured : <any>null;
        data["text"] = this.text !== undefined ? this.text : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        return data;
    }
}

export class TankSetupInfoDTO {
    tankTypeInfo?: TankTypeInfoDTO | null;
    unitConversionModeId?: UnitConversionModeEnum;
    unitConversionModeAsText?: string | null;
    basicTankSetupInfo?: BasicTankSetupInfoDTO | null;
    simplifiedTankSetupInfo?: SimplifiedTankSetupInfoDTO | null;
    volumetricTankSetupInfo?: VolumetricTankSetupInfoDTO | null;
    graphMin?: number | null;
    graphMax?: number | null;
    graphMinInScaled?: number | null;
    graphMaxInScaled?: number | null;
    productId?: string | null;
    productName?: string | null;

    init(_data?: any) {
        if (_data) {
            this.tankTypeInfo = _data["tankTypeInfo"] ? TankTypeInfoDTO.fromJS(_data["tankTypeInfo"]) : <any>null;
            this.unitConversionModeId = _data["unitConversionModeId"] !== undefined ? _data["unitConversionModeId"] : <any>null;
            this.unitConversionModeAsText = _data["unitConversionModeAsText"] !== undefined ? _data["unitConversionModeAsText"] : <any>null;
            this.basicTankSetupInfo = _data["basicTankSetupInfo"] ? BasicTankSetupInfoDTO.fromJS(_data["basicTankSetupInfo"]) : <any>null;
            this.simplifiedTankSetupInfo = _data["simplifiedTankSetupInfo"] ? SimplifiedTankSetupInfoDTO.fromJS(_data["simplifiedTankSetupInfo"]) : <any>null;
            this.volumetricTankSetupInfo = _data["volumetricTankSetupInfo"] ? VolumetricTankSetupInfoDTO.fromJS(_data["volumetricTankSetupInfo"]) : <any>null;
            this.graphMin = _data["graphMin"] !== undefined ? _data["graphMin"] : <any>null;
            this.graphMax = _data["graphMax"] !== undefined ? _data["graphMax"] : <any>null;
            this.graphMinInScaled = _data["graphMinInScaled"] !== undefined ? _data["graphMinInScaled"] : <any>null;
            this.graphMaxInScaled = _data["graphMaxInScaled"] !== undefined ? _data["graphMaxInScaled"] : <any>null;
            this.productId = _data["productId"] !== undefined ? _data["productId"] : <any>null;
            this.productName = _data["productName"] !== undefined ? _data["productName"] : <any>null;
        }
    }

    static fromJS(data: any): TankSetupInfoDTO {
        data = typeof data === 'object' ? data : {};
        let result = new TankSetupInfoDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tankTypeInfo"] = this.tankTypeInfo ? this.tankTypeInfo.toJSON() : <any>null;
        data["unitConversionModeId"] = this.unitConversionModeId !== undefined ? this.unitConversionModeId : <any>null;
        data["unitConversionModeAsText"] = this.unitConversionModeAsText !== undefined ? this.unitConversionModeAsText : <any>null;
        data["basicTankSetupInfo"] = this.basicTankSetupInfo ? this.basicTankSetupInfo.toJSON() : <any>null;
        data["simplifiedTankSetupInfo"] = this.simplifiedTankSetupInfo ? this.simplifiedTankSetupInfo.toJSON() : <any>null;
        data["volumetricTankSetupInfo"] = this.volumetricTankSetupInfo ? this.volumetricTankSetupInfo.toJSON() : <any>null;
        data["graphMin"] = this.graphMin !== undefined ? this.graphMin : <any>null;
        data["graphMax"] = this.graphMax !== undefined ? this.graphMax : <any>null;
        data["graphMinInScaled"] = this.graphMinInScaled !== undefined ? this.graphMinInScaled : <any>null;
        data["graphMaxInScaled"] = this.graphMaxInScaled !== undefined ? this.graphMaxInScaled : <any>null;
        data["productId"] = this.productId !== undefined ? this.productId : <any>null;
        data["productName"] = this.productName !== undefined ? this.productName : <any>null;
        return data;
    }
}

export class TankTypeInfoDTO {
    tankTypeId?: TankTypeEnum;
    tankTypeAsText?: string | null;
    isTankProfileSet?: boolean;
    tankDimensionId?: string | null;
    tankDimensionDescription?: string | null;

    init(_data?: any) {
        if (_data) {
            this.tankTypeId = _data["tankTypeId"] !== undefined ? _data["tankTypeId"] : <any>null;
            this.tankTypeAsText = _data["tankTypeAsText"] !== undefined ? _data["tankTypeAsText"] : <any>null;
            this.isTankProfileSet = _data["isTankProfileSet"] !== undefined ? _data["isTankProfileSet"] : <any>null;
            this.tankDimensionId = _data["tankDimensionId"] !== undefined ? _data["tankDimensionId"] : <any>null;
            this.tankDimensionDescription = _data["tankDimensionDescription"] !== undefined ? _data["tankDimensionDescription"] : <any>null;
        }
    }

    static fromJS(data: any): TankTypeInfoDTO {
        data = typeof data === 'object' ? data : {};
        let result = new TankTypeInfoDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tankTypeId"] = this.tankTypeId !== undefined ? this.tankTypeId : <any>null;
        data["tankTypeAsText"] = this.tankTypeAsText !== undefined ? this.tankTypeAsText : <any>null;
        data["isTankProfileSet"] = this.isTankProfileSet !== undefined ? this.isTankProfileSet : <any>null;
        data["tankDimensionId"] = this.tankDimensionId !== undefined ? this.tankDimensionId : <any>null;
        data["tankDimensionDescription"] = this.tankDimensionDescription !== undefined ? this.tankDimensionDescription : <any>null;
        return data;
    }
}

export enum UnitConversionModeEnum {
    Basic = 0,
    SimplifiedVolumetric = 1,
    Volumetric = 2,
}

export class BasicTankSetupInfoDTO {
    maxProductHeight?: number | null;

    init(_data?: any) {
        if (_data) {
            this.maxProductHeight = _data["maxProductHeight"] !== undefined ? _data["maxProductHeight"] : <any>null;
        }
    }

    static fromJS(data: any): BasicTankSetupInfoDTO {
        data = typeof data === 'object' ? data : {};
        let result = new BasicTankSetupInfoDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxProductHeight"] = this.maxProductHeight !== undefined ? this.maxProductHeight : <any>null;
        return data;
    }
}

export class SimplifiedTankSetupInfoDTO extends BasicTankSetupInfoDTO {
    displayUnitsId?: UnitTypeEnum | null;
    displayUnitsAsText?: string | null;
    displayMaxProductHeight?: number | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.displayUnitsId = _data["displayUnitsId"] !== undefined ? _data["displayUnitsId"] : <any>null;
            this.displayUnitsAsText = _data["displayUnitsAsText"] !== undefined ? _data["displayUnitsAsText"] : <any>null;
            this.displayMaxProductHeight = _data["displayMaxProductHeight"] !== undefined ? _data["displayMaxProductHeight"] : <any>null;
        }
    }

    static fromJS(data: any): SimplifiedTankSetupInfoDTO {
        data = typeof data === 'object' ? data : {};
        let result = new SimplifiedTankSetupInfoDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayUnitsId"] = this.displayUnitsId !== undefined ? this.displayUnitsId : <any>null;
        data["displayUnitsAsText"] = this.displayUnitsAsText !== undefined ? this.displayUnitsAsText : <any>null;
        data["displayMaxProductHeight"] = this.displayMaxProductHeight !== undefined ? this.displayMaxProductHeight : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class VolumetricTankSetupInfoDTO {
    displayUnitsId?: UnitTypeEnum | null;
    displayUnitsAsText?: string | null;
    displayMaxProductHeight?: number | null;
    calculatedMaxProductHeight?: number | null;

    init(_data?: any) {
        if (_data) {
            this.displayUnitsId = _data["displayUnitsId"] !== undefined ? _data["displayUnitsId"] : <any>null;
            this.displayUnitsAsText = _data["displayUnitsAsText"] !== undefined ? _data["displayUnitsAsText"] : <any>null;
            this.displayMaxProductHeight = _data["displayMaxProductHeight"] !== undefined ? _data["displayMaxProductHeight"] : <any>null;
            this.calculatedMaxProductHeight = _data["calculatedMaxProductHeight"] !== undefined ? _data["calculatedMaxProductHeight"] : <any>null;
        }
    }

    static fromJS(data: any): VolumetricTankSetupInfoDTO {
        data = typeof data === 'object' ? data : {};
        let result = new VolumetricTankSetupInfoDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayUnitsId"] = this.displayUnitsId !== undefined ? this.displayUnitsId : <any>null;
        data["displayUnitsAsText"] = this.displayUnitsAsText !== undefined ? this.displayUnitsAsText : <any>null;
        data["displayMaxProductHeight"] = this.displayMaxProductHeight !== undefined ? this.displayMaxProductHeight : <any>null;
        data["calculatedMaxProductHeight"] = this.calculatedMaxProductHeight !== undefined ? this.calculatedMaxProductHeight : <any>null;
        return data;
    }
}

export class DataChannelForecastDeliveryInfoDTO {
    forecastModeTypeId?: ForecastMode | null;
    forecastModeAsText?: string | null;
    showHighLowForecast?: boolean;
    reforecastWhenDeliveryScheduled?: boolean;
    minFillThreshold?: number | null;
    maxTruckCapacity?: number | null;
    displayMinFillThreshold?: number | null;
    displayMaxTruckCapacity?: number | null;
    manualUsageRate?: number | null;

    init(_data?: any) {
        if (_data) {
            this.forecastModeTypeId = _data["forecastModeTypeId"] !== undefined ? _data["forecastModeTypeId"] : <any>null;
            this.forecastModeAsText = _data["forecastModeAsText"] !== undefined ? _data["forecastModeAsText"] : <any>null;
            this.showHighLowForecast = _data["showHighLowForecast"] !== undefined ? _data["showHighLowForecast"] : <any>null;
            this.reforecastWhenDeliveryScheduled = _data["reforecastWhenDeliveryScheduled"] !== undefined ? _data["reforecastWhenDeliveryScheduled"] : <any>null;
            this.minFillThreshold = _data["minFillThreshold"] !== undefined ? _data["minFillThreshold"] : <any>null;
            this.maxTruckCapacity = _data["maxTruckCapacity"] !== undefined ? _data["maxTruckCapacity"] : <any>null;
            this.displayMinFillThreshold = _data["displayMinFillThreshold"] !== undefined ? _data["displayMinFillThreshold"] : <any>null;
            this.displayMaxTruckCapacity = _data["displayMaxTruckCapacity"] !== undefined ? _data["displayMaxTruckCapacity"] : <any>null;
            this.manualUsageRate = _data["manualUsageRate"] !== undefined ? _data["manualUsageRate"] : <any>null;
        }
    }

    static fromJS(data: any): DataChannelForecastDeliveryInfoDTO {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelForecastDeliveryInfoDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["forecastModeTypeId"] = this.forecastModeTypeId !== undefined ? this.forecastModeTypeId : <any>null;
        data["forecastModeAsText"] = this.forecastModeAsText !== undefined ? this.forecastModeAsText : <any>null;
        data["showHighLowForecast"] = this.showHighLowForecast !== undefined ? this.showHighLowForecast : <any>null;
        data["reforecastWhenDeliveryScheduled"] = this.reforecastWhenDeliveryScheduled !== undefined ? this.reforecastWhenDeliveryScheduled : <any>null;
        data["minFillThreshold"] = this.minFillThreshold !== undefined ? this.minFillThreshold : <any>null;
        data["maxTruckCapacity"] = this.maxTruckCapacity !== undefined ? this.maxTruckCapacity : <any>null;
        data["displayMinFillThreshold"] = this.displayMinFillThreshold !== undefined ? this.displayMinFillThreshold : <any>null;
        data["displayMaxTruckCapacity"] = this.displayMaxTruckCapacity !== undefined ? this.displayMaxTruckCapacity : <any>null;
        data["manualUsageRate"] = this.manualUsageRate !== undefined ? this.manualUsageRate : <any>null;
        return data;
    }
}

export class IntegrationInfoDTO {
    domainIntegrationProfileTypeId?: DomainIntegrationProfileId;
    integration?: IntegrationProfileCollectionDTO | null;
    customIntegration1?: CustomIntegration1DTO | null;

    init(_data?: any) {
        if (_data) {
            this.domainIntegrationProfileTypeId = _data["domainIntegrationProfileTypeId"] !== undefined ? _data["domainIntegrationProfileTypeId"] : <any>null;
            this.integration = _data["integration"] ? IntegrationProfileCollectionDTO.fromJS(_data["integration"]) : <any>null;
            this.customIntegration1 = _data["customIntegration1"] ? CustomIntegration1DTO.fromJS(_data["customIntegration1"]) : <any>null;
        }
    }

    static fromJS(data: any): IntegrationInfoDTO {
        data = typeof data === 'object' ? data : {};
        let result = new IntegrationInfoDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["domainIntegrationProfileTypeId"] = this.domainIntegrationProfileTypeId !== undefined ? this.domainIntegrationProfileTypeId : <any>null;
        data["integration"] = this.integration ? this.integration.toJSON() : <any>null;
        data["customIntegration1"] = this.customIntegration1 ? this.customIntegration1.toJSON() : <any>null;
        return data;
    }
}

export enum DomainIntegrationProfileId {
    Default = 0,
    APCI = 1,
}

export class IntegrationProfileCollectionDTO {
    integrationProfile1?: IntegrationProfileDTO | null;
    integrationProfile2?: IntegrationProfileDTO | null;

    init(_data?: any) {
        if (_data) {
            this.integrationProfile1 = _data["integrationProfile1"] ? IntegrationProfileDTO.fromJS(_data["integrationProfile1"]) : <any>null;
            this.integrationProfile2 = _data["integrationProfile2"] ? IntegrationProfileDTO.fromJS(_data["integrationProfile2"]) : <any>null;
        }
    }

    static fromJS(data: any): IntegrationProfileCollectionDTO {
        data = typeof data === 'object' ? data : {};
        let result = new IntegrationProfileCollectionDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["integrationProfile1"] = this.integrationProfile1 ? this.integrationProfile1.toJSON() : <any>null;
        data["integrationProfile2"] = this.integrationProfile2 ? this.integrationProfile2.toJSON() : <any>null;
        return data;
    }
}

export class IntegrationProfileDTO {
    isIntegrationConfigured?: boolean;
    domainId?: string;
    domainName?: string | null;
    isIdAutoGenerated?: boolean;
    integrationId?: string | null;
    isIntegrationEnabled?: boolean;
    formatTypeId?: FtpFileFormatCategory;
    formatTypeAsText?: string | null;

    init(_data?: any) {
        if (_data) {
            this.isIntegrationConfigured = _data["isIntegrationConfigured"] !== undefined ? _data["isIntegrationConfigured"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.domainName = _data["domainName"] !== undefined ? _data["domainName"] : <any>null;
            this.isIdAutoGenerated = _data["isIdAutoGenerated"] !== undefined ? _data["isIdAutoGenerated"] : <any>null;
            this.integrationId = _data["integrationId"] !== undefined ? _data["integrationId"] : <any>null;
            this.isIntegrationEnabled = _data["isIntegrationEnabled"] !== undefined ? _data["isIntegrationEnabled"] : <any>null;
            this.formatTypeId = _data["formatTypeId"] !== undefined ? _data["formatTypeId"] : <any>null;
            this.formatTypeAsText = _data["formatTypeAsText"] !== undefined ? _data["formatTypeAsText"] : <any>null;
        }
    }

    static fromJS(data: any): IntegrationProfileDTO {
        data = typeof data === 'object' ? data : {};
        let result = new IntegrationProfileDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isIntegrationConfigured"] = this.isIntegrationConfigured !== undefined ? this.isIntegrationConfigured : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["domainName"] = this.domainName !== undefined ? this.domainName : <any>null;
        data["isIdAutoGenerated"] = this.isIdAutoGenerated !== undefined ? this.isIdAutoGenerated : <any>null;
        data["integrationId"] = this.integrationId !== undefined ? this.integrationId : <any>null;
        data["isIntegrationEnabled"] = this.isIntegrationEnabled !== undefined ? this.isIntegrationEnabled : <any>null;
        data["formatTypeId"] = this.formatTypeId !== undefined ? this.formatTypeId : <any>null;
        data["formatTypeAsText"] = this.formatTypeAsText !== undefined ? this.formatTypeAsText : <any>null;
        return data;
    }
}

export class CustomIntegration1DTO {
    tankFunctionTypeId?: ApciTankFunctionMode | null;
    tankFunctionTypeAsText?: string | null;
    airProductsUnitTypeId?: ApciUnitOfMeasure | null;
    airProductsUnitTypeAsText?: string | null;
    shipTo?: string | null;
    customerName?: string | null;
    customerAddress1?: string | null;
    customerAddress2?: string | null;
    customerAddress3?: string | null;
    isSendEnabled?: boolean;

    init(_data?: any) {
        if (_data) {
            this.tankFunctionTypeId = _data["tankFunctionTypeId"] !== undefined ? _data["tankFunctionTypeId"] : <any>null;
            this.tankFunctionTypeAsText = _data["tankFunctionTypeAsText"] !== undefined ? _data["tankFunctionTypeAsText"] : <any>null;
            this.airProductsUnitTypeId = _data["airProductsUnitTypeId"] !== undefined ? _data["airProductsUnitTypeId"] : <any>null;
            this.airProductsUnitTypeAsText = _data["airProductsUnitTypeAsText"] !== undefined ? _data["airProductsUnitTypeAsText"] : <any>null;
            this.shipTo = _data["shipTo"] !== undefined ? _data["shipTo"] : <any>null;
            this.customerName = _data["customerName"] !== undefined ? _data["customerName"] : <any>null;
            this.customerAddress1 = _data["customerAddress1"] !== undefined ? _data["customerAddress1"] : <any>null;
            this.customerAddress2 = _data["customerAddress2"] !== undefined ? _data["customerAddress2"] : <any>null;
            this.customerAddress3 = _data["customerAddress3"] !== undefined ? _data["customerAddress3"] : <any>null;
            this.isSendEnabled = _data["isSendEnabled"] !== undefined ? _data["isSendEnabled"] : <any>null;
        }
    }

    static fromJS(data: any): CustomIntegration1DTO {
        data = typeof data === 'object' ? data : {};
        let result = new CustomIntegration1DTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tankFunctionTypeId"] = this.tankFunctionTypeId !== undefined ? this.tankFunctionTypeId : <any>null;
        data["tankFunctionTypeAsText"] = this.tankFunctionTypeAsText !== undefined ? this.tankFunctionTypeAsText : <any>null;
        data["airProductsUnitTypeId"] = this.airProductsUnitTypeId !== undefined ? this.airProductsUnitTypeId : <any>null;
        data["airProductsUnitTypeAsText"] = this.airProductsUnitTypeAsText !== undefined ? this.airProductsUnitTypeAsText : <any>null;
        data["shipTo"] = this.shipTo !== undefined ? this.shipTo : <any>null;
        data["customerName"] = this.customerName !== undefined ? this.customerName : <any>null;
        data["customerAddress1"] = this.customerAddress1 !== undefined ? this.customerAddress1 : <any>null;
        data["customerAddress2"] = this.customerAddress2 !== undefined ? this.customerAddress2 : <any>null;
        data["customerAddress3"] = this.customerAddress3 !== undefined ? this.customerAddress3 : <any>null;
        data["isSendEnabled"] = this.isSendEnabled !== undefined ? this.isSendEnabled : <any>null;
        return data;
    }
}

export enum ApciTankFunctionMode {
    Main = 0,
    Reserve1 = 1,
    Reserve2 = 2,
    Reserve3 = 3,
    Reserve4 = 4,
    Reserve5 = 5,
    Reserve6 = 6,
    Reserve7 = 7,
    Reserve8 = 8,
    Reserve9 = 9,
}

export enum ApciUnitOfMeasure {
    WaterColumnMillimeters = 1000,
    WaterColumnCentimeters = 1001,
    WaterColumnMeters = 1002,
    HydrogenMillimeters = 1003,
    HydrogenCentimeters = 1004,
    HydrogenMeters = 1005,
    WaterColumnInches = 1010,
    HydrogenInches = 1011,
    Millimeters = 1020,
    Centimeters = 1021,
    Meters = 1022,
    Inches = 1030,
    Liters = 1040,
    USGallons = 1050,
    Kilograms = 1060,
    Pounds = 1070,
    StandardCubicFoot = 1090,
    PercentageFull = 1100,
    GaugePressureBarg = 2001,
    GaugePressurePSI = 2002,
    Volt = 2003,
    Amp = 2004,
    Counts = 2005,
    DegreeCelcius = 2006,
    DegreeFahrenheit = 2007,
    DegreeKelvin = 2008,
    Hours = 2009,
    KilogramPerHour = 2010,
    KilogramMin = 2011,
    KiloWatt = 2012,
    KiloWattHour = 2013,
    MilliAmp = 2014,
    MilliBar = 2015,
    Minute = 2016,
    NormalCubicMeter = 2017,
    NormalCubicMeterPerHr = 2018,
    Ohms = 2019,
    PartPerMillion = 2020,
    PartPerMillionO2 = 2021,
    GaugePressurePSIAbsolute = 2022,
    StandardCubicFootPerHr = 2023,
    Tonne = 2024,
    Second = 2025,
}

export enum RtuChannelSetpointsSyncTypeEnum {
    Disabled = 0,
    AutoSync = 1,
    OutOfSync = 2,
}

export class DataChannelGeneralInfoDTO {
    dataChannelId?: string;
    dataChannelDescription?: string | null;
    dataChannelTemplateId?: string;
    serialNumber?: string | null;
    dataChannelDataSourceTypeId?: DataChannelDataSource;
    rtuId?: string | null;
    rtuChannelId?: string | null;
    rtuPriorityLevelTypeId?: RtuPriorityLevelTypeEnum;
    publishedDataChannelSourceDataChannelId?: string | null;
    publishedDataChannelSourceDomainId?: string | null;
    publishedCommentsId?: number | null;

    init(_data?: any) {
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.dataChannelDescription = _data["dataChannelDescription"] !== undefined ? _data["dataChannelDescription"] : <any>null;
            this.dataChannelTemplateId = _data["dataChannelTemplateId"] !== undefined ? _data["dataChannelTemplateId"] : <any>null;
            this.serialNumber = _data["serialNumber"] !== undefined ? _data["serialNumber"] : <any>null;
            this.dataChannelDataSourceTypeId = _data["dataChannelDataSourceTypeId"] !== undefined ? _data["dataChannelDataSourceTypeId"] : <any>null;
            this.rtuId = _data["rtuId"] !== undefined ? _data["rtuId"] : <any>null;
            this.rtuChannelId = _data["rtuChannelId"] !== undefined ? _data["rtuChannelId"] : <any>null;
            this.rtuPriorityLevelTypeId = _data["rtuPriorityLevelTypeId"] !== undefined ? _data["rtuPriorityLevelTypeId"] : <any>null;
            this.publishedDataChannelSourceDataChannelId = _data["publishedDataChannelSourceDataChannelId"] !== undefined ? _data["publishedDataChannelSourceDataChannelId"] : <any>null;
            this.publishedDataChannelSourceDomainId = _data["publishedDataChannelSourceDomainId"] !== undefined ? _data["publishedDataChannelSourceDomainId"] : <any>null;
            this.publishedCommentsId = _data["publishedCommentsId"] !== undefined ? _data["publishedCommentsId"] : <any>null;
        }
    }

    static fromJS(data: any): DataChannelGeneralInfoDTO {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelGeneralInfoDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["dataChannelDescription"] = this.dataChannelDescription !== undefined ? this.dataChannelDescription : <any>null;
        data["dataChannelTemplateId"] = this.dataChannelTemplateId !== undefined ? this.dataChannelTemplateId : <any>null;
        data["serialNumber"] = this.serialNumber !== undefined ? this.serialNumber : <any>null;
        data["dataChannelDataSourceTypeId"] = this.dataChannelDataSourceTypeId !== undefined ? this.dataChannelDataSourceTypeId : <any>null;
        data["rtuId"] = this.rtuId !== undefined ? this.rtuId : <any>null;
        data["rtuChannelId"] = this.rtuChannelId !== undefined ? this.rtuChannelId : <any>null;
        data["rtuPriorityLevelTypeId"] = this.rtuPriorityLevelTypeId !== undefined ? this.rtuPriorityLevelTypeId : <any>null;
        data["publishedDataChannelSourceDataChannelId"] = this.publishedDataChannelSourceDataChannelId !== undefined ? this.publishedDataChannelSourceDataChannelId : <any>null;
        data["publishedDataChannelSourceDomainId"] = this.publishedDataChannelSourceDomainId !== undefined ? this.publishedDataChannelSourceDomainId : <any>null;
        data["publishedCommentsId"] = this.publishedCommentsId !== undefined ? this.publishedCommentsId : <any>null;
        return data;
    }
}

export class DataChannelPublishedCommentsDTO {
    id?: number;
    publishedComments?: string | null;
    inUse?: boolean;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.publishedComments = _data["publishedComments"] !== undefined ? _data["publishedComments"] : <any>null;
            this.inUse = _data["inUse"] !== undefined ? _data["inUse"] : <any>null;
        }
    }

    static fromJS(data: any): DataChannelPublishedCommentsDTO {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelPublishedCommentsDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["publishedComments"] = this.publishedComments !== undefined ? this.publishedComments : <any>null;
        data["inUse"] = this.inUse !== undefined ? this.inUse : <any>null;
        return data;
    }
}

export class DataChannelSensorInfoDTO {
    dataChannelId?: string;
    scalingModeId?: ScalingModeTypeEnum;
    scaledUnitsAsText?: string | null;
    scaledUnitsId?: UnitTypeEnum | null;
    scaledMin?: number | null;
    scaledMax?: number | null;
    useLimits?: boolean | null;
    rawUnitsAtUnderRange?: number | null;
    rawUnitsAtOverRange?: number | null;
    usePrescaling?: boolean | null;
    rawUnitsAtZero?: number | null;
    rawUnitsAtFullScale?: number | null;
    scalingdMap?: ValueTupleOfDoubleAndDouble[] | null;
    rawUnits?: number | null;
    rawUnitsAsText?: string | null;
    rawUnitsAtScaleMin?: number | null;
    rawUnitsAtScaleMax?: number | null;
    isRawDataInverted?: boolean;

    init(_data?: any) {
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.scalingModeId = _data["scalingModeId"] !== undefined ? _data["scalingModeId"] : <any>null;
            this.scaledUnitsAsText = _data["scaledUnitsAsText"] !== undefined ? _data["scaledUnitsAsText"] : <any>null;
            this.scaledUnitsId = _data["scaledUnitsId"] !== undefined ? _data["scaledUnitsId"] : <any>null;
            this.scaledMin = _data["scaledMin"] !== undefined ? _data["scaledMin"] : <any>null;
            this.scaledMax = _data["scaledMax"] !== undefined ? _data["scaledMax"] : <any>null;
            this.useLimits = _data["useLimits"] !== undefined ? _data["useLimits"] : <any>null;
            this.rawUnitsAtUnderRange = _data["rawUnitsAtUnderRange"] !== undefined ? _data["rawUnitsAtUnderRange"] : <any>null;
            this.rawUnitsAtOverRange = _data["rawUnitsAtOverRange"] !== undefined ? _data["rawUnitsAtOverRange"] : <any>null;
            this.usePrescaling = _data["usePrescaling"] !== undefined ? _data["usePrescaling"] : <any>null;
            this.rawUnitsAtZero = _data["rawUnitsAtZero"] !== undefined ? _data["rawUnitsAtZero"] : <any>null;
            this.rawUnitsAtFullScale = _data["rawUnitsAtFullScale"] !== undefined ? _data["rawUnitsAtFullScale"] : <any>null;
            if (Array.isArray(_data["scalingdMap"])) {
                this.scalingdMap = [] as any;
                for (let item of _data["scalingdMap"])
                    this.scalingdMap!.push(ValueTupleOfDoubleAndDouble.fromJS(item));
            }
            else {
                this.scalingdMap = <any>null;
            }
            this.rawUnits = _data["rawUnits"] !== undefined ? _data["rawUnits"] : <any>null;
            this.rawUnitsAsText = _data["rawUnitsAsText"] !== undefined ? _data["rawUnitsAsText"] : <any>null;
            this.rawUnitsAtScaleMin = _data["rawUnitsAtScaleMin"] !== undefined ? _data["rawUnitsAtScaleMin"] : <any>null;
            this.rawUnitsAtScaleMax = _data["rawUnitsAtScaleMax"] !== undefined ? _data["rawUnitsAtScaleMax"] : <any>null;
            this.isRawDataInverted = _data["isRawDataInverted"] !== undefined ? _data["isRawDataInverted"] : <any>null;
        }
    }

    static fromJS(data: any): DataChannelSensorInfoDTO {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelSensorInfoDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["scalingModeId"] = this.scalingModeId !== undefined ? this.scalingModeId : <any>null;
        data["scaledUnitsAsText"] = this.scaledUnitsAsText !== undefined ? this.scaledUnitsAsText : <any>null;
        data["scaledUnitsId"] = this.scaledUnitsId !== undefined ? this.scaledUnitsId : <any>null;
        data["scaledMin"] = this.scaledMin !== undefined ? this.scaledMin : <any>null;
        data["scaledMax"] = this.scaledMax !== undefined ? this.scaledMax : <any>null;
        data["useLimits"] = this.useLimits !== undefined ? this.useLimits : <any>null;
        data["rawUnitsAtUnderRange"] = this.rawUnitsAtUnderRange !== undefined ? this.rawUnitsAtUnderRange : <any>null;
        data["rawUnitsAtOverRange"] = this.rawUnitsAtOverRange !== undefined ? this.rawUnitsAtOverRange : <any>null;
        data["usePrescaling"] = this.usePrescaling !== undefined ? this.usePrescaling : <any>null;
        data["rawUnitsAtZero"] = this.rawUnitsAtZero !== undefined ? this.rawUnitsAtZero : <any>null;
        data["rawUnitsAtFullScale"] = this.rawUnitsAtFullScale !== undefined ? this.rawUnitsAtFullScale : <any>null;
        if (Array.isArray(this.scalingdMap)) {
            data["scalingdMap"] = [];
            for (let item of this.scalingdMap)
                data["scalingdMap"].push(item.toJSON());
        }
        data["rawUnits"] = this.rawUnits !== undefined ? this.rawUnits : <any>null;
        data["rawUnitsAsText"] = this.rawUnitsAsText !== undefined ? this.rawUnitsAsText : <any>null;
        data["rawUnitsAtScaleMin"] = this.rawUnitsAtScaleMin !== undefined ? this.rawUnitsAtScaleMin : <any>null;
        data["rawUnitsAtScaleMax"] = this.rawUnitsAtScaleMax !== undefined ? this.rawUnitsAtScaleMax : <any>null;
        data["isRawDataInverted"] = this.isRawDataInverted !== undefined ? this.isRawDataInverted : <any>null;
        return data;
    }
}

export class DataChannelTankAndSensorConfigDTO {
    dataChannelId?: string;
    scalingModeId?: ScalingModeTypeEnum;
    scaledUnitsAsText?: string | null;
    scaledUnitsId?: number | null;
    scaledMin?: number | null;
    scaledMax?: number | null;
    useLimits?: boolean | null;
    rawUnitsAtUnderRange?: number | null;
    rawUnitsAtOverRange?: number | null;
    usePrescaling?: boolean | null;
    rawUnitsAtZero?: number | null;
    rawUnitsAtFullScale?: number | null;
    scalingdMap?: ValueTupleOfDoubleAndDouble[] | null;
    rawUnits?: number | null;
    rawUnitsAsText?: string | null;
    rawUnitsAtScaleMin?: number | null;
    rawUnitsAtScaleMax?: number | null;
    isRawDataInverted?: boolean;
    tankTypeId?: TankTypeEnum;
    tankDimensionId?: string | null;
    productId?: string | null;
    unitConversionModeId?: UnitConversionModeEnum;
    maxProductCapacity?: number | null;
    displayUnitsId?: number | null;
    displayMaxProductCapacity?: number | null;
    graphMin?: number | null;
    graphMax?: number | null;
    minFillThreshold?: number | null;
    maxTruckCapacity?: number | null;
    rtuChannelSetpointsSyncTypeId?: RtuChannelSetpointsSyncTypeEnum | null;

    init(_data?: any) {
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.scalingModeId = _data["scalingModeId"] !== undefined ? _data["scalingModeId"] : <any>null;
            this.scaledUnitsAsText = _data["scaledUnitsAsText"] !== undefined ? _data["scaledUnitsAsText"] : <any>null;
            this.scaledUnitsId = _data["scaledUnitsId"] !== undefined ? _data["scaledUnitsId"] : <any>null;
            this.scaledMin = _data["scaledMin"] !== undefined ? _data["scaledMin"] : <any>null;
            this.scaledMax = _data["scaledMax"] !== undefined ? _data["scaledMax"] : <any>null;
            this.useLimits = _data["useLimits"] !== undefined ? _data["useLimits"] : <any>null;
            this.rawUnitsAtUnderRange = _data["rawUnitsAtUnderRange"] !== undefined ? _data["rawUnitsAtUnderRange"] : <any>null;
            this.rawUnitsAtOverRange = _data["rawUnitsAtOverRange"] !== undefined ? _data["rawUnitsAtOverRange"] : <any>null;
            this.usePrescaling = _data["usePrescaling"] !== undefined ? _data["usePrescaling"] : <any>null;
            this.rawUnitsAtZero = _data["rawUnitsAtZero"] !== undefined ? _data["rawUnitsAtZero"] : <any>null;
            this.rawUnitsAtFullScale = _data["rawUnitsAtFullScale"] !== undefined ? _data["rawUnitsAtFullScale"] : <any>null;
            if (Array.isArray(_data["scalingdMap"])) {
                this.scalingdMap = [] as any;
                for (let item of _data["scalingdMap"])
                    this.scalingdMap!.push(ValueTupleOfDoubleAndDouble.fromJS(item));
            }
            else {
                this.scalingdMap = <any>null;
            }
            this.rawUnits = _data["rawUnits"] !== undefined ? _data["rawUnits"] : <any>null;
            this.rawUnitsAsText = _data["rawUnitsAsText"] !== undefined ? _data["rawUnitsAsText"] : <any>null;
            this.rawUnitsAtScaleMin = _data["rawUnitsAtScaleMin"] !== undefined ? _data["rawUnitsAtScaleMin"] : <any>null;
            this.rawUnitsAtScaleMax = _data["rawUnitsAtScaleMax"] !== undefined ? _data["rawUnitsAtScaleMax"] : <any>null;
            this.isRawDataInverted = _data["isRawDataInverted"] !== undefined ? _data["isRawDataInverted"] : <any>null;
            this.tankTypeId = _data["tankTypeId"] !== undefined ? _data["tankTypeId"] : <any>null;
            this.tankDimensionId = _data["tankDimensionId"] !== undefined ? _data["tankDimensionId"] : <any>null;
            this.productId = _data["productId"] !== undefined ? _data["productId"] : <any>null;
            this.unitConversionModeId = _data["unitConversionModeId"] !== undefined ? _data["unitConversionModeId"] : <any>null;
            this.maxProductCapacity = _data["maxProductCapacity"] !== undefined ? _data["maxProductCapacity"] : <any>null;
            this.displayUnitsId = _data["displayUnitsId"] !== undefined ? _data["displayUnitsId"] : <any>null;
            this.displayMaxProductCapacity = _data["displayMaxProductCapacity"] !== undefined ? _data["displayMaxProductCapacity"] : <any>null;
            this.graphMin = _data["graphMin"] !== undefined ? _data["graphMin"] : <any>null;
            this.graphMax = _data["graphMax"] !== undefined ? _data["graphMax"] : <any>null;
            this.minFillThreshold = _data["minFillThreshold"] !== undefined ? _data["minFillThreshold"] : <any>null;
            this.maxTruckCapacity = _data["maxTruckCapacity"] !== undefined ? _data["maxTruckCapacity"] : <any>null;
            this.rtuChannelSetpointsSyncTypeId = _data["rtuChannelSetpointsSyncTypeId"] !== undefined ? _data["rtuChannelSetpointsSyncTypeId"] : <any>null;
        }
    }

    static fromJS(data: any): DataChannelTankAndSensorConfigDTO {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelTankAndSensorConfigDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["scalingModeId"] = this.scalingModeId !== undefined ? this.scalingModeId : <any>null;
        data["scaledUnitsAsText"] = this.scaledUnitsAsText !== undefined ? this.scaledUnitsAsText : <any>null;
        data["scaledUnitsId"] = this.scaledUnitsId !== undefined ? this.scaledUnitsId : <any>null;
        data["scaledMin"] = this.scaledMin !== undefined ? this.scaledMin : <any>null;
        data["scaledMax"] = this.scaledMax !== undefined ? this.scaledMax : <any>null;
        data["useLimits"] = this.useLimits !== undefined ? this.useLimits : <any>null;
        data["rawUnitsAtUnderRange"] = this.rawUnitsAtUnderRange !== undefined ? this.rawUnitsAtUnderRange : <any>null;
        data["rawUnitsAtOverRange"] = this.rawUnitsAtOverRange !== undefined ? this.rawUnitsAtOverRange : <any>null;
        data["usePrescaling"] = this.usePrescaling !== undefined ? this.usePrescaling : <any>null;
        data["rawUnitsAtZero"] = this.rawUnitsAtZero !== undefined ? this.rawUnitsAtZero : <any>null;
        data["rawUnitsAtFullScale"] = this.rawUnitsAtFullScale !== undefined ? this.rawUnitsAtFullScale : <any>null;
        if (Array.isArray(this.scalingdMap)) {
            data["scalingdMap"] = [];
            for (let item of this.scalingdMap)
                data["scalingdMap"].push(item.toJSON());
        }
        data["rawUnits"] = this.rawUnits !== undefined ? this.rawUnits : <any>null;
        data["rawUnitsAsText"] = this.rawUnitsAsText !== undefined ? this.rawUnitsAsText : <any>null;
        data["rawUnitsAtScaleMin"] = this.rawUnitsAtScaleMin !== undefined ? this.rawUnitsAtScaleMin : <any>null;
        data["rawUnitsAtScaleMax"] = this.rawUnitsAtScaleMax !== undefined ? this.rawUnitsAtScaleMax : <any>null;
        data["isRawDataInverted"] = this.isRawDataInverted !== undefined ? this.isRawDataInverted : <any>null;
        data["tankTypeId"] = this.tankTypeId !== undefined ? this.tankTypeId : <any>null;
        data["tankDimensionId"] = this.tankDimensionId !== undefined ? this.tankDimensionId : <any>null;
        data["productId"] = this.productId !== undefined ? this.productId : <any>null;
        data["unitConversionModeId"] = this.unitConversionModeId !== undefined ? this.unitConversionModeId : <any>null;
        data["maxProductCapacity"] = this.maxProductCapacity !== undefined ? this.maxProductCapacity : <any>null;
        data["displayUnitsId"] = this.displayUnitsId !== undefined ? this.displayUnitsId : <any>null;
        data["displayMaxProductCapacity"] = this.displayMaxProductCapacity !== undefined ? this.displayMaxProductCapacity : <any>null;
        data["graphMin"] = this.graphMin !== undefined ? this.graphMin : <any>null;
        data["graphMax"] = this.graphMax !== undefined ? this.graphMax : <any>null;
        data["minFillThreshold"] = this.minFillThreshold !== undefined ? this.minFillThreshold : <any>null;
        data["maxTruckCapacity"] = this.maxTruckCapacity !== undefined ? this.maxTruckCapacity : <any>null;
        data["rtuChannelSetpointsSyncTypeId"] = this.rtuChannelSetpointsSyncTypeId !== undefined ? this.rtuChannelSetpointsSyncTypeId : <any>null;
        return data;
    }
}

export class DataChannelRawUnitsDTO {
    rawUnits?: DataChannelRawUnitDTO[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["rawUnits"])) {
                this.rawUnits = [] as any;
                for (let item of _data["rawUnits"])
                    this.rawUnits!.push(DataChannelRawUnitDTO.fromJS(item));
            }
            else {
                this.rawUnits = <any>null;
            }
        }
    }

    static fromJS(data: any): DataChannelRawUnitsDTO {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelRawUnitsDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.rawUnits)) {
            data["rawUnits"] = [];
            for (let item of this.rawUnits)
                data["rawUnits"].push(item.toJSON());
        }
        return data;
    }
}

export class DataChannelRawUnitDTO {
    name?: string | null;
    id?: string | null;

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any): DataChannelRawUnitDTO {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelRawUnitDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data;
    }
}

export class DataChannelScaledUnitsDTO {
    canEdit?: boolean;
    scaledUnits?: DataChannelScaledUnitDTO[] | null;

    init(_data?: any) {
        if (_data) {
            this.canEdit = _data["canEdit"] !== undefined ? _data["canEdit"] : <any>null;
            if (Array.isArray(_data["scaledUnits"])) {
                this.scaledUnits = [] as any;
                for (let item of _data["scaledUnits"])
                    this.scaledUnits!.push(DataChannelScaledUnitDTO.fromJS(item));
            }
            else {
                this.scaledUnits = <any>null;
            }
        }
    }

    static fromJS(data: any): DataChannelScaledUnitsDTO {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelScaledUnitsDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["canEdit"] = this.canEdit !== undefined ? this.canEdit : <any>null;
        if (Array.isArray(this.scaledUnits)) {
            data["scaledUnits"] = [];
            for (let item of this.scaledUnits)
                data["scaledUnits"].push(item.toJSON());
        }
        return data;
    }
}

export class DataChannelScaledUnitDTO {
    id?: string | null;
    name?: string | null;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
        }
    }

    static fromJS(data: any): DataChannelScaledUnitDTO {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelScaledUnitDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        return data;
    }
}

export class DataChannelSaveTankSetupInfoDTO {
    dataChannelId?: string;
    tankTypeId?: TankTypeEnum;
    isTankProfileSet?: boolean;
    tankDimensionId?: string | null;
    productId?: string | null;
    unitConversionModeId?: UnitConversionModeEnum;
    maxProductCapacity?: number | null;
    displayUnitsId?: UnitTypeEnum | null;
    displayMaxProductCapacity?: number | null;
    graphMin?: number | null;
    graphMax?: number | null;

    init(_data?: any) {
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.tankTypeId = _data["tankTypeId"] !== undefined ? _data["tankTypeId"] : <any>null;
            this.isTankProfileSet = _data["isTankProfileSet"] !== undefined ? _data["isTankProfileSet"] : <any>null;
            this.tankDimensionId = _data["tankDimensionId"] !== undefined ? _data["tankDimensionId"] : <any>null;
            this.productId = _data["productId"] !== undefined ? _data["productId"] : <any>null;
            this.unitConversionModeId = _data["unitConversionModeId"] !== undefined ? _data["unitConversionModeId"] : <any>null;
            this.maxProductCapacity = _data["maxProductCapacity"] !== undefined ? _data["maxProductCapacity"] : <any>null;
            this.displayUnitsId = _data["displayUnitsId"] !== undefined ? _data["displayUnitsId"] : <any>null;
            this.displayMaxProductCapacity = _data["displayMaxProductCapacity"] !== undefined ? _data["displayMaxProductCapacity"] : <any>null;
            this.graphMin = _data["graphMin"] !== undefined ? _data["graphMin"] : <any>null;
            this.graphMax = _data["graphMax"] !== undefined ? _data["graphMax"] : <any>null;
        }
    }

    static fromJS(data: any): DataChannelSaveTankSetupInfoDTO {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelSaveTankSetupInfoDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["tankTypeId"] = this.tankTypeId !== undefined ? this.tankTypeId : <any>null;
        data["isTankProfileSet"] = this.isTankProfileSet !== undefined ? this.isTankProfileSet : <any>null;
        data["tankDimensionId"] = this.tankDimensionId !== undefined ? this.tankDimensionId : <any>null;
        data["productId"] = this.productId !== undefined ? this.productId : <any>null;
        data["unitConversionModeId"] = this.unitConversionModeId !== undefined ? this.unitConversionModeId : <any>null;
        data["maxProductCapacity"] = this.maxProductCapacity !== undefined ? this.maxProductCapacity : <any>null;
        data["displayUnitsId"] = this.displayUnitsId !== undefined ? this.displayUnitsId : <any>null;
        data["displayMaxProductCapacity"] = this.displayMaxProductCapacity !== undefined ? this.displayMaxProductCapacity : <any>null;
        data["graphMin"] = this.graphMin !== undefined ? this.graphMin : <any>null;
        data["graphMax"] = this.graphMax !== undefined ? this.graphMax : <any>null;
        return data;
    }
}

export class DataChannelVolumetricValueConversionDTO {
    dataChannelId?: string;
    value?: number;
    fromUnitId?: UnitTypeEnum;
    toUnitId?: UnitTypeEnum;

    init(_data?: any) {
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.value = _data["value"] !== undefined ? _data["value"] : <any>null;
            this.fromUnitId = _data["fromUnitId"] !== undefined ? _data["fromUnitId"] : <any>null;
            this.toUnitId = _data["toUnitId"] !== undefined ? _data["toUnitId"] : <any>null;
        }
    }

    static fromJS(data: any): DataChannelVolumetricValueConversionDTO {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelVolumetricValueConversionDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        data["fromUnitId"] = this.fromUnitId !== undefined ? this.fromUnitId : <any>null;
        data["toUnitId"] = this.toUnitId !== undefined ? this.toUnitId : <any>null;
        return data;
    }
}

export class CustomSiteIntegration1DataChannelDTO {
    dataChannelId?: string;
    tankFunctionTypeId?: ApciTankFunctionMode | null;
    airProductsUnitTypeId?: ApciUnitOfMeasure | null;
    siteNumber?: string | null;
    customerName?: string | null;
    customerAddress1?: string | null;
    customerAddress2?: string | null;
    customerAddress3?: string | null;
    isSendEnabled?: boolean;

    init(_data?: any) {
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.tankFunctionTypeId = _data["tankFunctionTypeId"] !== undefined ? _data["tankFunctionTypeId"] : <any>null;
            this.airProductsUnitTypeId = _data["airProductsUnitTypeId"] !== undefined ? _data["airProductsUnitTypeId"] : <any>null;
            this.siteNumber = _data["siteNumber"] !== undefined ? _data["siteNumber"] : <any>null;
            this.customerName = _data["customerName"] !== undefined ? _data["customerName"] : <any>null;
            this.customerAddress1 = _data["customerAddress1"] !== undefined ? _data["customerAddress1"] : <any>null;
            this.customerAddress2 = _data["customerAddress2"] !== undefined ? _data["customerAddress2"] : <any>null;
            this.customerAddress3 = _data["customerAddress3"] !== undefined ? _data["customerAddress3"] : <any>null;
            this.isSendEnabled = _data["isSendEnabled"] !== undefined ? _data["isSendEnabled"] : <any>null;
        }
    }

    static fromJS(data: any): CustomSiteIntegration1DataChannelDTO {
        data = typeof data === 'object' ? data : {};
        let result = new CustomSiteIntegration1DataChannelDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["tankFunctionTypeId"] = this.tankFunctionTypeId !== undefined ? this.tankFunctionTypeId : <any>null;
        data["airProductsUnitTypeId"] = this.airProductsUnitTypeId !== undefined ? this.airProductsUnitTypeId : <any>null;
        data["siteNumber"] = this.siteNumber !== undefined ? this.siteNumber : <any>null;
        data["customerName"] = this.customerName !== undefined ? this.customerName : <any>null;
        data["customerAddress1"] = this.customerAddress1 !== undefined ? this.customerAddress1 : <any>null;
        data["customerAddress2"] = this.customerAddress2 !== undefined ? this.customerAddress2 : <any>null;
        data["customerAddress3"] = this.customerAddress3 !== undefined ? this.customerAddress3 : <any>null;
        data["isSendEnabled"] = this.isSendEnabled !== undefined ? this.isSendEnabled : <any>null;
        return data;
    }
}

export class DataChannelSaveForecastDeliveryInfoDTO {
    dataChannelId?: string;
    forecastModeTypeId?: ForecastMode | null;
    showHighLowForecast?: boolean;
    reforecastWhenDeliveryScheduled?: boolean;
    unitsId?: UnitTypeEnum | null;
    manualUsageRate?: number | null;

    init(_data?: any) {
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.forecastModeTypeId = _data["forecastModeTypeId"] !== undefined ? _data["forecastModeTypeId"] : <any>null;
            this.showHighLowForecast = _data["showHighLowForecast"] !== undefined ? _data["showHighLowForecast"] : <any>null;
            this.reforecastWhenDeliveryScheduled = _data["reforecastWhenDeliveryScheduled"] !== undefined ? _data["reforecastWhenDeliveryScheduled"] : <any>null;
            this.unitsId = _data["unitsId"] !== undefined ? _data["unitsId"] : <any>null;
            this.manualUsageRate = _data["manualUsageRate"] !== undefined ? _data["manualUsageRate"] : <any>null;
        }
    }

    static fromJS(data: any): DataChannelSaveForecastDeliveryInfoDTO {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelSaveForecastDeliveryInfoDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["forecastModeTypeId"] = this.forecastModeTypeId !== undefined ? this.forecastModeTypeId : <any>null;
        data["showHighLowForecast"] = this.showHighLowForecast !== undefined ? this.showHighLowForecast : <any>null;
        data["reforecastWhenDeliveryScheduled"] = this.reforecastWhenDeliveryScheduled !== undefined ? this.reforecastWhenDeliveryScheduled : <any>null;
        data["unitsId"] = this.unitsId !== undefined ? this.unitsId : <any>null;
        data["manualUsageRate"] = this.manualUsageRate !== undefined ? this.manualUsageRate : <any>null;
        return data;
    }
}

export class DataChannelSaveIntegrationProfileCollectionDTO {
    dataChannelId?: string;
    integrationProfile1?: DataChannelSaveIntegrationProfileDTO | null;
    integrationProfile2?: DataChannelSaveIntegrationProfileDTO | null;

    init(_data?: any) {
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.integrationProfile1 = _data["integrationProfile1"] ? DataChannelSaveIntegrationProfileDTO.fromJS(_data["integrationProfile1"]) : <any>null;
            this.integrationProfile2 = _data["integrationProfile2"] ? DataChannelSaveIntegrationProfileDTO.fromJS(_data["integrationProfile2"]) : <any>null;
        }
    }

    static fromJS(data: any): DataChannelSaveIntegrationProfileCollectionDTO {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelSaveIntegrationProfileCollectionDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["integrationProfile1"] = this.integrationProfile1 ? this.integrationProfile1.toJSON() : <any>null;
        data["integrationProfile2"] = this.integrationProfile2 ? this.integrationProfile2.toJSON() : <any>null;
        return data;
    }
}

export class DataChannelSaveIntegrationProfileDTO {
    isIntegrationEnabled?: boolean;
    integrationId?: string | null;
    integrationDomainId?: string | null;
    isIdAutoGenerated?: boolean;

    init(_data?: any) {
        if (_data) {
            this.isIntegrationEnabled = _data["isIntegrationEnabled"] !== undefined ? _data["isIntegrationEnabled"] : <any>null;
            this.integrationId = _data["integrationId"] !== undefined ? _data["integrationId"] : <any>null;
            this.integrationDomainId = _data["integrationDomainId"] !== undefined ? _data["integrationDomainId"] : <any>null;
            this.isIdAutoGenerated = _data["isIdAutoGenerated"] !== undefined ? _data["isIdAutoGenerated"] : <any>null;
        }
    }

    static fromJS(data: any): DataChannelSaveIntegrationProfileDTO {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelSaveIntegrationProfileDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isIntegrationEnabled"] = this.isIntegrationEnabled !== undefined ? this.isIntegrationEnabled : <any>null;
        data["integrationId"] = this.integrationId !== undefined ? this.integrationId : <any>null;
        data["integrationDomainId"] = this.integrationDomainId !== undefined ? this.integrationDomainId : <any>null;
        data["isIdAutoGenerated"] = this.isIdAutoGenerated !== undefined ? this.isIdAutoGenerated : <any>null;
        return data;
    }
}

export class DataChannelDisplayUnitsDTO {
    displayUnits?: DataChannelDisplayUnitDTO[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["displayUnits"])) {
                this.displayUnits = [] as any;
                for (let item of _data["displayUnits"])
                    this.displayUnits!.push(DataChannelDisplayUnitDTO.fromJS(item));
            }
            else {
                this.displayUnits = <any>null;
            }
        }
    }

    static fromJS(data: any): DataChannelDisplayUnitsDTO {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelDisplayUnitsDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.displayUnits)) {
            data["displayUnits"] = [];
            for (let item of this.displayUnits)
                data["displayUnits"].push(item.toJSON());
        }
        return data;
    }
}

export class DataChannelDisplayUnitDTO {
    name?: string | null;
    id?: string | null;

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
        }
    }

    static fromJS(data: any): DataChannelDisplayUnitDTO {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelDisplayUnitDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["id"] = this.id !== undefined ? this.id : <any>null;
        return data;
    }
}

export class DataChannelFtpDomainsDTO {
    ftpInfoModels?: DataChannelFtpDomainDTO[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["ftpInfoModels"])) {
                this.ftpInfoModels = [] as any;
                for (let item of _data["ftpInfoModels"])
                    this.ftpInfoModels!.push(DataChannelFtpDomainDTO.fromJS(item));
            }
            else {
                this.ftpInfoModels = <any>null;
            }
        }
    }

    static fromJS(data: any): DataChannelFtpDomainsDTO {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelFtpDomainsDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.ftpInfoModels)) {
            data["ftpInfoModels"] = [];
            for (let item of this.ftpInfoModels)
                data["ftpInfoModels"].push(item.toJSON());
        }
        return data;
    }
}

export class DataChannelFtpDomainDTO {
    targetDomainId?: string;
    targetDomainName?: string | null;
    autoGenerateFtpId?: boolean;
    targetDomainFtpFileFormat?: FtpFileFormatCategory;
    targetDomainFtpFileFormatAsText?: string | null;

    init(_data?: any) {
        if (_data) {
            this.targetDomainId = _data["targetDomainId"] !== undefined ? _data["targetDomainId"] : <any>null;
            this.targetDomainName = _data["targetDomainName"] !== undefined ? _data["targetDomainName"] : <any>null;
            this.autoGenerateFtpId = _data["autoGenerateFtpId"] !== undefined ? _data["autoGenerateFtpId"] : <any>null;
            this.targetDomainFtpFileFormat = _data["targetDomainFtpFileFormat"] !== undefined ? _data["targetDomainFtpFileFormat"] : <any>null;
            this.targetDomainFtpFileFormatAsText = _data["targetDomainFtpFileFormatAsText"] !== undefined ? _data["targetDomainFtpFileFormatAsText"] : <any>null;
        }
    }

    static fromJS(data: any): DataChannelFtpDomainDTO {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelFtpDomainDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["targetDomainId"] = this.targetDomainId !== undefined ? this.targetDomainId : <any>null;
        data["targetDomainName"] = this.targetDomainName !== undefined ? this.targetDomainName : <any>null;
        data["autoGenerateFtpId"] = this.autoGenerateFtpId !== undefined ? this.autoGenerateFtpId : <any>null;
        data["targetDomainFtpFileFormat"] = this.targetDomainFtpFileFormat !== undefined ? this.targetDomainFtpFileFormat : <any>null;
        data["targetDomainFtpFileFormatAsText"] = this.targetDomainFtpFileFormatAsText !== undefined ? this.targetDomainFtpFileFormatAsText : <any>null;
        return data;
    }
}

export class DataChannelManualReadingDTO {
    readingTime?: Date;
    readingValue?: number;
    chosenUnitType?: UnitTypeEnum | null;

    init(_data?: any) {
        if (_data) {
            this.readingTime = _data["readingTime"] ? new Date(_data["readingTime"].toString()) : <any>null;
            this.readingValue = _data["readingValue"] !== undefined ? _data["readingValue"] : <any>null;
            this.chosenUnitType = _data["chosenUnitType"] !== undefined ? _data["chosenUnitType"] : <any>null;
        }
    }

    static fromJS(data: any): DataChannelManualReadingDTO {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelManualReadingDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["readingTime"] = this.readingTime ? this.readingTime.toISOString() : <any>null;
        data["readingValue"] = this.readingValue !== undefined ? this.readingValue : <any>null;
        data["chosenUnitType"] = this.chosenUnitType !== undefined ? this.chosenUnitType : <any>null;
        return data;
    }
}

export class DataChannelTankDimensionsMapPointDTO {
    rawValue?: number;
    scaledValue?: number;

    init(_data?: any) {
        if (_data) {
            this.rawValue = _data["rawValue"] !== undefined ? _data["rawValue"] : <any>null;
            this.scaledValue = _data["scaledValue"] !== undefined ? _data["scaledValue"] : <any>null;
        }
    }

    static fromJS(data: any): DataChannelTankDimensionsMapPointDTO {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelTankDimensionsMapPointDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rawValue"] = this.rawValue !== undefined ? this.rawValue : <any>null;
        data["scaledValue"] = this.scaledValue !== undefined ? this.scaledValue : <any>null;
        return data;
    }
}

export class GenerateScalingMapDTO {
    rawUnitsAtScaledMin?: number;
    rawUnitsAtScaledMax?: number;
    scaledMin?: number;
    scaledMax?: number;

    init(_data?: any) {
        if (_data) {
            this.rawUnitsAtScaledMin = _data["rawUnitsAtScaledMin"] !== undefined ? _data["rawUnitsAtScaledMin"] : <any>null;
            this.rawUnitsAtScaledMax = _data["rawUnitsAtScaledMax"] !== undefined ? _data["rawUnitsAtScaledMax"] : <any>null;
            this.scaledMin = _data["scaledMin"] !== undefined ? _data["scaledMin"] : <any>null;
            this.scaledMax = _data["scaledMax"] !== undefined ? _data["scaledMax"] : <any>null;
        }
    }

    static fromJS(data: any): GenerateScalingMapDTO {
        data = typeof data === 'object' ? data : {};
        let result = new GenerateScalingMapDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rawUnitsAtScaledMin"] = this.rawUnitsAtScaledMin !== undefined ? this.rawUnitsAtScaledMin : <any>null;
        data["rawUnitsAtScaledMax"] = this.rawUnitsAtScaledMax !== undefined ? this.rawUnitsAtScaledMax : <any>null;
        data["scaledMin"] = this.scaledMin !== undefined ? this.scaledMin : <any>null;
        data["scaledMax"] = this.scaledMax !== undefined ? this.scaledMax : <any>null;
        return data;
    }
}

export class DataChannelSaveDigitalSetupInfoDTO {
    dataChannelId?: string;
    state0Limit?: number | null;
    state0Text?: string | null;
    state1Limit?: number | null;
    state1Text?: string | null;
    state2Limit?: number | null;
    state2Text?: string | null;
    state3Limit?: number | null;
    state3Text?: string | null;
    invertData?: boolean;

    init(_data?: any) {
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.state0Limit = _data["state0Limit"] !== undefined ? _data["state0Limit"] : <any>null;
            this.state0Text = _data["state0Text"] !== undefined ? _data["state0Text"] : <any>null;
            this.state1Limit = _data["state1Limit"] !== undefined ? _data["state1Limit"] : <any>null;
            this.state1Text = _data["state1Text"] !== undefined ? _data["state1Text"] : <any>null;
            this.state2Limit = _data["state2Limit"] !== undefined ? _data["state2Limit"] : <any>null;
            this.state2Text = _data["state2Text"] !== undefined ? _data["state2Text"] : <any>null;
            this.state3Limit = _data["state3Limit"] !== undefined ? _data["state3Limit"] : <any>null;
            this.state3Text = _data["state3Text"] !== undefined ? _data["state3Text"] : <any>null;
            this.invertData = _data["invertData"] !== undefined ? _data["invertData"] : <any>null;
        }
    }

    static fromJS(data: any): DataChannelSaveDigitalSetupInfoDTO {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelSaveDigitalSetupInfoDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["state0Limit"] = this.state0Limit !== undefined ? this.state0Limit : <any>null;
        data["state0Text"] = this.state0Text !== undefined ? this.state0Text : <any>null;
        data["state1Limit"] = this.state1Limit !== undefined ? this.state1Limit : <any>null;
        data["state1Text"] = this.state1Text !== undefined ? this.state1Text : <any>null;
        data["state2Limit"] = this.state2Limit !== undefined ? this.state2Limit : <any>null;
        data["state2Text"] = this.state2Text !== undefined ? this.state2Text : <any>null;
        data["state3Limit"] = this.state3Limit !== undefined ? this.state3Limit : <any>null;
        data["state3Text"] = this.state3Text !== undefined ? this.state3Text : <any>null;
        data["invertData"] = this.invertData !== undefined ? this.invertData : <any>null;
        return data;
    }
}

export class QuickEditEventsDto {
    dataChannelId?: string;
    dataChannelTypeId?: DataChannelCategory;
    dataChannelDescription?: string | null;
    productDescription?: string | null;
    hasIntegrationEnabled?: boolean;
    inventoryEvents?: QeerInventoryDto[] | null;
    levelEvents?: QeerLevelDto[] | null;
    missingDataEvent?: QeerMissingDataDto | null;
    usageRateEvent?: QeerUsageRateDto | null;
    displayPriority?: number | null;

    init(_data?: any) {
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.dataChannelTypeId = _data["dataChannelTypeId"] !== undefined ? _data["dataChannelTypeId"] : <any>null;
            this.dataChannelDescription = _data["dataChannelDescription"] !== undefined ? _data["dataChannelDescription"] : <any>null;
            this.productDescription = _data["productDescription"] !== undefined ? _data["productDescription"] : <any>null;
            this.hasIntegrationEnabled = _data["hasIntegrationEnabled"] !== undefined ? _data["hasIntegrationEnabled"] : <any>null;
            if (Array.isArray(_data["inventoryEvents"])) {
                this.inventoryEvents = [] as any;
                for (let item of _data["inventoryEvents"])
                    this.inventoryEvents!.push(QeerInventoryDto.fromJS(item));
            }
            else {
                this.inventoryEvents = <any>null;
            }
            if (Array.isArray(_data["levelEvents"])) {
                this.levelEvents = [] as any;
                for (let item of _data["levelEvents"])
                    this.levelEvents!.push(QeerLevelDto.fromJS(item));
            }
            else {
                this.levelEvents = <any>null;
            }
            this.missingDataEvent = _data["missingDataEvent"] ? QeerMissingDataDto.fromJS(_data["missingDataEvent"]) : <any>null;
            this.usageRateEvent = _data["usageRateEvent"] ? QeerUsageRateDto.fromJS(_data["usageRateEvent"]) : <any>null;
            this.displayPriority = _data["displayPriority"] !== undefined ? _data["displayPriority"] : <any>null;
        }
    }

    static fromJS(data: any): QuickEditEventsDto {
        data = typeof data === 'object' ? data : {};
        let result = new QuickEditEventsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["dataChannelTypeId"] = this.dataChannelTypeId !== undefined ? this.dataChannelTypeId : <any>null;
        data["dataChannelDescription"] = this.dataChannelDescription !== undefined ? this.dataChannelDescription : <any>null;
        data["productDescription"] = this.productDescription !== undefined ? this.productDescription : <any>null;
        data["hasIntegrationEnabled"] = this.hasIntegrationEnabled !== undefined ? this.hasIntegrationEnabled : <any>null;
        if (Array.isArray(this.inventoryEvents)) {
            data["inventoryEvents"] = [];
            for (let item of this.inventoryEvents)
                data["inventoryEvents"].push(item.toJSON());
        }
        if (Array.isArray(this.levelEvents)) {
            data["levelEvents"] = [];
            for (let item of this.levelEvents)
                data["levelEvents"].push(item.toJSON());
        }
        data["missingDataEvent"] = this.missingDataEvent ? this.missingDataEvent.toJSON() : <any>null;
        data["usageRateEvent"] = this.usageRateEvent ? this.usageRateEvent.toJSON() : <any>null;
        data["displayPriority"] = this.displayPriority !== undefined ? this.displayPriority : <any>null;
        return data;
    }
}

export class QeerBaseDto {
    dcerEventRuleId?: number;
    description?: string | null;
    eventValue?: number | null;
    eventImportanceLevelId?: EventRuleImportanceLevel | null;
    isEnabled?: boolean;
    integrationName?: string | null;
    rosters?: string | null;
    isLinkedToEventRule?: boolean;

    init(_data?: any) {
        if (_data) {
            this.dcerEventRuleId = _data["dcerEventRuleId"] !== undefined ? _data["dcerEventRuleId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.eventValue = _data["eventValue"] !== undefined ? _data["eventValue"] : <any>null;
            this.eventImportanceLevelId = _data["eventImportanceLevelId"] !== undefined ? _data["eventImportanceLevelId"] : <any>null;
            this.isEnabled = _data["isEnabled"] !== undefined ? _data["isEnabled"] : <any>null;
            this.integrationName = _data["integrationName"] !== undefined ? _data["integrationName"] : <any>null;
            this.rosters = _data["rosters"] !== undefined ? _data["rosters"] : <any>null;
            this.isLinkedToEventRule = _data["isLinkedToEventRule"] !== undefined ? _data["isLinkedToEventRule"] : <any>null;
        }
    }

    static fromJS(data: any): QeerBaseDto {
        data = typeof data === 'object' ? data : {};
        let result = new QeerBaseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dcerEventRuleId"] = this.dcerEventRuleId !== undefined ? this.dcerEventRuleId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["eventValue"] = this.eventValue !== undefined ? this.eventValue : <any>null;
        data["eventImportanceLevelId"] = this.eventImportanceLevelId !== undefined ? this.eventImportanceLevelId : <any>null;
        data["isEnabled"] = this.isEnabled !== undefined ? this.isEnabled : <any>null;
        data["integrationName"] = this.integrationName !== undefined ? this.integrationName : <any>null;
        data["rosters"] = this.rosters !== undefined ? this.rosters : <any>null;
        data["isLinkedToEventRule"] = this.isLinkedToEventRule !== undefined ? this.isLinkedToEventRule : <any>null;
        return data;
    }
}

export class QeerLevelDto extends QeerBaseDto {
    rtuSetPointSyncStatusId?: RtuSetPointSyncStatusEnum;
    rtuChannelSetpointIndex?: number | null;
    rtuChannelSetpointIndexAsText?: string | null;
    eventComparatorTypeId?: EventRuleComparator;
    currentUOMTypeId?: UnitTypeEnum;
    scaledUOM?: string | null;
    decimalPlaces?: number;
    isSetpointUpdateSupported?: boolean;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.rtuSetPointSyncStatusId = _data["rtuSetPointSyncStatusId"] !== undefined ? _data["rtuSetPointSyncStatusId"] : <any>null;
            this.rtuChannelSetpointIndex = _data["rtuChannelSetpointIndex"] !== undefined ? _data["rtuChannelSetpointIndex"] : <any>null;
            this.rtuChannelSetpointIndexAsText = _data["rtuChannelSetpointIndexAsText"] !== undefined ? _data["rtuChannelSetpointIndexAsText"] : <any>null;
            this.eventComparatorTypeId = _data["eventComparatorTypeId"] !== undefined ? _data["eventComparatorTypeId"] : <any>null;
            this.currentUOMTypeId = _data["currentUOMTypeId"] !== undefined ? _data["currentUOMTypeId"] : <any>null;
            this.scaledUOM = _data["scaledUOM"] !== undefined ? _data["scaledUOM"] : <any>null;
            this.decimalPlaces = _data["decimalPlaces"] !== undefined ? _data["decimalPlaces"] : <any>null;
            this.isSetpointUpdateSupported = _data["isSetpointUpdateSupported"] !== undefined ? _data["isSetpointUpdateSupported"] : <any>null;
        }
    }

    static fromJS(data: any): QeerLevelDto {
        data = typeof data === 'object' ? data : {};
        let result = new QeerLevelDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rtuSetPointSyncStatusId"] = this.rtuSetPointSyncStatusId !== undefined ? this.rtuSetPointSyncStatusId : <any>null;
        data["rtuChannelSetpointIndex"] = this.rtuChannelSetpointIndex !== undefined ? this.rtuChannelSetpointIndex : <any>null;
        data["rtuChannelSetpointIndexAsText"] = this.rtuChannelSetpointIndexAsText !== undefined ? this.rtuChannelSetpointIndexAsText : <any>null;
        data["eventComparatorTypeId"] = this.eventComparatorTypeId !== undefined ? this.eventComparatorTypeId : <any>null;
        data["currentUOMTypeId"] = this.currentUOMTypeId !== undefined ? this.currentUOMTypeId : <any>null;
        data["scaledUOM"] = this.scaledUOM !== undefined ? this.scaledUOM : <any>null;
        data["decimalPlaces"] = this.decimalPlaces !== undefined ? this.decimalPlaces : <any>null;
        data["isSetpointUpdateSupported"] = this.isSetpointUpdateSupported !== undefined ? this.isSetpointUpdateSupported : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class QeerInventoryDto extends QeerLevelDto {
    eventInventoryStatusTypeId?: EventRuleInventoryStatus;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.eventInventoryStatusTypeId = _data["eventInventoryStatusTypeId"] !== undefined ? _data["eventInventoryStatusTypeId"] : <any>null;
        }
    }

    static fromJS(data: any): QeerInventoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new QeerInventoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["eventInventoryStatusTypeId"] = this.eventInventoryStatusTypeId !== undefined ? this.eventInventoryStatusTypeId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class QeerMissingDataDto extends QeerBaseDto {
    maxDataAgeByHour?: number;
    maxDataAgeByMinute?: number;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.maxDataAgeByHour = _data["maxDataAgeByHour"] !== undefined ? _data["maxDataAgeByHour"] : <any>null;
            this.maxDataAgeByMinute = _data["maxDataAgeByMinute"] !== undefined ? _data["maxDataAgeByMinute"] : <any>null;
        }
    }

    static fromJS(data: any): QeerMissingDataDto {
        data = typeof data === 'object' ? data : {};
        let result = new QeerMissingDataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxDataAgeByHour"] = this.maxDataAgeByHour !== undefined ? this.maxDataAgeByHour : <any>null;
        data["maxDataAgeByMinute"] = this.maxDataAgeByMinute !== undefined ? this.maxDataAgeByMinute : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class QeerUsageRateDto extends QeerBaseDto {
    minimumReadingPeriod?: number;
    rtuChannelSetpointIndex?: number | null;
    rtuChannelSetpointIndexAsText?: string | null;
    currentUOMTypeId?: UnitTypeEnum;
    scaledUOM?: string | null;
    isSetpointUpdateSupported?: boolean;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.minimumReadingPeriod = _data["minimumReadingPeriod"] !== undefined ? _data["minimumReadingPeriod"] : <any>null;
            this.rtuChannelSetpointIndex = _data["rtuChannelSetpointIndex"] !== undefined ? _data["rtuChannelSetpointIndex"] : <any>null;
            this.rtuChannelSetpointIndexAsText = _data["rtuChannelSetpointIndexAsText"] !== undefined ? _data["rtuChannelSetpointIndexAsText"] : <any>null;
            this.currentUOMTypeId = _data["currentUOMTypeId"] !== undefined ? _data["currentUOMTypeId"] : <any>null;
            this.scaledUOM = _data["scaledUOM"] !== undefined ? _data["scaledUOM"] : <any>null;
            this.isSetpointUpdateSupported = _data["isSetpointUpdateSupported"] !== undefined ? _data["isSetpointUpdateSupported"] : <any>null;
        }
    }

    static fromJS(data: any): QeerUsageRateDto {
        data = typeof data === 'object' ? data : {};
        let result = new QeerUsageRateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["minimumReadingPeriod"] = this.minimumReadingPeriod !== undefined ? this.minimumReadingPeriod : <any>null;
        data["rtuChannelSetpointIndex"] = this.rtuChannelSetpointIndex !== undefined ? this.rtuChannelSetpointIndex : <any>null;
        data["rtuChannelSetpointIndexAsText"] = this.rtuChannelSetpointIndexAsText !== undefined ? this.rtuChannelSetpointIndexAsText : <any>null;
        data["currentUOMTypeId"] = this.currentUOMTypeId !== undefined ? this.currentUOMTypeId : <any>null;
        data["scaledUOM"] = this.scaledUOM !== undefined ? this.scaledUOM : <any>null;
        data["isSetpointUpdateSupported"] = this.isSetpointUpdateSupported !== undefined ? this.isSetpointUpdateSupported : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class ReadingDTO {
    logTime?: Date;
    value?: number | null;

    init(_data?: any) {
        if (_data) {
            this.logTime = _data["logTime"] ? new Date(_data["logTime"].toString()) : <any>null;
            this.value = _data["value"] !== undefined ? _data["value"] : <any>null;
        }
    }

    static fromJS(data: any): ReadingDTO {
        data = typeof data === 'object' ? data : {};
        let result = new ReadingDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["logTime"] = this.logTime ? this.logTime.toISOString() : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        return data;
    }
}

export class TableStorageReadingsRetrievalResponse {
    wereReadingsSummarized?: boolean;
    readingsCount?: number;
    unsummarizedCount?: number;
    readings?: ReadingDTO[] | null;

    init(_data?: any) {
        if (_data) {
            this.wereReadingsSummarized = _data["wereReadingsSummarized"] !== undefined ? _data["wereReadingsSummarized"] : <any>null;
            this.readingsCount = _data["readingsCount"] !== undefined ? _data["readingsCount"] : <any>null;
            this.unsummarizedCount = _data["unsummarizedCount"] !== undefined ? _data["unsummarizedCount"] : <any>null;
            if (Array.isArray(_data["readings"])) {
                this.readings = [] as any;
                for (let item of _data["readings"])
                    this.readings!.push(ReadingDTO.fromJS(item));
            }
            else {
                this.readings = <any>null;
            }
        }
    }

    static fromJS(data: any): TableStorageReadingsRetrievalResponse {
        data = typeof data === 'object' ? data : {};
        let result = new TableStorageReadingsRetrievalResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["wereReadingsSummarized"] = this.wereReadingsSummarized !== undefined ? this.wereReadingsSummarized : <any>null;
        data["readingsCount"] = this.readingsCount !== undefined ? this.readingsCount : <any>null;
        data["unsummarizedCount"] = this.unsummarizedCount !== undefined ? this.unsummarizedCount : <any>null;
        if (Array.isArray(this.readings)) {
            data["readings"] = [];
            for (let item of this.readings)
                data["readings"].push(item.toJSON());
        }
        return data;
    }
}

export class DataChannelReadingDTO {
    dataChannelId?: string;
    unitOfMeasureAsText?: string | null;
    unitTypeId?: UnitTypeEnum;
    readings?: ReadingDTO[] | null;

    init(_data?: any) {
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.unitOfMeasureAsText = _data["unitOfMeasureAsText"] !== undefined ? _data["unitOfMeasureAsText"] : <any>null;
            this.unitTypeId = _data["unitTypeId"] !== undefined ? _data["unitTypeId"] : <any>null;
            if (Array.isArray(_data["readings"])) {
                this.readings = [] as any;
                for (let item of _data["readings"])
                    this.readings!.push(ReadingDTO.fromJS(item));
            }
            else {
                this.readings = <any>null;
            }
        }
    }

    static fromJS(data: any): DataChannelReadingDTO {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelReadingDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["unitOfMeasureAsText"] = this.unitOfMeasureAsText !== undefined ? this.unitOfMeasureAsText : <any>null;
        data["unitTypeId"] = this.unitTypeId !== undefined ? this.unitTypeId : <any>null;
        if (Array.isArray(this.readings)) {
            data["readings"] = [];
            for (let item of this.readings)
                data["readings"].push(item.toJSON());
        }
        return data;
    }
}

export class GpsLocationReadingsDTO {
    lastKnownLocation?: GpsLocationDTO | null;
    locations?: GpsLocationDTO[] | null;

    init(_data?: any) {
        if (_data) {
            this.lastKnownLocation = _data["lastKnownLocation"] ? GpsLocationDTO.fromJS(_data["lastKnownLocation"]) : <any>null;
            if (Array.isArray(_data["locations"])) {
                this.locations = [] as any;
                for (let item of _data["locations"])
                    this.locations!.push(GpsLocationDTO.fromJS(item));
            }
            else {
                this.locations = <any>null;
            }
        }
    }

    static fromJS(data: any): GpsLocationReadingsDTO {
        data = typeof data === 'object' ? data : {};
        let result = new GpsLocationReadingsDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lastKnownLocation"] = this.lastKnownLocation ? this.lastKnownLocation.toJSON() : <any>null;
        if (Array.isArray(this.locations)) {
            data["locations"] = [];
            for (let item of this.locations)
                data["locations"].push(item.toJSON());
        }
        return data;
    }
}

export class GpsLocationDTO {
    logTime?: Date;
    latitude?: number;
    longitude?: number;
    address?: string | null;
    country?: string | null;
    prov_State?: string | null;
    city?: string | null;
    bodyOfWater?: string | null;

    init(_data?: any) {
        if (_data) {
            this.logTime = _data["logTime"] ? new Date(_data["logTime"].toString()) : <any>null;
            this.latitude = _data["latitude"] !== undefined ? _data["latitude"] : <any>null;
            this.longitude = _data["longitude"] !== undefined ? _data["longitude"] : <any>null;
            this.address = _data["address"] !== undefined ? _data["address"] : <any>null;
            this.country = _data["country"] !== undefined ? _data["country"] : <any>null;
            this.prov_State = _data["prov_State"] !== undefined ? _data["prov_State"] : <any>null;
            this.city = _data["city"] !== undefined ? _data["city"] : <any>null;
            this.bodyOfWater = _data["bodyOfWater"] !== undefined ? _data["bodyOfWater"] : <any>null;
        }
    }

    static fromJS(data: any): GpsLocationDTO {
        data = typeof data === 'object' ? data : {};
        let result = new GpsLocationDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["logTime"] = this.logTime ? this.logTime.toISOString() : <any>null;
        data["latitude"] = this.latitude !== undefined ? this.latitude : <any>null;
        data["longitude"] = this.longitude !== undefined ? this.longitude : <any>null;
        data["address"] = this.address !== undefined ? this.address : <any>null;
        data["country"] = this.country !== undefined ? this.country : <any>null;
        data["prov_State"] = this.prov_State !== undefined ? this.prov_State : <any>null;
        data["city"] = this.city !== undefined ? this.city : <any>null;
        data["bodyOfWater"] = this.bodyOfWater !== undefined ? this.bodyOfWater : <any>null;
        return data;
    }
}

export class GetAuthenticationProviderForDomainResponse {
    identityProviderResponses?: IdentityProviderResponse[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["identityProviderResponses"])) {
                this.identityProviderResponses = [] as any;
                for (let item of _data["identityProviderResponses"])
                    this.identityProviderResponses!.push(IdentityProviderResponse.fromJS(item));
            }
            else {
                this.identityProviderResponses = <any>null;
            }
        }
    }

    static fromJS(data: any): GetAuthenticationProviderForDomainResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetAuthenticationProviderForDomainResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.identityProviderResponses)) {
            data["identityProviderResponses"] = [];
            for (let item of this.identityProviderResponses)
                data["identityProviderResponses"].push(item.toJSON());
        }
        return data;
    }
}

export class IdentityProviderResponse {
    id?: number;
    description?: string | null;
    classification?: string | null;
    associatedEmailSuffixes?: string[] | null;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.classification = _data["classification"] !== undefined ? _data["classification"] : <any>null;
            if (Array.isArray(_data["associatedEmailSuffixes"])) {
                this.associatedEmailSuffixes = [] as any;
                for (let item of _data["associatedEmailSuffixes"])
                    this.associatedEmailSuffixes!.push(item);
            }
            else {
                this.associatedEmailSuffixes = <any>null;
            }
        }
    }

    static fromJS(data: any): IdentityProviderResponse {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityProviderResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["classification"] = this.classification !== undefined ? this.classification : <any>null;
        if (Array.isArray(this.associatedEmailSuffixes)) {
            data["associatedEmailSuffixes"] = [];
            for (let item of this.associatedEmailSuffixes)
                data["associatedEmailSuffixes"].push(item);
        }
        return data;
    }
}

export class UserAuthenticationDto {
    id?: number | null;
    userId?: string;
    emailAddress?: string | null;
    oid?: string | null;
    authenticationProviderId?: number;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.emailAddress = _data["emailAddress"] !== undefined ? _data["emailAddress"] : <any>null;
            this.oid = _data["oid"] !== undefined ? _data["oid"] : <any>null;
            this.authenticationProviderId = _data["authenticationProviderId"] !== undefined ? _data["authenticationProviderId"] : <any>null;
        }
    }

    static fromJS(data: any): UserAuthenticationDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserAuthenticationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["emailAddress"] = this.emailAddress !== undefined ? this.emailAddress : <any>null;
        data["oid"] = this.oid !== undefined ? this.oid : <any>null;
        data["authenticationProviderId"] = this.authenticationProviderId !== undefined ? this.authenticationProviderId : <any>null;
        return data;
    }
}

export class GetUserAuthenticationProviderDto {
    isDOLV3Login?: boolean;
    thirdParty?: GetUserAuthenticationProviderThirdPartyDto | null;
    b2cDomain?: string | null;

    init(_data?: any) {
        if (_data) {
            this.isDOLV3Login = _data["isDOLV3Login"] !== undefined ? _data["isDOLV3Login"] : <any>null;
            this.thirdParty = _data["thirdParty"] ? GetUserAuthenticationProviderThirdPartyDto.fromJS(_data["thirdParty"]) : <any>null;
            this.b2cDomain = _data["b2cDomain"] !== undefined ? _data["b2cDomain"] : <any>null;
        }
    }

    static fromJS(data: any): GetUserAuthenticationProviderDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserAuthenticationProviderDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isDOLV3Login"] = this.isDOLV3Login !== undefined ? this.isDOLV3Login : <any>null;
        data["thirdParty"] = this.thirdParty ? this.thirdParty.toJSON() : <any>null;
        data["b2cDomain"] = this.b2cDomain !== undefined ? this.b2cDomain : <any>null;
        return data;
    }
}

export class GetUserAuthenticationProviderThirdPartyDto {
    tenantId?: string | null;
    description?: string | null;
    authenticationTypeId?: number;
    authenticationTypeCode?: string | null;
    b2cSigninUserFlowUri?: string | null;
    b2cPasswordResetUserFlowUri?: string | null;
    isB2cPasswordResetUserFlowSupported?: boolean;
    b2cScopeAppAuthenticateUri?: string | null;

    init(_data?: any) {
        if (_data) {
            this.tenantId = _data["tenantId"] !== undefined ? _data["tenantId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.authenticationTypeId = _data["authenticationTypeId"] !== undefined ? _data["authenticationTypeId"] : <any>null;
            this.authenticationTypeCode = _data["authenticationTypeCode"] !== undefined ? _data["authenticationTypeCode"] : <any>null;
            this.b2cSigninUserFlowUri = _data["b2cSigninUserFlowUri"] !== undefined ? _data["b2cSigninUserFlowUri"] : <any>null;
            this.b2cPasswordResetUserFlowUri = _data["b2cPasswordResetUserFlowUri"] !== undefined ? _data["b2cPasswordResetUserFlowUri"] : <any>null;
            this.isB2cPasswordResetUserFlowSupported = _data["isB2cPasswordResetUserFlowSupported"] !== undefined ? _data["isB2cPasswordResetUserFlowSupported"] : <any>null;
            this.b2cScopeAppAuthenticateUri = _data["b2cScopeAppAuthenticateUri"] !== undefined ? _data["b2cScopeAppAuthenticateUri"] : <any>null;
        }
    }

    static fromJS(data: any): GetUserAuthenticationProviderThirdPartyDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserAuthenticationProviderThirdPartyDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId !== undefined ? this.tenantId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["authenticationTypeId"] = this.authenticationTypeId !== undefined ? this.authenticationTypeId : <any>null;
        data["authenticationTypeCode"] = this.authenticationTypeCode !== undefined ? this.authenticationTypeCode : <any>null;
        data["b2cSigninUserFlowUri"] = this.b2cSigninUserFlowUri !== undefined ? this.b2cSigninUserFlowUri : <any>null;
        data["b2cPasswordResetUserFlowUri"] = this.b2cPasswordResetUserFlowUri !== undefined ? this.b2cPasswordResetUserFlowUri : <any>null;
        data["isB2cPasswordResetUserFlowSupported"] = this.isB2cPasswordResetUserFlowSupported !== undefined ? this.isB2cPasswordResetUserFlowSupported : <any>null;
        data["b2cScopeAppAuthenticateUri"] = this.b2cScopeAppAuthenticateUri !== undefined ? this.b2cScopeAppAuthenticateUri : <any>null;
        return data;
    }
}

export class PasswordDto {
    newPassword!: string;

    init(_data?: any) {
        if (_data) {
            this.newPassword = _data["newPassword"] !== undefined ? _data["newPassword"] : <any>null;
        }
    }

    static fromJS(data: any): PasswordDto {
        data = typeof data === 'object' ? data : {};
        let result = new PasswordDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["newPassword"] = this.newPassword !== undefined ? this.newPassword : <any>null;
        return data;
    }
}

export class ForceUpdatePasswordDto extends PasswordDto {
    userId!: string;
    confirmPassword!: string;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.confirmPassword = _data["confirmPassword"] !== undefined ? _data["confirmPassword"] : <any>null;
        }
    }

    static fromJS(data: any): ForceUpdatePasswordDto {
        data = typeof data === 'object' ? data : {};
        let result = new ForceUpdatePasswordDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["confirmPassword"] = this.confirmPassword !== undefined ? this.confirmPassword : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class PasswordStrengthDto {
    overallPasswordStrength?: OverallPasswordStrength;
    min_8_Characters?: boolean;
    contain_1_Uppercase?: boolean;
    contain_1_SpecialCharacter?: boolean;
    containNumber?: boolean;
    noSpaces?: boolean;

    init(_data?: any) {
        if (_data) {
            this.overallPasswordStrength = _data["overallPasswordStrength"] !== undefined ? _data["overallPasswordStrength"] : <any>null;
            this.min_8_Characters = _data["min_8_Characters"] !== undefined ? _data["min_8_Characters"] : <any>null;
            this.contain_1_Uppercase = _data["contain_1_Uppercase"] !== undefined ? _data["contain_1_Uppercase"] : <any>null;
            this.contain_1_SpecialCharacter = _data["contain_1_SpecialCharacter"] !== undefined ? _data["contain_1_SpecialCharacter"] : <any>null;
            this.containNumber = _data["containNumber"] !== undefined ? _data["containNumber"] : <any>null;
            this.noSpaces = _data["noSpaces"] !== undefined ? _data["noSpaces"] : <any>null;
        }
    }

    static fromJS(data: any): PasswordStrengthDto {
        data = typeof data === 'object' ? data : {};
        let result = new PasswordStrengthDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["overallPasswordStrength"] = this.overallPasswordStrength !== undefined ? this.overallPasswordStrength : <any>null;
        data["min_8_Characters"] = this.min_8_Characters !== undefined ? this.min_8_Characters : <any>null;
        data["contain_1_Uppercase"] = this.contain_1_Uppercase !== undefined ? this.contain_1_Uppercase : <any>null;
        data["contain_1_SpecialCharacter"] = this.contain_1_SpecialCharacter !== undefined ? this.contain_1_SpecialCharacter : <any>null;
        data["containNumber"] = this.containNumber !== undefined ? this.containNumber : <any>null;
        data["noSpaces"] = this.noSpaces !== undefined ? this.noSpaces : <any>null;
        return data;
    }
}

export enum OverallPasswordStrength {
    None = 0,
    Weak = 1,
    Fair = 2,
    Good = 3,
    Strong = 4,
    Excellent = 5,
}

export class ForgotPasswordDto {
    userName?: string | null;

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
        }
    }

    static fromJS(data: any): ForgotPasswordDto {
        data = typeof data === 'object' ? data : {};
        let result = new ForgotPasswordDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        return data;
    }
}

export class ResetPasswordDto extends PasswordDto {
    token?: string;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.token = _data["token"] !== undefined ? _data["token"] : <any>null;
        }
    }

    static fromJS(data: any): ResetPasswordDto {
        data = typeof data === 'object' ? data : {};
        let result = new ResetPasswordDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token !== undefined ? this.token : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class AssetDetailGetResp {
    asset?: AssetDetailDto | null;
    userAssetSettings?: UserAssetDetailsSetup | null;

    init(_data?: any) {
        if (_data) {
            this.asset = _data["asset"] ? AssetDetailDto.fromJS(_data["asset"]) : <any>null;
            this.userAssetSettings = _data["userAssetSettings"] ? UserAssetDetailsSetup.fromJS(_data["userAssetSettings"]) : <any>null;
        }
    }

    static fromJS(data: any): AssetDetailGetResp {
        data = typeof data === 'object' ? data : {};
        let result = new AssetDetailGetResp();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["asset"] = this.asset ? this.asset.toJSON() : <any>null;
        data["userAssetSettings"] = this.userAssetSettings ? this.userAssetSettings.toJSON() : <any>null;
        return data;
    }
}

export class AssetDetailDto {
    assetId?: string;
    domainId?: string;
    isPublishedAsset?: boolean;
    publishedDomainName?: string | null;
    assetType?: AssetType;
    assetDescription?: string | null;
    technician?: string | null;
    integrationId?: string | null;
    assetTitle?: string | null;
    designCurveType?: DesignCurveType;
    assetNotes?: string | null;
    referenceDocumentUrl?: string | null;
    siteInfo?: AssetDetailsSiteInfo | null;
    customProperties?: EvolveAssetCustomPropertyDetail[] | null;
    dataChannels?: DataChannelDTO[] | null;

    init(_data?: any) {
        if (_data) {
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.isPublishedAsset = _data["isPublishedAsset"] !== undefined ? _data["isPublishedAsset"] : <any>null;
            this.publishedDomainName = _data["publishedDomainName"] !== undefined ? _data["publishedDomainName"] : <any>null;
            this.assetType = _data["assetType"] !== undefined ? _data["assetType"] : <any>null;
            this.assetDescription = _data["assetDescription"] !== undefined ? _data["assetDescription"] : <any>null;
            this.technician = _data["technician"] !== undefined ? _data["technician"] : <any>null;
            this.integrationId = _data["integrationId"] !== undefined ? _data["integrationId"] : <any>null;
            this.assetTitle = _data["assetTitle"] !== undefined ? _data["assetTitle"] : <any>null;
            this.designCurveType = _data["designCurveType"] !== undefined ? _data["designCurveType"] : <any>null;
            this.assetNotes = _data["assetNotes"] !== undefined ? _data["assetNotes"] : <any>null;
            this.referenceDocumentUrl = _data["referenceDocumentUrl"] !== undefined ? _data["referenceDocumentUrl"] : <any>null;
            this.siteInfo = _data["siteInfo"] ? AssetDetailsSiteInfo.fromJS(_data["siteInfo"]) : <any>null;
            if (Array.isArray(_data["customProperties"])) {
                this.customProperties = [] as any;
                for (let item of _data["customProperties"])
                    this.customProperties!.push(EvolveAssetCustomPropertyDetail.fromJS(item));
            }
            else {
                this.customProperties = <any>null;
            }
            if (Array.isArray(_data["dataChannels"])) {
                this.dataChannels = [] as any;
                for (let item of _data["dataChannels"])
                    this.dataChannels!.push(DataChannelDTO.fromJS(item));
            }
            else {
                this.dataChannels = <any>null;
            }
        }
    }

    static fromJS(data: any): AssetDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new AssetDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["isPublishedAsset"] = this.isPublishedAsset !== undefined ? this.isPublishedAsset : <any>null;
        data["publishedDomainName"] = this.publishedDomainName !== undefined ? this.publishedDomainName : <any>null;
        data["assetType"] = this.assetType !== undefined ? this.assetType : <any>null;
        data["assetDescription"] = this.assetDescription !== undefined ? this.assetDescription : <any>null;
        data["technician"] = this.technician !== undefined ? this.technician : <any>null;
        data["integrationId"] = this.integrationId !== undefined ? this.integrationId : <any>null;
        data["assetTitle"] = this.assetTitle !== undefined ? this.assetTitle : <any>null;
        data["designCurveType"] = this.designCurveType !== undefined ? this.designCurveType : <any>null;
        data["assetNotes"] = this.assetNotes !== undefined ? this.assetNotes : <any>null;
        data["referenceDocumentUrl"] = this.referenceDocumentUrl !== undefined ? this.referenceDocumentUrl : <any>null;
        data["siteInfo"] = this.siteInfo ? this.siteInfo.toJSON() : <any>null;
        if (Array.isArray(this.customProperties)) {
            data["customProperties"] = [];
            for (let item of this.customProperties)
                data["customProperties"].push(item.toJSON());
        }
        if (Array.isArray(this.dataChannels)) {
            data["dataChannels"] = [];
            for (let item of this.dataChannels)
                data["dataChannels"].push(item.toJSON());
        }
        return data;
    }
}

export class UserAssetDetailsSetup {
    graphZoomLevelInHours?: number | null;
    graphStartDate?: Date | null;
    graphEndDate?: Date | null;
    graphedDataChannel?: string[] | null;

    init(_data?: any) {
        if (_data) {
            this.graphZoomLevelInHours = _data["graphZoomLevelInHours"] !== undefined ? _data["graphZoomLevelInHours"] : <any>null;
            this.graphStartDate = _data["graphStartDate"] ? new Date(_data["graphStartDate"].toString()) : <any>null;
            this.graphEndDate = _data["graphEndDate"] ? new Date(_data["graphEndDate"].toString()) : <any>null;
            if (Array.isArray(_data["graphedDataChannel"])) {
                this.graphedDataChannel = [] as any;
                for (let item of _data["graphedDataChannel"])
                    this.graphedDataChannel!.push(item);
            }
            else {
                this.graphedDataChannel = <any>null;
            }
        }
    }

    static fromJS(data: any): UserAssetDetailsSetup {
        data = typeof data === 'object' ? data : {};
        let result = new UserAssetDetailsSetup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["graphZoomLevelInHours"] = this.graphZoomLevelInHours !== undefined ? this.graphZoomLevelInHours : <any>null;
        data["graphStartDate"] = this.graphStartDate ? this.graphStartDate.toISOString() : <any>null;
        data["graphEndDate"] = this.graphEndDate ? this.graphEndDate.toISOString() : <any>null;
        if (Array.isArray(this.graphedDataChannel)) {
            data["graphedDataChannel"] = [];
            for (let item of this.graphedDataChannel)
                data["graphedDataChannel"].push(item);
        }
        return data;
    }
}

export class AssetSummaryDto {
    totalCount?: number;
    records?: AssetSummaryModel[] | null;

    init(_data?: any) {
        if (_data) {
            this.totalCount = _data["totalCount"] !== undefined ? _data["totalCount"] : <any>null;
            if (Array.isArray(_data["records"])) {
                this.records = [] as any;
                for (let item of _data["records"])
                    this.records!.push(AssetSummaryModel.fromJS(item));
            }
            else {
                this.records = <any>null;
            }
        }
    }

    static fromJS(data: any): AssetSummaryDto {
        data = typeof data === 'object' ? data : {};
        let result = new AssetSummaryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount !== undefined ? this.totalCount : <any>null;
        if (Array.isArray(this.records)) {
            data["records"] = [];
            for (let item of this.records)
                data["records"].push(item.toJSON());
        }
        return data;
    }
}

export class AssetSummaryModel {
    assetDescription?: string | null;
    assetTitle?: string | null;
    assetType?: string | null;
    channelNumber?: string | null;
    city?: string | null;
    country?: string | null;
    customerName?: string | null;
    dataAge?: number | null;
    dataChannelDescription?: string | null;
    dataChannelType?: DataChannelType | null;
    domainName?: string | null;
    ftpDomain?: string | null;
    ftpEnabled?: boolean | null;
    ftpId?: string | null;
    importanceLevelImage?: EventImportanceLevelType;
    eventImportanceLevel?: EventImportanceLevelType | null;
    installedTechName?: string | null;
    inventoryState?: string | null;
    productDescription?: string | null;
    reading?: string | null;
    readingTime?: Date | null;
    rtuDeviceId?: string | null;
    scheduledRefill?: Date | null;
    siteTimeZoneDisplayName?: string | null;
    state?: string | null;
    status?: string | null;
    streetAddress?: string | null;
    customField1?: string | null;
    customField2?: string | null;
    customField3?: string | null;
    customField4?: string | null;
    customField5?: string | null;
    customField6?: string | null;
    customField7?: string | null;
    customField8?: string | null;
    customField9?: string | null;
    customField10?: string | null;
    assetId?: string;
    dataChannelId?: string;
    scaledUnits?: string | null;
    displayUnits?: string | null;
    eventInventoryStatusId?: EventInventoryStatusType | null;
    displayPriority?: number;
    hasMissingData?: boolean;
    scaledUOMParams?: AssetSummaryUOMParamsModel | null;
    displayUOMParams?: AssetSummaryUOMParamsModel | null;
    percentFullUOMParams?: AssetSummaryUOMParamsModel | null;

    init(_data?: any) {
        if (_data) {
            this.assetDescription = _data["assetDescription"] !== undefined ? _data["assetDescription"] : <any>null;
            this.assetTitle = _data["assetTitle"] !== undefined ? _data["assetTitle"] : <any>null;
            this.assetType = _data["assetType"] !== undefined ? _data["assetType"] : <any>null;
            this.channelNumber = _data["channelNumber"] !== undefined ? _data["channelNumber"] : <any>null;
            this.city = _data["city"] !== undefined ? _data["city"] : <any>null;
            this.country = _data["country"] !== undefined ? _data["country"] : <any>null;
            this.customerName = _data["customerName"] !== undefined ? _data["customerName"] : <any>null;
            this.dataAge = _data["dataAge"] !== undefined ? _data["dataAge"] : <any>null;
            this.dataChannelDescription = _data["dataChannelDescription"] !== undefined ? _data["dataChannelDescription"] : <any>null;
            this.dataChannelType = _data["dataChannelType"] !== undefined ? _data["dataChannelType"] : <any>null;
            this.domainName = _data["domainName"] !== undefined ? _data["domainName"] : <any>null;
            this.ftpDomain = _data["ftpDomain"] !== undefined ? _data["ftpDomain"] : <any>null;
            this.ftpEnabled = _data["ftpEnabled"] !== undefined ? _data["ftpEnabled"] : <any>null;
            this.ftpId = _data["ftpId"] !== undefined ? _data["ftpId"] : <any>null;
            this.importanceLevelImage = _data["importanceLevelImage"] !== undefined ? _data["importanceLevelImage"] : <any>null;
            this.eventImportanceLevel = _data["eventImportanceLevel"] !== undefined ? _data["eventImportanceLevel"] : <any>null;
            this.installedTechName = _data["installedTechName"] !== undefined ? _data["installedTechName"] : <any>null;
            this.inventoryState = _data["inventoryState"] !== undefined ? _data["inventoryState"] : <any>null;
            this.productDescription = _data["productDescription"] !== undefined ? _data["productDescription"] : <any>null;
            this.reading = _data["reading"] !== undefined ? _data["reading"] : <any>null;
            this.readingTime = _data["readingTime"] ? new Date(_data["readingTime"].toString()) : <any>null;
            this.rtuDeviceId = _data["rtuDeviceId"] !== undefined ? _data["rtuDeviceId"] : <any>null;
            this.scheduledRefill = _data["scheduledRefill"] ? new Date(_data["scheduledRefill"].toString()) : <any>null;
            this.siteTimeZoneDisplayName = _data["siteTimeZoneDisplayName"] !== undefined ? _data["siteTimeZoneDisplayName"] : <any>null;
            this.state = _data["state"] !== undefined ? _data["state"] : <any>null;
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
            this.streetAddress = _data["streetAddress"] !== undefined ? _data["streetAddress"] : <any>null;
            this.customField1 = _data["customField1"] !== undefined ? _data["customField1"] : <any>null;
            this.customField2 = _data["customField2"] !== undefined ? _data["customField2"] : <any>null;
            this.customField3 = _data["customField3"] !== undefined ? _data["customField3"] : <any>null;
            this.customField4 = _data["customField4"] !== undefined ? _data["customField4"] : <any>null;
            this.customField5 = _data["customField5"] !== undefined ? _data["customField5"] : <any>null;
            this.customField6 = _data["customField6"] !== undefined ? _data["customField6"] : <any>null;
            this.customField7 = _data["customField7"] !== undefined ? _data["customField7"] : <any>null;
            this.customField8 = _data["customField8"] !== undefined ? _data["customField8"] : <any>null;
            this.customField9 = _data["customField9"] !== undefined ? _data["customField9"] : <any>null;
            this.customField10 = _data["customField10"] !== undefined ? _data["customField10"] : <any>null;
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.scaledUnits = _data["scaledUnits"] !== undefined ? _data["scaledUnits"] : <any>null;
            this.displayUnits = _data["displayUnits"] !== undefined ? _data["displayUnits"] : <any>null;
            this.eventInventoryStatusId = _data["eventInventoryStatusId"] !== undefined ? _data["eventInventoryStatusId"] : <any>null;
            this.displayPriority = _data["displayPriority"] !== undefined ? _data["displayPriority"] : <any>null;
            this.hasMissingData = _data["hasMissingData"] !== undefined ? _data["hasMissingData"] : <any>null;
            this.scaledUOMParams = _data["scaledUOMParams"] ? AssetSummaryUOMParamsModel.fromJS(_data["scaledUOMParams"]) : <any>null;
            this.displayUOMParams = _data["displayUOMParams"] ? AssetSummaryUOMParamsModel.fromJS(_data["displayUOMParams"]) : <any>null;
            this.percentFullUOMParams = _data["percentFullUOMParams"] ? AssetSummaryUOMParamsModel.fromJS(_data["percentFullUOMParams"]) : <any>null;
        }
    }

    static fromJS(data: any): AssetSummaryModel {
        data = typeof data === 'object' ? data : {};
        let result = new AssetSummaryModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetDescription"] = this.assetDescription !== undefined ? this.assetDescription : <any>null;
        data["assetTitle"] = this.assetTitle !== undefined ? this.assetTitle : <any>null;
        data["assetType"] = this.assetType !== undefined ? this.assetType : <any>null;
        data["channelNumber"] = this.channelNumber !== undefined ? this.channelNumber : <any>null;
        data["city"] = this.city !== undefined ? this.city : <any>null;
        data["country"] = this.country !== undefined ? this.country : <any>null;
        data["customerName"] = this.customerName !== undefined ? this.customerName : <any>null;
        data["dataAge"] = this.dataAge !== undefined ? this.dataAge : <any>null;
        data["dataChannelDescription"] = this.dataChannelDescription !== undefined ? this.dataChannelDescription : <any>null;
        data["dataChannelType"] = this.dataChannelType !== undefined ? this.dataChannelType : <any>null;
        data["domainName"] = this.domainName !== undefined ? this.domainName : <any>null;
        data["ftpDomain"] = this.ftpDomain !== undefined ? this.ftpDomain : <any>null;
        data["ftpEnabled"] = this.ftpEnabled !== undefined ? this.ftpEnabled : <any>null;
        data["ftpId"] = this.ftpId !== undefined ? this.ftpId : <any>null;
        data["importanceLevelImage"] = this.importanceLevelImage !== undefined ? this.importanceLevelImage : <any>null;
        data["eventImportanceLevel"] = this.eventImportanceLevel !== undefined ? this.eventImportanceLevel : <any>null;
        data["installedTechName"] = this.installedTechName !== undefined ? this.installedTechName : <any>null;
        data["inventoryState"] = this.inventoryState !== undefined ? this.inventoryState : <any>null;
        data["productDescription"] = this.productDescription !== undefined ? this.productDescription : <any>null;
        data["reading"] = this.reading !== undefined ? this.reading : <any>null;
        data["readingTime"] = this.readingTime ? this.readingTime.toISOString() : <any>null;
        data["rtuDeviceId"] = this.rtuDeviceId !== undefined ? this.rtuDeviceId : <any>null;
        data["scheduledRefill"] = this.scheduledRefill ? this.scheduledRefill.toISOString() : <any>null;
        data["siteTimeZoneDisplayName"] = this.siteTimeZoneDisplayName !== undefined ? this.siteTimeZoneDisplayName : <any>null;
        data["state"] = this.state !== undefined ? this.state : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["streetAddress"] = this.streetAddress !== undefined ? this.streetAddress : <any>null;
        data["customField1"] = this.customField1 !== undefined ? this.customField1 : <any>null;
        data["customField2"] = this.customField2 !== undefined ? this.customField2 : <any>null;
        data["customField3"] = this.customField3 !== undefined ? this.customField3 : <any>null;
        data["customField4"] = this.customField4 !== undefined ? this.customField4 : <any>null;
        data["customField5"] = this.customField5 !== undefined ? this.customField5 : <any>null;
        data["customField6"] = this.customField6 !== undefined ? this.customField6 : <any>null;
        data["customField7"] = this.customField7 !== undefined ? this.customField7 : <any>null;
        data["customField8"] = this.customField8 !== undefined ? this.customField8 : <any>null;
        data["customField9"] = this.customField9 !== undefined ? this.customField9 : <any>null;
        data["customField10"] = this.customField10 !== undefined ? this.customField10 : <any>null;
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["scaledUnits"] = this.scaledUnits !== undefined ? this.scaledUnits : <any>null;
        data["displayUnits"] = this.displayUnits !== undefined ? this.displayUnits : <any>null;
        data["eventInventoryStatusId"] = this.eventInventoryStatusId !== undefined ? this.eventInventoryStatusId : <any>null;
        data["displayPriority"] = this.displayPriority !== undefined ? this.displayPriority : <any>null;
        data["hasMissingData"] = this.hasMissingData !== undefined ? this.hasMissingData : <any>null;
        data["scaledUOMParams"] = this.scaledUOMParams ? this.scaledUOMParams.toJSON() : <any>null;
        data["displayUOMParams"] = this.displayUOMParams ? this.displayUOMParams.toJSON() : <any>null;
        data["percentFullUOMParams"] = this.percentFullUOMParams ? this.percentFullUOMParams.toJSON() : <any>null;
        return data;
    }
}

export class AssetSummaryUOMParamsModel {
    reading?: number | null;
    alarmLevels?: string | null;
    deliverable?: number | null;

    init(_data?: any) {
        if (_data) {
            this.reading = _data["reading"] !== undefined ? _data["reading"] : <any>null;
            this.alarmLevels = _data["alarmLevels"] !== undefined ? _data["alarmLevels"] : <any>null;
            this.deliverable = _data["deliverable"] !== undefined ? _data["deliverable"] : <any>null;
        }
    }

    static fromJS(data: any): AssetSummaryUOMParamsModel {
        data = typeof data === 'object' ? data : {};
        let result = new AssetSummaryUOMParamsModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["reading"] = this.reading !== undefined ? this.reading : <any>null;
        data["alarmLevels"] = this.alarmLevels !== undefined ? this.alarmLevels : <any>null;
        data["deliverable"] = this.deliverable !== undefined ? this.deliverable : <any>null;
        return data;
    }
}

export class AssetSummaryMobileDto {
    records?: AssetMobileDto[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["records"])) {
                this.records = [] as any;
                for (let item of _data["records"])
                    this.records!.push(AssetMobileDto.fromJS(item));
            }
            else {
                this.records = <any>null;
            }
        }
    }

    static fromJS(data: any): AssetSummaryMobileDto {
        data = typeof data === 'object' ? data : {};
        let result = new AssetSummaryMobileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.records)) {
            data["records"] = [];
            for (let item of this.records)
                data["records"].push(item.toJSON());
        }
        return data;
    }
}

export class AssetMobileDto {
    assetId?: string;
    assetTitle?: string | null;
    isPublishedAsset?: boolean;
    assetTypeId?: AssetDeviceType | null;
    tankTypeId?: TankTypeEnum | null;
    product?: string | null;
    rtuCategoryTypeId?: RtuDeviceCategory | null;
    rtuSerialNumber?: string | null;
    dataChannel?: DataChannelDetailDto | null;
    address?: AddressDetailDto | null;
    reading?: ReadingDTO2 | null;

    init(_data?: any) {
        if (_data) {
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.assetTitle = _data["assetTitle"] !== undefined ? _data["assetTitle"] : <any>null;
            this.isPublishedAsset = _data["isPublishedAsset"] !== undefined ? _data["isPublishedAsset"] : <any>null;
            this.assetTypeId = _data["assetTypeId"] !== undefined ? _data["assetTypeId"] : <any>null;
            this.tankTypeId = _data["tankTypeId"] !== undefined ? _data["tankTypeId"] : <any>null;
            this.product = _data["product"] !== undefined ? _data["product"] : <any>null;
            this.rtuCategoryTypeId = _data["rtuCategoryTypeId"] !== undefined ? _data["rtuCategoryTypeId"] : <any>null;
            this.rtuSerialNumber = _data["rtuSerialNumber"] !== undefined ? _data["rtuSerialNumber"] : <any>null;
            this.dataChannel = _data["dataChannel"] ? DataChannelDetailDto.fromJS(_data["dataChannel"]) : <any>null;
            this.address = _data["address"] ? AddressDetailDto.fromJS(_data["address"]) : <any>null;
            this.reading = _data["reading"] ? ReadingDTO2.fromJS(_data["reading"]) : <any>null;
        }
    }

    static fromJS(data: any): AssetMobileDto {
        data = typeof data === 'object' ? data : {};
        let result = new AssetMobileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["assetTitle"] = this.assetTitle !== undefined ? this.assetTitle : <any>null;
        data["isPublishedAsset"] = this.isPublishedAsset !== undefined ? this.isPublishedAsset : <any>null;
        data["assetTypeId"] = this.assetTypeId !== undefined ? this.assetTypeId : <any>null;
        data["tankTypeId"] = this.tankTypeId !== undefined ? this.tankTypeId : <any>null;
        data["product"] = this.product !== undefined ? this.product : <any>null;
        data["rtuCategoryTypeId"] = this.rtuCategoryTypeId !== undefined ? this.rtuCategoryTypeId : <any>null;
        data["rtuSerialNumber"] = this.rtuSerialNumber !== undefined ? this.rtuSerialNumber : <any>null;
        data["dataChannel"] = this.dataChannel ? this.dataChannel.toJSON() : <any>null;
        data["address"] = this.address ? this.address.toJSON() : <any>null;
        data["reading"] = this.reading ? this.reading.toJSON() : <any>null;
        return data;
    }
}

export class DataChannelDetailDto {
    eventImportanceLevelTypeId?: EventRuleImportanceLevel | null;
    eventInventoryStatusTypeId?: EventRuleInventoryStatus | null;
    dataChannelTypeId?: DataChannelCategory;
    dataChannelId?: string;
    isPublishedDataChannel?: boolean;

    init(_data?: any) {
        if (_data) {
            this.eventImportanceLevelTypeId = _data["eventImportanceLevelTypeId"] !== undefined ? _data["eventImportanceLevelTypeId"] : <any>null;
            this.eventInventoryStatusTypeId = _data["eventInventoryStatusTypeId"] !== undefined ? _data["eventInventoryStatusTypeId"] : <any>null;
            this.dataChannelTypeId = _data["dataChannelTypeId"] !== undefined ? _data["dataChannelTypeId"] : <any>null;
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.isPublishedDataChannel = _data["isPublishedDataChannel"] !== undefined ? _data["isPublishedDataChannel"] : <any>null;
        }
    }

    static fromJS(data: any): DataChannelDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["eventImportanceLevelTypeId"] = this.eventImportanceLevelTypeId !== undefined ? this.eventImportanceLevelTypeId : <any>null;
        data["eventInventoryStatusTypeId"] = this.eventInventoryStatusTypeId !== undefined ? this.eventInventoryStatusTypeId : <any>null;
        data["dataChannelTypeId"] = this.dataChannelTypeId !== undefined ? this.dataChannelTypeId : <any>null;
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["isPublishedDataChannel"] = this.isPublishedDataChannel !== undefined ? this.isPublishedDataChannel : <any>null;
        return data;
    }
}

export class AddressDetailDto {
    country?: string | null;
    state?: string | null;
    city?: string | null;
    streetAddress?: string | null;

    init(_data?: any) {
        if (_data) {
            this.country = _data["country"] !== undefined ? _data["country"] : <any>null;
            this.state = _data["state"] !== undefined ? _data["state"] : <any>null;
            this.city = _data["city"] !== undefined ? _data["city"] : <any>null;
            this.streetAddress = _data["streetAddress"] !== undefined ? _data["streetAddress"] : <any>null;
        }
    }

    static fromJS(data: any): AddressDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddressDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["country"] = this.country !== undefined ? this.country : <any>null;
        data["state"] = this.state !== undefined ? this.state : <any>null;
        data["city"] = this.city !== undefined ? this.city : <any>null;
        data["streetAddress"] = this.streetAddress !== undefined ? this.streetAddress : <any>null;
        return data;
    }
}

export class ReadingDTO2 {
    percentFull?: number | null;
    scaledValue?: number | null;
    scaledUOM?: string | null;
    displayValue?: number | null;
    displayUOM?: string | null;
    decimalPlaces?: number;
    readingTimestamp?: Date | null;

    init(_data?: any) {
        if (_data) {
            this.percentFull = _data["percentFull"] !== undefined ? _data["percentFull"] : <any>null;
            this.scaledValue = _data["scaledValue"] !== undefined ? _data["scaledValue"] : <any>null;
            this.scaledUOM = _data["scaledUOM"] !== undefined ? _data["scaledUOM"] : <any>null;
            this.displayValue = _data["displayValue"] !== undefined ? _data["displayValue"] : <any>null;
            this.displayUOM = _data["displayUOM"] !== undefined ? _data["displayUOM"] : <any>null;
            this.decimalPlaces = _data["decimalPlaces"] !== undefined ? _data["decimalPlaces"] : <any>null;
            this.readingTimestamp = _data["readingTimestamp"] ? new Date(_data["readingTimestamp"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): ReadingDTO2 {
        data = typeof data === 'object' ? data : {};
        let result = new ReadingDTO2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["percentFull"] = this.percentFull !== undefined ? this.percentFull : <any>null;
        data["scaledValue"] = this.scaledValue !== undefined ? this.scaledValue : <any>null;
        data["scaledUOM"] = this.scaledUOM !== undefined ? this.scaledUOM : <any>null;
        data["displayValue"] = this.displayValue !== undefined ? this.displayValue : <any>null;
        data["displayUOM"] = this.displayUOM !== undefined ? this.displayUOM : <any>null;
        data["decimalPlaces"] = this.decimalPlaces !== undefined ? this.decimalPlaces : <any>null;
        data["readingTimestamp"] = this.readingTimestamp ? this.readingTimestamp.toISOString() : <any>null;
        return data;
    }
}

export class AssetDataChannelsDisplayPriorityDto {
    dataChannelsDisplayPriority?: { [key: string]: number; } | null;

    init(_data?: any) {
        if (_data) {
            if (_data["dataChannelsDisplayPriority"]) {
                this.dataChannelsDisplayPriority = {} as any;
                for (let key in _data["dataChannelsDisplayPriority"]) {
                    if (_data["dataChannelsDisplayPriority"].hasOwnProperty(key))
                        (<any>this.dataChannelsDisplayPriority)![key] = _data["dataChannelsDisplayPriority"][key] !== undefined ? _data["dataChannelsDisplayPriority"][key] : <any>null;
                }
            }
            else {
                this.dataChannelsDisplayPriority = <any>null;
            }
        }
    }

    static fromJS(data: any): AssetDataChannelsDisplayPriorityDto {
        data = typeof data === 'object' ? data : {};
        let result = new AssetDataChannelsDisplayPriorityDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.dataChannelsDisplayPriority) {
            data["dataChannelsDisplayPriority"] = {};
            for (let key in this.dataChannelsDisplayPriority) {
                if (this.dataChannelsDisplayPriority.hasOwnProperty(key))
                    (<any>data["dataChannelsDisplayPriority"])[key] = this.dataChannelsDisplayPriority[key] !== undefined ? this.dataChannelsDisplayPriority[key] : <any>null;
            }
        }
        return data;
    }
}

export class TupleOfIntegerAndListOfAssetNavItemDto {
    item1?: number;
    item2?: AssetNavItemDto[];

    init(_data?: any) {
        if (_data) {
            this.item1 = _data["item1"] !== undefined ? _data["item1"] : <any>null;
            if (Array.isArray(_data["item2"])) {
                this.item2 = [] as any;
                for (let item of _data["item2"])
                    this.item2!.push(AssetNavItemDto.fromJS(item));
            }
            else {
                this.item2 = <any>null;
            }
        }
    }

    static fromJS(data: any): TupleOfIntegerAndListOfAssetNavItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new TupleOfIntegerAndListOfAssetNavItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item1"] = this.item1 !== undefined ? this.item1 : <any>null;
        if (Array.isArray(this.item2)) {
            data["item2"] = [];
            for (let item of this.item2)
                data["item2"].push(item.toJSON());
        }
        return data;
    }
}

export class AssetNavItemDto {
    assetId?: string;
    assetTitle?: string | null;
    assetDescription?: string | null;
    dataChannel?: AssetNavItemDataChannelDto | null;

    init(_data?: any) {
        if (_data) {
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.assetTitle = _data["assetTitle"] !== undefined ? _data["assetTitle"] : <any>null;
            this.assetDescription = _data["assetDescription"] !== undefined ? _data["assetDescription"] : <any>null;
            this.dataChannel = _data["dataChannel"] ? AssetNavItemDataChannelDto.fromJS(_data["dataChannel"]) : <any>null;
        }
    }

    static fromJS(data: any): AssetNavItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new AssetNavItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["assetTitle"] = this.assetTitle !== undefined ? this.assetTitle : <any>null;
        data["assetDescription"] = this.assetDescription !== undefined ? this.assetDescription : <any>null;
        data["dataChannel"] = this.dataChannel ? this.dataChannel.toJSON() : <any>null;
        return data;
    }
}

export class AssetNavItemDataChannelDto {
    dataChannelId?: string;
    channelNumber?: string | null;
    deviceId?: string | null;
    productDescription?: string | null;
    scaledReading?: number | null;
    scaledUnits?: string | null;
    readingTime?: Date | null;
    tankType?: TankTypeEnum | null;
    eventInventoryStatusTypeId?: EventRuleInventoryStatus | null;
    percentFull?: number | null;

    init(_data?: any) {
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.channelNumber = _data["channelNumber"] !== undefined ? _data["channelNumber"] : <any>null;
            this.deviceId = _data["deviceId"] !== undefined ? _data["deviceId"] : <any>null;
            this.productDescription = _data["productDescription"] !== undefined ? _data["productDescription"] : <any>null;
            this.scaledReading = _data["scaledReading"] !== undefined ? _data["scaledReading"] : <any>null;
            this.scaledUnits = _data["scaledUnits"] !== undefined ? _data["scaledUnits"] : <any>null;
            this.readingTime = _data["readingTime"] ? new Date(_data["readingTime"].toString()) : <any>null;
            this.tankType = _data["tankType"] !== undefined ? _data["tankType"] : <any>null;
            this.eventInventoryStatusTypeId = _data["eventInventoryStatusTypeId"] !== undefined ? _data["eventInventoryStatusTypeId"] : <any>null;
            this.percentFull = _data["percentFull"] !== undefined ? _data["percentFull"] : <any>null;
        }
    }

    static fromJS(data: any): AssetNavItemDataChannelDto {
        data = typeof data === 'object' ? data : {};
        let result = new AssetNavItemDataChannelDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["channelNumber"] = this.channelNumber !== undefined ? this.channelNumber : <any>null;
        data["deviceId"] = this.deviceId !== undefined ? this.deviceId : <any>null;
        data["productDescription"] = this.productDescription !== undefined ? this.productDescription : <any>null;
        data["scaledReading"] = this.scaledReading !== undefined ? this.scaledReading : <any>null;
        data["scaledUnits"] = this.scaledUnits !== undefined ? this.scaledUnits : <any>null;
        data["readingTime"] = this.readingTime ? this.readingTime.toISOString() : <any>null;
        data["tankType"] = this.tankType !== undefined ? this.tankType : <any>null;
        data["eventInventoryStatusTypeId"] = this.eventInventoryStatusTypeId !== undefined ? this.eventInventoryStatusTypeId : <any>null;
        data["percentFull"] = this.percentFull !== undefined ? this.percentFull : <any>null;
        return data;
    }
}

export class AssetNavSearchOptionsDto {
    pageNumber?: number;
    pageSize?: number | null;
    sortBy?: string | null;
    sortDirection?: ListSortDirection;
    filterBy?: AssetListFilterOptions;
    filterText?: string | null;
    groupBy?: AssetSummaryGroupingOptions;
    groupSortDirection?: ListSortDirection;
    assetSearchExpression?: string | null;
    dataChannelTypes?: DataChannelType[] | null;
    inventoryStates?: string[] | null;
    assetSearchDomainId?: string | null;

    init(_data?: any) {
        if (_data) {
            this.pageNumber = _data["pageNumber"] !== undefined ? _data["pageNumber"] : <any>null;
            this.pageSize = _data["pageSize"] !== undefined ? _data["pageSize"] : <any>null;
            this.sortBy = _data["sortBy"] !== undefined ? _data["sortBy"] : <any>null;
            this.sortDirection = _data["sortDirection"] !== undefined ? _data["sortDirection"] : <any>null;
            this.filterBy = _data["filterBy"] !== undefined ? _data["filterBy"] : <any>null;
            this.filterText = _data["filterText"] !== undefined ? _data["filterText"] : <any>null;
            this.groupBy = _data["groupBy"] !== undefined ? _data["groupBy"] : <any>null;
            this.groupSortDirection = _data["groupSortDirection"] !== undefined ? _data["groupSortDirection"] : <any>null;
            this.assetSearchExpression = _data["assetSearchExpression"] !== undefined ? _data["assetSearchExpression"] : <any>null;
            if (Array.isArray(_data["dataChannelTypes"])) {
                this.dataChannelTypes = [] as any;
                for (let item of _data["dataChannelTypes"])
                    this.dataChannelTypes!.push(item);
            }
            else {
                this.dataChannelTypes = <any>null;
            }
            if (Array.isArray(_data["inventoryStates"])) {
                this.inventoryStates = [] as any;
                for (let item of _data["inventoryStates"])
                    this.inventoryStates!.push(item);
            }
            else {
                this.inventoryStates = <any>null;
            }
            this.assetSearchDomainId = _data["assetSearchDomainId"] !== undefined ? _data["assetSearchDomainId"] : <any>null;
        }
    }

    static fromJS(data: any): AssetNavSearchOptionsDto {
        data = typeof data === 'object' ? data : {};
        let result = new AssetNavSearchOptionsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageNumber"] = this.pageNumber !== undefined ? this.pageNumber : <any>null;
        data["pageSize"] = this.pageSize !== undefined ? this.pageSize : <any>null;
        data["sortBy"] = this.sortBy !== undefined ? this.sortBy : <any>null;
        data["sortDirection"] = this.sortDirection !== undefined ? this.sortDirection : <any>null;
        data["filterBy"] = this.filterBy !== undefined ? this.filterBy : <any>null;
        data["filterText"] = this.filterText !== undefined ? this.filterText : <any>null;
        data["groupBy"] = this.groupBy !== undefined ? this.groupBy : <any>null;
        data["groupSortDirection"] = this.groupSortDirection !== undefined ? this.groupSortDirection : <any>null;
        data["assetSearchExpression"] = this.assetSearchExpression !== undefined ? this.assetSearchExpression : <any>null;
        if (Array.isArray(this.dataChannelTypes)) {
            data["dataChannelTypes"] = [];
            for (let item of this.dataChannelTypes)
                data["dataChannelTypes"].push(item);
        }
        if (Array.isArray(this.inventoryStates)) {
            data["inventoryStates"] = [];
            for (let item of this.inventoryStates)
                data["inventoryStates"].push(item);
        }
        data["assetSearchDomainId"] = this.assetSearchDomainId !== undefined ? this.assetSearchDomainId : <any>null;
        return data;
    }
}

export class ChartTagBaseDto {
    dataChannelTypeId?: DataChannelCategory;
    description?: string | null;
    tagId?: string | null;
    chartYAxisPosition?: number;

    init(_data?: any) {
        if (_data) {
            this.dataChannelTypeId = _data["dataChannelTypeId"] !== undefined ? _data["dataChannelTypeId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.tagId = _data["tagId"] !== undefined ? _data["tagId"] : <any>null;
            this.chartYAxisPosition = _data["chartYAxisPosition"] !== undefined ? _data["chartYAxisPosition"] : <any>null;
        }
    }

    static fromJS(data: any): ChartTagBaseDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChartTagBaseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelTypeId"] = this.dataChannelTypeId !== undefined ? this.dataChannelTypeId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["tagId"] = this.tagId !== undefined ? this.tagId : <any>null;
        data["chartYAxisPosition"] = this.chartYAxisPosition !== undefined ? this.chartYAxisPosition : <any>null;
        return data;
    }
}

export class ChartDataChannelDto extends ChartTagBaseDto {
    chartDataChannelId?: number;
    dataChannelId?: string;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.chartDataChannelId = _data["chartDataChannelId"] !== undefined ? _data["chartDataChannelId"] : <any>null;
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
        }
    }

    static fromJS(data: any): ChartDataChannelDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChartDataChannelDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["chartDataChannelId"] = this.chartDataChannelId !== undefined ? this.chartDataChannelId : <any>null;
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class ChartDto {
    userChartList?: UserChartDto[] | null;
    defaultChartList?: DefaultChartDto[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["userChartList"])) {
                this.userChartList = [] as any;
                for (let item of _data["userChartList"])
                    this.userChartList!.push(UserChartDto.fromJS(item));
            }
            else {
                this.userChartList = <any>null;
            }
            if (Array.isArray(_data["defaultChartList"])) {
                this.defaultChartList = [] as any;
                for (let item of _data["defaultChartList"])
                    this.defaultChartList!.push(DefaultChartDto.fromJS(item));
            }
            else {
                this.defaultChartList = <any>null;
            }
        }
    }

    static fromJS(data: any): ChartDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChartDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.userChartList)) {
            data["userChartList"] = [];
            for (let item of this.userChartList)
                data["userChartList"].push(item.toJSON());
        }
        if (Array.isArray(this.defaultChartList)) {
            data["defaultChartList"] = [];
            for (let item of this.defaultChartList)
                data["defaultChartList"].push(item.toJSON());
        }
        return data;
    }
}

export class ChartBaseDto extends BaseDto {
    chartId?: number;
    name?: string | null;
    assetId?: string;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.chartId = _data["chartId"] !== undefined ? _data["chartId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
        }
    }

    static fromJS(data: any): ChartBaseDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChartBaseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["chartId"] = this.chartId !== undefined ? this.chartId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class UserChartDto extends ChartBaseDto {
    chartDataChannels?: ChartDataChannelDto[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["chartDataChannels"])) {
                this.chartDataChannels = [] as any;
                for (let item of _data["chartDataChannels"])
                    this.chartDataChannels!.push(ChartDataChannelDto.fromJS(item));
            }
            else {
                this.chartDataChannels = <any>null;
            }
        }
    }

    static fromJS(data: any): UserChartDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserChartDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.chartDataChannels)) {
            data["chartDataChannels"] = [];
            for (let item of this.chartDataChannels)
                data["chartDataChannels"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export class DefaultChartDto extends ChartBaseDto {
    chartTags?: ChartTagBaseDto[] | null;
    sortIndex?: number;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["chartTags"])) {
                this.chartTags = [] as any;
                for (let item of _data["chartTags"])
                    this.chartTags!.push(ChartTagBaseDto.fromJS(item));
            }
            else {
                this.chartTags = <any>null;
            }
            this.sortIndex = _data["sortIndex"] !== undefined ? _data["sortIndex"] : <any>null;
        }
    }

    static fromJS(data: any): DefaultChartDto {
        data = typeof data === 'object' ? data : {};
        let result = new DefaultChartDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.chartTags)) {
            data["chartTags"] = [];
            for (let item of this.chartTags)
                data["chartTags"].push(item.toJSON());
        }
        data["sortIndex"] = this.sortIndex !== undefined ? this.sortIndex : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class AvailableTagBase {
    tagId?: string | null;
    tagName?: string | null;

    init(_data?: any) {
        if (_data) {
            this.tagId = _data["tagId"] !== undefined ? _data["tagId"] : <any>null;
            this.tagName = _data["tagName"] !== undefined ? _data["tagName"] : <any>null;
        }
    }

    static fromJS(data: any): AvailableTagBase {
        data = typeof data === 'object' ? data : {};
        let result = new AvailableTagBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tagId"] = this.tagId !== undefined ? this.tagId : <any>null;
        data["tagName"] = this.tagName !== undefined ? this.tagName : <any>null;
        return data;
    }
}

export class ChartDefaultDto {
    chartDefaultId?: number;
    name?: string | null;
    assetSubTypeId?: number;
    sortIndex?: number;
    chartDefaultTags?: ChartDefaultTagDto[] | null;

    init(_data?: any) {
        if (_data) {
            this.chartDefaultId = _data["chartDefaultId"] !== undefined ? _data["chartDefaultId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.assetSubTypeId = _data["assetSubTypeId"] !== undefined ? _data["assetSubTypeId"] : <any>null;
            this.sortIndex = _data["sortIndex"] !== undefined ? _data["sortIndex"] : <any>null;
            if (Array.isArray(_data["chartDefaultTags"])) {
                this.chartDefaultTags = [] as any;
                for (let item of _data["chartDefaultTags"])
                    this.chartDefaultTags!.push(ChartDefaultTagDto.fromJS(item));
            }
            else {
                this.chartDefaultTags = <any>null;
            }
        }
    }

    static fromJS(data: any): ChartDefaultDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChartDefaultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["chartDefaultId"] = this.chartDefaultId !== undefined ? this.chartDefaultId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["assetSubTypeId"] = this.assetSubTypeId !== undefined ? this.assetSubTypeId : <any>null;
        data["sortIndex"] = this.sortIndex !== undefined ? this.sortIndex : <any>null;
        if (Array.isArray(this.chartDefaultTags)) {
            data["chartDefaultTags"] = [];
            for (let item of this.chartDefaultTags)
                data["chartDefaultTags"].push(item.toJSON());
        }
        return data;
    }
}

export class ChartDefaultTagDto {
    dataChannelTypeId?: DataChannelCategory;
    chartDefaultTagId?: number;
    tagName?: string | null;
    assetSubTypeId?: number;
    chartYaxisPosition?: number;

    init(_data?: any) {
        if (_data) {
            this.dataChannelTypeId = _data["dataChannelTypeId"] !== undefined ? _data["dataChannelTypeId"] : <any>null;
            this.chartDefaultTagId = _data["chartDefaultTagId"] !== undefined ? _data["chartDefaultTagId"] : <any>null;
            this.tagName = _data["tagName"] !== undefined ? _data["tagName"] : <any>null;
            this.assetSubTypeId = _data["assetSubTypeId"] !== undefined ? _data["assetSubTypeId"] : <any>null;
            this.chartYaxisPosition = _data["chartYaxisPosition"] !== undefined ? _data["chartYaxisPosition"] : <any>null;
        }
    }

    static fromJS(data: any): ChartDefaultTagDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChartDefaultTagDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelTypeId"] = this.dataChannelTypeId !== undefined ? this.dataChannelTypeId : <any>null;
        data["chartDefaultTagId"] = this.chartDefaultTagId !== undefined ? this.chartDefaultTagId : <any>null;
        data["tagName"] = this.tagName !== undefined ? this.tagName : <any>null;
        data["assetSubTypeId"] = this.assetSubTypeId !== undefined ? this.assetSubTypeId : <any>null;
        data["chartYaxisPosition"] = this.chartYaxisPosition !== undefined ? this.chartYaxisPosition : <any>null;
        return data;
    }
}

export class GetSiteAssetSummaryDto {
    id?: string;
    name?: string | null;
    address1?: string | null;
    address2?: string | null;
    address3?: string | null;
    city?: string | null;
    state?: string | null;
    country?: string | null;
    assetCount?: number;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.address1 = _data["address1"] !== undefined ? _data["address1"] : <any>null;
            this.address2 = _data["address2"] !== undefined ? _data["address2"] : <any>null;
            this.address3 = _data["address3"] !== undefined ? _data["address3"] : <any>null;
            this.city = _data["city"] !== undefined ? _data["city"] : <any>null;
            this.state = _data["state"] !== undefined ? _data["state"] : <any>null;
            this.country = _data["country"] !== undefined ? _data["country"] : <any>null;
            this.assetCount = _data["assetCount"] !== undefined ? _data["assetCount"] : <any>null;
        }
    }

    static fromJS(data: any): GetSiteAssetSummaryDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetSiteAssetSummaryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["address1"] = this.address1 !== undefined ? this.address1 : <any>null;
        data["address2"] = this.address2 !== undefined ? this.address2 : <any>null;
        data["address3"] = this.address3 !== undefined ? this.address3 : <any>null;
        data["city"] = this.city !== undefined ? this.city : <any>null;
        data["state"] = this.state !== undefined ? this.state : <any>null;
        data["country"] = this.country !== undefined ? this.country : <any>null;
        data["assetCount"] = this.assetCount !== undefined ? this.assetCount : <any>null;
        return data;
    }
}

export class GetFreezerDetailDto {
    start?: Date;
    end?: Date;
    siteName?: string | null;
    siteId?: string | null;
    freezerName?: string | null;
    freezerId?: string | null;
    availableTags?: AvailableTagDto[] | null;
    oxygenCount?: number;
    lowTemperatureCount?: number;
    doorsOpenCount?: number;
    cycleRunTime?: number;
    cycleIdleTime?: number;
    workingPercent?: number;
    runsAbove72Hours?: number;
    runsAbove60Hours?: number;
    runsAbove48Hours?: number;
    runsAbove36Hours?: number;
    runsAbove24Hours?: number;
    temperatureAverage?: number;
    temperatureMaximum?: number;
    temperatureMinimum?: number;
    fanSpeedAverage?: number;
    fanSpeedMaximum?: number;
    fanSpeedMinimum?: number;
    cleanDriedCount?: number;

    init(_data?: any) {
        if (_data) {
            this.start = _data["start"] ? new Date(_data["start"].toString()) : <any>null;
            this.end = _data["end"] ? new Date(_data["end"].toString()) : <any>null;
            this.siteName = _data["siteName"] !== undefined ? _data["siteName"] : <any>null;
            this.siteId = _data["siteId"] !== undefined ? _data["siteId"] : <any>null;
            this.freezerName = _data["freezerName"] !== undefined ? _data["freezerName"] : <any>null;
            this.freezerId = _data["freezerId"] !== undefined ? _data["freezerId"] : <any>null;
            if (Array.isArray(_data["availableTags"])) {
                this.availableTags = [] as any;
                for (let item of _data["availableTags"])
                    this.availableTags!.push(AvailableTagDto.fromJS(item));
            }
            else {
                this.availableTags = <any>null;
            }
            this.oxygenCount = _data["oxygenCount"] !== undefined ? _data["oxygenCount"] : <any>null;
            this.lowTemperatureCount = _data["lowTemperatureCount"] !== undefined ? _data["lowTemperatureCount"] : <any>null;
            this.doorsOpenCount = _data["doorsOpenCount"] !== undefined ? _data["doorsOpenCount"] : <any>null;
            this.cycleRunTime = _data["cycleRunTime"] !== undefined ? _data["cycleRunTime"] : <any>null;
            this.cycleIdleTime = _data["cycleIdleTime"] !== undefined ? _data["cycleIdleTime"] : <any>null;
            this.workingPercent = _data["workingPercent"] !== undefined ? _data["workingPercent"] : <any>null;
            this.runsAbove72Hours = _data["runsAbove72Hours"] !== undefined ? _data["runsAbove72Hours"] : <any>null;
            this.runsAbove60Hours = _data["runsAbove60Hours"] !== undefined ? _data["runsAbove60Hours"] : <any>null;
            this.runsAbove48Hours = _data["runsAbove48Hours"] !== undefined ? _data["runsAbove48Hours"] : <any>null;
            this.runsAbove36Hours = _data["runsAbove36Hours"] !== undefined ? _data["runsAbove36Hours"] : <any>null;
            this.runsAbove24Hours = _data["runsAbove24Hours"] !== undefined ? _data["runsAbove24Hours"] : <any>null;
            this.temperatureAverage = _data["temperatureAverage"] !== undefined ? _data["temperatureAverage"] : <any>null;
            this.temperatureMaximum = _data["temperatureMaximum"] !== undefined ? _data["temperatureMaximum"] : <any>null;
            this.temperatureMinimum = _data["temperatureMinimum"] !== undefined ? _data["temperatureMinimum"] : <any>null;
            this.fanSpeedAverage = _data["fanSpeedAverage"] !== undefined ? _data["fanSpeedAverage"] : <any>null;
            this.fanSpeedMaximum = _data["fanSpeedMaximum"] !== undefined ? _data["fanSpeedMaximum"] : <any>null;
            this.fanSpeedMinimum = _data["fanSpeedMinimum"] !== undefined ? _data["fanSpeedMinimum"] : <any>null;
            this.cleanDriedCount = _data["cleanDriedCount"] !== undefined ? _data["cleanDriedCount"] : <any>null;
        }
    }

    static fromJS(data: any): GetFreezerDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetFreezerDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["start"] = this.start ? this.start.toISOString() : <any>null;
        data["end"] = this.end ? this.end.toISOString() : <any>null;
        data["siteName"] = this.siteName !== undefined ? this.siteName : <any>null;
        data["siteId"] = this.siteId !== undefined ? this.siteId : <any>null;
        data["freezerName"] = this.freezerName !== undefined ? this.freezerName : <any>null;
        data["freezerId"] = this.freezerId !== undefined ? this.freezerId : <any>null;
        if (Array.isArray(this.availableTags)) {
            data["availableTags"] = [];
            for (let item of this.availableTags)
                data["availableTags"].push(item.toJSON());
        }
        data["oxygenCount"] = this.oxygenCount !== undefined ? this.oxygenCount : <any>null;
        data["lowTemperatureCount"] = this.lowTemperatureCount !== undefined ? this.lowTemperatureCount : <any>null;
        data["doorsOpenCount"] = this.doorsOpenCount !== undefined ? this.doorsOpenCount : <any>null;
        data["cycleRunTime"] = this.cycleRunTime !== undefined ? this.cycleRunTime : <any>null;
        data["cycleIdleTime"] = this.cycleIdleTime !== undefined ? this.cycleIdleTime : <any>null;
        data["workingPercent"] = this.workingPercent !== undefined ? this.workingPercent : <any>null;
        data["runsAbove72Hours"] = this.runsAbove72Hours !== undefined ? this.runsAbove72Hours : <any>null;
        data["runsAbove60Hours"] = this.runsAbove60Hours !== undefined ? this.runsAbove60Hours : <any>null;
        data["runsAbove48Hours"] = this.runsAbove48Hours !== undefined ? this.runsAbove48Hours : <any>null;
        data["runsAbove36Hours"] = this.runsAbove36Hours !== undefined ? this.runsAbove36Hours : <any>null;
        data["runsAbove24Hours"] = this.runsAbove24Hours !== undefined ? this.runsAbove24Hours : <any>null;
        data["temperatureAverage"] = this.temperatureAverage !== undefined ? this.temperatureAverage : <any>null;
        data["temperatureMaximum"] = this.temperatureMaximum !== undefined ? this.temperatureMaximum : <any>null;
        data["temperatureMinimum"] = this.temperatureMinimum !== undefined ? this.temperatureMinimum : <any>null;
        data["fanSpeedAverage"] = this.fanSpeedAverage !== undefined ? this.fanSpeedAverage : <any>null;
        data["fanSpeedMaximum"] = this.fanSpeedMaximum !== undefined ? this.fanSpeedMaximum : <any>null;
        data["fanSpeedMinimum"] = this.fanSpeedMinimum !== undefined ? this.fanSpeedMinimum : <any>null;
        data["cleanDriedCount"] = this.cleanDriedCount !== undefined ? this.cleanDriedCount : <any>null;
        return data;
    }
}

export class AvailableTagDto {
    units?: string | null;
    tagId?: string | null;
    tagName?: string | null;

    init(_data?: any) {
        if (_data) {
            this.units = _data["units"] !== undefined ? _data["units"] : <any>null;
            this.tagId = _data["tagId"] !== undefined ? _data["tagId"] : <any>null;
            this.tagName = _data["tagName"] !== undefined ? _data["tagName"] : <any>null;
        }
    }

    static fromJS(data: any): AvailableTagDto {
        data = typeof data === 'object' ? data : {};
        let result = new AvailableTagDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["units"] = this.units !== undefined ? this.units : <any>null;
        data["tagId"] = this.tagId !== undefined ? this.tagId : <any>null;
        data["tagName"] = this.tagName !== undefined ? this.tagName : <any>null;
        return data;
    }
}

export class FreezerTimeSeriesModel {
    tagName?: string | null;
    units?: string | null;
    data?: any[][] | null;

    init(_data?: any) {
        if (_data) {
            this.tagName = _data["tagName"] !== undefined ? _data["tagName"] : <any>null;
            this.units = _data["units"] !== undefined ? _data["units"] : <any>null;
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(item);
            }
            else {
                this.data = <any>null;
            }
        }
    }

    static fromJS(data: any): FreezerTimeSeriesModel {
        data = typeof data === 'object' ? data : {};
        let result = new FreezerTimeSeriesModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tagName"] = this.tagName !== undefined ? this.tagName : <any>null;
        data["units"] = this.units !== undefined ? this.units : <any>null;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item);
        }
        return data;
    }
}

export class GetSiteDetailByIdDto {
    start?: Date;
    end?: Date;
    siteId?: string | null;
    siteName?: string | null;
    freezers?: FreezerAssetModel[] | null;

    init(_data?: any) {
        if (_data) {
            this.start = _data["start"] ? new Date(_data["start"].toString()) : <any>null;
            this.end = _data["end"] ? new Date(_data["end"].toString()) : <any>null;
            this.siteId = _data["siteId"] !== undefined ? _data["siteId"] : <any>null;
            this.siteName = _data["siteName"] !== undefined ? _data["siteName"] : <any>null;
            if (Array.isArray(_data["freezers"])) {
                this.freezers = [] as any;
                for (let item of _data["freezers"])
                    this.freezers!.push(FreezerAssetModel.fromJS(item));
            }
            else {
                this.freezers = <any>null;
            }
        }
    }

    static fromJS(data: any): GetSiteDetailByIdDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetSiteDetailByIdDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["start"] = this.start ? this.start.toISOString() : <any>null;
        data["end"] = this.end ? this.end.toISOString() : <any>null;
        data["siteId"] = this.siteId !== undefined ? this.siteId : <any>null;
        data["siteName"] = this.siteName !== undefined ? this.siteName : <any>null;
        if (Array.isArray(this.freezers)) {
            data["freezers"] = [];
            for (let item of this.freezers)
                data["freezers"].push(item.toJSON());
        }
        return data;
    }
}

export class FreezerAssetModel {
    freezerId?: string | null;
    assetId?: string;
    freezerName?: string | null;
    lastUpdate?: any | null;
    cycleRunTime?: number;
    cycleIdleTime?: number;
    workingPercent?: number;
    oxygenCount?: number;
    lowTemperatureCount?: number;
    doorsOpenCount?: number;
    cleanDriedCount?: number;

    init(_data?: any) {
        if (_data) {
            this.freezerId = _data["freezerId"] !== undefined ? _data["freezerId"] : <any>null;
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.freezerName = _data["freezerName"] !== undefined ? _data["freezerName"] : <any>null;
            this.lastUpdate = _data["lastUpdate"] !== undefined ? _data["lastUpdate"] : <any>null;
            this.cycleRunTime = _data["cycleRunTime"] !== undefined ? _data["cycleRunTime"] : <any>null;
            this.cycleIdleTime = _data["cycleIdleTime"] !== undefined ? _data["cycleIdleTime"] : <any>null;
            this.workingPercent = _data["workingPercent"] !== undefined ? _data["workingPercent"] : <any>null;
            this.oxygenCount = _data["oxygenCount"] !== undefined ? _data["oxygenCount"] : <any>null;
            this.lowTemperatureCount = _data["lowTemperatureCount"] !== undefined ? _data["lowTemperatureCount"] : <any>null;
            this.doorsOpenCount = _data["doorsOpenCount"] !== undefined ? _data["doorsOpenCount"] : <any>null;
            this.cleanDriedCount = _data["cleanDriedCount"] !== undefined ? _data["cleanDriedCount"] : <any>null;
        }
    }

    static fromJS(data: any): FreezerAssetModel {
        data = typeof data === 'object' ? data : {};
        let result = new FreezerAssetModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["freezerId"] = this.freezerId !== undefined ? this.freezerId : <any>null;
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["freezerName"] = this.freezerName !== undefined ? this.freezerName : <any>null;
        data["lastUpdate"] = this.lastUpdate !== undefined ? this.lastUpdate : <any>null;
        data["cycleRunTime"] = this.cycleRunTime !== undefined ? this.cycleRunTime : <any>null;
        data["cycleIdleTime"] = this.cycleIdleTime !== undefined ? this.cycleIdleTime : <any>null;
        data["workingPercent"] = this.workingPercent !== undefined ? this.workingPercent : <any>null;
        data["oxygenCount"] = this.oxygenCount !== undefined ? this.oxygenCount : <any>null;
        data["lowTemperatureCount"] = this.lowTemperatureCount !== undefined ? this.lowTemperatureCount : <any>null;
        data["doorsOpenCount"] = this.doorsOpenCount !== undefined ? this.doorsOpenCount : <any>null;
        data["cleanDriedCount"] = this.cleanDriedCount !== undefined ? this.cleanDriedCount : <any>null;
        return data;
    }
}

export class SummaryDto {
    id?: number;
    description?: string | null;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
        }
    }

    static fromJS(data: any): SummaryDto {
        data = typeof data === 'object' ? data : {};
        let result = new SummaryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        return data;
    }
}

export class GeoAreaCategory_SummaryDto extends SummaryDto {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): GeoAreaCategory_SummaryDto {
        data = typeof data === 'object' ? data : {};
        let result = new GeoAreaCategory_SummaryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class GeoAreaDto extends BaseDto {
    id?: number;
    description?: string | null;
    geoAreaCategoryTypeId?: GeoAreaCategory;
    geoAreaTypeId?: GeoAreaType;
    geoAreaPolygons?: GeoAreaPolygonDto[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.geoAreaCategoryTypeId = _data["geoAreaCategoryTypeId"] !== undefined ? _data["geoAreaCategoryTypeId"] : <any>null;
            this.geoAreaTypeId = _data["geoAreaTypeId"] !== undefined ? _data["geoAreaTypeId"] : <any>null;
            if (Array.isArray(_data["geoAreaPolygons"])) {
                this.geoAreaPolygons = [] as any;
                for (let item of _data["geoAreaPolygons"])
                    this.geoAreaPolygons!.push(GeoAreaPolygonDto.fromJS(item));
            }
            else {
                this.geoAreaPolygons = <any>null;
            }
        }
    }

    static fromJS(data: any): GeoAreaDto {
        data = typeof data === 'object' ? data : {};
        let result = new GeoAreaDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["geoAreaCategoryTypeId"] = this.geoAreaCategoryTypeId !== undefined ? this.geoAreaCategoryTypeId : <any>null;
        data["geoAreaTypeId"] = this.geoAreaTypeId !== undefined ? this.geoAreaTypeId : <any>null;
        if (Array.isArray(this.geoAreaPolygons)) {
            data["geoAreaPolygons"] = [];
            for (let item of this.geoAreaPolygons)
                data["geoAreaPolygons"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export enum GeoAreaCategory {
    None = 0,
    Port = 1,
    MaintenanceArea = 2,
    ParkingLot = 3,
    CustomerLocation = 4,
    FillSite = 5,
}

export enum GeoAreaType {
    Polygon = 0,
    PointRadius = 1,
}

export class GeoAreaPolygonDto {
    id?: number;
    latitude?: number;
    longitude?: number;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.latitude = _data["latitude"] !== undefined ? _data["latitude"] : <any>null;
            this.longitude = _data["longitude"] !== undefined ? _data["longitude"] : <any>null;
        }
    }

    static fromJS(data: any): GeoAreaPolygonDto {
        data = typeof data === 'object' ? data : {};
        let result = new GeoAreaPolygonDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["latitude"] = this.latitude !== undefined ? this.latitude : <any>null;
        data["longitude"] = this.longitude !== undefined ? this.longitude : <any>null;
        return data;
    }
}

export class UsageRateSummaryDto {
    assetId?: string;
    volumeToday?: number | null;
    volumeYesterday?: number | null;
    volumeMonthToDate?: number | null;
    volumeLastMonth?: number | null;
    volumeAllTotal?: number | null;
    lastUpdatedDate?: Date | null;
    createdDate?: Date | null;
    timeZoneAsText?: string | null;

    init(_data?: any) {
        if (_data) {
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.volumeToday = _data["volumeToday"] !== undefined ? _data["volumeToday"] : <any>null;
            this.volumeYesterday = _data["volumeYesterday"] !== undefined ? _data["volumeYesterday"] : <any>null;
            this.volumeMonthToDate = _data["volumeMonthToDate"] !== undefined ? _data["volumeMonthToDate"] : <any>null;
            this.volumeLastMonth = _data["volumeLastMonth"] !== undefined ? _data["volumeLastMonth"] : <any>null;
            this.volumeAllTotal = _data["volumeAllTotal"] !== undefined ? _data["volumeAllTotal"] : <any>null;
            this.lastUpdatedDate = _data["lastUpdatedDate"] ? new Date(_data["lastUpdatedDate"].toString()) : <any>null;
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>null;
            this.timeZoneAsText = _data["timeZoneAsText"] !== undefined ? _data["timeZoneAsText"] : <any>null;
        }
    }

    static fromJS(data: any): UsageRateSummaryDto {
        data = typeof data === 'object' ? data : {};
        let result = new UsageRateSummaryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["volumeToday"] = this.volumeToday !== undefined ? this.volumeToday : <any>null;
        data["volumeYesterday"] = this.volumeYesterday !== undefined ? this.volumeYesterday : <any>null;
        data["volumeMonthToDate"] = this.volumeMonthToDate !== undefined ? this.volumeMonthToDate : <any>null;
        data["volumeLastMonth"] = this.volumeLastMonth !== undefined ? this.volumeLastMonth : <any>null;
        data["volumeAllTotal"] = this.volumeAllTotal !== undefined ? this.volumeAllTotal : <any>null;
        data["lastUpdatedDate"] = this.lastUpdatedDate ? this.lastUpdatedDate.toISOString() : <any>null;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>null;
        data["timeZoneAsText"] = this.timeZoneAsText !== undefined ? this.timeZoneAsText : <any>null;
        return data;
    }
}

export class CopyRTURemoteConfigToLocalConfigRequest extends WcfProxyUserDetails {
    rtuId?: string;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.rtuId = _data["rtuId"] !== undefined ? _data["rtuId"] : <any>null;
        }
    }

    static fromJS(data: any): CopyRTURemoteConfigToLocalConfigRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CopyRTURemoteConfigToLocalConfigRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rtuId"] = this.rtuId !== undefined ? this.rtuId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveCopyRtuRemoteConfigToLocalConfigRequest extends CopyRTURemoteConfigToLocalConfigRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveCopyRtuRemoteConfigToLocalConfigRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveCopyRtuRemoteConfigToLocalConfigRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class DeleteRTUPollScheduleGroupByIdListResponse {
    deleteRTUPollScheduleGroupByIdListResult?: boolean;

    init(_data?: any) {
        if (_data) {
            this.deleteRTUPollScheduleGroupByIdListResult = _data["deleteRTUPollScheduleGroupByIdListResult"] !== undefined ? _data["deleteRTUPollScheduleGroupByIdListResult"] : <any>null;
        }
    }

    static fromJS(data: any): DeleteRTUPollScheduleGroupByIdListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteRTUPollScheduleGroupByIdListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deleteRTUPollScheduleGroupByIdListResult"] = this.deleteRTUPollScheduleGroupByIdListResult !== undefined ? this.deleteRTUPollScheduleGroupByIdListResult : <any>null;
        return data;
    }
}

export class EvolveDeleteRtuPollScheduleGroupByIdListResponse extends DeleteRTUPollScheduleGroupByIdListResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveDeleteRtuPollScheduleGroupByIdListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveDeleteRtuPollScheduleGroupByIdListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class DeleteRTUPollScheduleGroupByIdListRequest extends WcfProxyUserDetails {
    rtuPollScheduleGroupIds?: string[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["rtuPollScheduleGroupIds"])) {
                this.rtuPollScheduleGroupIds = [] as any;
                for (let item of _data["rtuPollScheduleGroupIds"])
                    this.rtuPollScheduleGroupIds!.push(item);
            }
            else {
                this.rtuPollScheduleGroupIds = <any>null;
            }
        }
    }

    static fromJS(data: any): DeleteRTUPollScheduleGroupByIdListRequest {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteRTUPollScheduleGroupByIdListRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.rtuPollScheduleGroupIds)) {
            data["rtuPollScheduleGroupIds"] = [];
            for (let item of this.rtuPollScheduleGroupIds)
                data["rtuPollScheduleGroupIds"].push(item);
        }
        super.toJSON(data);
        return data;
    }
}

export class EvolveDeleteRtuPollScheduleGroupByIdListRequest extends DeleteRTUPollScheduleGroupByIdListRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveDeleteRtuPollScheduleGroupByIdListRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveDeleteRtuPollScheduleGroupByIdListRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class DeleteRTUsByIdListResponse {
    deleteRTUsByIdListResult?: boolean;

    init(_data?: any) {
        if (_data) {
            this.deleteRTUsByIdListResult = _data["deleteRTUsByIdListResult"] !== undefined ? _data["deleteRTUsByIdListResult"] : <any>null;
        }
    }

    static fromJS(data: any): DeleteRTUsByIdListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteRTUsByIdListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deleteRTUsByIdListResult"] = this.deleteRTUsByIdListResult !== undefined ? this.deleteRTUsByIdListResult : <any>null;
        return data;
    }
}

export class EvolveDeleteRTUsByIdListResponse extends DeleteRTUsByIdListResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveDeleteRTUsByIdListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveDeleteRTUsByIdListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class DeleteRTUsByIdListRequest extends WcfProxyUserDetails {
    rtuIds?: string[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["rtuIds"])) {
                this.rtuIds = [] as any;
                for (let item of _data["rtuIds"])
                    this.rtuIds!.push(item);
            }
            else {
                this.rtuIds = <any>null;
            }
        }
    }

    static fromJS(data: any): DeleteRTUsByIdListRequest {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteRTUsByIdListRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.rtuIds)) {
            data["rtuIds"] = [];
            for (let item of this.rtuIds)
                data["rtuIds"].push(item);
        }
        super.toJSON(data);
        return data;
    }
}

export class EvolveDeleteRtusByIdListRequest extends DeleteRTUsByIdListRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveDeleteRtusByIdListRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveDeleteRtusByIdListRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class ExecuteRTUChannelSwapResponse {
    executeRTUChannelSwapResult?: ExecuteRTUChannelSwapResult | null;

    init(_data?: any) {
        if (_data) {
            this.executeRTUChannelSwapResult = _data["executeRTUChannelSwapResult"] ? ExecuteRTUChannelSwapResult.fromJS(_data["executeRTUChannelSwapResult"]) : <any>null;
        }
    }

    static fromJS(data: any): ExecuteRTUChannelSwapResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ExecuteRTUChannelSwapResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["executeRTUChannelSwapResult"] = this.executeRTUChannelSwapResult ? this.executeRTUChannelSwapResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveExecuteRtuChannelSwapResponse extends ExecuteRTUChannelSwapResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveExecuteRtuChannelSwapResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveExecuteRtuChannelSwapResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class BaseSaveResultOfEditRTUChannelSwap extends SaveResult {
    editObject?: EditRTUChannelSwap | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.editObject = _data["editObject"] ? EditRTUChannelSwap.fromJS(_data["editObject"]) : <any>null;
        }
    }

    static fromJS(data: any): BaseSaveResultOfEditRTUChannelSwap {
        data = typeof data === 'object' ? data : {};
        let result = new BaseSaveResultOfEditRTUChannelSwap();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["editObject"] = this.editObject ? this.editObject.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class ExecuteRTUChannelSwapResult extends BaseSaveResultOfEditRTUChannelSwap {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): ExecuteRTUChannelSwapResult {
        data = typeof data === 'object' ? data : {};
        let result = new ExecuteRTUChannelSwapResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class EditRTUChannelSwap extends EditBase {
    rtuId?: string;
    fromChannelNumber?: string | null;
    toChannelNumber?: string | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.rtuId = _data["rtuId"] !== undefined ? _data["rtuId"] : <any>null;
            this.fromChannelNumber = _data["fromChannelNumber"] !== undefined ? _data["fromChannelNumber"] : <any>null;
            this.toChannelNumber = _data["toChannelNumber"] !== undefined ? _data["toChannelNumber"] : <any>null;
        }
    }

    static fromJS(data: any): EditRTUChannelSwap {
        data = typeof data === 'object' ? data : {};
        let result = new EditRTUChannelSwap();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rtuId"] = this.rtuId !== undefined ? this.rtuId : <any>null;
        data["fromChannelNumber"] = this.fromChannelNumber !== undefined ? this.fromChannelNumber : <any>null;
        data["toChannelNumber"] = this.toChannelNumber !== undefined ? this.toChannelNumber : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class ExecuteRTUChannelSwapRequest extends WcfProxyUserDetails {
    rtu?: EditRTUChannelSwap | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.rtu = _data["rtu"] ? EditRTUChannelSwap.fromJS(_data["rtu"]) : <any>null;
        }
    }

    static fromJS(data: any): ExecuteRTUChannelSwapRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ExecuteRTUChannelSwapRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rtu"] = this.rtu ? this.rtu.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveExecuteRtuChannelSwapRequest extends ExecuteRTUChannelSwapRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveExecuteRtuChannelSwapRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveExecuteRtuChannelSwapRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class ExecuteSendRTUChannelRequestListRequest extends WcfProxyUserDetails {
    rtuId?: string;
    rtuChannelRequests?: RTUChannelRTURequestInfo[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.rtuId = _data["rtuId"] !== undefined ? _data["rtuId"] : <any>null;
            if (Array.isArray(_data["rtuChannelRequests"])) {
                this.rtuChannelRequests = [] as any;
                for (let item of _data["rtuChannelRequests"])
                    this.rtuChannelRequests!.push(RTUChannelRTURequestInfo.fromJS(item));
            }
            else {
                this.rtuChannelRequests = <any>null;
            }
        }
    }

    static fromJS(data: any): ExecuteSendRTUChannelRequestListRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ExecuteSendRTUChannelRequestListRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rtuId"] = this.rtuId !== undefined ? this.rtuId : <any>null;
        if (Array.isArray(this.rtuChannelRequests)) {
            data["rtuChannelRequests"] = [];
            for (let item of this.rtuChannelRequests)
                data["rtuChannelRequests"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export class EvolveExecuteSendRtuChannelRequestListRequest extends ExecuteSendRTUChannelRequestListRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveExecuteSendRtuChannelRequestListRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveExecuteSendRtuChannelRequestListRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RTUChannelRTURequestInfo {
    rtuChannelId?: string;
    channelNumber?: string | null;
    requestType?: RTURequestType;

    init(_data?: any) {
        if (_data) {
            this.rtuChannelId = _data["rtuChannelId"] !== undefined ? _data["rtuChannelId"] : <any>null;
            this.channelNumber = _data["channelNumber"] !== undefined ? _data["channelNumber"] : <any>null;
            this.requestType = _data["requestType"] !== undefined ? _data["requestType"] : <any>null;
        }
    }

    static fromJS(data: any): RTUChannelRTURequestInfo {
        data = typeof data === 'object' ? data : {};
        let result = new RTUChannelRTURequestInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rtuChannelId"] = this.rtuChannelId !== undefined ? this.rtuChannelId : <any>null;
        data["channelNumber"] = this.channelNumber !== undefined ? this.channelNumber : <any>null;
        data["requestType"] = this.requestType !== undefined ? this.requestType : <any>null;
        return data;
    }
}

export enum RTURequestType {
    CheckSyncLazySend = 0,
    SendCurrentConfigNow = 1,
    SendCommConfigNow = 2,
    SendConfigRequestNow = 3,
    SendPollRequestNow = 4,
    SendAdditionalRequestNow = 5,
    SendAdditionalConfigNow = 6,
    CheckSyncSendNow = 7,
    CreateFtpRtuConfigRecordNow = 8,
    CreateFtpRtuConfigRecordLazyDownload = 9,
    DeactivateRtuChannelNow = 10,
    DisableRtuChannelTransmissionNow = 11,
    CreateFtpRtuConfigRecordLazyTestPacketReceived = 12,
    None = -1,
}

export class RetrievePacketRecordsByOptionsRequest extends WcfProxyUserDetails {
    options?: PacketRetrievalOptions | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.options = _data["options"] ? PacketRetrievalOptions.fromJS(_data["options"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrievePacketRecordsByOptionsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrievePacketRecordsByOptionsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["options"] = this.options ? this.options.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrievePacketRecordsByOptionsRequest extends RetrievePacketRecordsByOptionsRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrievePacketRecordsByOptionsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrievePacketRecordsByOptionsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class PacketRetrievalOptions {
    rowCount?: number;
    rtuDeviceId?: string | null;
    searchRTUDeviceId?: string | null;
    channelNumber?: string | null;
    communicationDirection?: RTUCommunicationDirection | null;
    communicationMethod?: CarrierType | null;
    searchAddress?: string | null;
    startTime?: Date | null;
    endTime?: Date | null;
    packetTypeList?: string | null;
    searchRTUDeviceText?: string | null;
    searchAddressText?: string | null;

    init(_data?: any) {
        if (_data) {
            this.rowCount = _data["rowCount"] !== undefined ? _data["rowCount"] : <any>null;
            this.rtuDeviceId = _data["rtuDeviceId"] !== undefined ? _data["rtuDeviceId"] : <any>null;
            this.searchRTUDeviceId = _data["searchRTUDeviceId"] !== undefined ? _data["searchRTUDeviceId"] : <any>null;
            this.channelNumber = _data["channelNumber"] !== undefined ? _data["channelNumber"] : <any>null;
            this.communicationDirection = _data["communicationDirection"] !== undefined ? _data["communicationDirection"] : <any>null;
            this.communicationMethod = _data["communicationMethod"] !== undefined ? _data["communicationMethod"] : <any>null;
            this.searchAddress = _data["searchAddress"] !== undefined ? _data["searchAddress"] : <any>null;
            this.startTime = _data["startTime"] ? new Date(_data["startTime"].toString()) : <any>null;
            this.endTime = _data["endTime"] ? new Date(_data["endTime"].toString()) : <any>null;
            this.packetTypeList = _data["packetTypeList"] !== undefined ? _data["packetTypeList"] : <any>null;
            this.searchRTUDeviceText = _data["searchRTUDeviceText"] !== undefined ? _data["searchRTUDeviceText"] : <any>null;
            this.searchAddressText = _data["searchAddressText"] !== undefined ? _data["searchAddressText"] : <any>null;
        }
    }

    static fromJS(data: any): PacketRetrievalOptions {
        data = typeof data === 'object' ? data : {};
        let result = new PacketRetrievalOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rowCount"] = this.rowCount !== undefined ? this.rowCount : <any>null;
        data["rtuDeviceId"] = this.rtuDeviceId !== undefined ? this.rtuDeviceId : <any>null;
        data["searchRTUDeviceId"] = this.searchRTUDeviceId !== undefined ? this.searchRTUDeviceId : <any>null;
        data["channelNumber"] = this.channelNumber !== undefined ? this.channelNumber : <any>null;
        data["communicationDirection"] = this.communicationDirection !== undefined ? this.communicationDirection : <any>null;
        data["communicationMethod"] = this.communicationMethod !== undefined ? this.communicationMethod : <any>null;
        data["searchAddress"] = this.searchAddress !== undefined ? this.searchAddress : <any>null;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>null;
        data["endTime"] = this.endTime ? this.endTime.toISOString() : <any>null;
        data["packetTypeList"] = this.packetTypeList !== undefined ? this.packetTypeList : <any>null;
        data["searchRTUDeviceText"] = this.searchRTUDeviceText !== undefined ? this.searchRTUDeviceText : <any>null;
        data["searchAddressText"] = this.searchAddressText !== undefined ? this.searchAddressText : <any>null;
        return data;
    }
}

export enum RTUCommunicationDirection {
    Inbound = 0,
    Outbound = 1,
}

export enum CarrierType {
    Unknown = 0,
    Modem = 1,
    Vistar = 2,
    Vodafone = 3,
    TelenorSweden = 4,
    Email = 5,
    Aql = 6,
    Ais = 7,
    Raco = 8,
    Vivo = 9,
    Skytel = 10,
    Tdc = 11,
    Weblink = 12,
    Dtac = 13,
    EmailHosted = 14,
    Att = 15,
    Verizon = 16,
    Tigo = 17,
    ChinaMobile = 18,
    WorldTextIndia = 19,
    Transfer = 20,
    VivoDol = 21,
    VivoApci = 22,
    Telcel = 23,
    TMobile = 24,
    O2 = 25,
    Telenor = 26,
    Numerex = 27,
    Rogers = 28,
    FileTransfer = 30,
    Email2 = 31,
    SkyWaveIGWS = 32,
    ICE = 33,
    ChinaMobileDirect = 34,
    Iridium = 35,
    ReadingsService = 36,
    AttApci = 37,
    Raco2 = 38,
    AWG = 39,
    KoreAtt = 40,
    NumerexAtt = 41,
    Udp = 42,
    ChinaMobileCmpp090528 = 43,
    WorldTextUsa = 44,
    WorldTextAustralia = 45,
    WorldTextIndonesia = 46,
    WorldTextUk = 47,
    WorldTextIndiaIdea = 48,
    WorldTextIndiaTata = 49,
    Particle = 50,
    KT09 = 51,
    Telit = 52,
    NxLocate = 53,
    RCM = 54,
    Dtac2 = 55,
    Att4GApci = 56,
    KoreAtt4G = 57,
    Fieldgate = 58,
    WorldTextHongKong = 59,
    WorldTextUAE = 60,
    ChinaMobileCmpp091430 = 61,
    UdpTurkey = 62,
    TestSMPP = 63,
    KoreTMobile = 64,
    WorldTextBrazil = 65,
    WorldTextGermany = 66,
    WorldTextIndonesiaBackup = 67,
    WorldTextNetherlands = 68,
    WorldTextTurkey = 69,
    KoreTelstra = 70,
    Telcel88449 = 71,
    Skybitz = 72,
    KoreAtt4G2 = 73,
    TelitAnova = 74,
    GDC = 75,
    All = 999,
}

export class RetrieveRTUChannelDataChannelInfoByRTUChannelRequest extends WcfProxyUserDetails {
    rtuChannelId?: string;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.rtuChannelId = _data["rtuChannelId"] !== undefined ? _data["rtuChannelId"] : <any>null;
        }
    }

    static fromJS(data: any): RetrieveRTUChannelDataChannelInfoByRTUChannelRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveRTUChannelDataChannelInfoByRTUChannelRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rtuChannelId"] = this.rtuChannelId !== undefined ? this.rtuChannelId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveRtuChannelDataChannelInfoByRtuChannelRequest extends RetrieveRTUChannelDataChannelInfoByRTUChannelRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveRtuChannelDataChannelInfoByRtuChannelRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveRtuChannelDataChannelInfoByRtuChannelRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveRTUChannelUsageInfoListByRTUResponse {
    retrieveRTUChannelUsageInfoListByRTUResult?: RTUChannelUsageInfo[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["retrieveRTUChannelUsageInfoListByRTUResult"])) {
                this.retrieveRTUChannelUsageInfoListByRTUResult = [] as any;
                for (let item of _data["retrieveRTUChannelUsageInfoListByRTUResult"])
                    this.retrieveRTUChannelUsageInfoListByRTUResult!.push(RTUChannelUsageInfo.fromJS(item));
            }
            else {
                this.retrieveRTUChannelUsageInfoListByRTUResult = <any>null;
            }
        }
    }

    static fromJS(data: any): RetrieveRTUChannelUsageInfoListByRTUResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveRTUChannelUsageInfoListByRTUResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.retrieveRTUChannelUsageInfoListByRTUResult)) {
            data["retrieveRTUChannelUsageInfoListByRTUResult"] = [];
            for (let item of this.retrieveRTUChannelUsageInfoListByRTUResult)
                data["retrieveRTUChannelUsageInfoListByRTUResult"].push(item.toJSON());
        }
        return data;
    }
}

export class EvolveRetrieveRtuChannelUsageInfoListByRtuResponse extends RetrieveRTUChannelUsageInfoListByRTUResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveRtuChannelUsageInfoListByRtuResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveRtuChannelUsageInfoListByRtuResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RTUChannelUsageInfo {
    rtuChannelId?: string;
    rtuId?: string;
    channelNumber?: string | null;
    description?: string | null;
    channelType?: RTUChannelType | null;
    dataChannelCount?: number;
    noConfig?: boolean;

    init(_data?: any) {
        if (_data) {
            this.rtuChannelId = _data["rtuChannelId"] !== undefined ? _data["rtuChannelId"] : <any>null;
            this.rtuId = _data["rtuId"] !== undefined ? _data["rtuId"] : <any>null;
            this.channelNumber = _data["channelNumber"] !== undefined ? _data["channelNumber"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.channelType = _data["channelType"] !== undefined ? _data["channelType"] : <any>null;
            this.dataChannelCount = _data["dataChannelCount"] !== undefined ? _data["dataChannelCount"] : <any>null;
            this.noConfig = _data["noConfig"] !== undefined ? _data["noConfig"] : <any>null;
        }
    }

    static fromJS(data: any): RTUChannelUsageInfo {
        data = typeof data === 'object' ? data : {};
        let result = new RTUChannelUsageInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rtuChannelId"] = this.rtuChannelId !== undefined ? this.rtuChannelId : <any>null;
        data["rtuId"] = this.rtuId !== undefined ? this.rtuId : <any>null;
        data["channelNumber"] = this.channelNumber !== undefined ? this.channelNumber : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["channelType"] = this.channelType !== undefined ? this.channelType : <any>null;
        data["dataChannelCount"] = this.dataChannelCount !== undefined ? this.dataChannelCount : <any>null;
        data["noConfig"] = this.noConfig !== undefined ? this.noConfig : <any>null;
        return data;
    }
}

export class RetrieveRTUChannelUsageInfoListByRTURequest extends WcfProxyUserDetails {
    rtuId?: string;
    dataChannelId?: string | null;
    excludeNonNumericChannelNumbers?: boolean;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.rtuId = _data["rtuId"] !== undefined ? _data["rtuId"] : <any>null;
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.excludeNonNumericChannelNumbers = _data["excludeNonNumericChannelNumbers"] !== undefined ? _data["excludeNonNumericChannelNumbers"] : <any>null;
        }
    }

    static fromJS(data: any): RetrieveRTUChannelUsageInfoListByRTURequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveRTUChannelUsageInfoListByRTURequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rtuId"] = this.rtuId !== undefined ? this.rtuId : <any>null;
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["excludeNonNumericChannelNumbers"] = this.excludeNonNumericChannelNumbers !== undefined ? this.excludeNonNumericChannelNumbers : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveRtuChannelUsageInfoListByRtuRequest extends RetrieveRTUChannelUsageInfoListByRTURequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveRtuChannelUsageInfoListByRtuRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveRtuChannelUsageInfoListByRtuRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveRTUDeviceInfoListByPrefixResponse {
    retrieveRTUDeviceInfoListByPrefixResult?: RTUDeviceInfo[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["retrieveRTUDeviceInfoListByPrefixResult"])) {
                this.retrieveRTUDeviceInfoListByPrefixResult = [] as any;
                for (let item of _data["retrieveRTUDeviceInfoListByPrefixResult"])
                    this.retrieveRTUDeviceInfoListByPrefixResult!.push(RTUDeviceInfo.fromJS(item));
            }
            else {
                this.retrieveRTUDeviceInfoListByPrefixResult = <any>null;
            }
        }
    }

    static fromJS(data: any): RetrieveRTUDeviceInfoListByPrefixResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveRTUDeviceInfoListByPrefixResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.retrieveRTUDeviceInfoListByPrefixResult)) {
            data["retrieveRTUDeviceInfoListByPrefixResult"] = [];
            for (let item of this.retrieveRTUDeviceInfoListByPrefixResult)
                data["retrieveRTUDeviceInfoListByPrefixResult"].push(item.toJSON());
        }
        return data;
    }
}

export class EvolveRetrieveRtuDeviceInfoListByPrefixResponse extends RetrieveRTUDeviceInfoListByPrefixResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveRtuDeviceInfoListByPrefixResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveRtuDeviceInfoListByPrefixResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RTUDeviceInfo {
    rtuId?: string;
    deviceId?: string | null;
    description?: string | null;
    rtuType?: RTUType;
    category?: RTUCategoryType;
    rtuChannels?: RTUChannelUsageInfo[] | null;

    init(_data?: any) {
        if (_data) {
            this.rtuId = _data["rtuId"] !== undefined ? _data["rtuId"] : <any>null;
            this.deviceId = _data["deviceId"] !== undefined ? _data["deviceId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.rtuType = _data["rtuType"] !== undefined ? _data["rtuType"] : <any>null;
            this.category = _data["category"] !== undefined ? _data["category"] : <any>null;
            if (Array.isArray(_data["rtuChannels"])) {
                this.rtuChannels = [] as any;
                for (let item of _data["rtuChannels"])
                    this.rtuChannels!.push(RTUChannelUsageInfo.fromJS(item));
            }
            else {
                this.rtuChannels = <any>null;
            }
        }
    }

    static fromJS(data: any): RTUDeviceInfo {
        data = typeof data === 'object' ? data : {};
        let result = new RTUDeviceInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rtuId"] = this.rtuId !== undefined ? this.rtuId : <any>null;
        data["deviceId"] = this.deviceId !== undefined ? this.deviceId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["rtuType"] = this.rtuType !== undefined ? this.rtuType : <any>null;
        data["category"] = this.category !== undefined ? this.category : <any>null;
        if (Array.isArray(this.rtuChannels)) {
            data["rtuChannels"] = [];
            for (let item of this.rtuChannels)
                data["rtuChannels"].push(item.toJSON());
        }
        return data;
    }
}

export class RetrieveRTUDeviceInfoListByPrefixRequest extends WcfProxyUserDetails {
    options?: RTUDeviceIdPrefixSearchOptions | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.options = _data["options"] ? RTUDeviceIdPrefixSearchOptions.fromJS(_data["options"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveRTUDeviceInfoListByPrefixRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveRTUDeviceInfoListByPrefixRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["options"] = this.options ? this.options.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveRtuDeviceInfoListByPrefixRequest extends RetrieveRTUDeviceInfoListByPrefixRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveRtuDeviceInfoListByPrefixRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveRtuDeviceInfoListByPrefixRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RTUDeviceIdPrefixSearchOptions {
    deviceIdPrefix?: string | null;
    domainId?: string | null;
    categories?: RTUCategoryType[] | null;
    rtuType?: RTUType | null;
    maxRecords?: number;
    isTemplateSearch?: boolean;

    init(_data?: any) {
        if (_data) {
            this.deviceIdPrefix = _data["deviceIdPrefix"] !== undefined ? _data["deviceIdPrefix"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            if (Array.isArray(_data["categories"])) {
                this.categories = [] as any;
                for (let item of _data["categories"])
                    this.categories!.push(item);
            }
            else {
                this.categories = <any>null;
            }
            this.rtuType = _data["rtuType"] !== undefined ? _data["rtuType"] : <any>null;
            this.maxRecords = _data["maxRecords"] !== undefined ? _data["maxRecords"] : <any>null;
            this.isTemplateSearch = _data["isTemplateSearch"] !== undefined ? _data["isTemplateSearch"] : <any>null;
        }
    }

    static fromJS(data: any): RTUDeviceIdPrefixSearchOptions {
        data = typeof data === 'object' ? data : {};
        let result = new RTUDeviceIdPrefixSearchOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deviceIdPrefix"] = this.deviceIdPrefix !== undefined ? this.deviceIdPrefix : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        if (Array.isArray(this.categories)) {
            data["categories"] = [];
            for (let item of this.categories)
                data["categories"].push(item);
        }
        data["rtuType"] = this.rtuType !== undefined ? this.rtuType : <any>null;
        data["maxRecords"] = this.maxRecords !== undefined ? this.maxRecords : <any>null;
        data["isTemplateSearch"] = this.isTemplateSearch !== undefined ? this.isTemplateSearch : <any>null;
        return data;
    }
}

export class RetrieveRTUEditComponentsByIdRequest extends WcfProxyUserDetails {
    rtuId?: string;
    rtuCategory?: RTUCategoryType;
    loadEditComponents?: boolean;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.rtuId = _data["rtuId"] !== undefined ? _data["rtuId"] : <any>null;
            this.rtuCategory = _data["rtuCategory"] !== undefined ? _data["rtuCategory"] : <any>null;
            this.loadEditComponents = _data["loadEditComponents"] !== undefined ? _data["loadEditComponents"] : <any>null;
        }
    }

    static fromJS(data: any): RetrieveRTUEditComponentsByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveRTUEditComponentsByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rtuId"] = this.rtuId !== undefined ? this.rtuId : <any>null;
        data["rtuCategory"] = this.rtuCategory !== undefined ? this.rtuCategory : <any>null;
        data["loadEditComponents"] = this.loadEditComponents !== undefined ? this.loadEditComponents : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveRtuEditComponentsByIdRequest extends RetrieveRTUEditComponentsByIdRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveRtuEditComponentsByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveRtuEditComponentsByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveRTUInfoRecordsByOptionsResponse {
    retrieveRTUInfoRecordsByOptionsResult?: RetrieveRTUInfoListResult | null;

    init(_data?: any) {
        if (_data) {
            this.retrieveRTUInfoRecordsByOptionsResult = _data["retrieveRTUInfoRecordsByOptionsResult"] ? RetrieveRTUInfoListResult.fromJS(_data["retrieveRTUInfoRecordsByOptionsResult"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveRTUInfoRecordsByOptionsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveRTUInfoRecordsByOptionsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["retrieveRTUInfoRecordsByOptionsResult"] = this.retrieveRTUInfoRecordsByOptionsResult ? this.retrieveRTUInfoRecordsByOptionsResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveRetrieveRtuInfoRecordsByOptionsResponse extends RetrieveRTUInfoRecordsByOptionsResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveRtuInfoRecordsByOptionsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveRtuInfoRecordsByOptionsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class BaseListResultOfRTUInfoRecord {
    records?: RTUInfoRecord[] | null;
    totalRecords?: number | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["records"])) {
                this.records = [] as any;
                for (let item of _data["records"])
                    this.records!.push(RTUInfoRecord.fromJS(item));
            }
            else {
                this.records = <any>null;
            }
            this.totalRecords = _data["totalRecords"] !== undefined ? _data["totalRecords"] : <any>null;
        }
    }

    static fromJS(data: any): BaseListResultOfRTUInfoRecord {
        data = typeof data === 'object' ? data : {};
        let result = new BaseListResultOfRTUInfoRecord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.records)) {
            data["records"] = [];
            for (let item of this.records)
                data["records"].push(item.toJSON());
        }
        data["totalRecords"] = this.totalRecords !== undefined ? this.totalRecords : <any>null;
        return data;
    }
}

export class RetrieveRTUInfoListResult extends BaseListResultOfRTUInfoRecord {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): RetrieveRTUInfoListResult {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveRTUInfoListResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RTUInfoRecord {
    rtuId?: string;
    domainId?: string | null;
    deviceId?: string | null;
    carrier?: CarrierType;
    carrierName?: string | null;
    deviceNetworkAddress?: string | null;
    isInSync?: boolean | null;
    isSyncFailure?: boolean;
    customerName?: string | null;
    siteTitle?: string | null;
    siteTimeZoneId?: number | null;
    rtuChannelCount?: number;
    dataChannelCount?: number;
    latestPacketTimeStamp?: Date | null;
    domainName?: string | null;
    rtuType?: RTUType;
    category?: RTUCategoryType;
    transportType?: RTUTransportType | null;
    localConfiguration?: string | null;
    localConfigurationInfo?: any | null;
    remoteConfiguration?: string | null;
    remoteConfigurationInfo?: any | null;
    diagnosticInformation?: string | null;
    hornerLocalLastTransactionFillCount?: number | null;
    hornerLocalLastDetailOffset?: number | null;
    hornerLocalHostAddress?: string | null;
    hornerRemoteHostAddress?: string | null;
    isPollable?: boolean | null;
    rtuChannelConfigurations?: RTUChannelConfigurationInfo[] | null;

    init(_data?: any) {
        if (_data) {
            this.rtuId = _data["rtuId"] !== undefined ? _data["rtuId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.deviceId = _data["deviceId"] !== undefined ? _data["deviceId"] : <any>null;
            this.carrier = _data["carrier"] !== undefined ? _data["carrier"] : <any>null;
            this.carrierName = _data["carrierName"] !== undefined ? _data["carrierName"] : <any>null;
            this.deviceNetworkAddress = _data["deviceNetworkAddress"] !== undefined ? _data["deviceNetworkAddress"] : <any>null;
            this.isInSync = _data["isInSync"] !== undefined ? _data["isInSync"] : <any>null;
            this.isSyncFailure = _data["isSyncFailure"] !== undefined ? _data["isSyncFailure"] : <any>null;
            this.customerName = _data["customerName"] !== undefined ? _data["customerName"] : <any>null;
            this.siteTitle = _data["siteTitle"] !== undefined ? _data["siteTitle"] : <any>null;
            this.siteTimeZoneId = _data["siteTimeZoneId"] !== undefined ? _data["siteTimeZoneId"] : <any>null;
            this.rtuChannelCount = _data["rtuChannelCount"] !== undefined ? _data["rtuChannelCount"] : <any>null;
            this.dataChannelCount = _data["dataChannelCount"] !== undefined ? _data["dataChannelCount"] : <any>null;
            this.latestPacketTimeStamp = _data["latestPacketTimeStamp"] ? new Date(_data["latestPacketTimeStamp"].toString()) : <any>null;
            this.domainName = _data["domainName"] !== undefined ? _data["domainName"] : <any>null;
            this.rtuType = _data["rtuType"] !== undefined ? _data["rtuType"] : <any>null;
            this.category = _data["category"] !== undefined ? _data["category"] : <any>null;
            this.transportType = _data["transportType"] !== undefined ? _data["transportType"] : <any>null;
            this.localConfiguration = _data["localConfiguration"] !== undefined ? _data["localConfiguration"] : <any>null;
            this.localConfigurationInfo = _data["localConfigurationInfo"] !== undefined ? _data["localConfigurationInfo"] : <any>null;
            this.remoteConfiguration = _data["remoteConfiguration"] !== undefined ? _data["remoteConfiguration"] : <any>null;
            this.remoteConfigurationInfo = _data["remoteConfigurationInfo"] !== undefined ? _data["remoteConfigurationInfo"] : <any>null;
            this.diagnosticInformation = _data["diagnosticInformation"] !== undefined ? _data["diagnosticInformation"] : <any>null;
            this.hornerLocalLastTransactionFillCount = _data["hornerLocalLastTransactionFillCount"] !== undefined ? _data["hornerLocalLastTransactionFillCount"] : <any>null;
            this.hornerLocalLastDetailOffset = _data["hornerLocalLastDetailOffset"] !== undefined ? _data["hornerLocalLastDetailOffset"] : <any>null;
            this.hornerLocalHostAddress = _data["hornerLocalHostAddress"] !== undefined ? _data["hornerLocalHostAddress"] : <any>null;
            this.hornerRemoteHostAddress = _data["hornerRemoteHostAddress"] !== undefined ? _data["hornerRemoteHostAddress"] : <any>null;
            this.isPollable = _data["isPollable"] !== undefined ? _data["isPollable"] : <any>null;
            if (Array.isArray(_data["rtuChannelConfigurations"])) {
                this.rtuChannelConfigurations = [] as any;
                for (let item of _data["rtuChannelConfigurations"])
                    this.rtuChannelConfigurations!.push(RTUChannelConfigurationInfo.fromJS(item));
            }
            else {
                this.rtuChannelConfigurations = <any>null;
            }
        }
    }

    static fromJS(data: any): RTUInfoRecord {
        data = typeof data === 'object' ? data : {};
        let result = new RTUInfoRecord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rtuId"] = this.rtuId !== undefined ? this.rtuId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["deviceId"] = this.deviceId !== undefined ? this.deviceId : <any>null;
        data["carrier"] = this.carrier !== undefined ? this.carrier : <any>null;
        data["carrierName"] = this.carrierName !== undefined ? this.carrierName : <any>null;
        data["deviceNetworkAddress"] = this.deviceNetworkAddress !== undefined ? this.deviceNetworkAddress : <any>null;
        data["isInSync"] = this.isInSync !== undefined ? this.isInSync : <any>null;
        data["isSyncFailure"] = this.isSyncFailure !== undefined ? this.isSyncFailure : <any>null;
        data["customerName"] = this.customerName !== undefined ? this.customerName : <any>null;
        data["siteTitle"] = this.siteTitle !== undefined ? this.siteTitle : <any>null;
        data["siteTimeZoneId"] = this.siteTimeZoneId !== undefined ? this.siteTimeZoneId : <any>null;
        data["rtuChannelCount"] = this.rtuChannelCount !== undefined ? this.rtuChannelCount : <any>null;
        data["dataChannelCount"] = this.dataChannelCount !== undefined ? this.dataChannelCount : <any>null;
        data["latestPacketTimeStamp"] = this.latestPacketTimeStamp ? this.latestPacketTimeStamp.toISOString() : <any>null;
        data["domainName"] = this.domainName !== undefined ? this.domainName : <any>null;
        data["rtuType"] = this.rtuType !== undefined ? this.rtuType : <any>null;
        data["category"] = this.category !== undefined ? this.category : <any>null;
        data["transportType"] = this.transportType !== undefined ? this.transportType : <any>null;
        data["localConfiguration"] = this.localConfiguration !== undefined ? this.localConfiguration : <any>null;
        data["localConfigurationInfo"] = this.localConfigurationInfo !== undefined ? this.localConfigurationInfo : <any>null;
        data["remoteConfiguration"] = this.remoteConfiguration !== undefined ? this.remoteConfiguration : <any>null;
        data["remoteConfigurationInfo"] = this.remoteConfigurationInfo !== undefined ? this.remoteConfigurationInfo : <any>null;
        data["diagnosticInformation"] = this.diagnosticInformation !== undefined ? this.diagnosticInformation : <any>null;
        data["hornerLocalLastTransactionFillCount"] = this.hornerLocalLastTransactionFillCount !== undefined ? this.hornerLocalLastTransactionFillCount : <any>null;
        data["hornerLocalLastDetailOffset"] = this.hornerLocalLastDetailOffset !== undefined ? this.hornerLocalLastDetailOffset : <any>null;
        data["hornerLocalHostAddress"] = this.hornerLocalHostAddress !== undefined ? this.hornerLocalHostAddress : <any>null;
        data["hornerRemoteHostAddress"] = this.hornerRemoteHostAddress !== undefined ? this.hornerRemoteHostAddress : <any>null;
        data["isPollable"] = this.isPollable !== undefined ? this.isPollable : <any>null;
        if (Array.isArray(this.rtuChannelConfigurations)) {
            data["rtuChannelConfigurations"] = [];
            for (let item of this.rtuChannelConfigurations)
                data["rtuChannelConfigurations"].push(item.toJSON());
        }
        return data;
    }
}

export class RTUChannelConfigurationInfo {
    rtuChannelId?: string;
    channelNumber?: string | null;
    channelType?: RTUChannelType | null;
    localConfiguration?: string | null;
    localConfigurationInfo?: any | null;
    remoteConfiguration?: string | null;
    remoteConfigurationInfo?: any | null;
    noConfiguration?: boolean;

    init(_data?: any) {
        if (_data) {
            this.rtuChannelId = _data["rtuChannelId"] !== undefined ? _data["rtuChannelId"] : <any>null;
            this.channelNumber = _data["channelNumber"] !== undefined ? _data["channelNumber"] : <any>null;
            this.channelType = _data["channelType"] !== undefined ? _data["channelType"] : <any>null;
            this.localConfiguration = _data["localConfiguration"] !== undefined ? _data["localConfiguration"] : <any>null;
            this.localConfigurationInfo = _data["localConfigurationInfo"] !== undefined ? _data["localConfigurationInfo"] : <any>null;
            this.remoteConfiguration = _data["remoteConfiguration"] !== undefined ? _data["remoteConfiguration"] : <any>null;
            this.remoteConfigurationInfo = _data["remoteConfigurationInfo"] !== undefined ? _data["remoteConfigurationInfo"] : <any>null;
            this.noConfiguration = _data["noConfiguration"] !== undefined ? _data["noConfiguration"] : <any>null;
        }
    }

    static fromJS(data: any): RTUChannelConfigurationInfo {
        data = typeof data === 'object' ? data : {};
        let result = new RTUChannelConfigurationInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rtuChannelId"] = this.rtuChannelId !== undefined ? this.rtuChannelId : <any>null;
        data["channelNumber"] = this.channelNumber !== undefined ? this.channelNumber : <any>null;
        data["channelType"] = this.channelType !== undefined ? this.channelType : <any>null;
        data["localConfiguration"] = this.localConfiguration !== undefined ? this.localConfiguration : <any>null;
        data["localConfigurationInfo"] = this.localConfigurationInfo !== undefined ? this.localConfigurationInfo : <any>null;
        data["remoteConfiguration"] = this.remoteConfiguration !== undefined ? this.remoteConfiguration : <any>null;
        data["remoteConfigurationInfo"] = this.remoteConfigurationInfo !== undefined ? this.remoteConfigurationInfo : <any>null;
        data["noConfiguration"] = this.noConfiguration !== undefined ? this.noConfiguration : <any>null;
        return data;
    }
}

export class RetrieveRTUInfoRecordsByOptionsRequest extends WcfProxyUserDetails {
    options?: RTUInfoRetrievalOptions | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.options = _data["options"] ? RTUInfoRetrievalOptions.fromJS(_data["options"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveRTUInfoRecordsByOptionsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveRTUInfoRecordsByOptionsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["options"] = this.options ? this.options.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveRtuInfoRecordsByOptionsRequest extends RetrieveRTUInfoRecordsByOptionsRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveRtuInfoRecordsByOptionsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveRtuInfoRecordsByOptionsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RTUInfoRetrievalOptions extends BaseRetrievalOptions {
    filterBy?: RTUListFilterOptions;
    groupBy?: RTUListGroupingOptions;
    selectedRtuCategories?: RTUCategoryType[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.filterBy = _data["filterBy"] !== undefined ? _data["filterBy"] : <any>null;
            this.groupBy = _data["groupBy"] !== undefined ? _data["groupBy"] : <any>null;
            if (Array.isArray(_data["selectedRtuCategories"])) {
                this.selectedRtuCategories = [] as any;
                for (let item of _data["selectedRtuCategories"])
                    this.selectedRtuCategories!.push(item);
            }
            else {
                this.selectedRtuCategories = <any>null;
            }
        }
    }

    static fromJS(data: any): RTUInfoRetrievalOptions {
        data = typeof data === 'object' ? data : {};
        let result = new RTUInfoRetrievalOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["filterBy"] = this.filterBy !== undefined ? this.filterBy : <any>null;
        data["groupBy"] = this.groupBy !== undefined ? this.groupBy : <any>null;
        if (Array.isArray(this.selectedRtuCategories)) {
            data["selectedRtuCategories"] = [];
            for (let item of this.selectedRtuCategories)
                data["selectedRtuCategories"].push(item);
        }
        super.toJSON(data);
        return data;
    }
}

export enum RTUListFilterOptions {
    RTU = 0,
    Site = 1,
    Carrier = 2,
    RTUPhone = 3,
    Customer = 4,
}

export enum RTUListGroupingOptions {
    None = 0,
    CustomerName = 1,
}

export class RetrieveRtuPollScheduleGroupEditComponentsByIdResponse {
    retrieveRtuPollScheduleGroupEditComponentsByIdResult?: RetrieveRtuPollScheduleGroupEditComponentsResult | null;

    init(_data?: any) {
        if (_data) {
            this.retrieveRtuPollScheduleGroupEditComponentsByIdResult = _data["retrieveRtuPollScheduleGroupEditComponentsByIdResult"] ? RetrieveRtuPollScheduleGroupEditComponentsResult.fromJS(_data["retrieveRtuPollScheduleGroupEditComponentsByIdResult"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveRtuPollScheduleGroupEditComponentsByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveRtuPollScheduleGroupEditComponentsByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["retrieveRtuPollScheduleGroupEditComponentsByIdResult"] = this.retrieveRtuPollScheduleGroupEditComponentsByIdResult ? this.retrieveRtuPollScheduleGroupEditComponentsByIdResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveRetrieveRtuPollScheduleGroupEditComponentsByIdResponse extends RetrieveRtuPollScheduleGroupEditComponentsByIdResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveRtuPollScheduleGroupEditComponentsByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveRtuPollScheduleGroupEditComponentsByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class BaseEditComponentsResultOfEditRtuPollScheduleGroup {
    editObject?: EditRtuPollScheduleGroup | null;
    areEditComponentsLoaded?: boolean;

    init(_data?: any) {
        if (_data) {
            this.editObject = _data["editObject"] ? EditRtuPollScheduleGroup.fromJS(_data["editObject"]) : <any>null;
            this.areEditComponentsLoaded = _data["areEditComponentsLoaded"] !== undefined ? _data["areEditComponentsLoaded"] : <any>null;
        }
    }

    static fromJS(data: any): BaseEditComponentsResultOfEditRtuPollScheduleGroup {
        data = typeof data === 'object' ? data : {};
        let result = new BaseEditComponentsResultOfEditRtuPollScheduleGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["editObject"] = this.editObject ? this.editObject.toJSON() : <any>null;
        data["areEditComponentsLoaded"] = this.areEditComponentsLoaded !== undefined ? this.areEditComponentsLoaded : <any>null;
        return data;
    }
}

export class RetrieveRtuPollScheduleGroupEditComponentsResult extends BaseEditComponentsResultOfEditRtuPollScheduleGroup {
    timezones?: TimezoneInfo[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["timezones"])) {
                this.timezones = [] as any;
                for (let item of _data["timezones"])
                    this.timezones!.push(TimezoneInfo.fromJS(item));
            }
            else {
                this.timezones = <any>null;
            }
        }
    }

    static fromJS(data: any): RetrieveRtuPollScheduleGroupEditComponentsResult {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveRtuPollScheduleGroupEditComponentsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.timezones)) {
            data["timezones"] = [];
            for (let item of this.timezones)
                data["timezones"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export class EditRtuPollScheduleGroup extends EditBase {
    rtuPollScheduleGroupId?: string;
    name?: string | null;
    domainId?: string;
    typeOfSchedule?: RTUPollScheduleType;
    interval?: number;
    offsetTime?: string;
    timeZoneId?: number | null;
    minDataAge?: number;
    rtuPollSchedules?: EditRtuPollSchedule[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.rtuPollScheduleGroupId = _data["rtuPollScheduleGroupId"] !== undefined ? _data["rtuPollScheduleGroupId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.typeOfSchedule = _data["typeOfSchedule"] !== undefined ? _data["typeOfSchedule"] : <any>null;
            this.interval = _data["interval"] !== undefined ? _data["interval"] : <any>null;
            this.offsetTime = _data["offsetTime"] !== undefined ? _data["offsetTime"] : <any>null;
            this.timeZoneId = _data["timeZoneId"] !== undefined ? _data["timeZoneId"] : <any>null;
            this.minDataAge = _data["minDataAge"] !== undefined ? _data["minDataAge"] : <any>null;
            if (Array.isArray(_data["rtuPollSchedules"])) {
                this.rtuPollSchedules = [] as any;
                for (let item of _data["rtuPollSchedules"])
                    this.rtuPollSchedules!.push(EditRtuPollSchedule.fromJS(item));
            }
            else {
                this.rtuPollSchedules = <any>null;
            }
        }
    }

    static fromJS(data: any): EditRtuPollScheduleGroup {
        data = typeof data === 'object' ? data : {};
        let result = new EditRtuPollScheduleGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rtuPollScheduleGroupId"] = this.rtuPollScheduleGroupId !== undefined ? this.rtuPollScheduleGroupId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["typeOfSchedule"] = this.typeOfSchedule !== undefined ? this.typeOfSchedule : <any>null;
        data["interval"] = this.interval !== undefined ? this.interval : <any>null;
        data["offsetTime"] = this.offsetTime !== undefined ? this.offsetTime : <any>null;
        data["timeZoneId"] = this.timeZoneId !== undefined ? this.timeZoneId : <any>null;
        data["minDataAge"] = this.minDataAge !== undefined ? this.minDataAge : <any>null;
        if (Array.isArray(this.rtuPollSchedules)) {
            data["rtuPollSchedules"] = [];
            for (let item of this.rtuPollSchedules)
                data["rtuPollSchedules"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export enum RTUPollScheduleType {
    None = 0,
    Interval = 1,
    PointInTime = 2,
}

export class EditRtuPollSchedule extends EditBase {
    rtuPollScheduleGroupId?: string;
    rtuPollScheduleId?: string;
    name?: string | null;
    scheduledPollTime?: string;
    domainId?: string;
    isEnabled?: boolean;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.rtuPollScheduleGroupId = _data["rtuPollScheduleGroupId"] !== undefined ? _data["rtuPollScheduleGroupId"] : <any>null;
            this.rtuPollScheduleId = _data["rtuPollScheduleId"] !== undefined ? _data["rtuPollScheduleId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.scheduledPollTime = _data["scheduledPollTime"] !== undefined ? _data["scheduledPollTime"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.isEnabled = _data["isEnabled"] !== undefined ? _data["isEnabled"] : <any>null;
        }
    }

    static fromJS(data: any): EditRtuPollSchedule {
        data = typeof data === 'object' ? data : {};
        let result = new EditRtuPollSchedule();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rtuPollScheduleGroupId"] = this.rtuPollScheduleGroupId !== undefined ? this.rtuPollScheduleGroupId : <any>null;
        data["rtuPollScheduleId"] = this.rtuPollScheduleId !== undefined ? this.rtuPollScheduleId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["scheduledPollTime"] = this.scheduledPollTime !== undefined ? this.scheduledPollTime : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["isEnabled"] = this.isEnabled !== undefined ? this.isEnabled : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class RetrieveRtuPollScheduleGroupEditComponentsByIdRequest extends WcfProxyUserDetails {
    rtuPollScheduleGroupId?: string;
    loadEditComponents?: boolean;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.rtuPollScheduleGroupId = _data["rtuPollScheduleGroupId"] !== undefined ? _data["rtuPollScheduleGroupId"] : <any>null;
            this.loadEditComponents = _data["loadEditComponents"] !== undefined ? _data["loadEditComponents"] : <any>null;
        }
    }

    static fromJS(data: any): RetrieveRtuPollScheduleGroupEditComponentsByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveRtuPollScheduleGroupEditComponentsByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rtuPollScheduleGroupId"] = this.rtuPollScheduleGroupId !== undefined ? this.rtuPollScheduleGroupId : <any>null;
        data["loadEditComponents"] = this.loadEditComponents !== undefined ? this.loadEditComponents : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveRtuPollScheduleGroupEditComponentsByIdRequest extends RetrieveRtuPollScheduleGroupEditComponentsByIdRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveRtuPollScheduleGroupEditComponentsByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveRtuPollScheduleGroupEditComponentsByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveRTUPollScheduleGroupRecordsByOptionsResponse {
    retrieveRTUPollScheduleGroupRecordsByOptionsResult?: RetrieveRTUPollScheduleGroupInfoListResult | null;

    init(_data?: any) {
        if (_data) {
            this.retrieveRTUPollScheduleGroupRecordsByOptionsResult = _data["retrieveRTUPollScheduleGroupRecordsByOptionsResult"] ? RetrieveRTUPollScheduleGroupInfoListResult.fromJS(_data["retrieveRTUPollScheduleGroupRecordsByOptionsResult"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveRTUPollScheduleGroupRecordsByOptionsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveRTUPollScheduleGroupRecordsByOptionsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["retrieveRTUPollScheduleGroupRecordsByOptionsResult"] = this.retrieveRTUPollScheduleGroupRecordsByOptionsResult ? this.retrieveRTUPollScheduleGroupRecordsByOptionsResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveRetrieveRtuPollScheduleGroupRecordsByOptionsResponse extends RetrieveRTUPollScheduleGroupRecordsByOptionsResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveRtuPollScheduleGroupRecordsByOptionsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveRtuPollScheduleGroupRecordsByOptionsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class BaseListResultOfRtuPollScheduleGroupInfoRecord {
    records?: RtuPollScheduleGroupInfoRecord[] | null;
    totalRecords?: number | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["records"])) {
                this.records = [] as any;
                for (let item of _data["records"])
                    this.records!.push(RtuPollScheduleGroupInfoRecord.fromJS(item));
            }
            else {
                this.records = <any>null;
            }
            this.totalRecords = _data["totalRecords"] !== undefined ? _data["totalRecords"] : <any>null;
        }
    }

    static fromJS(data: any): BaseListResultOfRtuPollScheduleGroupInfoRecord {
        data = typeof data === 'object' ? data : {};
        let result = new BaseListResultOfRtuPollScheduleGroupInfoRecord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.records)) {
            data["records"] = [];
            for (let item of this.records)
                data["records"].push(item.toJSON());
        }
        data["totalRecords"] = this.totalRecords !== undefined ? this.totalRecords : <any>null;
        return data;
    }
}

export class RetrieveRTUPollScheduleGroupInfoListResult extends BaseListResultOfRtuPollScheduleGroupInfoRecord {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): RetrieveRTUPollScheduleGroupInfoListResult {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveRTUPollScheduleGroupInfoListResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RtuPollScheduleGroupInfoRecord {
    rtuPollScheduleGroupId?: string;
    name?: string | null;
    typeOfSchedule?: RTUPollScheduleType;
    rtuCount?: number;
    totalPolls?: number;

    init(_data?: any) {
        if (_data) {
            this.rtuPollScheduleGroupId = _data["rtuPollScheduleGroupId"] !== undefined ? _data["rtuPollScheduleGroupId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.typeOfSchedule = _data["typeOfSchedule"] !== undefined ? _data["typeOfSchedule"] : <any>null;
            this.rtuCount = _data["rtuCount"] !== undefined ? _data["rtuCount"] : <any>null;
            this.totalPolls = _data["totalPolls"] !== undefined ? _data["totalPolls"] : <any>null;
        }
    }

    static fromJS(data: any): RtuPollScheduleGroupInfoRecord {
        data = typeof data === 'object' ? data : {};
        let result = new RtuPollScheduleGroupInfoRecord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rtuPollScheduleGroupId"] = this.rtuPollScheduleGroupId !== undefined ? this.rtuPollScheduleGroupId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["typeOfSchedule"] = this.typeOfSchedule !== undefined ? this.typeOfSchedule : <any>null;
        data["rtuCount"] = this.rtuCount !== undefined ? this.rtuCount : <any>null;
        data["totalPolls"] = this.totalPolls !== undefined ? this.totalPolls : <any>null;
        return data;
    }
}

export class RetrieveRTUPollScheduleGroupRecordsByOptionsRequest extends WcfProxyUserDetails {
    options?: RtuPollScheduleGroupInfoRetrievalOptions | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.options = _data["options"] ? RtuPollScheduleGroupInfoRetrievalOptions.fromJS(_data["options"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveRTUPollScheduleGroupRecordsByOptionsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveRTUPollScheduleGroupRecordsByOptionsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["options"] = this.options ? this.options.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveRtuPollScheduleGroupRecordsByOptionsRequest extends RetrieveRTUPollScheduleGroupRecordsByOptionsRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveRtuPollScheduleGroupRecordsByOptionsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveRtuPollScheduleGroupRecordsByOptionsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RtuPollScheduleGroupInfoRetrievalOptions extends BaseRetrievalOptions {
    filterBy?: RTUPollScheduleGroupFilterOptions;
    rtuPollScheduleGroupId?: string | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.filterBy = _data["filterBy"] !== undefined ? _data["filterBy"] : <any>null;
            this.rtuPollScheduleGroupId = _data["rtuPollScheduleGroupId"] !== undefined ? _data["rtuPollScheduleGroupId"] : <any>null;
        }
    }

    static fromJS(data: any): RtuPollScheduleGroupInfoRetrievalOptions {
        data = typeof data === 'object' ? data : {};
        let result = new RtuPollScheduleGroupInfoRetrievalOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["filterBy"] = this.filterBy !== undefined ? this.filterBy : <any>null;
        data["rtuPollScheduleGroupId"] = this.rtuPollScheduleGroupId !== undefined ? this.rtuPollScheduleGroupId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export enum RTUPollScheduleGroupFilterOptions {
    Name = 0,
    RTU = 1,
}

export class RetrieveRTUTypeInfoByDeviceIdRequest extends WcfProxyUserDetails {
    deviceId?: string | null;
    rtuCategory?: RTUCategoryType;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.deviceId = _data["deviceId"] !== undefined ? _data["deviceId"] : <any>null;
            this.rtuCategory = _data["rtuCategory"] !== undefined ? _data["rtuCategory"] : <any>null;
        }
    }

    static fromJS(data: any): RetrieveRTUTypeInfoByDeviceIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveRTUTypeInfoByDeviceIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deviceId"] = this.deviceId !== undefined ? this.deviceId : <any>null;
        data["rtuCategory"] = this.rtuCategory !== undefined ? this.rtuCategory : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveRtuTypeInfoByDeviceIdRequest extends RetrieveRTUTypeInfoByDeviceIdRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveRtuTypeInfoByDeviceIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveRtuTypeInfoByDeviceIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class SaveRTURequest extends WcfProxyUserDetails {
    rtu?: EditRTU | null;
    rtuChannelRequests?: RTUChannelRTURequestInfo[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.rtu = _data["rtu"] ? EditRTU.fromJS(_data["rtu"]) : <any>null;
            if (Array.isArray(_data["rtuChannelRequests"])) {
                this.rtuChannelRequests = [] as any;
                for (let item of _data["rtuChannelRequests"])
                    this.rtuChannelRequests!.push(RTUChannelRTURequestInfo.fromJS(item));
            }
            else {
                this.rtuChannelRequests = <any>null;
            }
        }
    }

    static fromJS(data: any): SaveRTURequest {
        data = typeof data === 'object' ? data : {};
        let result = new SaveRTURequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rtu"] = this.rtu ? this.rtu.toJSON() : <any>null;
        if (Array.isArray(this.rtuChannelRequests)) {
            data["rtuChannelRequests"] = [];
            for (let item of this.rtuChannelRequests)
                data["rtuChannelRequests"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export class EvolveSaveRtuRequest extends SaveRTURequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveSaveRtuRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveRtuRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class EditRTU extends EditBase {
    rtuId?: string;
    siteId?: string;
    siteInfo?: string | null;
    domainId?: string | null;
    rtuType?: RTUType;
    hardwareType?: RTUHardwareType;
    category?: RTUCategoryType;
    description?: string | null;
    deviceId?: string | null;
    altDeviceId?: string | null;
    callDirection?: RTUCallDirectionType | null;
    protocol?: RTUProtocolType | null;
    requestHandler?: RTURequestHandlerType | null;
    transportType?: RTUTransportType | null;
    carrier?: CarrierType;
    localConfigurationInfo?: any | null;
    localConfiguration?: string | null;
    remoteConfigurationInfo?: any | null;
    remoteConfiguration?: string | null;
    diagnosticsInfo?: any | null;
    diagnosticInformation?: string | null;
    expansionConfigurationInfo?: any | null;
    expansionConfiguration?: string | null;
    analogDigitalDisplay?: string | null;
    assignedId?: number;
    assignedIdAsText?: string | null;
    attemptCount?: number | null;
    autoCalculatedInitialTimeCorrection?: boolean;
    autoCalculatedTimeCorrection?: boolean;
    autoSyncConfiguration?: boolean | null;
    batteryLow?: number | null;
    dataTimeStamp?: string | null;
    deviceNetworkAddress?: string | null;
    devicePhoneNumber?: string | null;
    deviceStatus?: RTUTrackingStatus | null;
    dialOutFrequency?: number | null;
    dialOutStartTime?: number | null;
    fittedDisplayLines?: number | null;
    isPollable?: boolean | null;
    lastPacketCarrier?: CarrierType | null;
    lastPacketFromAddress?: string | null;
    latestBatteryReading?: number | null;
    latestBatteryVolts?: number | null;
    latestDiagnosticReadingTime?: Date | null;
    latestPacketTimeStamp?: Date | null;
    latestTemperatureReading?: number | null;
    /** {Enum_RTU_MaxAttempts},Max Attempts */
    maxAttemptCount?: number | null;
    maxNumberOfChannels?: number | null;
    maxNumberOfDigitalChannels?: number | null;
    packetSendOffset?: number | null;
    modemHubGroupId?: number | null;
    readHighResolutionLogs?: boolean | null;
    remoteTimestampAdjustment?: number | null;
    timeCorrectionSource?: RTUAutoTimingCorrectionSource;
    pollFilter?: PollFilterType | null;
    siteTimezoneId?: number | null;
    isInSync?: boolean | null;
    isAdditionalInSync?: boolean | null;
    isDeleted?: boolean | null;
    pollScheduleGroupId?: string | null;
    hornerLocalLastTransactionFillCount?: number | null;
    hornerLocalLastDetailOffset?: number | null;
    hornerLocalHostAddress?: string | null;
    hornerRemoteHostAddress?: string | null;
    hornerRTUInfo?: EditHornerRTU | null;
    rtuDeviceIdentifierReservationId?: number | null;
    temporaryNotes?: string | null;
    permanentNotes?: string | null;
    installationDate?: Date | null;
    modelDescription?: string | null;
    functionalLocation?: string | null;
    simIntegratedCircuitCardId?: string | null;
    rtuChannels?: EditRTUChannel[] | null;
    smsNetworkAddress?: string | null;
    fileRTUProviderId?: number | null;
    hostIP?: string | null;
    hostPort?: number;
    listenPort?: number;
    ipNetworkAddress?: string | null;
    packetCountLast24Hours?: number | null;
    isSyncTime?: boolean;
    isPollableNow?: boolean;
    eaglePaymeterModbusAddress?: number;
    productTypeId?: number;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.rtuId = _data["rtuId"] !== undefined ? _data["rtuId"] : <any>null;
            this.siteId = _data["siteId"] !== undefined ? _data["siteId"] : <any>null;
            this.siteInfo = _data["siteInfo"] !== undefined ? _data["siteInfo"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.rtuType = _data["rtuType"] !== undefined ? _data["rtuType"] : <any>null;
            this.hardwareType = _data["hardwareType"] !== undefined ? _data["hardwareType"] : <any>null;
            this.category = _data["category"] !== undefined ? _data["category"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.deviceId = _data["deviceId"] !== undefined ? _data["deviceId"] : <any>null;
            this.altDeviceId = _data["altDeviceId"] !== undefined ? _data["altDeviceId"] : <any>null;
            this.callDirection = _data["callDirection"] !== undefined ? _data["callDirection"] : <any>null;
            this.protocol = _data["protocol"] !== undefined ? _data["protocol"] : <any>null;
            this.requestHandler = _data["requestHandler"] !== undefined ? _data["requestHandler"] : <any>null;
            this.transportType = _data["transportType"] !== undefined ? _data["transportType"] : <any>null;
            this.carrier = _data["carrier"] !== undefined ? _data["carrier"] : <any>null;
            this.localConfigurationInfo = _data["localConfigurationInfo"] !== undefined ? _data["localConfigurationInfo"] : <any>null;
            this.localConfiguration = _data["localConfiguration"] !== undefined ? _data["localConfiguration"] : <any>null;
            this.remoteConfigurationInfo = _data["remoteConfigurationInfo"] !== undefined ? _data["remoteConfigurationInfo"] : <any>null;
            this.remoteConfiguration = _data["remoteConfiguration"] !== undefined ? _data["remoteConfiguration"] : <any>null;
            this.diagnosticsInfo = _data["diagnosticsInfo"] !== undefined ? _data["diagnosticsInfo"] : <any>null;
            this.diagnosticInformation = _data["diagnosticInformation"] !== undefined ? _data["diagnosticInformation"] : <any>null;
            this.expansionConfigurationInfo = _data["expansionConfigurationInfo"] !== undefined ? _data["expansionConfigurationInfo"] : <any>null;
            this.expansionConfiguration = _data["expansionConfiguration"] !== undefined ? _data["expansionConfiguration"] : <any>null;
            this.analogDigitalDisplay = _data["analogDigitalDisplay"] !== undefined ? _data["analogDigitalDisplay"] : <any>null;
            this.assignedId = _data["assignedId"] !== undefined ? _data["assignedId"] : <any>null;
            this.assignedIdAsText = _data["assignedIdAsText"] !== undefined ? _data["assignedIdAsText"] : <any>null;
            this.attemptCount = _data["attemptCount"] !== undefined ? _data["attemptCount"] : <any>null;
            this.autoCalculatedInitialTimeCorrection = _data["autoCalculatedInitialTimeCorrection"] !== undefined ? _data["autoCalculatedInitialTimeCorrection"] : <any>null;
            this.autoCalculatedTimeCorrection = _data["autoCalculatedTimeCorrection"] !== undefined ? _data["autoCalculatedTimeCorrection"] : <any>null;
            this.autoSyncConfiguration = _data["autoSyncConfiguration"] !== undefined ? _data["autoSyncConfiguration"] : <any>null;
            this.batteryLow = _data["batteryLow"] !== undefined ? _data["batteryLow"] : <any>null;
            this.dataTimeStamp = _data["dataTimeStamp"] !== undefined ? _data["dataTimeStamp"] : <any>null;
            this.deviceNetworkAddress = _data["deviceNetworkAddress"] !== undefined ? _data["deviceNetworkAddress"] : <any>null;
            this.devicePhoneNumber = _data["devicePhoneNumber"] !== undefined ? _data["devicePhoneNumber"] : <any>null;
            this.deviceStatus = _data["deviceStatus"] !== undefined ? _data["deviceStatus"] : <any>null;
            this.dialOutFrequency = _data["dialOutFrequency"] !== undefined ? _data["dialOutFrequency"] : <any>null;
            this.dialOutStartTime = _data["dialOutStartTime"] !== undefined ? _data["dialOutStartTime"] : <any>null;
            this.fittedDisplayLines = _data["fittedDisplayLines"] !== undefined ? _data["fittedDisplayLines"] : <any>null;
            this.isPollable = _data["isPollable"] !== undefined ? _data["isPollable"] : <any>null;
            this.lastPacketCarrier = _data["lastPacketCarrier"] !== undefined ? _data["lastPacketCarrier"] : <any>null;
            this.lastPacketFromAddress = _data["lastPacketFromAddress"] !== undefined ? _data["lastPacketFromAddress"] : <any>null;
            this.latestBatteryReading = _data["latestBatteryReading"] !== undefined ? _data["latestBatteryReading"] : <any>null;
            this.latestBatteryVolts = _data["latestBatteryVolts"] !== undefined ? _data["latestBatteryVolts"] : <any>null;
            this.latestDiagnosticReadingTime = _data["latestDiagnosticReadingTime"] ? new Date(_data["latestDiagnosticReadingTime"].toString()) : <any>null;
            this.latestPacketTimeStamp = _data["latestPacketTimeStamp"] ? new Date(_data["latestPacketTimeStamp"].toString()) : <any>null;
            this.latestTemperatureReading = _data["latestTemperatureReading"] !== undefined ? _data["latestTemperatureReading"] : <any>null;
            this.maxAttemptCount = _data["maxAttemptCount"] !== undefined ? _data["maxAttemptCount"] : <any>null;
            this.maxNumberOfChannels = _data["maxNumberOfChannels"] !== undefined ? _data["maxNumberOfChannels"] : <any>null;
            this.maxNumberOfDigitalChannels = _data["maxNumberOfDigitalChannels"] !== undefined ? _data["maxNumberOfDigitalChannels"] : <any>null;
            this.packetSendOffset = _data["packetSendOffset"] !== undefined ? _data["packetSendOffset"] : <any>null;
            this.modemHubGroupId = _data["modemHubGroupId"] !== undefined ? _data["modemHubGroupId"] : <any>null;
            this.readHighResolutionLogs = _data["readHighResolutionLogs"] !== undefined ? _data["readHighResolutionLogs"] : <any>null;
            this.remoteTimestampAdjustment = _data["remoteTimestampAdjustment"] !== undefined ? _data["remoteTimestampAdjustment"] : <any>null;
            this.timeCorrectionSource = _data["timeCorrectionSource"] !== undefined ? _data["timeCorrectionSource"] : <any>null;
            this.pollFilter = _data["pollFilter"] !== undefined ? _data["pollFilter"] : <any>null;
            this.siteTimezoneId = _data["siteTimezoneId"] !== undefined ? _data["siteTimezoneId"] : <any>null;
            this.isInSync = _data["isInSync"] !== undefined ? _data["isInSync"] : <any>null;
            this.isAdditionalInSync = _data["isAdditionalInSync"] !== undefined ? _data["isAdditionalInSync"] : <any>null;
            this.isDeleted = _data["isDeleted"] !== undefined ? _data["isDeleted"] : <any>null;
            this.pollScheduleGroupId = _data["pollScheduleGroupId"] !== undefined ? _data["pollScheduleGroupId"] : <any>null;
            this.hornerLocalLastTransactionFillCount = _data["hornerLocalLastTransactionFillCount"] !== undefined ? _data["hornerLocalLastTransactionFillCount"] : <any>null;
            this.hornerLocalLastDetailOffset = _data["hornerLocalLastDetailOffset"] !== undefined ? _data["hornerLocalLastDetailOffset"] : <any>null;
            this.hornerLocalHostAddress = _data["hornerLocalHostAddress"] !== undefined ? _data["hornerLocalHostAddress"] : <any>null;
            this.hornerRemoteHostAddress = _data["hornerRemoteHostAddress"] !== undefined ? _data["hornerRemoteHostAddress"] : <any>null;
            this.hornerRTUInfo = _data["hornerRTUInfo"] ? EditHornerRTU.fromJS(_data["hornerRTUInfo"]) : <any>null;
            this.rtuDeviceIdentifierReservationId = _data["rtuDeviceIdentifierReservationId"] !== undefined ? _data["rtuDeviceIdentifierReservationId"] : <any>null;
            this.temporaryNotes = _data["temporaryNotes"] !== undefined ? _data["temporaryNotes"] : <any>null;
            this.permanentNotes = _data["permanentNotes"] !== undefined ? _data["permanentNotes"] : <any>null;
            this.installationDate = _data["installationDate"] ? new Date(_data["installationDate"].toString()) : <any>null;
            this.modelDescription = _data["modelDescription"] !== undefined ? _data["modelDescription"] : <any>null;
            this.functionalLocation = _data["functionalLocation"] !== undefined ? _data["functionalLocation"] : <any>null;
            this.simIntegratedCircuitCardId = _data["simIntegratedCircuitCardId"] !== undefined ? _data["simIntegratedCircuitCardId"] : <any>null;
            if (Array.isArray(_data["rtuChannels"])) {
                this.rtuChannels = [] as any;
                for (let item of _data["rtuChannels"])
                    this.rtuChannels!.push(EditRTUChannel.fromJS(item));
            }
            else {
                this.rtuChannels = <any>null;
            }
            this.smsNetworkAddress = _data["smsNetworkAddress"] !== undefined ? _data["smsNetworkAddress"] : <any>null;
            this.fileRTUProviderId = _data["fileRTUProviderId"] !== undefined ? _data["fileRTUProviderId"] : <any>null;
            this.hostIP = _data["hostIP"] !== undefined ? _data["hostIP"] : <any>null;
            this.hostPort = _data["hostPort"] !== undefined ? _data["hostPort"] : <any>null;
            this.listenPort = _data["listenPort"] !== undefined ? _data["listenPort"] : <any>null;
            this.ipNetworkAddress = _data["ipNetworkAddress"] !== undefined ? _data["ipNetworkAddress"] : <any>null;
            this.packetCountLast24Hours = _data["packetCountLast24Hours"] !== undefined ? _data["packetCountLast24Hours"] : <any>null;
            this.isSyncTime = _data["isSyncTime"] !== undefined ? _data["isSyncTime"] : <any>null;
            this.isPollableNow = _data["isPollableNow"] !== undefined ? _data["isPollableNow"] : <any>null;
            this.eaglePaymeterModbusAddress = _data["eaglePaymeterModbusAddress"] !== undefined ? _data["eaglePaymeterModbusAddress"] : <any>null;
            this.productTypeId = _data["productTypeId"] !== undefined ? _data["productTypeId"] : <any>null;
        }
    }

    static fromJS(data: any): EditRTU {
        data = typeof data === 'object' ? data : {};
        let result = new EditRTU();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rtuId"] = this.rtuId !== undefined ? this.rtuId : <any>null;
        data["siteId"] = this.siteId !== undefined ? this.siteId : <any>null;
        data["siteInfo"] = this.siteInfo !== undefined ? this.siteInfo : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["rtuType"] = this.rtuType !== undefined ? this.rtuType : <any>null;
        data["hardwareType"] = this.hardwareType !== undefined ? this.hardwareType : <any>null;
        data["category"] = this.category !== undefined ? this.category : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["deviceId"] = this.deviceId !== undefined ? this.deviceId : <any>null;
        data["altDeviceId"] = this.altDeviceId !== undefined ? this.altDeviceId : <any>null;
        data["callDirection"] = this.callDirection !== undefined ? this.callDirection : <any>null;
        data["protocol"] = this.protocol !== undefined ? this.protocol : <any>null;
        data["requestHandler"] = this.requestHandler !== undefined ? this.requestHandler : <any>null;
        data["transportType"] = this.transportType !== undefined ? this.transportType : <any>null;
        data["carrier"] = this.carrier !== undefined ? this.carrier : <any>null;
        data["localConfigurationInfo"] = this.localConfigurationInfo !== undefined ? this.localConfigurationInfo : <any>null;
        data["localConfiguration"] = this.localConfiguration !== undefined ? this.localConfiguration : <any>null;
        data["remoteConfigurationInfo"] = this.remoteConfigurationInfo !== undefined ? this.remoteConfigurationInfo : <any>null;
        data["remoteConfiguration"] = this.remoteConfiguration !== undefined ? this.remoteConfiguration : <any>null;
        data["diagnosticsInfo"] = this.diagnosticsInfo !== undefined ? this.diagnosticsInfo : <any>null;
        data["diagnosticInformation"] = this.diagnosticInformation !== undefined ? this.diagnosticInformation : <any>null;
        data["expansionConfigurationInfo"] = this.expansionConfigurationInfo !== undefined ? this.expansionConfigurationInfo : <any>null;
        data["expansionConfiguration"] = this.expansionConfiguration !== undefined ? this.expansionConfiguration : <any>null;
        data["analogDigitalDisplay"] = this.analogDigitalDisplay !== undefined ? this.analogDigitalDisplay : <any>null;
        data["assignedId"] = this.assignedId !== undefined ? this.assignedId : <any>null;
        data["assignedIdAsText"] = this.assignedIdAsText !== undefined ? this.assignedIdAsText : <any>null;
        data["attemptCount"] = this.attemptCount !== undefined ? this.attemptCount : <any>null;
        data["autoCalculatedInitialTimeCorrection"] = this.autoCalculatedInitialTimeCorrection !== undefined ? this.autoCalculatedInitialTimeCorrection : <any>null;
        data["autoCalculatedTimeCorrection"] = this.autoCalculatedTimeCorrection !== undefined ? this.autoCalculatedTimeCorrection : <any>null;
        data["autoSyncConfiguration"] = this.autoSyncConfiguration !== undefined ? this.autoSyncConfiguration : <any>null;
        data["batteryLow"] = this.batteryLow !== undefined ? this.batteryLow : <any>null;
        data["dataTimeStamp"] = this.dataTimeStamp !== undefined ? this.dataTimeStamp : <any>null;
        data["deviceNetworkAddress"] = this.deviceNetworkAddress !== undefined ? this.deviceNetworkAddress : <any>null;
        data["devicePhoneNumber"] = this.devicePhoneNumber !== undefined ? this.devicePhoneNumber : <any>null;
        data["deviceStatus"] = this.deviceStatus !== undefined ? this.deviceStatus : <any>null;
        data["dialOutFrequency"] = this.dialOutFrequency !== undefined ? this.dialOutFrequency : <any>null;
        data["dialOutStartTime"] = this.dialOutStartTime !== undefined ? this.dialOutStartTime : <any>null;
        data["fittedDisplayLines"] = this.fittedDisplayLines !== undefined ? this.fittedDisplayLines : <any>null;
        data["isPollable"] = this.isPollable !== undefined ? this.isPollable : <any>null;
        data["lastPacketCarrier"] = this.lastPacketCarrier !== undefined ? this.lastPacketCarrier : <any>null;
        data["lastPacketFromAddress"] = this.lastPacketFromAddress !== undefined ? this.lastPacketFromAddress : <any>null;
        data["latestBatteryReading"] = this.latestBatteryReading !== undefined ? this.latestBatteryReading : <any>null;
        data["latestBatteryVolts"] = this.latestBatteryVolts !== undefined ? this.latestBatteryVolts : <any>null;
        data["latestDiagnosticReadingTime"] = this.latestDiagnosticReadingTime ? this.latestDiagnosticReadingTime.toISOString() : <any>null;
        data["latestPacketTimeStamp"] = this.latestPacketTimeStamp ? this.latestPacketTimeStamp.toISOString() : <any>null;
        data["latestTemperatureReading"] = this.latestTemperatureReading !== undefined ? this.latestTemperatureReading : <any>null;
        data["maxAttemptCount"] = this.maxAttemptCount !== undefined ? this.maxAttemptCount : <any>null;
        data["maxNumberOfChannels"] = this.maxNumberOfChannels !== undefined ? this.maxNumberOfChannels : <any>null;
        data["maxNumberOfDigitalChannels"] = this.maxNumberOfDigitalChannels !== undefined ? this.maxNumberOfDigitalChannels : <any>null;
        data["packetSendOffset"] = this.packetSendOffset !== undefined ? this.packetSendOffset : <any>null;
        data["modemHubGroupId"] = this.modemHubGroupId !== undefined ? this.modemHubGroupId : <any>null;
        data["readHighResolutionLogs"] = this.readHighResolutionLogs !== undefined ? this.readHighResolutionLogs : <any>null;
        data["remoteTimestampAdjustment"] = this.remoteTimestampAdjustment !== undefined ? this.remoteTimestampAdjustment : <any>null;
        data["timeCorrectionSource"] = this.timeCorrectionSource !== undefined ? this.timeCorrectionSource : <any>null;
        data["pollFilter"] = this.pollFilter !== undefined ? this.pollFilter : <any>null;
        data["siteTimezoneId"] = this.siteTimezoneId !== undefined ? this.siteTimezoneId : <any>null;
        data["isInSync"] = this.isInSync !== undefined ? this.isInSync : <any>null;
        data["isAdditionalInSync"] = this.isAdditionalInSync !== undefined ? this.isAdditionalInSync : <any>null;
        data["isDeleted"] = this.isDeleted !== undefined ? this.isDeleted : <any>null;
        data["pollScheduleGroupId"] = this.pollScheduleGroupId !== undefined ? this.pollScheduleGroupId : <any>null;
        data["hornerLocalLastTransactionFillCount"] = this.hornerLocalLastTransactionFillCount !== undefined ? this.hornerLocalLastTransactionFillCount : <any>null;
        data["hornerLocalLastDetailOffset"] = this.hornerLocalLastDetailOffset !== undefined ? this.hornerLocalLastDetailOffset : <any>null;
        data["hornerLocalHostAddress"] = this.hornerLocalHostAddress !== undefined ? this.hornerLocalHostAddress : <any>null;
        data["hornerRemoteHostAddress"] = this.hornerRemoteHostAddress !== undefined ? this.hornerRemoteHostAddress : <any>null;
        data["hornerRTUInfo"] = this.hornerRTUInfo ? this.hornerRTUInfo.toJSON() : <any>null;
        data["rtuDeviceIdentifierReservationId"] = this.rtuDeviceIdentifierReservationId !== undefined ? this.rtuDeviceIdentifierReservationId : <any>null;
        data["temporaryNotes"] = this.temporaryNotes !== undefined ? this.temporaryNotes : <any>null;
        data["permanentNotes"] = this.permanentNotes !== undefined ? this.permanentNotes : <any>null;
        data["installationDate"] = this.installationDate ? this.installationDate.toISOString() : <any>null;
        data["modelDescription"] = this.modelDescription !== undefined ? this.modelDescription : <any>null;
        data["functionalLocation"] = this.functionalLocation !== undefined ? this.functionalLocation : <any>null;
        data["simIntegratedCircuitCardId"] = this.simIntegratedCircuitCardId !== undefined ? this.simIntegratedCircuitCardId : <any>null;
        if (Array.isArray(this.rtuChannels)) {
            data["rtuChannels"] = [];
            for (let item of this.rtuChannels)
                data["rtuChannels"].push(item.toJSON());
        }
        data["smsNetworkAddress"] = this.smsNetworkAddress !== undefined ? this.smsNetworkAddress : <any>null;
        data["fileRTUProviderId"] = this.fileRTUProviderId !== undefined ? this.fileRTUProviderId : <any>null;
        data["hostIP"] = this.hostIP !== undefined ? this.hostIP : <any>null;
        data["hostPort"] = this.hostPort !== undefined ? this.hostPort : <any>null;
        data["listenPort"] = this.listenPort !== undefined ? this.listenPort : <any>null;
        data["ipNetworkAddress"] = this.ipNetworkAddress !== undefined ? this.ipNetworkAddress : <any>null;
        data["packetCountLast24Hours"] = this.packetCountLast24Hours !== undefined ? this.packetCountLast24Hours : <any>null;
        data["isSyncTime"] = this.isSyncTime !== undefined ? this.isSyncTime : <any>null;
        data["isPollableNow"] = this.isPollableNow !== undefined ? this.isPollableNow : <any>null;
        data["eaglePaymeterModbusAddress"] = this.eaglePaymeterModbusAddress !== undefined ? this.eaglePaymeterModbusAddress : <any>null;
        data["productTypeId"] = this.productTypeId !== undefined ? this.productTypeId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export enum RTUHardwareType {
    None = 0,
    Cm256AsciiPhone = 1,
    Cm256Rmu = 2,
    Dp170 = 3,
    Dp171 = 4,
    Dp189 = 5,
    Dp189AsciiReflex = 6,
    Dp189AsciiCdma = 7,
    Dp262 = 8,
    Ht195 = 9,
    Ps99 = 10,
    Ps136 = 11,
    Rt124 = 12,
    Vs158 = 13,
    Vs163 = 14,
    Infact = 15,
    Compak = 16,
    Virtual = 17,
    Rt288 = 18,
    Metron2 = 19,
    Horner = 20,
    DPW390 = 21,
    LC490 = 22,
    DP489 = 23,
    KT09 = 24,
    BC474 = 25,
    GU476 = 26,
    EG501 = 27,
}

export enum RTUCallDirectionType {
    Inbound = 1,
    Outbound = 2,
    Both = 3,
}

export enum RTUProtocolType {
    None = 0,
    ModbusGeneric = 1,
    ModbusApci = 2,
    ModbusPraxair = 3,
    CloverGeneric = 4,
    CloverInfAck = 5,
    CloverCompak = 6,
    Unknown = 7,
    Metron2 = 8,
    Horner = 9,
    KT09 = 10,
}

export enum RTURequestHandlerType {
    RCM = 1,
    RRP = 2,
}

export enum RTUTrackingStatus {
    DolProduction = 0,
    DolTesting = 1,
    ShippedToCustomer = 2,
    InstalledAtSite = 3,
    RmaIssued = 4,
    RmaReceived = 5,
    RmaRepaired = 6,
    Scrapped = 7,
}

export enum RTUAutoTimingCorrectionSource {
    None = 0,
    InitialCorrection = 1,
    LazyCorrection = 2,
    UseServerTimestamp = 3,
}

export enum PollFilterType {
    InstantaneousAndHistoricalReadings = 1,
    InstantaneousReadingsOnly = 2,
}

export class EditHornerRTU extends EditBase {
    rtuId?: string;
    hornerType?: HornerRTUType;
    hornerModelType?: HornerModelType;
    isUseExchangePhoneNumber?: boolean;
    hostAddress?: string | null;
    remoteHostAddress?: string | null;
    hornerDetailRecordTemplateId?: number | null;
    hornerTransactionRecordTemplateId?: number | null;
    transactionLastFillCount?: number | null;
    detailLastOffset?: number | null;
    detailFields?: EditHornerMessageTemplateField[] | null;
    transactionFields?: EditHornerMessageTemplateField[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.rtuId = _data["rtuId"] !== undefined ? _data["rtuId"] : <any>null;
            this.hornerType = _data["hornerType"] !== undefined ? _data["hornerType"] : <any>null;
            this.hornerModelType = _data["hornerModelType"] !== undefined ? _data["hornerModelType"] : <any>null;
            this.isUseExchangePhoneNumber = _data["isUseExchangePhoneNumber"] !== undefined ? _data["isUseExchangePhoneNumber"] : <any>null;
            this.hostAddress = _data["hostAddress"] !== undefined ? _data["hostAddress"] : <any>null;
            this.remoteHostAddress = _data["remoteHostAddress"] !== undefined ? _data["remoteHostAddress"] : <any>null;
            this.hornerDetailRecordTemplateId = _data["hornerDetailRecordTemplateId"] !== undefined ? _data["hornerDetailRecordTemplateId"] : <any>null;
            this.hornerTransactionRecordTemplateId = _data["hornerTransactionRecordTemplateId"] !== undefined ? _data["hornerTransactionRecordTemplateId"] : <any>null;
            this.transactionLastFillCount = _data["transactionLastFillCount"] !== undefined ? _data["transactionLastFillCount"] : <any>null;
            this.detailLastOffset = _data["detailLastOffset"] !== undefined ? _data["detailLastOffset"] : <any>null;
            if (Array.isArray(_data["detailFields"])) {
                this.detailFields = [] as any;
                for (let item of _data["detailFields"])
                    this.detailFields!.push(EditHornerMessageTemplateField.fromJS(item));
            }
            else {
                this.detailFields = <any>null;
            }
            if (Array.isArray(_data["transactionFields"])) {
                this.transactionFields = [] as any;
                for (let item of _data["transactionFields"])
                    this.transactionFields!.push(EditHornerMessageTemplateField.fromJS(item));
            }
            else {
                this.transactionFields = <any>null;
            }
        }
    }

    static fromJS(data: any): EditHornerRTU {
        data = typeof data === 'object' ? data : {};
        let result = new EditHornerRTU();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rtuId"] = this.rtuId !== undefined ? this.rtuId : <any>null;
        data["hornerType"] = this.hornerType !== undefined ? this.hornerType : <any>null;
        data["hornerModelType"] = this.hornerModelType !== undefined ? this.hornerModelType : <any>null;
        data["isUseExchangePhoneNumber"] = this.isUseExchangePhoneNumber !== undefined ? this.isUseExchangePhoneNumber : <any>null;
        data["hostAddress"] = this.hostAddress !== undefined ? this.hostAddress : <any>null;
        data["remoteHostAddress"] = this.remoteHostAddress !== undefined ? this.remoteHostAddress : <any>null;
        data["hornerDetailRecordTemplateId"] = this.hornerDetailRecordTemplateId !== undefined ? this.hornerDetailRecordTemplateId : <any>null;
        data["hornerTransactionRecordTemplateId"] = this.hornerTransactionRecordTemplateId !== undefined ? this.hornerTransactionRecordTemplateId : <any>null;
        data["transactionLastFillCount"] = this.transactionLastFillCount !== undefined ? this.transactionLastFillCount : <any>null;
        data["detailLastOffset"] = this.detailLastOffset !== undefined ? this.detailLastOffset : <any>null;
        if (Array.isArray(this.detailFields)) {
            data["detailFields"] = [];
            for (let item of this.detailFields)
                data["detailFields"].push(item.toJSON());
        }
        if (Array.isArray(this.transactionFields)) {
            data["transactionFields"] = [];
            for (let item of this.transactionFields)
                data["transactionFields"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export enum HornerRTUType {
    Dispenser = 0,
    Compressor = 1,
}

export enum HornerModelType {
    Serial = 0,
    IP = 1,
}

export class EditHornerMessageTemplateField extends EditBase {
    transactionFieldType?: HornerTransactionFeildType | null;
    detailFieldType?: HornerDetailFeildType | null;
    fieldName?: string | null;
    channelNumber?: string | null;
    rawMinimumValue?: number;
    rawMaximumValue?: number;
    scaledMinimumValue?: number;
    scaledMaximumValue?: number;
    unitOfMeasure?: string | null;
    decimalPlaces?: number;
    isDisplayed?: boolean;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.transactionFieldType = _data["transactionFieldType"] !== undefined ? _data["transactionFieldType"] : <any>null;
            this.detailFieldType = _data["detailFieldType"] !== undefined ? _data["detailFieldType"] : <any>null;
            this.fieldName = _data["fieldName"] !== undefined ? _data["fieldName"] : <any>null;
            this.channelNumber = _data["channelNumber"] !== undefined ? _data["channelNumber"] : <any>null;
            this.rawMinimumValue = _data["rawMinimumValue"] !== undefined ? _data["rawMinimumValue"] : <any>null;
            this.rawMaximumValue = _data["rawMaximumValue"] !== undefined ? _data["rawMaximumValue"] : <any>null;
            this.scaledMinimumValue = _data["scaledMinimumValue"] !== undefined ? _data["scaledMinimumValue"] : <any>null;
            this.scaledMaximumValue = _data["scaledMaximumValue"] !== undefined ? _data["scaledMaximumValue"] : <any>null;
            this.unitOfMeasure = _data["unitOfMeasure"] !== undefined ? _data["unitOfMeasure"] : <any>null;
            this.decimalPlaces = _data["decimalPlaces"] !== undefined ? _data["decimalPlaces"] : <any>null;
            this.isDisplayed = _data["isDisplayed"] !== undefined ? _data["isDisplayed"] : <any>null;
        }
    }

    static fromJS(data: any): EditHornerMessageTemplateField {
        data = typeof data === 'object' ? data : {};
        let result = new EditHornerMessageTemplateField();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transactionFieldType"] = this.transactionFieldType !== undefined ? this.transactionFieldType : <any>null;
        data["detailFieldType"] = this.detailFieldType !== undefined ? this.detailFieldType : <any>null;
        data["fieldName"] = this.fieldName !== undefined ? this.fieldName : <any>null;
        data["channelNumber"] = this.channelNumber !== undefined ? this.channelNumber : <any>null;
        data["rawMinimumValue"] = this.rawMinimumValue !== undefined ? this.rawMinimumValue : <any>null;
        data["rawMaximumValue"] = this.rawMaximumValue !== undefined ? this.rawMaximumValue : <any>null;
        data["scaledMinimumValue"] = this.scaledMinimumValue !== undefined ? this.scaledMinimumValue : <any>null;
        data["scaledMaximumValue"] = this.scaledMaximumValue !== undefined ? this.scaledMaximumValue : <any>null;
        data["unitOfMeasure"] = this.unitOfMeasure !== undefined ? this.unitOfMeasure : <any>null;
        data["decimalPlaces"] = this.decimalPlaces !== undefined ? this.decimalPlaces : <any>null;
        data["isDisplayed"] = this.isDisplayed !== undefined ? this.isDisplayed : <any>null;
        super.toJSON(data);
        return data;
    }
}

export enum HornerTransactionFeildType {
    Unused = 0,
    Pin = 1,
    StartTime = 2,
    StartPressure = 3,
    AmbientTemperature = 4,
    StartTankPressure = 5,
    StartTankTemperature = 6,
    Product = 7,
    UserNo = 8,
    VechicleId = 9,
    OdometerReading = 10,
    EndTime = 11,
    EndPressure = 12,
    Flow = 13,
    FuelTemperature = 14,
    RecordingEndTime = 15,
    CommType = 16,
    ShutdownReason = 17,
    NonCommReason = 18,
    Duration = 19,
    AverageFillRate = 20,
    EndTankPressure = 21,
    EndTankTemperature = 22,
    CommLossCount = 23,
    Blend = 24,
    Integer = 25,
    UnsignedInteger = 26,
    BigInt = 27,
    Space1 = 28,
    Space2 = 29,
    Space3 = 30,
    Space4 = 31,
}

export enum HornerDetailFeildType {
    Unused = 0,
    ReadingTime = 1,
    Integer = 2,
    UnsignedInteger = 3,
    Space1 = 4,
    Space2 = 5,
    Space3 = 6,
    Space4 = 7,
}

export class EditRTUChannel extends EditBase {
    rtuChannelId?: string;
    rtuId?: string;
    channelType?: RTUChannelType | null;
    rtuDeviceId?: string | null;
    channelNumber?: string | null;
    description?: string | null;
    name?: string | null;
    lastLogTimeStamp?: Date | null;
    localConfigurationInfo?: any | null;
    localConfiguration?: string | null;
    remoteConfigurationInfo?: any | null;
    remoteConfiguration?: string | null;
    diagnosticsInfo?: any | null;
    diagnosticInformation?: string | null;
    isReversePollInSync?: boolean | null;
    isConfigInSync?: boolean | null;
    isInSync?: boolean | null;
    isAdditionalConfigInSync?: boolean | null;
    isDeleted?: boolean | null;
    noConfiguration?: boolean;
    rawUnits?: RawUnitType;
    pollFilter?: PollFilterType | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.rtuChannelId = _data["rtuChannelId"] !== undefined ? _data["rtuChannelId"] : <any>null;
            this.rtuId = _data["rtuId"] !== undefined ? _data["rtuId"] : <any>null;
            this.channelType = _data["channelType"] !== undefined ? _data["channelType"] : <any>null;
            this.rtuDeviceId = _data["rtuDeviceId"] !== undefined ? _data["rtuDeviceId"] : <any>null;
            this.channelNumber = _data["channelNumber"] !== undefined ? _data["channelNumber"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.lastLogTimeStamp = _data["lastLogTimeStamp"] ? new Date(_data["lastLogTimeStamp"].toString()) : <any>null;
            this.localConfigurationInfo = _data["localConfigurationInfo"] !== undefined ? _data["localConfigurationInfo"] : <any>null;
            this.localConfiguration = _data["localConfiguration"] !== undefined ? _data["localConfiguration"] : <any>null;
            this.remoteConfigurationInfo = _data["remoteConfigurationInfo"] !== undefined ? _data["remoteConfigurationInfo"] : <any>null;
            this.remoteConfiguration = _data["remoteConfiguration"] !== undefined ? _data["remoteConfiguration"] : <any>null;
            this.diagnosticsInfo = _data["diagnosticsInfo"] !== undefined ? _data["diagnosticsInfo"] : <any>null;
            this.diagnosticInformation = _data["diagnosticInformation"] !== undefined ? _data["diagnosticInformation"] : <any>null;
            this.isReversePollInSync = _data["isReversePollInSync"] !== undefined ? _data["isReversePollInSync"] : <any>null;
            this.isConfigInSync = _data["isConfigInSync"] !== undefined ? _data["isConfigInSync"] : <any>null;
            this.isInSync = _data["isInSync"] !== undefined ? _data["isInSync"] : <any>null;
            this.isAdditionalConfigInSync = _data["isAdditionalConfigInSync"] !== undefined ? _data["isAdditionalConfigInSync"] : <any>null;
            this.isDeleted = _data["isDeleted"] !== undefined ? _data["isDeleted"] : <any>null;
            this.noConfiguration = _data["noConfiguration"] !== undefined ? _data["noConfiguration"] : <any>null;
            this.rawUnits = _data["rawUnits"] !== undefined ? _data["rawUnits"] : <any>null;
            this.pollFilter = _data["pollFilter"] !== undefined ? _data["pollFilter"] : <any>null;
        }
    }

    static fromJS(data: any): EditRTUChannel {
        data = typeof data === 'object' ? data : {};
        let result = new EditRTUChannel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rtuChannelId"] = this.rtuChannelId !== undefined ? this.rtuChannelId : <any>null;
        data["rtuId"] = this.rtuId !== undefined ? this.rtuId : <any>null;
        data["channelType"] = this.channelType !== undefined ? this.channelType : <any>null;
        data["rtuDeviceId"] = this.rtuDeviceId !== undefined ? this.rtuDeviceId : <any>null;
        data["channelNumber"] = this.channelNumber !== undefined ? this.channelNumber : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["lastLogTimeStamp"] = this.lastLogTimeStamp ? this.lastLogTimeStamp.toISOString() : <any>null;
        data["localConfigurationInfo"] = this.localConfigurationInfo !== undefined ? this.localConfigurationInfo : <any>null;
        data["localConfiguration"] = this.localConfiguration !== undefined ? this.localConfiguration : <any>null;
        data["remoteConfigurationInfo"] = this.remoteConfigurationInfo !== undefined ? this.remoteConfigurationInfo : <any>null;
        data["remoteConfiguration"] = this.remoteConfiguration !== undefined ? this.remoteConfiguration : <any>null;
        data["diagnosticsInfo"] = this.diagnosticsInfo !== undefined ? this.diagnosticsInfo : <any>null;
        data["diagnosticInformation"] = this.diagnosticInformation !== undefined ? this.diagnosticInformation : <any>null;
        data["isReversePollInSync"] = this.isReversePollInSync !== undefined ? this.isReversePollInSync : <any>null;
        data["isConfigInSync"] = this.isConfigInSync !== undefined ? this.isConfigInSync : <any>null;
        data["isInSync"] = this.isInSync !== undefined ? this.isInSync : <any>null;
        data["isAdditionalConfigInSync"] = this.isAdditionalConfigInSync !== undefined ? this.isAdditionalConfigInSync : <any>null;
        data["isDeleted"] = this.isDeleted !== undefined ? this.isDeleted : <any>null;
        data["noConfiguration"] = this.noConfiguration !== undefined ? this.noConfiguration : <any>null;
        data["rawUnits"] = this.rawUnits !== undefined ? this.rawUnits : <any>null;
        data["pollFilter"] = this.pollFilter !== undefined ? this.pollFilter : <any>null;
        super.toJSON(data);
        return data;
    }
}

export enum RawUnitType {
    MilliAmps = 1,
    Adc = 2,
    Volts = 3,
    PreScaled = 4,
    FiveTenthsPercentSpan = 5,
    UserDefined = 6,
    Custom = 7,
}

export class RTU400SeriesGpsChannelConfigurationInfo extends EditBase {
    signalSource?: RTU400SeriesGpsSignalSource;
    commSlotNumber?: number;
    isAlwaysOn?: boolean;
    isLogPeriodically?: boolean;
    isLogOnMovement?: boolean;
    isTransmitOnMovement?: boolean;
    isTransmitPeriodically?: boolean;
    isTransmitWhenBufferFull?: boolean;
    readingRate?: number;
    loggingRate?: number;
    minDistanceForTransmit?: number;
    transmitInterval?: number;
    transmitHour?: number;
    maxDailyTransmissions?: number;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.signalSource = _data["signalSource"] !== undefined ? _data["signalSource"] : <any>null;
            this.commSlotNumber = _data["commSlotNumber"] !== undefined ? _data["commSlotNumber"] : <any>null;
            this.isAlwaysOn = _data["isAlwaysOn"] !== undefined ? _data["isAlwaysOn"] : <any>null;
            this.isLogPeriodically = _data["isLogPeriodically"] !== undefined ? _data["isLogPeriodically"] : <any>null;
            this.isLogOnMovement = _data["isLogOnMovement"] !== undefined ? _data["isLogOnMovement"] : <any>null;
            this.isTransmitOnMovement = _data["isTransmitOnMovement"] !== undefined ? _data["isTransmitOnMovement"] : <any>null;
            this.isTransmitPeriodically = _data["isTransmitPeriodically"] !== undefined ? _data["isTransmitPeriodically"] : <any>null;
            this.isTransmitWhenBufferFull = _data["isTransmitWhenBufferFull"] !== undefined ? _data["isTransmitWhenBufferFull"] : <any>null;
            this.readingRate = _data["readingRate"] !== undefined ? _data["readingRate"] : <any>null;
            this.loggingRate = _data["loggingRate"] !== undefined ? _data["loggingRate"] : <any>null;
            this.minDistanceForTransmit = _data["minDistanceForTransmit"] !== undefined ? _data["minDistanceForTransmit"] : <any>null;
            this.transmitInterval = _data["transmitInterval"] !== undefined ? _data["transmitInterval"] : <any>null;
            this.transmitHour = _data["transmitHour"] !== undefined ? _data["transmitHour"] : <any>null;
            this.maxDailyTransmissions = _data["maxDailyTransmissions"] !== undefined ? _data["maxDailyTransmissions"] : <any>null;
        }
    }

    static fromJS(data: any): RTU400SeriesGpsChannelConfigurationInfo {
        data = typeof data === 'object' ? data : {};
        let result = new RTU400SeriesGpsChannelConfigurationInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["signalSource"] = this.signalSource !== undefined ? this.signalSource : <any>null;
        data["commSlotNumber"] = this.commSlotNumber !== undefined ? this.commSlotNumber : <any>null;
        data["isAlwaysOn"] = this.isAlwaysOn !== undefined ? this.isAlwaysOn : <any>null;
        data["isLogPeriodically"] = this.isLogPeriodically !== undefined ? this.isLogPeriodically : <any>null;
        data["isLogOnMovement"] = this.isLogOnMovement !== undefined ? this.isLogOnMovement : <any>null;
        data["isTransmitOnMovement"] = this.isTransmitOnMovement !== undefined ? this.isTransmitOnMovement : <any>null;
        data["isTransmitPeriodically"] = this.isTransmitPeriodically !== undefined ? this.isTransmitPeriodically : <any>null;
        data["isTransmitWhenBufferFull"] = this.isTransmitWhenBufferFull !== undefined ? this.isTransmitWhenBufferFull : <any>null;
        data["readingRate"] = this.readingRate !== undefined ? this.readingRate : <any>null;
        data["loggingRate"] = this.loggingRate !== undefined ? this.loggingRate : <any>null;
        data["minDistanceForTransmit"] = this.minDistanceForTransmit !== undefined ? this.minDistanceForTransmit : <any>null;
        data["transmitInterval"] = this.transmitInterval !== undefined ? this.transmitInterval : <any>null;
        data["transmitHour"] = this.transmitHour !== undefined ? this.transmitHour : <any>null;
        data["maxDailyTransmissions"] = this.maxDailyTransmissions !== undefined ? this.maxDailyTransmissions : <any>null;
        super.toJSON(data);
        return data;
    }
}

export enum RTU400SeriesGpsSignalSource {
    None = 0,
    MainBoard = 1,
    CommSlot = 2,
}

export class Metron2RTUChannelDiagnosticsInfo {
    latestReadingTime?: Date | null;
    latestScaledValue?: number | null;

    init(_data?: any) {
        if (_data) {
            this.latestReadingTime = _data["latestReadingTime"] ? new Date(_data["latestReadingTime"].toString()) : <any>null;
            this.latestScaledValue = _data["latestScaledValue"] !== undefined ? _data["latestScaledValue"] : <any>null;
        }
    }

    static fromJS(data: any): Metron2RTUChannelDiagnosticsInfo {
        data = typeof data === 'object' ? data : {};
        let result = new Metron2RTUChannelDiagnosticsInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["latestReadingTime"] = this.latestReadingTime ? this.latestReadingTime.toISOString() : <any>null;
        data["latestScaledValue"] = this.latestScaledValue !== undefined ? this.latestScaledValue : <any>null;
        return data;
    }
}

export class EaglePaymeterRTUChannelConfigurationInfo extends EditBase {
    /** {UI_RTUEaglePaymeter_Register} */
    register?: number | null;
    archiveInfoRecords?: EaglePaymeterRTUChannelArchiveInfo[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.register = _data["register"] !== undefined ? _data["register"] : <any>null;
            if (Array.isArray(_data["archiveInfoRecords"])) {
                this.archiveInfoRecords = [] as any;
                for (let item of _data["archiveInfoRecords"])
                    this.archiveInfoRecords!.push(EaglePaymeterRTUChannelArchiveInfo.fromJS(item));
            }
            else {
                this.archiveInfoRecords = <any>null;
            }
        }
    }

    static fromJS(data: any): EaglePaymeterRTUChannelConfigurationInfo {
        data = typeof data === 'object' ? data : {};
        let result = new EaglePaymeterRTUChannelConfigurationInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["register"] = this.register !== undefined ? this.register : <any>null;
        if (Array.isArray(this.archiveInfoRecords)) {
            data["archiveInfoRecords"] = [];
            for (let item of this.archiveInfoRecords)
                data["archiveInfoRecords"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export class EaglePaymeterRTUChannelArchiveInfo extends EditBase {
    eaglePaymeterArchiveRtuChannelId?: number;
    /** {UI_RTUEaglePaymeter_ArchiveNumber} */
    archiveNumber?: number | null;
    /** {UI_RTUEaglePaymeter_ArchiveColumn} */
    archiveColumn?: number | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.eaglePaymeterArchiveRtuChannelId = _data["eaglePaymeterArchiveRtuChannelId"] !== undefined ? _data["eaglePaymeterArchiveRtuChannelId"] : <any>null;
            this.archiveNumber = _data["archiveNumber"] !== undefined ? _data["archiveNumber"] : <any>null;
            this.archiveColumn = _data["archiveColumn"] !== undefined ? _data["archiveColumn"] : <any>null;
        }
    }

    static fromJS(data: any): EaglePaymeterRTUChannelArchiveInfo {
        data = typeof data === 'object' ? data : {};
        let result = new EaglePaymeterRTUChannelArchiveInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["eaglePaymeterArchiveRtuChannelId"] = this.eaglePaymeterArchiveRtuChannelId !== undefined ? this.eaglePaymeterArchiveRtuChannelId : <any>null;
        data["archiveNumber"] = this.archiveNumber !== undefined ? this.archiveNumber : <any>null;
        data["archiveColumn"] = this.archiveColumn !== undefined ? this.archiveColumn : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class CloverAnalogRTUChannelConfigurationInfo extends EditBase {
    /** {UI_RTU_FrontPanelText} */
    displayDescription?: string | null;
    sensorType?: CloverChannelSensorType;
    inputSignalType?: CloverInputSignalType;
    invertSignal?: boolean;
    /** {UI_Common_ScaledMin} */
    sensorMin?: number;
    /** {UI_Common_ScaledMax} */
    sensorMax?: number;
    /** {UI_Common_ScaledUnits} */
    units?: string | null;
    /** {UI_RTUClover_DataLoggingPeriod} */
    dataLogInterval?: number;
    /** {UI_RTUClover_HighspeedLoggingPeriod} */
    dataLogHighSpeedInterval?: number;
    loggingMethod?: CloverAnalogChannelLoggingMethod;
    highAlarmPoint?: number;
    highAlarmAdjustment?: number;
    highAlarmDelay?: boolean;
    lowAlarmPoint?: number;
    lowAlarmAdjustment?: number;
    lowAlarmDelay?: boolean;
    delayAdjustment?: boolean;
    /** {UI_RTU_Delay} */
    delay?: number;
    reversePollEnable?: boolean;
    enable?: boolean;
    /** {UI_RTUClover_NormalDialOutNumber} */
    normalAlarmPhoneNumberIndex?: number;
    /** {UI_RTUClover_DivertedDialOutNumber} */
    divertedAlarmPhoneNumberIndex?: number;
    productTypeId?: number;
    /** {UI_RTUClover_SpecificGravity} */
    specificGravityOfProduct?: number;
    tankType?: CloverTankType;
    /** {UI_RTUClover_TankLength} */
    length?: number;
    /** {UI_RTUClover_KFactor} */
    alarmScanRate?: number;
    /** {UI_RTUClover_Diameter} */
    diameter?: number;
    /** {UI_RTUClover_Dish} */
    dishDepth?: number;
    /** {UI_RTUClover_DeliveryAlarmThreshold} */
    deliveryAlarmThreshold?: number;
    dayHourlyUsageRates?: number[] | null;
    setUsageRatesOnRtu?: boolean;
    digitalOutputTriggerCondition?: CloverDigitalOutputTriggerCondition;
    digitalOutputsTriggered?: boolean[] | null;
    /** {UI_RTUClover_ChannelIndex} */
    channelIndex?: number;
    editorChannelDescription?: string | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.displayDescription = _data["displayDescription"] !== undefined ? _data["displayDescription"] : <any>null;
            this.sensorType = _data["sensorType"] !== undefined ? _data["sensorType"] : <any>null;
            this.inputSignalType = _data["inputSignalType"] !== undefined ? _data["inputSignalType"] : <any>null;
            this.invertSignal = _data["invertSignal"] !== undefined ? _data["invertSignal"] : <any>null;
            this.sensorMin = _data["sensorMin"] !== undefined ? _data["sensorMin"] : <any>null;
            this.sensorMax = _data["sensorMax"] !== undefined ? _data["sensorMax"] : <any>null;
            this.units = _data["units"] !== undefined ? _data["units"] : <any>null;
            this.dataLogInterval = _data["dataLogInterval"] !== undefined ? _data["dataLogInterval"] : <any>null;
            this.dataLogHighSpeedInterval = _data["dataLogHighSpeedInterval"] !== undefined ? _data["dataLogHighSpeedInterval"] : <any>null;
            this.loggingMethod = _data["loggingMethod"] !== undefined ? _data["loggingMethod"] : <any>null;
            this.highAlarmPoint = _data["highAlarmPoint"] !== undefined ? _data["highAlarmPoint"] : <any>null;
            this.highAlarmAdjustment = _data["highAlarmAdjustment"] !== undefined ? _data["highAlarmAdjustment"] : <any>null;
            this.highAlarmDelay = _data["highAlarmDelay"] !== undefined ? _data["highAlarmDelay"] : <any>null;
            this.lowAlarmPoint = _data["lowAlarmPoint"] !== undefined ? _data["lowAlarmPoint"] : <any>null;
            this.lowAlarmAdjustment = _data["lowAlarmAdjustment"] !== undefined ? _data["lowAlarmAdjustment"] : <any>null;
            this.lowAlarmDelay = _data["lowAlarmDelay"] !== undefined ? _data["lowAlarmDelay"] : <any>null;
            this.delayAdjustment = _data["delayAdjustment"] !== undefined ? _data["delayAdjustment"] : <any>null;
            this.delay = _data["delay"] !== undefined ? _data["delay"] : <any>null;
            this.reversePollEnable = _data["reversePollEnable"] !== undefined ? _data["reversePollEnable"] : <any>null;
            this.enable = _data["enable"] !== undefined ? _data["enable"] : <any>null;
            this.normalAlarmPhoneNumberIndex = _data["normalAlarmPhoneNumberIndex"] !== undefined ? _data["normalAlarmPhoneNumberIndex"] : <any>null;
            this.divertedAlarmPhoneNumberIndex = _data["divertedAlarmPhoneNumberIndex"] !== undefined ? _data["divertedAlarmPhoneNumberIndex"] : <any>null;
            this.productTypeId = _data["productTypeId"] !== undefined ? _data["productTypeId"] : <any>null;
            this.specificGravityOfProduct = _data["specificGravityOfProduct"] !== undefined ? _data["specificGravityOfProduct"] : <any>null;
            this.tankType = _data["tankType"] !== undefined ? _data["tankType"] : <any>null;
            this.length = _data["length"] !== undefined ? _data["length"] : <any>null;
            this.alarmScanRate = _data["alarmScanRate"] !== undefined ? _data["alarmScanRate"] : <any>null;
            this.diameter = _data["diameter"] !== undefined ? _data["diameter"] : <any>null;
            this.dishDepth = _data["dishDepth"] !== undefined ? _data["dishDepth"] : <any>null;
            this.deliveryAlarmThreshold = _data["deliveryAlarmThreshold"] !== undefined ? _data["deliveryAlarmThreshold"] : <any>null;
            if (Array.isArray(_data["dayHourlyUsageRates"])) {
                this.dayHourlyUsageRates = [] as any;
                for (let item of _data["dayHourlyUsageRates"])
                    this.dayHourlyUsageRates!.push(item);
            }
            else {
                this.dayHourlyUsageRates = <any>null;
            }
            this.setUsageRatesOnRtu = _data["setUsageRatesOnRtu"] !== undefined ? _data["setUsageRatesOnRtu"] : <any>null;
            this.digitalOutputTriggerCondition = _data["digitalOutputTriggerCondition"] !== undefined ? _data["digitalOutputTriggerCondition"] : <any>null;
            if (Array.isArray(_data["digitalOutputsTriggered"])) {
                this.digitalOutputsTriggered = [] as any;
                for (let item of _data["digitalOutputsTriggered"])
                    this.digitalOutputsTriggered!.push(item);
            }
            else {
                this.digitalOutputsTriggered = <any>null;
            }
            this.channelIndex = _data["channelIndex"] !== undefined ? _data["channelIndex"] : <any>null;
            this.editorChannelDescription = _data["editorChannelDescription"] !== undefined ? _data["editorChannelDescription"] : <any>null;
        }
    }

    static fromJS(data: any): CloverAnalogRTUChannelConfigurationInfo {
        data = typeof data === 'object' ? data : {};
        let result = new CloverAnalogRTUChannelConfigurationInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayDescription"] = this.displayDescription !== undefined ? this.displayDescription : <any>null;
        data["sensorType"] = this.sensorType !== undefined ? this.sensorType : <any>null;
        data["inputSignalType"] = this.inputSignalType !== undefined ? this.inputSignalType : <any>null;
        data["invertSignal"] = this.invertSignal !== undefined ? this.invertSignal : <any>null;
        data["sensorMin"] = this.sensorMin !== undefined ? this.sensorMin : <any>null;
        data["sensorMax"] = this.sensorMax !== undefined ? this.sensorMax : <any>null;
        data["units"] = this.units !== undefined ? this.units : <any>null;
        data["dataLogInterval"] = this.dataLogInterval !== undefined ? this.dataLogInterval : <any>null;
        data["dataLogHighSpeedInterval"] = this.dataLogHighSpeedInterval !== undefined ? this.dataLogHighSpeedInterval : <any>null;
        data["loggingMethod"] = this.loggingMethod !== undefined ? this.loggingMethod : <any>null;
        data["highAlarmPoint"] = this.highAlarmPoint !== undefined ? this.highAlarmPoint : <any>null;
        data["highAlarmAdjustment"] = this.highAlarmAdjustment !== undefined ? this.highAlarmAdjustment : <any>null;
        data["highAlarmDelay"] = this.highAlarmDelay !== undefined ? this.highAlarmDelay : <any>null;
        data["lowAlarmPoint"] = this.lowAlarmPoint !== undefined ? this.lowAlarmPoint : <any>null;
        data["lowAlarmAdjustment"] = this.lowAlarmAdjustment !== undefined ? this.lowAlarmAdjustment : <any>null;
        data["lowAlarmDelay"] = this.lowAlarmDelay !== undefined ? this.lowAlarmDelay : <any>null;
        data["delayAdjustment"] = this.delayAdjustment !== undefined ? this.delayAdjustment : <any>null;
        data["delay"] = this.delay !== undefined ? this.delay : <any>null;
        data["reversePollEnable"] = this.reversePollEnable !== undefined ? this.reversePollEnable : <any>null;
        data["enable"] = this.enable !== undefined ? this.enable : <any>null;
        data["normalAlarmPhoneNumberIndex"] = this.normalAlarmPhoneNumberIndex !== undefined ? this.normalAlarmPhoneNumberIndex : <any>null;
        data["divertedAlarmPhoneNumberIndex"] = this.divertedAlarmPhoneNumberIndex !== undefined ? this.divertedAlarmPhoneNumberIndex : <any>null;
        data["productTypeId"] = this.productTypeId !== undefined ? this.productTypeId : <any>null;
        data["specificGravityOfProduct"] = this.specificGravityOfProduct !== undefined ? this.specificGravityOfProduct : <any>null;
        data["tankType"] = this.tankType !== undefined ? this.tankType : <any>null;
        data["length"] = this.length !== undefined ? this.length : <any>null;
        data["alarmScanRate"] = this.alarmScanRate !== undefined ? this.alarmScanRate : <any>null;
        data["diameter"] = this.diameter !== undefined ? this.diameter : <any>null;
        data["dishDepth"] = this.dishDepth !== undefined ? this.dishDepth : <any>null;
        data["deliveryAlarmThreshold"] = this.deliveryAlarmThreshold !== undefined ? this.deliveryAlarmThreshold : <any>null;
        if (Array.isArray(this.dayHourlyUsageRates)) {
            data["dayHourlyUsageRates"] = [];
            for (let item of this.dayHourlyUsageRates)
                data["dayHourlyUsageRates"].push(item);
        }
        data["setUsageRatesOnRtu"] = this.setUsageRatesOnRtu !== undefined ? this.setUsageRatesOnRtu : <any>null;
        data["digitalOutputTriggerCondition"] = this.digitalOutputTriggerCondition !== undefined ? this.digitalOutputTriggerCondition : <any>null;
        if (Array.isArray(this.digitalOutputsTriggered)) {
            data["digitalOutputsTriggered"] = [];
            for (let item of this.digitalOutputsTriggered)
                data["digitalOutputsTriggered"].push(item);
        }
        data["channelIndex"] = this.channelIndex !== undefined ? this.channelIndex : <any>null;
        data["editorChannelDescription"] = this.editorChannelDescription !== undefined ? this.editorChannelDescription : <any>null;
        super.toJSON(data);
        return data;
    }
}

export enum CloverChannelSensorType {
    Unused = 0,
    Level = 1,
    PressureScaleUnits = 2,
    Temperature = 3,
    Analog = 4,
    ThermocoupleTType = 5,
    PressureCompensatedFlow = 6,
    InternalBattery = 9,
}

export enum CloverInputSignalType {
    Unused = 0,
    MAmps4To20 = 1,
    Volts25To125 = 2,
    Volts0T2 = 3,
}

export enum CloverAnalogChannelLoggingMethod {
    Instant = 0,
    Average = 1,
    Maximum = 2,
    Minimum = 3,
}

export enum CloverTankType {
    Spherical = 0,
    VerticalWithEllipsoidalEnds = 1,
    VerticalWithHemisphericalEnds = 2,
    HorizontalWithEllipsoidalEnds = 3,
    VerticalWithFlatEnds = 4,
    HorizontalWithFlatEnds = 5,
    VerticalWithVariableDishedEnds = 6,
    HorizontalWithVariableDishedEnds = 7,
    VerticalWithConicalEnds = 8,
}

export enum CloverDigitalOutputTriggerCondition {
    None = 0,
    Low = 1,
    High = 2,
    Both = 3,
}

export class CloverDigitalRTUChannelConfigurationInfo extends EditBase {
    /** {UI_RTU_FrontPanelText} */
    description?: string | null;
    dataLogMode?: CloverLoggingMode;
    /** {UI_RTUClover_DataLoggingPeriod} */
    dataLogInterval?: number;
    isReversePollEnabled?: boolean;
    reversePollEdge?: CloverDigitalChannelReversePollEdge;
    /** {UI_RTU_ReversePollDelay} */
    reversePollDelay?: number;
    enable?: boolean;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.dataLogMode = _data["dataLogMode"] !== undefined ? _data["dataLogMode"] : <any>null;
            this.dataLogInterval = _data["dataLogInterval"] !== undefined ? _data["dataLogInterval"] : <any>null;
            this.isReversePollEnabled = _data["isReversePollEnabled"] !== undefined ? _data["isReversePollEnabled"] : <any>null;
            this.reversePollEdge = _data["reversePollEdge"] !== undefined ? _data["reversePollEdge"] : <any>null;
            this.reversePollDelay = _data["reversePollDelay"] !== undefined ? _data["reversePollDelay"] : <any>null;
            this.enable = _data["enable"] !== undefined ? _data["enable"] : <any>null;
        }
    }

    static fromJS(data: any): CloverDigitalRTUChannelConfigurationInfo {
        data = typeof data === 'object' ? data : {};
        let result = new CloverDigitalRTUChannelConfigurationInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["dataLogMode"] = this.dataLogMode !== undefined ? this.dataLogMode : <any>null;
        data["dataLogInterval"] = this.dataLogInterval !== undefined ? this.dataLogInterval : <any>null;
        data["isReversePollEnabled"] = this.isReversePollEnabled !== undefined ? this.isReversePollEnabled : <any>null;
        data["reversePollEdge"] = this.reversePollEdge !== undefined ? this.reversePollEdge : <any>null;
        data["reversePollDelay"] = this.reversePollDelay !== undefined ? this.reversePollDelay : <any>null;
        data["enable"] = this.enable !== undefined ? this.enable : <any>null;
        super.toJSON(data);
        return data;
    }
}

export enum CloverLoggingMode {
    Off = 0,
    Perodic = 1,
    Event = 2,
}

export enum CloverDigitalChannelReversePollEdge {
    Rising = 0,
    Falling = 1,
}

export class RTU400SeriesCounterChannelConfigurationInfo extends EditBase {
    frontPanelText?: string | null;
    signalSource?: RTU400SeriesSignalSource;
    portConfiguration?: RTU400SeriesPortConfiguration;
    channelGroup?: number;
    dataLoggingRate?: number;
    transmitInterval?: number;
    transmitHour?: number;
    maxDailyTransmissions?: number;
    scaledUnits?: string | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.frontPanelText = _data["frontPanelText"] !== undefined ? _data["frontPanelText"] : <any>null;
            this.signalSource = _data["signalSource"] !== undefined ? _data["signalSource"] : <any>null;
            this.portConfiguration = _data["portConfiguration"] !== undefined ? _data["portConfiguration"] : <any>null;
            this.channelGroup = _data["channelGroup"] !== undefined ? _data["channelGroup"] : <any>null;
            this.dataLoggingRate = _data["dataLoggingRate"] !== undefined ? _data["dataLoggingRate"] : <any>null;
            this.transmitInterval = _data["transmitInterval"] !== undefined ? _data["transmitInterval"] : <any>null;
            this.transmitHour = _data["transmitHour"] !== undefined ? _data["transmitHour"] : <any>null;
            this.maxDailyTransmissions = _data["maxDailyTransmissions"] !== undefined ? _data["maxDailyTransmissions"] : <any>null;
            this.scaledUnits = _data["scaledUnits"] !== undefined ? _data["scaledUnits"] : <any>null;
        }
    }

    static fromJS(data: any): RTU400SeriesCounterChannelConfigurationInfo {
        data = typeof data === 'object' ? data : {};
        let result = new RTU400SeriesCounterChannelConfigurationInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["frontPanelText"] = this.frontPanelText !== undefined ? this.frontPanelText : <any>null;
        data["signalSource"] = this.signalSource !== undefined ? this.signalSource : <any>null;
        data["portConfiguration"] = this.portConfiguration !== undefined ? this.portConfiguration : <any>null;
        data["channelGroup"] = this.channelGroup !== undefined ? this.channelGroup : <any>null;
        data["dataLoggingRate"] = this.dataLoggingRate !== undefined ? this.dataLoggingRate : <any>null;
        data["transmitInterval"] = this.transmitInterval !== undefined ? this.transmitInterval : <any>null;
        data["transmitHour"] = this.transmitHour !== undefined ? this.transmitHour : <any>null;
        data["maxDailyTransmissions"] = this.maxDailyTransmissions !== undefined ? this.maxDailyTransmissions : <any>null;
        data["scaledUnits"] = this.scaledUnits !== undefined ? this.scaledUnits : <any>null;
        super.toJSON(data);
        return data;
    }
}

export enum RTU400SeriesSignalSource {
    Unused = 0,
    OnMainBoard = 1,
    OptionCard = 2,
    ExpansionCard = 3,
    DigitalLinked = 4,
    CounterLinked = 5,
    OptionExpansion = 6,
    GasMixingSystem = 7,
    RemoteSensor = 8,
}

export enum RTU400SeriesPortConfiguration {
    None = 0,
    MainBoard_0_Input = 1,
    MainBoard_1_Input = 2,
    MainBoard_2_Utd = 3,
    MainBoard_3_CStic = 4,
    MainBoard_4_Utd = 5,
    MainBoard_5_CStic = 6,
    MainBoard_6_Potentiometer = 7,
    AE280_0_Input = 8,
    AE280_1_Input = 9,
    DI303_0_NoNc = 10,
    DI303_1_NoNc = 11,
    DI303_2_NoNc = 12,
    DI303_3_NoNc = 13,
    AR217_0_Rc = 14,
    AR217_1_Rc = 15,
    AE407_0_Input = 16,
    AE407_1_Input = 17,
    AE407_2_Input = 18,
    AE407_3_Input = 19,
    AE407_0_NoNc = 20,
    CO243_0_Output = 21,
    CL310_0_Output = 22,
    EX487_0_AnalogInput = 23,
    EX487_1_AnalogInput = 24,
    EX487_2_AnalogInput = 25,
    EX487_3_AnalogInput = 26,
    EX487_4_AnalogInput = 27,
    EX487_5_AnalogInput = 28,
    EX487_6_AnalogInput = 29,
    EX487_7_AnalogInput = 30,
    EX487_0_DigitalInput = 31,
    EX487_1_DigitalInput = 32,
    EX487_2_DigitalInput = 33,
    EX487_3_DigitalInput = 34,
    EX487_4_DigitalInput = 35,
    EX487_5_DigitalInput = 36,
    EX487_6_DigitalInput = 37,
    EX487_7_DigitalInput = 38,
    SS468_0_RS485LEVEL = 39,
    SS468_1_RS485TEMP = 40,
    IS453_0_INPUT3 = 41,
    AS452_0_INPUT3 = 42,
    TM416_0_INPUT3 = 43,
    TM416_1_INPUT4 = 44,
    UT459_0_SGILoadCell = 45,
    VI271_0_INPUT3 = 46,
    VI271_1_INPUT4 = 47,
    VI388_0_INPUT3 = 48,
    VI388_1_INPUT4 = 49,
    SB457_0_STROBE_SIREN_RC = 50,
    LC490_0_0To5Vdc = 51,
    LC490_1_Dt1_Utd = 52,
    LC490_2_Dt1_CStic = 53,
    LC490_3_Potentiometer = 54,
    LC490_4_4to20Ma = 55,
    LC490_0_Din = 56,
    BC474_0_0To5Vdc = 57,
    BC474_1_Dt1_Utd = 58,
    BC474_2_Dt1_CStic = 59,
    BC474_3_Potentiometer = 60,
    BC474_4_Sonar = 61,
    BC474_5_Sonar = 62,
    BC474_6_Lc1Lc2Lc3 = 63,
    GU476_2_0To5Vdc = 64,
    GU476_0_DT1_UTD20 = 65,
    AD481_0_4To20mA = 66,
    AD481_1_4To20mA = 67,
    AD481_2_4To20mA = 68,
    AD481_0_CI1_Counter = 69,
    AD481_0_CI2_Counter = 70,
    AD481_0_CI1_Digital = 71,
    AD481_0_CI2_Digital = 72,
    DP489_0_C1 = 73,
    DP489_1_C2 = 74,
    DP489_2_C3 = 75,
    DP489_3_C4 = 76,
    DP489_4_C5 = 77,
    DP489_5_C6 = 78,
    DP489_6_C7 = 79,
    DP489_7_C8 = 80,
    VM394_0_TC1 = 81,
    VM394_1_TC2 = 82,
    VM394_2_TC3 = 83,
    VM394_0_RL1 = 84,
    EG501_0_I1B_Current = 85,
    EG501_1_I2B_Current = 86,
    EG501_2_I1A_Voltage_Absolute = 87,
    EG501_3_I1A_Voltage_Ratio = 88,
    EG501_4_I2A_Voltage_Absolute = 89,
    EG501_5_I2A_Voltage_Ratio = 90,
    EG501_6_Dt1_Utd = 91,
    EG501_7_Dt1_Rotarex_Cstic = 92,
    EG501_8_Dt1_Quantum_Cstic = 93,
    EG501_9_LC1 = 94,
    VM394_3_DIFF_TC1_TC2 = 95,
    EG501_10_Dt1_Roto = 96,
    DP489_0_GasMixing = 97,
    DP489_1_GasMixing = 98,
    DP489_0_RemoteSensor = 99,
}

export class ModbusAnalogRTUChannelConfigurationInfo extends EditBase {
    isEnabled?: boolean;
    description?: string | null;
    dataLoggingAlignmentUnit?: ModbusDataLoggingAlignmentUnit | null;
    dataLoggingAlignmentOffset?: number | null;
    dataLoggingDepth?: number | null;
    dataLoggingInterval?: number | null;
    rawUnits?: RawUnitType | null;
    rawUnitsAtSensorMax?: number | null;
    rawUnitsAtSensorMin?: number | null;
    sensorMax?: number | null;
    sensorMin?: number | null;
    scaledUnits?: string | null;
    sensorDelay?: number | null;
    decimalPlaces?: number | null;
    isReversePollEnabled?: boolean;
    reversePollDelay?: number | null;
    reversePollLevel1?: number | null;
    reversePollAdjust1?: number | null;
    reversePollDirection1?: ModbusReversePollDirection | null;
    reversePollLevel2?: number | null;
    reversePollAdjust2?: number | null;
    reversePollDirection2?: ModbusReversePollDirection | null;
    reversePollLevel3?: number | null;
    reversePollAdjust3?: number | null;
    reversePollDirection3?: ModbusReversePollDirection | null;
    reversePollLevel4?: number | null;
    reversePollAdjust4?: number | null;
    reversePollDirection4?: ModbusReversePollDirection | null;
    scalingMapIndex?: number | null;
    alarmHystersis?: number | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.isEnabled = _data["isEnabled"] !== undefined ? _data["isEnabled"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.dataLoggingAlignmentUnit = _data["dataLoggingAlignmentUnit"] !== undefined ? _data["dataLoggingAlignmentUnit"] : <any>null;
            this.dataLoggingAlignmentOffset = _data["dataLoggingAlignmentOffset"] !== undefined ? _data["dataLoggingAlignmentOffset"] : <any>null;
            this.dataLoggingDepth = _data["dataLoggingDepth"] !== undefined ? _data["dataLoggingDepth"] : <any>null;
            this.dataLoggingInterval = _data["dataLoggingInterval"] !== undefined ? _data["dataLoggingInterval"] : <any>null;
            this.rawUnits = _data["rawUnits"] !== undefined ? _data["rawUnits"] : <any>null;
            this.rawUnitsAtSensorMax = _data["rawUnitsAtSensorMax"] !== undefined ? _data["rawUnitsAtSensorMax"] : <any>null;
            this.rawUnitsAtSensorMin = _data["rawUnitsAtSensorMin"] !== undefined ? _data["rawUnitsAtSensorMin"] : <any>null;
            this.sensorMax = _data["sensorMax"] !== undefined ? _data["sensorMax"] : <any>null;
            this.sensorMin = _data["sensorMin"] !== undefined ? _data["sensorMin"] : <any>null;
            this.scaledUnits = _data["scaledUnits"] !== undefined ? _data["scaledUnits"] : <any>null;
            this.sensorDelay = _data["sensorDelay"] !== undefined ? _data["sensorDelay"] : <any>null;
            this.decimalPlaces = _data["decimalPlaces"] !== undefined ? _data["decimalPlaces"] : <any>null;
            this.isReversePollEnabled = _data["isReversePollEnabled"] !== undefined ? _data["isReversePollEnabled"] : <any>null;
            this.reversePollDelay = _data["reversePollDelay"] !== undefined ? _data["reversePollDelay"] : <any>null;
            this.reversePollLevel1 = _data["reversePollLevel1"] !== undefined ? _data["reversePollLevel1"] : <any>null;
            this.reversePollAdjust1 = _data["reversePollAdjust1"] !== undefined ? _data["reversePollAdjust1"] : <any>null;
            this.reversePollDirection1 = _data["reversePollDirection1"] !== undefined ? _data["reversePollDirection1"] : <any>null;
            this.reversePollLevel2 = _data["reversePollLevel2"] !== undefined ? _data["reversePollLevel2"] : <any>null;
            this.reversePollAdjust2 = _data["reversePollAdjust2"] !== undefined ? _data["reversePollAdjust2"] : <any>null;
            this.reversePollDirection2 = _data["reversePollDirection2"] !== undefined ? _data["reversePollDirection2"] : <any>null;
            this.reversePollLevel3 = _data["reversePollLevel3"] !== undefined ? _data["reversePollLevel3"] : <any>null;
            this.reversePollAdjust3 = _data["reversePollAdjust3"] !== undefined ? _data["reversePollAdjust3"] : <any>null;
            this.reversePollDirection3 = _data["reversePollDirection3"] !== undefined ? _data["reversePollDirection3"] : <any>null;
            this.reversePollLevel4 = _data["reversePollLevel4"] !== undefined ? _data["reversePollLevel4"] : <any>null;
            this.reversePollAdjust4 = _data["reversePollAdjust4"] !== undefined ? _data["reversePollAdjust4"] : <any>null;
            this.reversePollDirection4 = _data["reversePollDirection4"] !== undefined ? _data["reversePollDirection4"] : <any>null;
            this.scalingMapIndex = _data["scalingMapIndex"] !== undefined ? _data["scalingMapIndex"] : <any>null;
            this.alarmHystersis = _data["alarmHystersis"] !== undefined ? _data["alarmHystersis"] : <any>null;
        }
    }

    static fromJS(data: any): ModbusAnalogRTUChannelConfigurationInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ModbusAnalogRTUChannelConfigurationInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isEnabled"] = this.isEnabled !== undefined ? this.isEnabled : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["dataLoggingAlignmentUnit"] = this.dataLoggingAlignmentUnit !== undefined ? this.dataLoggingAlignmentUnit : <any>null;
        data["dataLoggingAlignmentOffset"] = this.dataLoggingAlignmentOffset !== undefined ? this.dataLoggingAlignmentOffset : <any>null;
        data["dataLoggingDepth"] = this.dataLoggingDepth !== undefined ? this.dataLoggingDepth : <any>null;
        data["dataLoggingInterval"] = this.dataLoggingInterval !== undefined ? this.dataLoggingInterval : <any>null;
        data["rawUnits"] = this.rawUnits !== undefined ? this.rawUnits : <any>null;
        data["rawUnitsAtSensorMax"] = this.rawUnitsAtSensorMax !== undefined ? this.rawUnitsAtSensorMax : <any>null;
        data["rawUnitsAtSensorMin"] = this.rawUnitsAtSensorMin !== undefined ? this.rawUnitsAtSensorMin : <any>null;
        data["sensorMax"] = this.sensorMax !== undefined ? this.sensorMax : <any>null;
        data["sensorMin"] = this.sensorMin !== undefined ? this.sensorMin : <any>null;
        data["scaledUnits"] = this.scaledUnits !== undefined ? this.scaledUnits : <any>null;
        data["sensorDelay"] = this.sensorDelay !== undefined ? this.sensorDelay : <any>null;
        data["decimalPlaces"] = this.decimalPlaces !== undefined ? this.decimalPlaces : <any>null;
        data["isReversePollEnabled"] = this.isReversePollEnabled !== undefined ? this.isReversePollEnabled : <any>null;
        data["reversePollDelay"] = this.reversePollDelay !== undefined ? this.reversePollDelay : <any>null;
        data["reversePollLevel1"] = this.reversePollLevel1 !== undefined ? this.reversePollLevel1 : <any>null;
        data["reversePollAdjust1"] = this.reversePollAdjust1 !== undefined ? this.reversePollAdjust1 : <any>null;
        data["reversePollDirection1"] = this.reversePollDirection1 !== undefined ? this.reversePollDirection1 : <any>null;
        data["reversePollLevel2"] = this.reversePollLevel2 !== undefined ? this.reversePollLevel2 : <any>null;
        data["reversePollAdjust2"] = this.reversePollAdjust2 !== undefined ? this.reversePollAdjust2 : <any>null;
        data["reversePollDirection2"] = this.reversePollDirection2 !== undefined ? this.reversePollDirection2 : <any>null;
        data["reversePollLevel3"] = this.reversePollLevel3 !== undefined ? this.reversePollLevel3 : <any>null;
        data["reversePollAdjust3"] = this.reversePollAdjust3 !== undefined ? this.reversePollAdjust3 : <any>null;
        data["reversePollDirection3"] = this.reversePollDirection3 !== undefined ? this.reversePollDirection3 : <any>null;
        data["reversePollLevel4"] = this.reversePollLevel4 !== undefined ? this.reversePollLevel4 : <any>null;
        data["reversePollAdjust4"] = this.reversePollAdjust4 !== undefined ? this.reversePollAdjust4 : <any>null;
        data["reversePollDirection4"] = this.reversePollDirection4 !== undefined ? this.reversePollDirection4 : <any>null;
        data["scalingMapIndex"] = this.scalingMapIndex !== undefined ? this.scalingMapIndex : <any>null;
        data["alarmHystersis"] = this.alarmHystersis !== undefined ? this.alarmHystersis : <any>null;
        super.toJSON(data);
        return data;
    }
}

export enum ModbusDataLoggingAlignmentUnit {
    None = 0,
    Hour = 1,
    Day = 2,
    Week = 3,
    Month = 4,
}

export enum ModbusReversePollDirection {
    Falling = 0,
    Rising = 1,
}

export class RTU400SeriesDigitalOutputConfigurationInfo extends EditBase {
    frontPanelText?: string | null;
    signalSource?: RTU400SeriesSignalSource;
    portConfiguration?: RTU400SeriesPortConfiguration;
    activeText?: string | null;
    inactiveText?: string | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.frontPanelText = _data["frontPanelText"] !== undefined ? _data["frontPanelText"] : <any>null;
            this.signalSource = _data["signalSource"] !== undefined ? _data["signalSource"] : <any>null;
            this.portConfiguration = _data["portConfiguration"] !== undefined ? _data["portConfiguration"] : <any>null;
            this.activeText = _data["activeText"] !== undefined ? _data["activeText"] : <any>null;
            this.inactiveText = _data["inactiveText"] !== undefined ? _data["inactiveText"] : <any>null;
        }
    }

    static fromJS(data: any): RTU400SeriesDigitalOutputConfigurationInfo {
        data = typeof data === 'object' ? data : {};
        let result = new RTU400SeriesDigitalOutputConfigurationInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["frontPanelText"] = this.frontPanelText !== undefined ? this.frontPanelText : <any>null;
        data["signalSource"] = this.signalSource !== undefined ? this.signalSource : <any>null;
        data["portConfiguration"] = this.portConfiguration !== undefined ? this.portConfiguration : <any>null;
        data["activeText"] = this.activeText !== undefined ? this.activeText : <any>null;
        data["inactiveText"] = this.inactiveText !== undefined ? this.inactiveText : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class SMSRTUChannelConfigurationBlock extends EditBase {
    dataLoggingRate?: number | null;
    dataTransmissionRate?: number | null;
    dataTransmissionHour?: number | null;
    maxDailyTransmissions?: number | null;
    fillModeDuration?: number | null;
    fillAlarmEnable?: boolean | null;
    sensorWakeup?: number | null;
    sensorLoopVoltage?: number | null;
    setpoint1?: number | null;
    setpoint2?: number | null;
    setpoint3?: number | null;
    setpoint4?: number | null;
    setpoint5?: number | null;
    setpoint6?: number | null;
    setpoint7?: number | null;
    setpoint8?: number | null;
    setpoint9?: number | null;
    setpoint10?: number | null;
    displayZeroPoint?: number | null;
    displayValueAt20mA?: number | null;
    displayDecimalPlaces?: number | null;
    displayUnits?: UnitType | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.dataLoggingRate = _data["dataLoggingRate"] !== undefined ? _data["dataLoggingRate"] : <any>null;
            this.dataTransmissionRate = _data["dataTransmissionRate"] !== undefined ? _data["dataTransmissionRate"] : <any>null;
            this.dataTransmissionHour = _data["dataTransmissionHour"] !== undefined ? _data["dataTransmissionHour"] : <any>null;
            this.maxDailyTransmissions = _data["maxDailyTransmissions"] !== undefined ? _data["maxDailyTransmissions"] : <any>null;
            this.fillModeDuration = _data["fillModeDuration"] !== undefined ? _data["fillModeDuration"] : <any>null;
            this.fillAlarmEnable = _data["fillAlarmEnable"] !== undefined ? _data["fillAlarmEnable"] : <any>null;
            this.sensorWakeup = _data["sensorWakeup"] !== undefined ? _data["sensorWakeup"] : <any>null;
            this.sensorLoopVoltage = _data["sensorLoopVoltage"] !== undefined ? _data["sensorLoopVoltage"] : <any>null;
            this.setpoint1 = _data["setpoint1"] !== undefined ? _data["setpoint1"] : <any>null;
            this.setpoint2 = _data["setpoint2"] !== undefined ? _data["setpoint2"] : <any>null;
            this.setpoint3 = _data["setpoint3"] !== undefined ? _data["setpoint3"] : <any>null;
            this.setpoint4 = _data["setpoint4"] !== undefined ? _data["setpoint4"] : <any>null;
            this.setpoint5 = _data["setpoint5"] !== undefined ? _data["setpoint5"] : <any>null;
            this.setpoint6 = _data["setpoint6"] !== undefined ? _data["setpoint6"] : <any>null;
            this.setpoint7 = _data["setpoint7"] !== undefined ? _data["setpoint7"] : <any>null;
            this.setpoint8 = _data["setpoint8"] !== undefined ? _data["setpoint8"] : <any>null;
            this.setpoint9 = _data["setpoint9"] !== undefined ? _data["setpoint9"] : <any>null;
            this.setpoint10 = _data["setpoint10"] !== undefined ? _data["setpoint10"] : <any>null;
            this.displayZeroPoint = _data["displayZeroPoint"] !== undefined ? _data["displayZeroPoint"] : <any>null;
            this.displayValueAt20mA = _data["displayValueAt20mA"] !== undefined ? _data["displayValueAt20mA"] : <any>null;
            this.displayDecimalPlaces = _data["displayDecimalPlaces"] !== undefined ? _data["displayDecimalPlaces"] : <any>null;
            this.displayUnits = _data["displayUnits"] !== undefined ? _data["displayUnits"] : <any>null;
        }
    }

    static fromJS(data: any): SMSRTUChannelConfigurationBlock {
        data = typeof data === 'object' ? data : {};
        let result = new SMSRTUChannelConfigurationBlock();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataLoggingRate"] = this.dataLoggingRate !== undefined ? this.dataLoggingRate : <any>null;
        data["dataTransmissionRate"] = this.dataTransmissionRate !== undefined ? this.dataTransmissionRate : <any>null;
        data["dataTransmissionHour"] = this.dataTransmissionHour !== undefined ? this.dataTransmissionHour : <any>null;
        data["maxDailyTransmissions"] = this.maxDailyTransmissions !== undefined ? this.maxDailyTransmissions : <any>null;
        data["fillModeDuration"] = this.fillModeDuration !== undefined ? this.fillModeDuration : <any>null;
        data["fillAlarmEnable"] = this.fillAlarmEnable !== undefined ? this.fillAlarmEnable : <any>null;
        data["sensorWakeup"] = this.sensorWakeup !== undefined ? this.sensorWakeup : <any>null;
        data["sensorLoopVoltage"] = this.sensorLoopVoltage !== undefined ? this.sensorLoopVoltage : <any>null;
        data["setpoint1"] = this.setpoint1 !== undefined ? this.setpoint1 : <any>null;
        data["setpoint2"] = this.setpoint2 !== undefined ? this.setpoint2 : <any>null;
        data["setpoint3"] = this.setpoint3 !== undefined ? this.setpoint3 : <any>null;
        data["setpoint4"] = this.setpoint4 !== undefined ? this.setpoint4 : <any>null;
        data["setpoint5"] = this.setpoint5 !== undefined ? this.setpoint5 : <any>null;
        data["setpoint6"] = this.setpoint6 !== undefined ? this.setpoint6 : <any>null;
        data["setpoint7"] = this.setpoint7 !== undefined ? this.setpoint7 : <any>null;
        data["setpoint8"] = this.setpoint8 !== undefined ? this.setpoint8 : <any>null;
        data["setpoint9"] = this.setpoint9 !== undefined ? this.setpoint9 : <any>null;
        data["setpoint10"] = this.setpoint10 !== undefined ? this.setpoint10 : <any>null;
        data["displayZeroPoint"] = this.displayZeroPoint !== undefined ? this.displayZeroPoint : <any>null;
        data["displayValueAt20mA"] = this.displayValueAt20mA !== undefined ? this.displayValueAt20mA : <any>null;
        data["displayDecimalPlaces"] = this.displayDecimalPlaces !== undefined ? this.displayDecimalPlaces : <any>null;
        data["displayUnits"] = this.displayUnits !== undefined ? this.displayUnits : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class SMSRTUChannelDiagnosticsBlock {
    currentReading?: number | null;
    serverTimeStamp_CurrentReading?: Date | null;
    serverTimestamp_TestConfig?: Date | null;
    serverTimestamp_CurrentConfig?: Date | null;
    serverTimestamp_CurrentConfig1?: Date | null;
    serverTimestamp_CurrentConfig2?: Date | null;
    serverTimestamp_AdditionalConfig?: Date | null;
    serverTimestamp_UpdateConfig?: Date | null;
    serverTimestamp_UpdateCurrentConfig?: Date | null;
    serverTimestamp_UpdateAdditionalConfig?: Date | null;

    init(_data?: any) {
        if (_data) {
            this.currentReading = _data["currentReading"] !== undefined ? _data["currentReading"] : <any>null;
            this.serverTimeStamp_CurrentReading = _data["serverTimeStamp_CurrentReading"] ? new Date(_data["serverTimeStamp_CurrentReading"].toString()) : <any>null;
            this.serverTimestamp_TestConfig = _data["serverTimestamp_TestConfig"] ? new Date(_data["serverTimestamp_TestConfig"].toString()) : <any>null;
            this.serverTimestamp_CurrentConfig = _data["serverTimestamp_CurrentConfig"] ? new Date(_data["serverTimestamp_CurrentConfig"].toString()) : <any>null;
            this.serverTimestamp_CurrentConfig1 = _data["serverTimestamp_CurrentConfig1"] ? new Date(_data["serverTimestamp_CurrentConfig1"].toString()) : <any>null;
            this.serverTimestamp_CurrentConfig2 = _data["serverTimestamp_CurrentConfig2"] ? new Date(_data["serverTimestamp_CurrentConfig2"].toString()) : <any>null;
            this.serverTimestamp_AdditionalConfig = _data["serverTimestamp_AdditionalConfig"] ? new Date(_data["serverTimestamp_AdditionalConfig"].toString()) : <any>null;
            this.serverTimestamp_UpdateConfig = _data["serverTimestamp_UpdateConfig"] ? new Date(_data["serverTimestamp_UpdateConfig"].toString()) : <any>null;
            this.serverTimestamp_UpdateCurrentConfig = _data["serverTimestamp_UpdateCurrentConfig"] ? new Date(_data["serverTimestamp_UpdateCurrentConfig"].toString()) : <any>null;
            this.serverTimestamp_UpdateAdditionalConfig = _data["serverTimestamp_UpdateAdditionalConfig"] ? new Date(_data["serverTimestamp_UpdateAdditionalConfig"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): SMSRTUChannelDiagnosticsBlock {
        data = typeof data === 'object' ? data : {};
        let result = new SMSRTUChannelDiagnosticsBlock();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["currentReading"] = this.currentReading !== undefined ? this.currentReading : <any>null;
        data["serverTimeStamp_CurrentReading"] = this.serverTimeStamp_CurrentReading ? this.serverTimeStamp_CurrentReading.toISOString() : <any>null;
        data["serverTimestamp_TestConfig"] = this.serverTimestamp_TestConfig ? this.serverTimestamp_TestConfig.toISOString() : <any>null;
        data["serverTimestamp_CurrentConfig"] = this.serverTimestamp_CurrentConfig ? this.serverTimestamp_CurrentConfig.toISOString() : <any>null;
        data["serverTimestamp_CurrentConfig1"] = this.serverTimestamp_CurrentConfig1 ? this.serverTimestamp_CurrentConfig1.toISOString() : <any>null;
        data["serverTimestamp_CurrentConfig2"] = this.serverTimestamp_CurrentConfig2 ? this.serverTimestamp_CurrentConfig2.toISOString() : <any>null;
        data["serverTimestamp_AdditionalConfig"] = this.serverTimestamp_AdditionalConfig ? this.serverTimestamp_AdditionalConfig.toISOString() : <any>null;
        data["serverTimestamp_UpdateConfig"] = this.serverTimestamp_UpdateConfig ? this.serverTimestamp_UpdateConfig.toISOString() : <any>null;
        data["serverTimestamp_UpdateCurrentConfig"] = this.serverTimestamp_UpdateCurrentConfig ? this.serverTimestamp_UpdateCurrentConfig.toISOString() : <any>null;
        data["serverTimestamp_UpdateAdditionalConfig"] = this.serverTimestamp_UpdateAdditionalConfig ? this.serverTimestamp_UpdateAdditionalConfig.toISOString() : <any>null;
        return data;
    }
}

export class Metron2RTUChannelConfigurationInfo extends EditBase {
    isEnabled?: boolean;
    description?: string | null;
    /** {UI_Common_DecimalPlaces} */
    decimalPlaces?: number | null;
    /** {UI_Common_ScaledMin} */
    sensorMin?: number;
    /** {UI_Common_ScaledMax} */
    sensorMax?: number;
    /** {UI_Common_ScaledUnits} */
    units?: string | null;
    /** {UI_RTU_ReversePollDelay} */
    reversePollDelay?: number;
    sensorLoopVoltage?: Metron2RTUChannelSensorLoopVoltageType;
    /** {UI_RTUMetron2_SettleTime} */
    sensorWakeUp?: number;
    /** {UI_RTUMetron2_AlarmHysteresis} */
    alarmHystersis?: number;
    inputSignalType?: Metron2RTUChannelInputSignalType;
    reversePollList?: EditRTUChannelReversePoll[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.isEnabled = _data["isEnabled"] !== undefined ? _data["isEnabled"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.decimalPlaces = _data["decimalPlaces"] !== undefined ? _data["decimalPlaces"] : <any>null;
            this.sensorMin = _data["sensorMin"] !== undefined ? _data["sensorMin"] : <any>null;
            this.sensorMax = _data["sensorMax"] !== undefined ? _data["sensorMax"] : <any>null;
            this.units = _data["units"] !== undefined ? _data["units"] : <any>null;
            this.reversePollDelay = _data["reversePollDelay"] !== undefined ? _data["reversePollDelay"] : <any>null;
            this.sensorLoopVoltage = _data["sensorLoopVoltage"] !== undefined ? _data["sensorLoopVoltage"] : <any>null;
            this.sensorWakeUp = _data["sensorWakeUp"] !== undefined ? _data["sensorWakeUp"] : <any>null;
            this.alarmHystersis = _data["alarmHystersis"] !== undefined ? _data["alarmHystersis"] : <any>null;
            this.inputSignalType = _data["inputSignalType"] !== undefined ? _data["inputSignalType"] : <any>null;
            if (Array.isArray(_data["reversePollList"])) {
                this.reversePollList = [] as any;
                for (let item of _data["reversePollList"])
                    this.reversePollList!.push(EditRTUChannelReversePoll.fromJS(item));
            }
            else {
                this.reversePollList = <any>null;
            }
        }
    }

    static fromJS(data: any): Metron2RTUChannelConfigurationInfo {
        data = typeof data === 'object' ? data : {};
        let result = new Metron2RTUChannelConfigurationInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isEnabled"] = this.isEnabled !== undefined ? this.isEnabled : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["decimalPlaces"] = this.decimalPlaces !== undefined ? this.decimalPlaces : <any>null;
        data["sensorMin"] = this.sensorMin !== undefined ? this.sensorMin : <any>null;
        data["sensorMax"] = this.sensorMax !== undefined ? this.sensorMax : <any>null;
        data["units"] = this.units !== undefined ? this.units : <any>null;
        data["reversePollDelay"] = this.reversePollDelay !== undefined ? this.reversePollDelay : <any>null;
        data["sensorLoopVoltage"] = this.sensorLoopVoltage !== undefined ? this.sensorLoopVoltage : <any>null;
        data["sensorWakeUp"] = this.sensorWakeUp !== undefined ? this.sensorWakeUp : <any>null;
        data["alarmHystersis"] = this.alarmHystersis !== undefined ? this.alarmHystersis : <any>null;
        data["inputSignalType"] = this.inputSignalType !== undefined ? this.inputSignalType : <any>null;
        if (Array.isArray(this.reversePollList)) {
            data["reversePollList"] = [];
            for (let item of this.reversePollList)
                data["reversePollList"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export enum Metron2RTUChannelSensorLoopVoltageType {
    BatteryVoltage = 0,
    Volts5 = 1,
    Volts216 = 2,
}

export class EditRTUChannelReversePoll extends EditBase {
    index?: number;
    /** Reverse Poll Point Level */
    level?: number | null;
    adjust?: number | null;
    direction?: RTUReversePollDirectionType;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.index = _data["index"] !== undefined ? _data["index"] : <any>null;
            this.level = _data["level"] !== undefined ? _data["level"] : <any>null;
            this.adjust = _data["adjust"] !== undefined ? _data["adjust"] : <any>null;
            this.direction = _data["direction"] !== undefined ? _data["direction"] : <any>null;
        }
    }

    static fromJS(data: any): EditRTUChannelReversePoll {
        data = typeof data === 'object' ? data : {};
        let result = new EditRTUChannelReversePoll();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["index"] = this.index !== undefined ? this.index : <any>null;
        data["level"] = this.level !== undefined ? this.level : <any>null;
        data["adjust"] = this.adjust !== undefined ? this.adjust : <any>null;
        data["direction"] = this.direction !== undefined ? this.direction : <any>null;
        super.toJSON(data);
        return data;
    }
}

export enum RTUReversePollDirectionType {
    Falling = 0,
    Raising = 1,
}

export class FileRTUChannelConfigurationInfo extends EditBase {
    description?: string | null;
    dataLogInterval?: number | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.dataLogInterval = _data["dataLogInterval"] !== undefined ? _data["dataLogInterval"] : <any>null;
        }
    }

    static fromJS(data: any): FileRTUChannelConfigurationInfo {
        data = typeof data === 'object' ? data : {};
        let result = new FileRTUChannelConfigurationInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["dataLogInterval"] = this.dataLogInterval !== undefined ? this.dataLogInterval : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class CloverRTUChannelDiagnosticsInfo {
    latestReadingTime?: Date | null;
    latestScaledValue?: number | null;
    inAlarm?: boolean;
    usingAdjustHigh?: boolean;
    usingAdjustLow?: boolean;
    usageRateAlarm?: boolean;
    aboveHighLimit?: boolean;
    belowLowLimit?: boolean;
    mode?: string | null;
    useMode?: boolean;
    digitalInputState?: number;

    init(_data?: any) {
        if (_data) {
            this.latestReadingTime = _data["latestReadingTime"] ? new Date(_data["latestReadingTime"].toString()) : <any>null;
            this.latestScaledValue = _data["latestScaledValue"] !== undefined ? _data["latestScaledValue"] : <any>null;
            this.inAlarm = _data["inAlarm"] !== undefined ? _data["inAlarm"] : <any>null;
            this.usingAdjustHigh = _data["usingAdjustHigh"] !== undefined ? _data["usingAdjustHigh"] : <any>null;
            this.usingAdjustLow = _data["usingAdjustLow"] !== undefined ? _data["usingAdjustLow"] : <any>null;
            this.usageRateAlarm = _data["usageRateAlarm"] !== undefined ? _data["usageRateAlarm"] : <any>null;
            this.aboveHighLimit = _data["aboveHighLimit"] !== undefined ? _data["aboveHighLimit"] : <any>null;
            this.belowLowLimit = _data["belowLowLimit"] !== undefined ? _data["belowLowLimit"] : <any>null;
            this.mode = _data["mode"] !== undefined ? _data["mode"] : <any>null;
            this.useMode = _data["useMode"] !== undefined ? _data["useMode"] : <any>null;
            this.digitalInputState = _data["digitalInputState"] !== undefined ? _data["digitalInputState"] : <any>null;
        }
    }

    static fromJS(data: any): CloverRTUChannelDiagnosticsInfo {
        data = typeof data === 'object' ? data : {};
        let result = new CloverRTUChannelDiagnosticsInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["latestReadingTime"] = this.latestReadingTime ? this.latestReadingTime.toISOString() : <any>null;
        data["latestScaledValue"] = this.latestScaledValue !== undefined ? this.latestScaledValue : <any>null;
        data["inAlarm"] = this.inAlarm !== undefined ? this.inAlarm : <any>null;
        data["usingAdjustHigh"] = this.usingAdjustHigh !== undefined ? this.usingAdjustHigh : <any>null;
        data["usingAdjustLow"] = this.usingAdjustLow !== undefined ? this.usingAdjustLow : <any>null;
        data["usageRateAlarm"] = this.usageRateAlarm !== undefined ? this.usageRateAlarm : <any>null;
        data["aboveHighLimit"] = this.aboveHighLimit !== undefined ? this.aboveHighLimit : <any>null;
        data["belowLowLimit"] = this.belowLowLimit !== undefined ? this.belowLowLimit : <any>null;
        data["mode"] = this.mode !== undefined ? this.mode : <any>null;
        data["useMode"] = this.useMode !== undefined ? this.useMode : <any>null;
        data["digitalInputState"] = this.digitalInputState !== undefined ? this.digitalInputState : <any>null;
        return data;
    }
}

export class ModbusDigitalRTUChannelConfigurationInfo extends EditBase {
    isEnabled?: boolean;
    description?: string | null;
    mode?: ModbusDigitalChannelMode | null;
    dataLoggingMode?: ModbusDataLoggingMode | null;
    dataLoggingAlignmentUnit?: ModbusDataLoggingAlignmentUnit | null;
    dataLoggingAlignmentOffset?: number | null;
    dataLoggingDepth?: number | null;
    dataLoggingInterval?: number | null;
    reversePollEdge?: ModbusReversePollEdge | null;
    reversePollDelay?: number | null;
    activeText?: string | null;
    inactiveText?: string | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.isEnabled = _data["isEnabled"] !== undefined ? _data["isEnabled"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.mode = _data["mode"] !== undefined ? _data["mode"] : <any>null;
            this.dataLoggingMode = _data["dataLoggingMode"] !== undefined ? _data["dataLoggingMode"] : <any>null;
            this.dataLoggingAlignmentUnit = _data["dataLoggingAlignmentUnit"] !== undefined ? _data["dataLoggingAlignmentUnit"] : <any>null;
            this.dataLoggingAlignmentOffset = _data["dataLoggingAlignmentOffset"] !== undefined ? _data["dataLoggingAlignmentOffset"] : <any>null;
            this.dataLoggingDepth = _data["dataLoggingDepth"] !== undefined ? _data["dataLoggingDepth"] : <any>null;
            this.dataLoggingInterval = _data["dataLoggingInterval"] !== undefined ? _data["dataLoggingInterval"] : <any>null;
            this.reversePollEdge = _data["reversePollEdge"] !== undefined ? _data["reversePollEdge"] : <any>null;
            this.reversePollDelay = _data["reversePollDelay"] !== undefined ? _data["reversePollDelay"] : <any>null;
            this.activeText = _data["activeText"] !== undefined ? _data["activeText"] : <any>null;
            this.inactiveText = _data["inactiveText"] !== undefined ? _data["inactiveText"] : <any>null;
        }
    }

    static fromJS(data: any): ModbusDigitalRTUChannelConfigurationInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ModbusDigitalRTUChannelConfigurationInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isEnabled"] = this.isEnabled !== undefined ? this.isEnabled : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["mode"] = this.mode !== undefined ? this.mode : <any>null;
        data["dataLoggingMode"] = this.dataLoggingMode !== undefined ? this.dataLoggingMode : <any>null;
        data["dataLoggingAlignmentUnit"] = this.dataLoggingAlignmentUnit !== undefined ? this.dataLoggingAlignmentUnit : <any>null;
        data["dataLoggingAlignmentOffset"] = this.dataLoggingAlignmentOffset !== undefined ? this.dataLoggingAlignmentOffset : <any>null;
        data["dataLoggingDepth"] = this.dataLoggingDepth !== undefined ? this.dataLoggingDepth : <any>null;
        data["dataLoggingInterval"] = this.dataLoggingInterval !== undefined ? this.dataLoggingInterval : <any>null;
        data["reversePollEdge"] = this.reversePollEdge !== undefined ? this.reversePollEdge : <any>null;
        data["reversePollDelay"] = this.reversePollDelay !== undefined ? this.reversePollDelay : <any>null;
        data["activeText"] = this.activeText !== undefined ? this.activeText : <any>null;
        data["inactiveText"] = this.inactiveText !== undefined ? this.inactiveText : <any>null;
        super.toJSON(data);
        return data;
    }
}

export enum ModbusDigitalChannelMode {
    NormallyOpen = 0,
    NormallyClosed = 1,
}

export enum ModbusDataLoggingMode {
    Off = 0,
    Periodic = 1,
    Event = 2,
    PeriodicAndEvent = 3,
}

export enum ModbusReversePollEdge {
    Disabled = 0,
    Rising = 1,
    Falling = 2,
    RisingAndFalling = 3,
}

export class ModbusRTUChannelDiagnosticsInfo {
    isEnabled?: boolean;
    isIOTimeout?: boolean;
    lastMilliAmps?: number | null;
    lastUpdatedTimeStamp?: Date;
    isSensorError?: boolean;
    state?: string | null;

    init(_data?: any) {
        if (_data) {
            this.isEnabled = _data["isEnabled"] !== undefined ? _data["isEnabled"] : <any>null;
            this.isIOTimeout = _data["isIOTimeout"] !== undefined ? _data["isIOTimeout"] : <any>null;
            this.lastMilliAmps = _data["lastMilliAmps"] !== undefined ? _data["lastMilliAmps"] : <any>null;
            this.lastUpdatedTimeStamp = _data["lastUpdatedTimeStamp"] ? new Date(_data["lastUpdatedTimeStamp"].toString()) : <any>null;
            this.isSensorError = _data["isSensorError"] !== undefined ? _data["isSensorError"] : <any>null;
            this.state = _data["state"] !== undefined ? _data["state"] : <any>null;
        }
    }

    static fromJS(data: any): ModbusRTUChannelDiagnosticsInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ModbusRTUChannelDiagnosticsInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isEnabled"] = this.isEnabled !== undefined ? this.isEnabled : <any>null;
        data["isIOTimeout"] = this.isIOTimeout !== undefined ? this.isIOTimeout : <any>null;
        data["lastMilliAmps"] = this.lastMilliAmps !== undefined ? this.lastMilliAmps : <any>null;
        data["lastUpdatedTimeStamp"] = this.lastUpdatedTimeStamp ? this.lastUpdatedTimeStamp.toISOString() : <any>null;
        data["isSensorError"] = this.isSensorError !== undefined ? this.isSensorError : <any>null;
        data["state"] = this.state !== undefined ? this.state : <any>null;
        return data;
    }
}

export class RTU400SeriesAnalogChannelDiagnosticsInfo {
    latestReading?: number | null;
    latestReadingTimeStamp?: Date | null;
    latestReadingUnits?: string | null;

    init(_data?: any) {
        if (_data) {
            this.latestReading = _data["latestReading"] !== undefined ? _data["latestReading"] : <any>null;
            this.latestReadingTimeStamp = _data["latestReadingTimeStamp"] ? new Date(_data["latestReadingTimeStamp"].toString()) : <any>null;
            this.latestReadingUnits = _data["latestReadingUnits"] !== undefined ? _data["latestReadingUnits"] : <any>null;
        }
    }

    static fromJS(data: any): RTU400SeriesAnalogChannelDiagnosticsInfo {
        data = typeof data === 'object' ? data : {};
        let result = new RTU400SeriesAnalogChannelDiagnosticsInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["latestReading"] = this.latestReading !== undefined ? this.latestReading : <any>null;
        data["latestReadingTimeStamp"] = this.latestReadingTimeStamp ? this.latestReadingTimeStamp.toISOString() : <any>null;
        data["latestReadingUnits"] = this.latestReadingUnits !== undefined ? this.latestReadingUnits : <any>null;
        return data;
    }
}

export class RTU400SeriesAnalogChannelConfigurationInfo extends EditBase {
    frontPanelText?: string | null;
    signalSource?: RTU400SeriesSignalSource;
    portConfiguration?: RTU400SeriesPortConfiguration;
    channelGroup?: number;
    readingRate?: number;
    dataLoggingRate?: number;
    transmitInterval?: number;
    transmitHour?: number;
    maxDailyTransmissions?: number;
    fillDuration?: number;
    rawUnitsAtScaledMin?: number;
    rawUnitsAtScaledMax?: number;
    scaledMin?: number;
    scaledMax?: number;
    scaledUnits?: string | null;
    decimalPlaces?: number;
    wakeupTime?: number;
    rtuOffset?: number | null;
    loadCellOffset?: number | null;
    zeroCalibration?: number | null;
    spanCalibration?: number | null;
    adcBitsPerUnitSpan?: number | null;
    adcBitsPerUnitSpanFactor?: number | null;
    adcBitsPerUnitSpanCalibration?: number | null;
    desiredRange?: number | null;
    fullLevel?: number | null;
    bottomOffset?: number | null;
    gasDensity?: number | null;
    liquidDensity?: number | null;
    calibrationPercent?: number | null;
    remoteId?: string | null;
    scalingMapIndex?: number | null;
    setpoints?: RTU400SeriesSetpoint[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.frontPanelText = _data["frontPanelText"] !== undefined ? _data["frontPanelText"] : <any>null;
            this.signalSource = _data["signalSource"] !== undefined ? _data["signalSource"] : <any>null;
            this.portConfiguration = _data["portConfiguration"] !== undefined ? _data["portConfiguration"] : <any>null;
            this.channelGroup = _data["channelGroup"] !== undefined ? _data["channelGroup"] : <any>null;
            this.readingRate = _data["readingRate"] !== undefined ? _data["readingRate"] : <any>null;
            this.dataLoggingRate = _data["dataLoggingRate"] !== undefined ? _data["dataLoggingRate"] : <any>null;
            this.transmitInterval = _data["transmitInterval"] !== undefined ? _data["transmitInterval"] : <any>null;
            this.transmitHour = _data["transmitHour"] !== undefined ? _data["transmitHour"] : <any>null;
            this.maxDailyTransmissions = _data["maxDailyTransmissions"] !== undefined ? _data["maxDailyTransmissions"] : <any>null;
            this.fillDuration = _data["fillDuration"] !== undefined ? _data["fillDuration"] : <any>null;
            this.rawUnitsAtScaledMin = _data["rawUnitsAtScaledMin"] !== undefined ? _data["rawUnitsAtScaledMin"] : <any>null;
            this.rawUnitsAtScaledMax = _data["rawUnitsAtScaledMax"] !== undefined ? _data["rawUnitsAtScaledMax"] : <any>null;
            this.scaledMin = _data["scaledMin"] !== undefined ? _data["scaledMin"] : <any>null;
            this.scaledMax = _data["scaledMax"] !== undefined ? _data["scaledMax"] : <any>null;
            this.scaledUnits = _data["scaledUnits"] !== undefined ? _data["scaledUnits"] : <any>null;
            this.decimalPlaces = _data["decimalPlaces"] !== undefined ? _data["decimalPlaces"] : <any>null;
            this.wakeupTime = _data["wakeupTime"] !== undefined ? _data["wakeupTime"] : <any>null;
            this.rtuOffset = _data["rtuOffset"] !== undefined ? _data["rtuOffset"] : <any>null;
            this.loadCellOffset = _data["loadCellOffset"] !== undefined ? _data["loadCellOffset"] : <any>null;
            this.zeroCalibration = _data["zeroCalibration"] !== undefined ? _data["zeroCalibration"] : <any>null;
            this.spanCalibration = _data["spanCalibration"] !== undefined ? _data["spanCalibration"] : <any>null;
            this.adcBitsPerUnitSpan = _data["adcBitsPerUnitSpan"] !== undefined ? _data["adcBitsPerUnitSpan"] : <any>null;
            this.adcBitsPerUnitSpanFactor = _data["adcBitsPerUnitSpanFactor"] !== undefined ? _data["adcBitsPerUnitSpanFactor"] : <any>null;
            this.adcBitsPerUnitSpanCalibration = _data["adcBitsPerUnitSpanCalibration"] !== undefined ? _data["adcBitsPerUnitSpanCalibration"] : <any>null;
            this.desiredRange = _data["desiredRange"] !== undefined ? _data["desiredRange"] : <any>null;
            this.fullLevel = _data["fullLevel"] !== undefined ? _data["fullLevel"] : <any>null;
            this.bottomOffset = _data["bottomOffset"] !== undefined ? _data["bottomOffset"] : <any>null;
            this.gasDensity = _data["gasDensity"] !== undefined ? _data["gasDensity"] : <any>null;
            this.liquidDensity = _data["liquidDensity"] !== undefined ? _data["liquidDensity"] : <any>null;
            this.calibrationPercent = _data["calibrationPercent"] !== undefined ? _data["calibrationPercent"] : <any>null;
            this.remoteId = _data["remoteId"] !== undefined ? _data["remoteId"] : <any>null;
            this.scalingMapIndex = _data["scalingMapIndex"] !== undefined ? _data["scalingMapIndex"] : <any>null;
            if (Array.isArray(_data["setpoints"])) {
                this.setpoints = [] as any;
                for (let item of _data["setpoints"])
                    this.setpoints!.push(RTU400SeriesSetpoint.fromJS(item));
            }
            else {
                this.setpoints = <any>null;
            }
        }
    }

    static fromJS(data: any): RTU400SeriesAnalogChannelConfigurationInfo {
        data = typeof data === 'object' ? data : {};
        let result = new RTU400SeriesAnalogChannelConfigurationInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["frontPanelText"] = this.frontPanelText !== undefined ? this.frontPanelText : <any>null;
        data["signalSource"] = this.signalSource !== undefined ? this.signalSource : <any>null;
        data["portConfiguration"] = this.portConfiguration !== undefined ? this.portConfiguration : <any>null;
        data["channelGroup"] = this.channelGroup !== undefined ? this.channelGroup : <any>null;
        data["readingRate"] = this.readingRate !== undefined ? this.readingRate : <any>null;
        data["dataLoggingRate"] = this.dataLoggingRate !== undefined ? this.dataLoggingRate : <any>null;
        data["transmitInterval"] = this.transmitInterval !== undefined ? this.transmitInterval : <any>null;
        data["transmitHour"] = this.transmitHour !== undefined ? this.transmitHour : <any>null;
        data["maxDailyTransmissions"] = this.maxDailyTransmissions !== undefined ? this.maxDailyTransmissions : <any>null;
        data["fillDuration"] = this.fillDuration !== undefined ? this.fillDuration : <any>null;
        data["rawUnitsAtScaledMin"] = this.rawUnitsAtScaledMin !== undefined ? this.rawUnitsAtScaledMin : <any>null;
        data["rawUnitsAtScaledMax"] = this.rawUnitsAtScaledMax !== undefined ? this.rawUnitsAtScaledMax : <any>null;
        data["scaledMin"] = this.scaledMin !== undefined ? this.scaledMin : <any>null;
        data["scaledMax"] = this.scaledMax !== undefined ? this.scaledMax : <any>null;
        data["scaledUnits"] = this.scaledUnits !== undefined ? this.scaledUnits : <any>null;
        data["decimalPlaces"] = this.decimalPlaces !== undefined ? this.decimalPlaces : <any>null;
        data["wakeupTime"] = this.wakeupTime !== undefined ? this.wakeupTime : <any>null;
        data["rtuOffset"] = this.rtuOffset !== undefined ? this.rtuOffset : <any>null;
        data["loadCellOffset"] = this.loadCellOffset !== undefined ? this.loadCellOffset : <any>null;
        data["zeroCalibration"] = this.zeroCalibration !== undefined ? this.zeroCalibration : <any>null;
        data["spanCalibration"] = this.spanCalibration !== undefined ? this.spanCalibration : <any>null;
        data["adcBitsPerUnitSpan"] = this.adcBitsPerUnitSpan !== undefined ? this.adcBitsPerUnitSpan : <any>null;
        data["adcBitsPerUnitSpanFactor"] = this.adcBitsPerUnitSpanFactor !== undefined ? this.adcBitsPerUnitSpanFactor : <any>null;
        data["adcBitsPerUnitSpanCalibration"] = this.adcBitsPerUnitSpanCalibration !== undefined ? this.adcBitsPerUnitSpanCalibration : <any>null;
        data["desiredRange"] = this.desiredRange !== undefined ? this.desiredRange : <any>null;
        data["fullLevel"] = this.fullLevel !== undefined ? this.fullLevel : <any>null;
        data["bottomOffset"] = this.bottomOffset !== undefined ? this.bottomOffset : <any>null;
        data["gasDensity"] = this.gasDensity !== undefined ? this.gasDensity : <any>null;
        data["liquidDensity"] = this.liquidDensity !== undefined ? this.liquidDensity : <any>null;
        data["calibrationPercent"] = this.calibrationPercent !== undefined ? this.calibrationPercent : <any>null;
        data["remoteId"] = this.remoteId !== undefined ? this.remoteId : <any>null;
        data["scalingMapIndex"] = this.scalingMapIndex !== undefined ? this.scalingMapIndex : <any>null;
        if (Array.isArray(this.setpoints)) {
            data["setpoints"] = [];
            for (let item of this.setpoints)
                data["setpoints"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export class RTU400SeriesSetpoint extends EditBase {
    index?: number;
    setPointType?: RTUChannelSetPointType;
    level?: number | null;
    direction?: RTUReversePollDirectionType | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.index = _data["index"] !== undefined ? _data["index"] : <any>null;
            this.setPointType = _data["setPointType"] !== undefined ? _data["setPointType"] : <any>null;
            this.level = _data["level"] !== undefined ? _data["level"] : <any>null;
            this.direction = _data["direction"] !== undefined ? _data["direction"] : <any>null;
        }
    }

    static fromJS(data: any): RTU400SeriesSetpoint {
        data = typeof data === 'object' ? data : {};
        let result = new RTU400SeriesSetpoint();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["index"] = this.index !== undefined ? this.index : <any>null;
        data["setPointType"] = this.setPointType !== undefined ? this.setPointType : <any>null;
        data["level"] = this.level !== undefined ? this.level : <any>null;
        data["direction"] = this.direction !== undefined ? this.direction : <any>null;
        super.toJSON(data);
        return data;
    }
}

export enum RTUChannelSetPointType {
    StandardSetPoint = 1,
    LocalAlarm = 2,
    RateOfChangeAlarm = 3,
}

export class RTU400SeriesAnalogOutputConfigurationInfo extends EditBase {
    frontPanelText?: string | null;
    signalSource?: RTU400SeriesSignalSource;
    portConfiguration?: RTU400SeriesPortConfiguration;
    displayAtZero?: number;
    displayAtSpan?: number;
    scaledUnits?: string | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.frontPanelText = _data["frontPanelText"] !== undefined ? _data["frontPanelText"] : <any>null;
            this.signalSource = _data["signalSource"] !== undefined ? _data["signalSource"] : <any>null;
            this.portConfiguration = _data["portConfiguration"] !== undefined ? _data["portConfiguration"] : <any>null;
            this.displayAtZero = _data["displayAtZero"] !== undefined ? _data["displayAtZero"] : <any>null;
            this.displayAtSpan = _data["displayAtSpan"] !== undefined ? _data["displayAtSpan"] : <any>null;
            this.scaledUnits = _data["scaledUnits"] !== undefined ? _data["scaledUnits"] : <any>null;
        }
    }

    static fromJS(data: any): RTU400SeriesAnalogOutputConfigurationInfo {
        data = typeof data === 'object' ? data : {};
        let result = new RTU400SeriesAnalogOutputConfigurationInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["frontPanelText"] = this.frontPanelText !== undefined ? this.frontPanelText : <any>null;
        data["signalSource"] = this.signalSource !== undefined ? this.signalSource : <any>null;
        data["portConfiguration"] = this.portConfiguration !== undefined ? this.portConfiguration : <any>null;
        data["displayAtZero"] = this.displayAtZero !== undefined ? this.displayAtZero : <any>null;
        data["displayAtSpan"] = this.displayAtSpan !== undefined ? this.displayAtSpan : <any>null;
        data["scaledUnits"] = this.scaledUnits !== undefined ? this.scaledUnits : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class RTU400SeriesDigitalChannelConfigurationInfo extends EditBase {
    frontPanelText?: string | null;
    signalSource?: RTU400SeriesSignalSource;
    portConfiguration?: RTU400SeriesPortConfiguration;
    channelGroup?: number;
    isLogPeriodic?: boolean;
    isLogOnEvent?: boolean;
    isAnalogLink?: boolean;
    isTransmitPeriodic?: boolean;
    isTransmitFullBuffer?: boolean;
    isTransmitOnEvent?: boolean;
    dataLoggingRate?: number;
    transmitInterval?: number;
    transmitHour?: number;
    maxDailyTransmissions?: number;
    activeText?: string | null;
    inactiveText?: string | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.frontPanelText = _data["frontPanelText"] !== undefined ? _data["frontPanelText"] : <any>null;
            this.signalSource = _data["signalSource"] !== undefined ? _data["signalSource"] : <any>null;
            this.portConfiguration = _data["portConfiguration"] !== undefined ? _data["portConfiguration"] : <any>null;
            this.channelGroup = _data["channelGroup"] !== undefined ? _data["channelGroup"] : <any>null;
            this.isLogPeriodic = _data["isLogPeriodic"] !== undefined ? _data["isLogPeriodic"] : <any>null;
            this.isLogOnEvent = _data["isLogOnEvent"] !== undefined ? _data["isLogOnEvent"] : <any>null;
            this.isAnalogLink = _data["isAnalogLink"] !== undefined ? _data["isAnalogLink"] : <any>null;
            this.isTransmitPeriodic = _data["isTransmitPeriodic"] !== undefined ? _data["isTransmitPeriodic"] : <any>null;
            this.isTransmitFullBuffer = _data["isTransmitFullBuffer"] !== undefined ? _data["isTransmitFullBuffer"] : <any>null;
            this.isTransmitOnEvent = _data["isTransmitOnEvent"] !== undefined ? _data["isTransmitOnEvent"] : <any>null;
            this.dataLoggingRate = _data["dataLoggingRate"] !== undefined ? _data["dataLoggingRate"] : <any>null;
            this.transmitInterval = _data["transmitInterval"] !== undefined ? _data["transmitInterval"] : <any>null;
            this.transmitHour = _data["transmitHour"] !== undefined ? _data["transmitHour"] : <any>null;
            this.maxDailyTransmissions = _data["maxDailyTransmissions"] !== undefined ? _data["maxDailyTransmissions"] : <any>null;
            this.activeText = _data["activeText"] !== undefined ? _data["activeText"] : <any>null;
            this.inactiveText = _data["inactiveText"] !== undefined ? _data["inactiveText"] : <any>null;
        }
    }

    static fromJS(data: any): RTU400SeriesDigitalChannelConfigurationInfo {
        data = typeof data === 'object' ? data : {};
        let result = new RTU400SeriesDigitalChannelConfigurationInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["frontPanelText"] = this.frontPanelText !== undefined ? this.frontPanelText : <any>null;
        data["signalSource"] = this.signalSource !== undefined ? this.signalSource : <any>null;
        data["portConfiguration"] = this.portConfiguration !== undefined ? this.portConfiguration : <any>null;
        data["channelGroup"] = this.channelGroup !== undefined ? this.channelGroup : <any>null;
        data["isLogPeriodic"] = this.isLogPeriodic !== undefined ? this.isLogPeriodic : <any>null;
        data["isLogOnEvent"] = this.isLogOnEvent !== undefined ? this.isLogOnEvent : <any>null;
        data["isAnalogLink"] = this.isAnalogLink !== undefined ? this.isAnalogLink : <any>null;
        data["isTransmitPeriodic"] = this.isTransmitPeriodic !== undefined ? this.isTransmitPeriodic : <any>null;
        data["isTransmitFullBuffer"] = this.isTransmitFullBuffer !== undefined ? this.isTransmitFullBuffer : <any>null;
        data["isTransmitOnEvent"] = this.isTransmitOnEvent !== undefined ? this.isTransmitOnEvent : <any>null;
        data["dataLoggingRate"] = this.dataLoggingRate !== undefined ? this.dataLoggingRate : <any>null;
        data["transmitInterval"] = this.transmitInterval !== undefined ? this.transmitInterval : <any>null;
        data["transmitHour"] = this.transmitHour !== undefined ? this.transmitHour : <any>null;
        data["maxDailyTransmissions"] = this.maxDailyTransmissions !== undefined ? this.maxDailyTransmissions : <any>null;
        data["activeText"] = this.activeText !== undefined ? this.activeText : <any>null;
        data["inactiveText"] = this.inactiveText !== undefined ? this.inactiveText : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class RTU400SeriesDigitalChannelDiagnosticsInfo {
    latestReading?: number | null;
    latestReadingTimeStamp?: Date | null;

    init(_data?: any) {
        if (_data) {
            this.latestReading = _data["latestReading"] !== undefined ? _data["latestReading"] : <any>null;
            this.latestReadingTimeStamp = _data["latestReadingTimeStamp"] ? new Date(_data["latestReadingTimeStamp"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): RTU400SeriesDigitalChannelDiagnosticsInfo {
        data = typeof data === 'object' ? data : {};
        let result = new RTU400SeriesDigitalChannelDiagnosticsInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["latestReading"] = this.latestReading !== undefined ? this.latestReading : <any>null;
        data["latestReadingTimeStamp"] = this.latestReadingTimeStamp ? this.latestReadingTimeStamp.toISOString() : <any>null;
        return data;
    }
}

export class ModbusExpansionCardConfigurationInfo extends EditBase {
    expansionCardCategory?: ModbusExpansionCardCategory;
    expansionCardType?: RTUExpansionCardType | null;
    firstInputChannel?: number;
    firstOutputChannel?: number;
    dialSetting?: number;
    isFitted?: boolean;
    isUsingDigitalOutput?: boolean;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.expansionCardCategory = _data["expansionCardCategory"] !== undefined ? _data["expansionCardCategory"] : <any>null;
            this.expansionCardType = _data["expansionCardType"] !== undefined ? _data["expansionCardType"] : <any>null;
            this.firstInputChannel = _data["firstInputChannel"] !== undefined ? _data["firstInputChannel"] : <any>null;
            this.firstOutputChannel = _data["firstOutputChannel"] !== undefined ? _data["firstOutputChannel"] : <any>null;
            this.dialSetting = _data["dialSetting"] !== undefined ? _data["dialSetting"] : <any>null;
            this.isFitted = _data["isFitted"] !== undefined ? _data["isFitted"] : <any>null;
            this.isUsingDigitalOutput = _data["isUsingDigitalOutput"] !== undefined ? _data["isUsingDigitalOutput"] : <any>null;
        }
    }

    static fromJS(data: any): ModbusExpansionCardConfigurationInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ModbusExpansionCardConfigurationInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["expansionCardCategory"] = this.expansionCardCategory !== undefined ? this.expansionCardCategory : <any>null;
        data["expansionCardType"] = this.expansionCardType !== undefined ? this.expansionCardType : <any>null;
        data["firstInputChannel"] = this.firstInputChannel !== undefined ? this.firstInputChannel : <any>null;
        data["firstOutputChannel"] = this.firstOutputChannel !== undefined ? this.firstOutputChannel : <any>null;
        data["dialSetting"] = this.dialSetting !== undefined ? this.dialSetting : <any>null;
        data["isFitted"] = this.isFitted !== undefined ? this.isFitted : <any>null;
        data["isUsingDigitalOutput"] = this.isUsingDigitalOutput !== undefined ? this.isUsingDigitalOutput : <any>null;
        super.toJSON(data);
        return data;
    }
}

export enum ModbusExpansionCardCategory {
    Input = 1,
    Output = 2,
    InputOutput = 3,
}

export enum RTUExpansionCardType {
    EX316 = 1,
    AP188 = 2,
    AE313 = 3,
    AE370 = 4,
    DO235 = 5,
    IR246 = 6,
    AE280 = 7,
    DI303 = 8,
    AR217 = 9,
    AE407 = 10,
    CO243 = 11,
    CL310 = 12,
    IR247 = 13,
    EX487 = 14,
    SS468 = 15,
    IS453 = 16,
    AS452 = 17,
    TM416 = 18,
    UT459 = 19,
    VI271 = 20,
    VI388 = 21,
    SB457 = 22,
    DP489 = 23,
    LC490 = 24,
    BC474 = 25,
    GU476 = 26,
    AD481 = 27,
    VM394 = 28,
    EG501 = 29,
}

export class HornerRTUDiagnosticsInfo {
    diagnosticTimeLastUpdate?: Date | null;
    lastCommissioned?: Date | null;
    timeError?: number | null;
    transactionRecordSize?: number | null;
    transactionDataStart?: number | null;
    transactionDataMax?: number | null;
    transactionLastFillCount?: number | null;
    remoteTransactionLastFillCount?: number | null;
    detailRecordSize?: number | null;
    detailDataStart?: number | null;
    detailDataMax?: number | null;
    detailDataOffset?: number | null;
    remoteDetailDataOffset?: number | null;

    init(_data?: any) {
        if (_data) {
            this.diagnosticTimeLastUpdate = _data["diagnosticTimeLastUpdate"] ? new Date(_data["diagnosticTimeLastUpdate"].toString()) : <any>null;
            this.lastCommissioned = _data["lastCommissioned"] ? new Date(_data["lastCommissioned"].toString()) : <any>null;
            this.timeError = _data["timeError"] !== undefined ? _data["timeError"] : <any>null;
            this.transactionRecordSize = _data["transactionRecordSize"] !== undefined ? _data["transactionRecordSize"] : <any>null;
            this.transactionDataStart = _data["transactionDataStart"] !== undefined ? _data["transactionDataStart"] : <any>null;
            this.transactionDataMax = _data["transactionDataMax"] !== undefined ? _data["transactionDataMax"] : <any>null;
            this.transactionLastFillCount = _data["transactionLastFillCount"] !== undefined ? _data["transactionLastFillCount"] : <any>null;
            this.remoteTransactionLastFillCount = _data["remoteTransactionLastFillCount"] !== undefined ? _data["remoteTransactionLastFillCount"] : <any>null;
            this.detailRecordSize = _data["detailRecordSize"] !== undefined ? _data["detailRecordSize"] : <any>null;
            this.detailDataStart = _data["detailDataStart"] !== undefined ? _data["detailDataStart"] : <any>null;
            this.detailDataMax = _data["detailDataMax"] !== undefined ? _data["detailDataMax"] : <any>null;
            this.detailDataOffset = _data["detailDataOffset"] !== undefined ? _data["detailDataOffset"] : <any>null;
            this.remoteDetailDataOffset = _data["remoteDetailDataOffset"] !== undefined ? _data["remoteDetailDataOffset"] : <any>null;
        }
    }

    static fromJS(data: any): HornerRTUDiagnosticsInfo {
        data = typeof data === 'object' ? data : {};
        let result = new HornerRTUDiagnosticsInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["diagnosticTimeLastUpdate"] = this.diagnosticTimeLastUpdate ? this.diagnosticTimeLastUpdate.toISOString() : <any>null;
        data["lastCommissioned"] = this.lastCommissioned ? this.lastCommissioned.toISOString() : <any>null;
        data["timeError"] = this.timeError !== undefined ? this.timeError : <any>null;
        data["transactionRecordSize"] = this.transactionRecordSize !== undefined ? this.transactionRecordSize : <any>null;
        data["transactionDataStart"] = this.transactionDataStart !== undefined ? this.transactionDataStart : <any>null;
        data["transactionDataMax"] = this.transactionDataMax !== undefined ? this.transactionDataMax : <any>null;
        data["transactionLastFillCount"] = this.transactionLastFillCount !== undefined ? this.transactionLastFillCount : <any>null;
        data["remoteTransactionLastFillCount"] = this.remoteTransactionLastFillCount !== undefined ? this.remoteTransactionLastFillCount : <any>null;
        data["detailRecordSize"] = this.detailRecordSize !== undefined ? this.detailRecordSize : <any>null;
        data["detailDataStart"] = this.detailDataStart !== undefined ? this.detailDataStart : <any>null;
        data["detailDataMax"] = this.detailDataMax !== undefined ? this.detailDataMax : <any>null;
        data["detailDataOffset"] = this.detailDataOffset !== undefined ? this.detailDataOffset : <any>null;
        data["remoteDetailDataOffset"] = this.remoteDetailDataOffset !== undefined ? this.remoteDetailDataOffset : <any>null;
        return data;
    }
}

export class GenGasDiagnosticBlock {
    lastConnectionAttempt?: Date | null;
    lastFileRetrieval?: Date | null;
    lastIp21FileDataTimestamp?: Date | null;
    lastDigitalInputDataTimestamp?: Date | null;
    lastFileRetrievalException?: string | null;

    init(_data?: any) {
        if (_data) {
            this.lastConnectionAttempt = _data["lastConnectionAttempt"] ? new Date(_data["lastConnectionAttempt"].toString()) : <any>null;
            this.lastFileRetrieval = _data["lastFileRetrieval"] ? new Date(_data["lastFileRetrieval"].toString()) : <any>null;
            this.lastIp21FileDataTimestamp = _data["lastIp21FileDataTimestamp"] ? new Date(_data["lastIp21FileDataTimestamp"].toString()) : <any>null;
            this.lastDigitalInputDataTimestamp = _data["lastDigitalInputDataTimestamp"] ? new Date(_data["lastDigitalInputDataTimestamp"].toString()) : <any>null;
            this.lastFileRetrievalException = _data["lastFileRetrievalException"] !== undefined ? _data["lastFileRetrievalException"] : <any>null;
        }
    }

    static fromJS(data: any): GenGasDiagnosticBlock {
        data = typeof data === 'object' ? data : {};
        let result = new GenGasDiagnosticBlock();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lastConnectionAttempt"] = this.lastConnectionAttempt ? this.lastConnectionAttempt.toISOString() : <any>null;
        data["lastFileRetrieval"] = this.lastFileRetrieval ? this.lastFileRetrieval.toISOString() : <any>null;
        data["lastIp21FileDataTimestamp"] = this.lastIp21FileDataTimestamp ? this.lastIp21FileDataTimestamp.toISOString() : <any>null;
        data["lastDigitalInputDataTimestamp"] = this.lastDigitalInputDataTimestamp ? this.lastDigitalInputDataTimestamp.toISOString() : <any>null;
        data["lastFileRetrievalException"] = this.lastFileRetrievalException !== undefined ? this.lastFileRetrievalException : <any>null;
        return data;
    }
}

export class KT09RtuConfigurationInfo {
    hostAddress?: string | null;
    hostPort?: number | null;

    init(_data?: any) {
        if (_data) {
            this.hostAddress = _data["hostAddress"] !== undefined ? _data["hostAddress"] : <any>null;
            this.hostPort = _data["hostPort"] !== undefined ? _data["hostPort"] : <any>null;
        }
    }

    static fromJS(data: any): KT09RtuConfigurationInfo {
        data = typeof data === 'object' ? data : {};
        let result = new KT09RtuConfigurationInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hostAddress"] = this.hostAddress !== undefined ? this.hostAddress : <any>null;
        data["hostPort"] = this.hostPort !== undefined ? this.hostPort : <any>null;
        return data;
    }
}

export class CloverRTUConfigurationInfo extends EditBase {
    isDigitalOutputCardFitted?: boolean;
    isMainsPowerStateOnD1?: boolean;
    isUsageRatesDownloadEnabled?: boolean;
    isEnhancedAlarmsEnabled?: boolean;
    isAdvancedDigitalOutputsEnabled?: boolean;
    isConfidenceCallsEnabled?: boolean;
    confidenceCallTime?: Date;
    isConfidenceCallOnDayEnabled?: boolean[] | null;
    dialoutNumbers?: string[] | null;
    phoneService?: string[] | null;
    /** {UI_RTUClover_RetriesBeforeDiversion} */
    retriesBeforeDivertingCall?: number;
    /** {UI_RTUClover_MinutesBetweenRedial} */
    delayBeforeRedial?: number;
    /** {UI_RTUClover_AlarmStackPeriod} */
    hoursToHoldStackedAlarms?: number;
    digitalOutputs?: CloverDigitalOutputInfo[] | null;
    rtuProducts?: CloverLiquidProduct[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.isDigitalOutputCardFitted = _data["isDigitalOutputCardFitted"] !== undefined ? _data["isDigitalOutputCardFitted"] : <any>null;
            this.isMainsPowerStateOnD1 = _data["isMainsPowerStateOnD1"] !== undefined ? _data["isMainsPowerStateOnD1"] : <any>null;
            this.isUsageRatesDownloadEnabled = _data["isUsageRatesDownloadEnabled"] !== undefined ? _data["isUsageRatesDownloadEnabled"] : <any>null;
            this.isEnhancedAlarmsEnabled = _data["isEnhancedAlarmsEnabled"] !== undefined ? _data["isEnhancedAlarmsEnabled"] : <any>null;
            this.isAdvancedDigitalOutputsEnabled = _data["isAdvancedDigitalOutputsEnabled"] !== undefined ? _data["isAdvancedDigitalOutputsEnabled"] : <any>null;
            this.isConfidenceCallsEnabled = _data["isConfidenceCallsEnabled"] !== undefined ? _data["isConfidenceCallsEnabled"] : <any>null;
            this.confidenceCallTime = _data["confidenceCallTime"] ? new Date(_data["confidenceCallTime"].toString()) : <any>null;
            if (Array.isArray(_data["isConfidenceCallOnDayEnabled"])) {
                this.isConfidenceCallOnDayEnabled = [] as any;
                for (let item of _data["isConfidenceCallOnDayEnabled"])
                    this.isConfidenceCallOnDayEnabled!.push(item);
            }
            else {
                this.isConfidenceCallOnDayEnabled = <any>null;
            }
            if (Array.isArray(_data["dialoutNumbers"])) {
                this.dialoutNumbers = [] as any;
                for (let item of _data["dialoutNumbers"])
                    this.dialoutNumbers!.push(item);
            }
            else {
                this.dialoutNumbers = <any>null;
            }
            if (Array.isArray(_data["phoneService"])) {
                this.phoneService = [] as any;
                for (let item of _data["phoneService"])
                    this.phoneService!.push(item);
            }
            else {
                this.phoneService = <any>null;
            }
            this.retriesBeforeDivertingCall = _data["retriesBeforeDivertingCall"] !== undefined ? _data["retriesBeforeDivertingCall"] : <any>null;
            this.delayBeforeRedial = _data["delayBeforeRedial"] !== undefined ? _data["delayBeforeRedial"] : <any>null;
            this.hoursToHoldStackedAlarms = _data["hoursToHoldStackedAlarms"] !== undefined ? _data["hoursToHoldStackedAlarms"] : <any>null;
            if (Array.isArray(_data["digitalOutputs"])) {
                this.digitalOutputs = [] as any;
                for (let item of _data["digitalOutputs"])
                    this.digitalOutputs!.push(CloverDigitalOutputInfo.fromJS(item));
            }
            else {
                this.digitalOutputs = <any>null;
            }
            if (Array.isArray(_data["rtuProducts"])) {
                this.rtuProducts = [] as any;
                for (let item of _data["rtuProducts"])
                    this.rtuProducts!.push(CloverLiquidProduct.fromJS(item));
            }
            else {
                this.rtuProducts = <any>null;
            }
        }
    }

    static fromJS(data: any): CloverRTUConfigurationInfo {
        data = typeof data === 'object' ? data : {};
        let result = new CloverRTUConfigurationInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isDigitalOutputCardFitted"] = this.isDigitalOutputCardFitted !== undefined ? this.isDigitalOutputCardFitted : <any>null;
        data["isMainsPowerStateOnD1"] = this.isMainsPowerStateOnD1 !== undefined ? this.isMainsPowerStateOnD1 : <any>null;
        data["isUsageRatesDownloadEnabled"] = this.isUsageRatesDownloadEnabled !== undefined ? this.isUsageRatesDownloadEnabled : <any>null;
        data["isEnhancedAlarmsEnabled"] = this.isEnhancedAlarmsEnabled !== undefined ? this.isEnhancedAlarmsEnabled : <any>null;
        data["isAdvancedDigitalOutputsEnabled"] = this.isAdvancedDigitalOutputsEnabled !== undefined ? this.isAdvancedDigitalOutputsEnabled : <any>null;
        data["isConfidenceCallsEnabled"] = this.isConfidenceCallsEnabled !== undefined ? this.isConfidenceCallsEnabled : <any>null;
        data["confidenceCallTime"] = this.confidenceCallTime ? this.confidenceCallTime.toISOString() : <any>null;
        if (Array.isArray(this.isConfidenceCallOnDayEnabled)) {
            data["isConfidenceCallOnDayEnabled"] = [];
            for (let item of this.isConfidenceCallOnDayEnabled)
                data["isConfidenceCallOnDayEnabled"].push(item);
        }
        if (Array.isArray(this.dialoutNumbers)) {
            data["dialoutNumbers"] = [];
            for (let item of this.dialoutNumbers)
                data["dialoutNumbers"].push(item);
        }
        if (Array.isArray(this.phoneService)) {
            data["phoneService"] = [];
            for (let item of this.phoneService)
                data["phoneService"].push(item);
        }
        data["retriesBeforeDivertingCall"] = this.retriesBeforeDivertingCall !== undefined ? this.retriesBeforeDivertingCall : <any>null;
        data["delayBeforeRedial"] = this.delayBeforeRedial !== undefined ? this.delayBeforeRedial : <any>null;
        data["hoursToHoldStackedAlarms"] = this.hoursToHoldStackedAlarms !== undefined ? this.hoursToHoldStackedAlarms : <any>null;
        if (Array.isArray(this.digitalOutputs)) {
            data["digitalOutputs"] = [];
            for (let item of this.digitalOutputs)
                data["digitalOutputs"].push(item.toJSON());
        }
        if (Array.isArray(this.rtuProducts)) {
            data["rtuProducts"] = [];
            for (let item of this.rtuProducts)
                data["rtuProducts"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export class CloverDigitalOutputInfo extends EditBase {
    index?: number;
    digitalOutputType?: CloverDigitalOutputType;
    digitalOutputMode?: CloverDigitalOutputMode;
    digitalOutputDrivenBy?: CloverDigitalOutputDrivenBy;
    pulseDuration?: number;
    triggerAnalogChannel?: number;
    highSetPoint?: number;
    lowSetPoint?: number;
    activationDelay?: number;
    analogChannelStateAboveHigh?: CloverDigitalOutputStateType;
    analogChannelStateBetweenLowAndHigh?: CloverDigitalOutputStateType;
    analogChannelStateBelowLow?: CloverDigitalOutputStateType;
    digitalChannelStateInactive?: CloverDigitalOutputStateType;
    digitalChannelStateActive?: CloverDigitalOutputStateType;
    isInSync?: boolean | null;
    isDeleted?: boolean | null;
    drivenByDigitalInputs?: boolean[] | null;
    drivenByDigitalInputDescription?: string[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.index = _data["index"] !== undefined ? _data["index"] : <any>null;
            this.digitalOutputType = _data["digitalOutputType"] !== undefined ? _data["digitalOutputType"] : <any>null;
            this.digitalOutputMode = _data["digitalOutputMode"] !== undefined ? _data["digitalOutputMode"] : <any>null;
            this.digitalOutputDrivenBy = _data["digitalOutputDrivenBy"] !== undefined ? _data["digitalOutputDrivenBy"] : <any>null;
            this.pulseDuration = _data["pulseDuration"] !== undefined ? _data["pulseDuration"] : <any>null;
            this.triggerAnalogChannel = _data["triggerAnalogChannel"] !== undefined ? _data["triggerAnalogChannel"] : <any>null;
            this.highSetPoint = _data["highSetPoint"] !== undefined ? _data["highSetPoint"] : <any>null;
            this.lowSetPoint = _data["lowSetPoint"] !== undefined ? _data["lowSetPoint"] : <any>null;
            this.activationDelay = _data["activationDelay"] !== undefined ? _data["activationDelay"] : <any>null;
            this.analogChannelStateAboveHigh = _data["analogChannelStateAboveHigh"] !== undefined ? _data["analogChannelStateAboveHigh"] : <any>null;
            this.analogChannelStateBetweenLowAndHigh = _data["analogChannelStateBetweenLowAndHigh"] !== undefined ? _data["analogChannelStateBetweenLowAndHigh"] : <any>null;
            this.analogChannelStateBelowLow = _data["analogChannelStateBelowLow"] !== undefined ? _data["analogChannelStateBelowLow"] : <any>null;
            this.digitalChannelStateInactive = _data["digitalChannelStateInactive"] !== undefined ? _data["digitalChannelStateInactive"] : <any>null;
            this.digitalChannelStateActive = _data["digitalChannelStateActive"] !== undefined ? _data["digitalChannelStateActive"] : <any>null;
            this.isInSync = _data["isInSync"] !== undefined ? _data["isInSync"] : <any>null;
            this.isDeleted = _data["isDeleted"] !== undefined ? _data["isDeleted"] : <any>null;
            if (Array.isArray(_data["drivenByDigitalInputs"])) {
                this.drivenByDigitalInputs = [] as any;
                for (let item of _data["drivenByDigitalInputs"])
                    this.drivenByDigitalInputs!.push(item);
            }
            else {
                this.drivenByDigitalInputs = <any>null;
            }
            if (Array.isArray(_data["drivenByDigitalInputDescription"])) {
                this.drivenByDigitalInputDescription = [] as any;
                for (let item of _data["drivenByDigitalInputDescription"])
                    this.drivenByDigitalInputDescription!.push(item);
            }
            else {
                this.drivenByDigitalInputDescription = <any>null;
            }
        }
    }

    static fromJS(data: any): CloverDigitalOutputInfo {
        data = typeof data === 'object' ? data : {};
        let result = new CloverDigitalOutputInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["index"] = this.index !== undefined ? this.index : <any>null;
        data["digitalOutputType"] = this.digitalOutputType !== undefined ? this.digitalOutputType : <any>null;
        data["digitalOutputMode"] = this.digitalOutputMode !== undefined ? this.digitalOutputMode : <any>null;
        data["digitalOutputDrivenBy"] = this.digitalOutputDrivenBy !== undefined ? this.digitalOutputDrivenBy : <any>null;
        data["pulseDuration"] = this.pulseDuration !== undefined ? this.pulseDuration : <any>null;
        data["triggerAnalogChannel"] = this.triggerAnalogChannel !== undefined ? this.triggerAnalogChannel : <any>null;
        data["highSetPoint"] = this.highSetPoint !== undefined ? this.highSetPoint : <any>null;
        data["lowSetPoint"] = this.lowSetPoint !== undefined ? this.lowSetPoint : <any>null;
        data["activationDelay"] = this.activationDelay !== undefined ? this.activationDelay : <any>null;
        data["analogChannelStateAboveHigh"] = this.analogChannelStateAboveHigh !== undefined ? this.analogChannelStateAboveHigh : <any>null;
        data["analogChannelStateBetweenLowAndHigh"] = this.analogChannelStateBetweenLowAndHigh !== undefined ? this.analogChannelStateBetweenLowAndHigh : <any>null;
        data["analogChannelStateBelowLow"] = this.analogChannelStateBelowLow !== undefined ? this.analogChannelStateBelowLow : <any>null;
        data["digitalChannelStateInactive"] = this.digitalChannelStateInactive !== undefined ? this.digitalChannelStateInactive : <any>null;
        data["digitalChannelStateActive"] = this.digitalChannelStateActive !== undefined ? this.digitalChannelStateActive : <any>null;
        data["isInSync"] = this.isInSync !== undefined ? this.isInSync : <any>null;
        data["isDeleted"] = this.isDeleted !== undefined ? this.isDeleted : <any>null;
        if (Array.isArray(this.drivenByDigitalInputs)) {
            data["drivenByDigitalInputs"] = [];
            for (let item of this.drivenByDigitalInputs)
                data["drivenByDigitalInputs"].push(item);
        }
        if (Array.isArray(this.drivenByDigitalInputDescription)) {
            data["drivenByDigitalInputDescription"] = [];
            for (let item of this.drivenByDigitalInputDescription)
                data["drivenByDigitalInputDescription"].push(item);
        }
        super.toJSON(data);
        return data;
    }
}

export enum CloverDigitalOutputType {
    None = 0,
    Constant = 1,
    Pulse = 2,
}

export enum CloverDigitalOutputMode {
    NormallyOpen = 0,
    NormallyClosed = 1,
}

export enum CloverDigitalOutputDrivenBy {
    None = 0,
    AnalogInput = 1,
    DigitalInput = 2,
}

export enum CloverDigitalOutputStateType {
    Active = 0,
    Inactive = 1,
    Unchanged = 2,
}

export class CloverLiquidProduct {
    productTypeId?: number;
    specificGravity?: number;
    poundsPerCubicInch?: number;
    scfPerCubicInch?: number;
    description?: string | null;
    newProductTypeId?: number;

    init(_data?: any) {
        if (_data) {
            this.productTypeId = _data["productTypeId"] !== undefined ? _data["productTypeId"] : <any>null;
            this.specificGravity = _data["specificGravity"] !== undefined ? _data["specificGravity"] : <any>null;
            this.poundsPerCubicInch = _data["poundsPerCubicInch"] !== undefined ? _data["poundsPerCubicInch"] : <any>null;
            this.scfPerCubicInch = _data["scfPerCubicInch"] !== undefined ? _data["scfPerCubicInch"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.newProductTypeId = _data["newProductTypeId"] !== undefined ? _data["newProductTypeId"] : <any>null;
        }
    }

    static fromJS(data: any): CloverLiquidProduct {
        data = typeof data === 'object' ? data : {};
        let result = new CloverLiquidProduct();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productTypeId"] = this.productTypeId !== undefined ? this.productTypeId : <any>null;
        data["specificGravity"] = this.specificGravity !== undefined ? this.specificGravity : <any>null;
        data["poundsPerCubicInch"] = this.poundsPerCubicInch !== undefined ? this.poundsPerCubicInch : <any>null;
        data["scfPerCubicInch"] = this.scfPerCubicInch !== undefined ? this.scfPerCubicInch : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["newProductTypeId"] = this.newProductTypeId !== undefined ? this.newProductTypeId : <any>null;
        return data;
    }
}

export class CloverRTUDiagnosticsInfo {
    rtuType?: RTUType;
    softwareVersion?: string | null;
    state?: string | null;
    isCommissioned?: boolean | null;
    lastCommissionTimeStamp?: Date | null;
    deviceTimeStamp?: Date | null;
    serverTimeStamp?: Date | null;
    timeErrorSeconds?: number | null;
    firstDialoutNumber?: string | null;
    secondDialoutNumber?: string | null;
    stackedAlarms?: number | null;
    batteryVolts?: number | null;
    isMainsPowerOn?: boolean | null;
    analogChannelReadings?: { [key: string]: number; } | null;
    digitalChannelState?: { [key: string]: boolean; } | null;
    digitalOutputState?: { [key: string]: boolean; } | null;

    init(_data?: any) {
        if (_data) {
            this.rtuType = _data["rtuType"] !== undefined ? _data["rtuType"] : <any>null;
            this.softwareVersion = _data["softwareVersion"] !== undefined ? _data["softwareVersion"] : <any>null;
            this.state = _data["state"] !== undefined ? _data["state"] : <any>null;
            this.isCommissioned = _data["isCommissioned"] !== undefined ? _data["isCommissioned"] : <any>null;
            this.lastCommissionTimeStamp = _data["lastCommissionTimeStamp"] ? new Date(_data["lastCommissionTimeStamp"].toString()) : <any>null;
            this.deviceTimeStamp = _data["deviceTimeStamp"] ? new Date(_data["deviceTimeStamp"].toString()) : <any>null;
            this.serverTimeStamp = _data["serverTimeStamp"] ? new Date(_data["serverTimeStamp"].toString()) : <any>null;
            this.timeErrorSeconds = _data["timeErrorSeconds"] !== undefined ? _data["timeErrorSeconds"] : <any>null;
            this.firstDialoutNumber = _data["firstDialoutNumber"] !== undefined ? _data["firstDialoutNumber"] : <any>null;
            this.secondDialoutNumber = _data["secondDialoutNumber"] !== undefined ? _data["secondDialoutNumber"] : <any>null;
            this.stackedAlarms = _data["stackedAlarms"] !== undefined ? _data["stackedAlarms"] : <any>null;
            this.batteryVolts = _data["batteryVolts"] !== undefined ? _data["batteryVolts"] : <any>null;
            this.isMainsPowerOn = _data["isMainsPowerOn"] !== undefined ? _data["isMainsPowerOn"] : <any>null;
            if (_data["analogChannelReadings"]) {
                this.analogChannelReadings = {} as any;
                for (let key in _data["analogChannelReadings"]) {
                    if (_data["analogChannelReadings"].hasOwnProperty(key))
                        (<any>this.analogChannelReadings)![key] = _data["analogChannelReadings"][key] !== undefined ? _data["analogChannelReadings"][key] : <any>null;
                }
            }
            else {
                this.analogChannelReadings = <any>null;
            }
            if (_data["digitalChannelState"]) {
                this.digitalChannelState = {} as any;
                for (let key in _data["digitalChannelState"]) {
                    if (_data["digitalChannelState"].hasOwnProperty(key))
                        (<any>this.digitalChannelState)![key] = _data["digitalChannelState"][key] !== undefined ? _data["digitalChannelState"][key] : <any>null;
                }
            }
            else {
                this.digitalChannelState = <any>null;
            }
            if (_data["digitalOutputState"]) {
                this.digitalOutputState = {} as any;
                for (let key in _data["digitalOutputState"]) {
                    if (_data["digitalOutputState"].hasOwnProperty(key))
                        (<any>this.digitalOutputState)![key] = _data["digitalOutputState"][key] !== undefined ? _data["digitalOutputState"][key] : <any>null;
                }
            }
            else {
                this.digitalOutputState = <any>null;
            }
        }
    }

    static fromJS(data: any): CloverRTUDiagnosticsInfo {
        data = typeof data === 'object' ? data : {};
        let result = new CloverRTUDiagnosticsInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rtuType"] = this.rtuType !== undefined ? this.rtuType : <any>null;
        data["softwareVersion"] = this.softwareVersion !== undefined ? this.softwareVersion : <any>null;
        data["state"] = this.state !== undefined ? this.state : <any>null;
        data["isCommissioned"] = this.isCommissioned !== undefined ? this.isCommissioned : <any>null;
        data["lastCommissionTimeStamp"] = this.lastCommissionTimeStamp ? this.lastCommissionTimeStamp.toISOString() : <any>null;
        data["deviceTimeStamp"] = this.deviceTimeStamp ? this.deviceTimeStamp.toISOString() : <any>null;
        data["serverTimeStamp"] = this.serverTimeStamp ? this.serverTimeStamp.toISOString() : <any>null;
        data["timeErrorSeconds"] = this.timeErrorSeconds !== undefined ? this.timeErrorSeconds : <any>null;
        data["firstDialoutNumber"] = this.firstDialoutNumber !== undefined ? this.firstDialoutNumber : <any>null;
        data["secondDialoutNumber"] = this.secondDialoutNumber !== undefined ? this.secondDialoutNumber : <any>null;
        data["stackedAlarms"] = this.stackedAlarms !== undefined ? this.stackedAlarms : <any>null;
        data["batteryVolts"] = this.batteryVolts !== undefined ? this.batteryVolts : <any>null;
        data["isMainsPowerOn"] = this.isMainsPowerOn !== undefined ? this.isMainsPowerOn : <any>null;
        if (this.analogChannelReadings) {
            data["analogChannelReadings"] = {};
            for (let key in this.analogChannelReadings) {
                if (this.analogChannelReadings.hasOwnProperty(key))
                    (<any>data["analogChannelReadings"])[key] = this.analogChannelReadings[key] !== undefined ? this.analogChannelReadings[key] : <any>null;
            }
        }
        if (this.digitalChannelState) {
            data["digitalChannelState"] = {};
            for (let key in this.digitalChannelState) {
                if (this.digitalChannelState.hasOwnProperty(key))
                    (<any>data["digitalChannelState"])[key] = this.digitalChannelState[key] !== undefined ? this.digitalChannelState[key] : <any>null;
            }
        }
        if (this.digitalOutputState) {
            data["digitalOutputState"] = {};
            for (let key in this.digitalOutputState) {
                if (this.digitalOutputState.hasOwnProperty(key))
                    (<any>data["digitalOutputState"])[key] = this.digitalOutputState[key] !== undefined ? this.digitalOutputState[key] : <any>null;
            }
        }
        return data;
    }
}

export class EaglePaymeterRTUDiagnosticsInfo {
    lastPollTimestamp?: Date | null;
    lastSuccessfulReadingTimestamp?: Date | null;
    lastSuccessfulArchiveTimestamp?: Date | null;
    lastSuccessfulArchiveNumber?: number | null;
    lastFileRetrievalException?: string | null;

    init(_data?: any) {
        if (_data) {
            this.lastPollTimestamp = _data["lastPollTimestamp"] ? new Date(_data["lastPollTimestamp"].toString()) : <any>null;
            this.lastSuccessfulReadingTimestamp = _data["lastSuccessfulReadingTimestamp"] ? new Date(_data["lastSuccessfulReadingTimestamp"].toString()) : <any>null;
            this.lastSuccessfulArchiveTimestamp = _data["lastSuccessfulArchiveTimestamp"] ? new Date(_data["lastSuccessfulArchiveTimestamp"].toString()) : <any>null;
            this.lastSuccessfulArchiveNumber = _data["lastSuccessfulArchiveNumber"] !== undefined ? _data["lastSuccessfulArchiveNumber"] : <any>null;
            this.lastFileRetrievalException = _data["lastFileRetrievalException"] !== undefined ? _data["lastFileRetrievalException"] : <any>null;
        }
    }

    static fromJS(data: any): EaglePaymeterRTUDiagnosticsInfo {
        data = typeof data === 'object' ? data : {};
        let result = new EaglePaymeterRTUDiagnosticsInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lastPollTimestamp"] = this.lastPollTimestamp ? this.lastPollTimestamp.toISOString() : <any>null;
        data["lastSuccessfulReadingTimestamp"] = this.lastSuccessfulReadingTimestamp ? this.lastSuccessfulReadingTimestamp.toISOString() : <any>null;
        data["lastSuccessfulArchiveTimestamp"] = this.lastSuccessfulArchiveTimestamp ? this.lastSuccessfulArchiveTimestamp.toISOString() : <any>null;
        data["lastSuccessfulArchiveNumber"] = this.lastSuccessfulArchiveNumber !== undefined ? this.lastSuccessfulArchiveNumber : <any>null;
        data["lastFileRetrievalException"] = this.lastFileRetrievalException !== undefined ? this.lastFileRetrievalException : <any>null;
        return data;
    }
}

export class SMSRTUConfigurationBlock extends EditBase {
    batteryType?: number | null;
    batteryLow?: number | null;
    pollMode?: number | null;
    pollHour?: number | null;
    timeUpdate?: boolean | null;
    destinationPhoneNumber?: string | null;
    serviceCenterPhoneNumber?: string | null;
    ownPhoneNumber?: string | null;
    destinationEmailAddress?: string | null;
    dataReductionMode?: boolean | null;
    ownPIN?: string | null;
    destinationPIN?: string | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.batteryType = _data["batteryType"] !== undefined ? _data["batteryType"] : <any>null;
            this.batteryLow = _data["batteryLow"] !== undefined ? _data["batteryLow"] : <any>null;
            this.pollMode = _data["pollMode"] !== undefined ? _data["pollMode"] : <any>null;
            this.pollHour = _data["pollHour"] !== undefined ? _data["pollHour"] : <any>null;
            this.timeUpdate = _data["timeUpdate"] !== undefined ? _data["timeUpdate"] : <any>null;
            this.destinationPhoneNumber = _data["destinationPhoneNumber"] !== undefined ? _data["destinationPhoneNumber"] : <any>null;
            this.serviceCenterPhoneNumber = _data["serviceCenterPhoneNumber"] !== undefined ? _data["serviceCenterPhoneNumber"] : <any>null;
            this.ownPhoneNumber = _data["ownPhoneNumber"] !== undefined ? _data["ownPhoneNumber"] : <any>null;
            this.destinationEmailAddress = _data["destinationEmailAddress"] !== undefined ? _data["destinationEmailAddress"] : <any>null;
            this.dataReductionMode = _data["dataReductionMode"] !== undefined ? _data["dataReductionMode"] : <any>null;
            this.ownPIN = _data["ownPIN"] !== undefined ? _data["ownPIN"] : <any>null;
            this.destinationPIN = _data["destinationPIN"] !== undefined ? _data["destinationPIN"] : <any>null;
        }
    }

    static fromJS(data: any): SMSRTUConfigurationBlock {
        data = typeof data === 'object' ? data : {};
        let result = new SMSRTUConfigurationBlock();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["batteryType"] = this.batteryType !== undefined ? this.batteryType : <any>null;
        data["batteryLow"] = this.batteryLow !== undefined ? this.batteryLow : <any>null;
        data["pollMode"] = this.pollMode !== undefined ? this.pollMode : <any>null;
        data["pollHour"] = this.pollHour !== undefined ? this.pollHour : <any>null;
        data["timeUpdate"] = this.timeUpdate !== undefined ? this.timeUpdate : <any>null;
        data["destinationPhoneNumber"] = this.destinationPhoneNumber !== undefined ? this.destinationPhoneNumber : <any>null;
        data["serviceCenterPhoneNumber"] = this.serviceCenterPhoneNumber !== undefined ? this.serviceCenterPhoneNumber : <any>null;
        data["ownPhoneNumber"] = this.ownPhoneNumber !== undefined ? this.ownPhoneNumber : <any>null;
        data["destinationEmailAddress"] = this.destinationEmailAddress !== undefined ? this.destinationEmailAddress : <any>null;
        data["dataReductionMode"] = this.dataReductionMode !== undefined ? this.dataReductionMode : <any>null;
        data["ownPIN"] = this.ownPIN !== undefined ? this.ownPIN : <any>null;
        data["destinationPIN"] = this.destinationPIN !== undefined ? this.destinationPIN : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class SMSRTUDiagnosticsBlock {
    batteryVolts?: number | null;
    batteryNightVolts?: number | null;
    batteryCharge?: number | null;
    batteryAverageCharge?: number | null;
    rtuCaseTemperature?: number | null;
    ambientLight?: number | null;
    signalStrength?: number | null;
    swVersion?: string | null;
    serverTimeStamp_UpdateCommsConfig?: Date | null;
    serverTimeStamp_BatteryVolts?: Date | null;
    serverTimeStamp_RtuCaseTemperature?: Date | null;
    serverTimeStamp_GPS?: Date | null;
    gpsLatitude?: number | null;
    gpsLongitude?: number | null;

    init(_data?: any) {
        if (_data) {
            this.batteryVolts = _data["batteryVolts"] !== undefined ? _data["batteryVolts"] : <any>null;
            this.batteryNightVolts = _data["batteryNightVolts"] !== undefined ? _data["batteryNightVolts"] : <any>null;
            this.batteryCharge = _data["batteryCharge"] !== undefined ? _data["batteryCharge"] : <any>null;
            this.batteryAverageCharge = _data["batteryAverageCharge"] !== undefined ? _data["batteryAverageCharge"] : <any>null;
            this.rtuCaseTemperature = _data["rtuCaseTemperature"] !== undefined ? _data["rtuCaseTemperature"] : <any>null;
            this.ambientLight = _data["ambientLight"] !== undefined ? _data["ambientLight"] : <any>null;
            this.signalStrength = _data["signalStrength"] !== undefined ? _data["signalStrength"] : <any>null;
            this.swVersion = _data["swVersion"] !== undefined ? _data["swVersion"] : <any>null;
            this.serverTimeStamp_UpdateCommsConfig = _data["serverTimeStamp_UpdateCommsConfig"] ? new Date(_data["serverTimeStamp_UpdateCommsConfig"].toString()) : <any>null;
            this.serverTimeStamp_BatteryVolts = _data["serverTimeStamp_BatteryVolts"] ? new Date(_data["serverTimeStamp_BatteryVolts"].toString()) : <any>null;
            this.serverTimeStamp_RtuCaseTemperature = _data["serverTimeStamp_RtuCaseTemperature"] ? new Date(_data["serverTimeStamp_RtuCaseTemperature"].toString()) : <any>null;
            this.serverTimeStamp_GPS = _data["serverTimeStamp_GPS"] ? new Date(_data["serverTimeStamp_GPS"].toString()) : <any>null;
            this.gpsLatitude = _data["gpsLatitude"] !== undefined ? _data["gpsLatitude"] : <any>null;
            this.gpsLongitude = _data["gpsLongitude"] !== undefined ? _data["gpsLongitude"] : <any>null;
        }
    }

    static fromJS(data: any): SMSRTUDiagnosticsBlock {
        data = typeof data === 'object' ? data : {};
        let result = new SMSRTUDiagnosticsBlock();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["batteryVolts"] = this.batteryVolts !== undefined ? this.batteryVolts : <any>null;
        data["batteryNightVolts"] = this.batteryNightVolts !== undefined ? this.batteryNightVolts : <any>null;
        data["batteryCharge"] = this.batteryCharge !== undefined ? this.batteryCharge : <any>null;
        data["batteryAverageCharge"] = this.batteryAverageCharge !== undefined ? this.batteryAverageCharge : <any>null;
        data["rtuCaseTemperature"] = this.rtuCaseTemperature !== undefined ? this.rtuCaseTemperature : <any>null;
        data["ambientLight"] = this.ambientLight !== undefined ? this.ambientLight : <any>null;
        data["signalStrength"] = this.signalStrength !== undefined ? this.signalStrength : <any>null;
        data["swVersion"] = this.swVersion !== undefined ? this.swVersion : <any>null;
        data["serverTimeStamp_UpdateCommsConfig"] = this.serverTimeStamp_UpdateCommsConfig ? this.serverTimeStamp_UpdateCommsConfig.toISOString() : <any>null;
        data["serverTimeStamp_BatteryVolts"] = this.serverTimeStamp_BatteryVolts ? this.serverTimeStamp_BatteryVolts.toISOString() : <any>null;
        data["serverTimeStamp_RtuCaseTemperature"] = this.serverTimeStamp_RtuCaseTemperature ? this.serverTimeStamp_RtuCaseTemperature.toISOString() : <any>null;
        data["serverTimeStamp_GPS"] = this.serverTimeStamp_GPS ? this.serverTimeStamp_GPS.toISOString() : <any>null;
        data["gpsLatitude"] = this.gpsLatitude !== undefined ? this.gpsLatitude : <any>null;
        data["gpsLongitude"] = this.gpsLongitude !== undefined ? this.gpsLongitude : <any>null;
        return data;
    }
}

export class Metron2RTUConfigurationInfo extends EditBase {
    carrier?: CarrierType | null;
    callTime?: Date;
    transmitInterval?: number;
    apn?: string | null;
    gprsUser?: string | null;
    gprsPassword?: string | null;
    hostName?: string | null;
    hostPort?: number;
    calloutTimeVariance?: number;
    wakeUpInterval?: number;
    transmitTemperature?: boolean;
    antenna?: Metron2RTUAntennaType;
    leftButtonAction?: Metron2RTULeftButtonActionType;
    powerMode?: RTUPowerModeType;
    batteryAlarmPoint?: number;
    staticIPAddress?: string | null;
    listenPort?: number | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.carrier = _data["carrier"] !== undefined ? _data["carrier"] : <any>null;
            this.callTime = _data["callTime"] ? new Date(_data["callTime"].toString()) : <any>null;
            this.transmitInterval = _data["transmitInterval"] !== undefined ? _data["transmitInterval"] : <any>null;
            this.apn = _data["apn"] !== undefined ? _data["apn"] : <any>null;
            this.gprsUser = _data["gprsUser"] !== undefined ? _data["gprsUser"] : <any>null;
            this.gprsPassword = _data["gprsPassword"] !== undefined ? _data["gprsPassword"] : <any>null;
            this.hostName = _data["hostName"] !== undefined ? _data["hostName"] : <any>null;
            this.hostPort = _data["hostPort"] !== undefined ? _data["hostPort"] : <any>null;
            this.calloutTimeVariance = _data["calloutTimeVariance"] !== undefined ? _data["calloutTimeVariance"] : <any>null;
            this.wakeUpInterval = _data["wakeUpInterval"] !== undefined ? _data["wakeUpInterval"] : <any>null;
            this.transmitTemperature = _data["transmitTemperature"] !== undefined ? _data["transmitTemperature"] : <any>null;
            this.antenna = _data["antenna"] !== undefined ? _data["antenna"] : <any>null;
            this.leftButtonAction = _data["leftButtonAction"] !== undefined ? _data["leftButtonAction"] : <any>null;
            this.powerMode = _data["powerMode"] !== undefined ? _data["powerMode"] : <any>null;
            this.batteryAlarmPoint = _data["batteryAlarmPoint"] !== undefined ? _data["batteryAlarmPoint"] : <any>null;
            this.staticIPAddress = _data["staticIPAddress"] !== undefined ? _data["staticIPAddress"] : <any>null;
            this.listenPort = _data["listenPort"] !== undefined ? _data["listenPort"] : <any>null;
        }
    }

    static fromJS(data: any): Metron2RTUConfigurationInfo {
        data = typeof data === 'object' ? data : {};
        let result = new Metron2RTUConfigurationInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["carrier"] = this.carrier !== undefined ? this.carrier : <any>null;
        data["callTime"] = this.callTime ? this.callTime.toISOString() : <any>null;
        data["transmitInterval"] = this.transmitInterval !== undefined ? this.transmitInterval : <any>null;
        data["apn"] = this.apn !== undefined ? this.apn : <any>null;
        data["gprsUser"] = this.gprsUser !== undefined ? this.gprsUser : <any>null;
        data["gprsPassword"] = this.gprsPassword !== undefined ? this.gprsPassword : <any>null;
        data["hostName"] = this.hostName !== undefined ? this.hostName : <any>null;
        data["hostPort"] = this.hostPort !== undefined ? this.hostPort : <any>null;
        data["calloutTimeVariance"] = this.calloutTimeVariance !== undefined ? this.calloutTimeVariance : <any>null;
        data["wakeUpInterval"] = this.wakeUpInterval !== undefined ? this.wakeUpInterval : <any>null;
        data["transmitTemperature"] = this.transmitTemperature !== undefined ? this.transmitTemperature : <any>null;
        data["antenna"] = this.antenna !== undefined ? this.antenna : <any>null;
        data["leftButtonAction"] = this.leftButtonAction !== undefined ? this.leftButtonAction : <any>null;
        data["powerMode"] = this.powerMode !== undefined ? this.powerMode : <any>null;
        data["batteryAlarmPoint"] = this.batteryAlarmPoint !== undefined ? this.batteryAlarmPoint : <any>null;
        data["staticIPAddress"] = this.staticIPAddress !== undefined ? this.staticIPAddress : <any>null;
        data["listenPort"] = this.listenPort !== undefined ? this.listenPort : <any>null;
        super.toJSON(data);
        return data;
    }
}

export enum Metron2RTUAntennaType {
    Internal = 0,
    External = 1,
}

export enum Metron2RTULeftButtonActionType {
    Menu = 0,
    Readings = 1,
}

export class Metron2RTUDiagnosticsInfo {
    lastUpdatedDate?: Date | null;
    temperature?: number | null;
    signalLevel?: number | null;
    isMaintenanceInProgress?: boolean;
    isBatteryChargeLow?: boolean;
    isLastCalloutSuccessful?: boolean;
    localCarrier?: string | null;

    init(_data?: any) {
        if (_data) {
            this.lastUpdatedDate = _data["lastUpdatedDate"] ? new Date(_data["lastUpdatedDate"].toString()) : <any>null;
            this.temperature = _data["temperature"] !== undefined ? _data["temperature"] : <any>null;
            this.signalLevel = _data["signalLevel"] !== undefined ? _data["signalLevel"] : <any>null;
            this.isMaintenanceInProgress = _data["isMaintenanceInProgress"] !== undefined ? _data["isMaintenanceInProgress"] : <any>null;
            this.isBatteryChargeLow = _data["isBatteryChargeLow"] !== undefined ? _data["isBatteryChargeLow"] : <any>null;
            this.isLastCalloutSuccessful = _data["isLastCalloutSuccessful"] !== undefined ? _data["isLastCalloutSuccessful"] : <any>null;
            this.localCarrier = _data["localCarrier"] !== undefined ? _data["localCarrier"] : <any>null;
        }
    }

    static fromJS(data: any): Metron2RTUDiagnosticsInfo {
        data = typeof data === 'object' ? data : {};
        let result = new Metron2RTUDiagnosticsInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lastUpdatedDate"] = this.lastUpdatedDate ? this.lastUpdatedDate.toISOString() : <any>null;
        data["temperature"] = this.temperature !== undefined ? this.temperature : <any>null;
        data["signalLevel"] = this.signalLevel !== undefined ? this.signalLevel : <any>null;
        data["isMaintenanceInProgress"] = this.isMaintenanceInProgress !== undefined ? this.isMaintenanceInProgress : <any>null;
        data["isBatteryChargeLow"] = this.isBatteryChargeLow !== undefined ? this.isBatteryChargeLow : <any>null;
        data["isLastCalloutSuccessful"] = this.isLastCalloutSuccessful !== undefined ? this.isLastCalloutSuccessful : <any>null;
        data["localCarrier"] = this.localCarrier !== undefined ? this.localCarrier : <any>null;
        return data;
    }
}

export class KT09RtuDiagnosticsInfo {
    softwareVersion?: string | null;
    lastCallInTimeStamp?: Date | null;

    init(_data?: any) {
        if (_data) {
            this.softwareVersion = _data["softwareVersion"] !== undefined ? _data["softwareVersion"] : <any>null;
            this.lastCallInTimeStamp = _data["lastCallInTimeStamp"] ? new Date(_data["lastCallInTimeStamp"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): KT09RtuDiagnosticsInfo {
        data = typeof data === 'object' ? data : {};
        let result = new KT09RtuDiagnosticsInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["softwareVersion"] = this.softwareVersion !== undefined ? this.softwareVersion : <any>null;
        data["lastCallInTimeStamp"] = this.lastCallInTimeStamp ? this.lastCallInTimeStamp.toISOString() : <any>null;
        return data;
    }
}

export class ModbusRTUConfigurationInfo extends EditBase {
    carrier?: CarrierType | null;
    rtuId?: number | null;
    systemType?: ModbusSystemType | null;
    modelNumber?: number | null;
    isRS485Enabled?: boolean;
    rS485BaudRate?: ModbusBaudRate | null;
    calloutTime?: number | null;
    calloutPeriod?: ModbusCalloutPeriod | null;
    retryInterval?: number | null;
    retryCount?: ModbusRetryCount | null;
    restartInterval?: ModbusRestartInterval | null;
    isCalloutEnabled?: boolean;
    apn?: string | null;
    hostName?: string | null;
    hostPort?: number | null;
    listenPort?: number | null;
    simImsi?: string | null;
    simPhoneNumber?: string | null;
    staticIPAddress?: string | null;
    signalStrength?: number | null;
    dialOutNumber?: string | null;
    communicationBaudRate?: ModbusBaudRate | null;
    powerMode?: RTUPowerModeType | null;
    scalingMaps?: ModbusScalingMapInfo[] | null;
    digitalOutputs?: ModbusDigitalOutputInfo[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.carrier = _data["carrier"] !== undefined ? _data["carrier"] : <any>null;
            this.rtuId = _data["rtuId"] !== undefined ? _data["rtuId"] : <any>null;
            this.systemType = _data["systemType"] !== undefined ? _data["systemType"] : <any>null;
            this.modelNumber = _data["modelNumber"] !== undefined ? _data["modelNumber"] : <any>null;
            this.isRS485Enabled = _data["isRS485Enabled"] !== undefined ? _data["isRS485Enabled"] : <any>null;
            this.rS485BaudRate = _data["rS485BaudRate"] !== undefined ? _data["rS485BaudRate"] : <any>null;
            this.calloutTime = _data["calloutTime"] !== undefined ? _data["calloutTime"] : <any>null;
            this.calloutPeriod = _data["calloutPeriod"] !== undefined ? _data["calloutPeriod"] : <any>null;
            this.retryInterval = _data["retryInterval"] !== undefined ? _data["retryInterval"] : <any>null;
            this.retryCount = _data["retryCount"] !== undefined ? _data["retryCount"] : <any>null;
            this.restartInterval = _data["restartInterval"] !== undefined ? _data["restartInterval"] : <any>null;
            this.isCalloutEnabled = _data["isCalloutEnabled"] !== undefined ? _data["isCalloutEnabled"] : <any>null;
            this.apn = _data["apn"] !== undefined ? _data["apn"] : <any>null;
            this.hostName = _data["hostName"] !== undefined ? _data["hostName"] : <any>null;
            this.hostPort = _data["hostPort"] !== undefined ? _data["hostPort"] : <any>null;
            this.listenPort = _data["listenPort"] !== undefined ? _data["listenPort"] : <any>null;
            this.simImsi = _data["simImsi"] !== undefined ? _data["simImsi"] : <any>null;
            this.simPhoneNumber = _data["simPhoneNumber"] !== undefined ? _data["simPhoneNumber"] : <any>null;
            this.staticIPAddress = _data["staticIPAddress"] !== undefined ? _data["staticIPAddress"] : <any>null;
            this.signalStrength = _data["signalStrength"] !== undefined ? _data["signalStrength"] : <any>null;
            this.dialOutNumber = _data["dialOutNumber"] !== undefined ? _data["dialOutNumber"] : <any>null;
            this.communicationBaudRate = _data["communicationBaudRate"] !== undefined ? _data["communicationBaudRate"] : <any>null;
            this.powerMode = _data["powerMode"] !== undefined ? _data["powerMode"] : <any>null;
            if (Array.isArray(_data["scalingMaps"])) {
                this.scalingMaps = [] as any;
                for (let item of _data["scalingMaps"])
                    this.scalingMaps!.push(ModbusScalingMapInfo.fromJS(item));
            }
            else {
                this.scalingMaps = <any>null;
            }
            if (Array.isArray(_data["digitalOutputs"])) {
                this.digitalOutputs = [] as any;
                for (let item of _data["digitalOutputs"])
                    this.digitalOutputs!.push(ModbusDigitalOutputInfo.fromJS(item));
            }
            else {
                this.digitalOutputs = <any>null;
            }
        }
    }

    static fromJS(data: any): ModbusRTUConfigurationInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ModbusRTUConfigurationInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["carrier"] = this.carrier !== undefined ? this.carrier : <any>null;
        data["rtuId"] = this.rtuId !== undefined ? this.rtuId : <any>null;
        data["systemType"] = this.systemType !== undefined ? this.systemType : <any>null;
        data["modelNumber"] = this.modelNumber !== undefined ? this.modelNumber : <any>null;
        data["isRS485Enabled"] = this.isRS485Enabled !== undefined ? this.isRS485Enabled : <any>null;
        data["rS485BaudRate"] = this.rS485BaudRate !== undefined ? this.rS485BaudRate : <any>null;
        data["calloutTime"] = this.calloutTime !== undefined ? this.calloutTime : <any>null;
        data["calloutPeriod"] = this.calloutPeriod !== undefined ? this.calloutPeriod : <any>null;
        data["retryInterval"] = this.retryInterval !== undefined ? this.retryInterval : <any>null;
        data["retryCount"] = this.retryCount !== undefined ? this.retryCount : <any>null;
        data["restartInterval"] = this.restartInterval !== undefined ? this.restartInterval : <any>null;
        data["isCalloutEnabled"] = this.isCalloutEnabled !== undefined ? this.isCalloutEnabled : <any>null;
        data["apn"] = this.apn !== undefined ? this.apn : <any>null;
        data["hostName"] = this.hostName !== undefined ? this.hostName : <any>null;
        data["hostPort"] = this.hostPort !== undefined ? this.hostPort : <any>null;
        data["listenPort"] = this.listenPort !== undefined ? this.listenPort : <any>null;
        data["simImsi"] = this.simImsi !== undefined ? this.simImsi : <any>null;
        data["simPhoneNumber"] = this.simPhoneNumber !== undefined ? this.simPhoneNumber : <any>null;
        data["staticIPAddress"] = this.staticIPAddress !== undefined ? this.staticIPAddress : <any>null;
        data["signalStrength"] = this.signalStrength !== undefined ? this.signalStrength : <any>null;
        data["dialOutNumber"] = this.dialOutNumber !== undefined ? this.dialOutNumber : <any>null;
        data["communicationBaudRate"] = this.communicationBaudRate !== undefined ? this.communicationBaudRate : <any>null;
        data["powerMode"] = this.powerMode !== undefined ? this.powerMode : <any>null;
        if (Array.isArray(this.scalingMaps)) {
            data["scalingMaps"] = [];
            for (let item of this.scalingMaps)
                data["scalingMaps"].push(item.toJSON());
        }
        if (Array.isArray(this.digitalOutputs)) {
            data["digitalOutputs"] = [];
            for (let item of this.digitalOutputs)
                data["digitalOutputs"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export enum ModbusSystemType {
    One = 1,
    Two = 2,
    Three = 3,
}

export enum ModbusBaudRate {
    ThreeHundred = 300,
    TwelveHundred = 1200,
    TwentyFourHundred = 2400,
    FourtyEightHundred = 4800,
    NintySixHundred = 9600,
    NineteenTwoHundred = 19200,
    ThirtyEightFourHundred = 38400,
}

export enum ModbusCalloutPeriod {
    Zero = 0,
    Five = 5,
    Ten = 10,
    Fifteen = 15,
    Thirty = 30,
    Sixty = 60,
    OneTwenty = 120,
    TwoFourty = 240,
    ThreeSixty = 360,
    FourEighty = 480,
    SevenTwenty = 720,
    FourteenFourty = 1440,
}

export enum ModbusRetryCount {
    One = 1,
    Two = 2,
    Three = 3,
    Four = 4,
    Five = 5,
}

export enum ModbusRestartInterval {
    Ten = 10,
    Fifteen = 15,
    Twenty = 20,
    Thirty = 30,
    FourtyFive = 45,
    Sixty = 60,
    OneTwenty = 120,
    OneEighty = 180,
    TwoFourty = 240,
}

export class ModbusScalingMapInfo extends EditBase {
    index?: number;
    displayUnit?: UnitType | null;
    displayUnitTypeAsText?: string | null;
    generatedByMappedMode?: boolean;
    decimalPlaces?: number;
    points?: ModbusScalingMapPointInfo[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.index = _data["index"] !== undefined ? _data["index"] : <any>null;
            this.displayUnit = _data["displayUnit"] !== undefined ? _data["displayUnit"] : <any>null;
            this.displayUnitTypeAsText = _data["displayUnitTypeAsText"] !== undefined ? _data["displayUnitTypeAsText"] : <any>null;
            this.generatedByMappedMode = _data["generatedByMappedMode"] !== undefined ? _data["generatedByMappedMode"] : <any>null;
            this.decimalPlaces = _data["decimalPlaces"] !== undefined ? _data["decimalPlaces"] : <any>null;
            if (Array.isArray(_data["points"])) {
                this.points = [] as any;
                for (let item of _data["points"])
                    this.points!.push(ModbusScalingMapPointInfo.fromJS(item));
            }
            else {
                this.points = <any>null;
            }
        }
    }

    static fromJS(data: any): ModbusScalingMapInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ModbusScalingMapInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["index"] = this.index !== undefined ? this.index : <any>null;
        data["displayUnit"] = this.displayUnit !== undefined ? this.displayUnit : <any>null;
        data["displayUnitTypeAsText"] = this.displayUnitTypeAsText !== undefined ? this.displayUnitTypeAsText : <any>null;
        data["generatedByMappedMode"] = this.generatedByMappedMode !== undefined ? this.generatedByMappedMode : <any>null;
        data["decimalPlaces"] = this.decimalPlaces !== undefined ? this.decimalPlaces : <any>null;
        if (Array.isArray(this.points)) {
            data["points"] = [];
            for (let item of this.points)
                data["points"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export class ModbusScalingMapPointInfo extends EditBase {
    index?: number;
    adc?: number;
    scaledValue?: number;
    rawValue?: number | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.index = _data["index"] !== undefined ? _data["index"] : <any>null;
            this.adc = _data["adc"] !== undefined ? _data["adc"] : <any>null;
            this.scaledValue = _data["scaledValue"] !== undefined ? _data["scaledValue"] : <any>null;
            this.rawValue = _data["rawValue"] !== undefined ? _data["rawValue"] : <any>null;
        }
    }

    static fromJS(data: any): ModbusScalingMapPointInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ModbusScalingMapPointInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["index"] = this.index !== undefined ? this.index : <any>null;
        data["adc"] = this.adc !== undefined ? this.adc : <any>null;
        data["scaledValue"] = this.scaledValue !== undefined ? this.scaledValue : <any>null;
        data["rawValue"] = this.rawValue !== undefined ? this.rawValue : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class ModbusDigitalOutputInfo extends EditBase {
    index?: number;
    delayTimeInSeconds?: number;
    onTimeInSeconds?: number;
    offExpression?: string | null;
    onExpression?: string | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.index = _data["index"] !== undefined ? _data["index"] : <any>null;
            this.delayTimeInSeconds = _data["delayTimeInSeconds"] !== undefined ? _data["delayTimeInSeconds"] : <any>null;
            this.onTimeInSeconds = _data["onTimeInSeconds"] !== undefined ? _data["onTimeInSeconds"] : <any>null;
            this.offExpression = _data["offExpression"] !== undefined ? _data["offExpression"] : <any>null;
            this.onExpression = _data["onExpression"] !== undefined ? _data["onExpression"] : <any>null;
        }
    }

    static fromJS(data: any): ModbusDigitalOutputInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ModbusDigitalOutputInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["index"] = this.index !== undefined ? this.index : <any>null;
        data["delayTimeInSeconds"] = this.delayTimeInSeconds !== undefined ? this.delayTimeInSeconds : <any>null;
        data["onTimeInSeconds"] = this.onTimeInSeconds !== undefined ? this.onTimeInSeconds : <any>null;
        data["offExpression"] = this.offExpression !== undefined ? this.offExpression : <any>null;
        data["onExpression"] = this.onExpression !== undefined ? this.onExpression : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class ModbusRTUDiagnosticsInfo {
    batteryVolts?: string | null;
    expansionBoardSupplyVoltage?: string | null;
    lastCommissionTimeStamp?: Date | null;
    lastUpdatedTimeStamp?: Date;
    rtuStatus?: string | null;
    softwareVersion?: string | null;
    supplyVoltage?: string | null;
    timeErrorSeconds?: number | null;
    transmitterLoopVoltage?: string | null;
    eventHistoryList?: ModbusEventHistoryEntryInfo[] | null;

    init(_data?: any) {
        if (_data) {
            this.batteryVolts = _data["batteryVolts"] !== undefined ? _data["batteryVolts"] : <any>null;
            this.expansionBoardSupplyVoltage = _data["expansionBoardSupplyVoltage"] !== undefined ? _data["expansionBoardSupplyVoltage"] : <any>null;
            this.lastCommissionTimeStamp = _data["lastCommissionTimeStamp"] ? new Date(_data["lastCommissionTimeStamp"].toString()) : <any>null;
            this.lastUpdatedTimeStamp = _data["lastUpdatedTimeStamp"] ? new Date(_data["lastUpdatedTimeStamp"].toString()) : <any>null;
            this.rtuStatus = _data["rtuStatus"] !== undefined ? _data["rtuStatus"] : <any>null;
            this.softwareVersion = _data["softwareVersion"] !== undefined ? _data["softwareVersion"] : <any>null;
            this.supplyVoltage = _data["supplyVoltage"] !== undefined ? _data["supplyVoltage"] : <any>null;
            this.timeErrorSeconds = _data["timeErrorSeconds"] !== undefined ? _data["timeErrorSeconds"] : <any>null;
            this.transmitterLoopVoltage = _data["transmitterLoopVoltage"] !== undefined ? _data["transmitterLoopVoltage"] : <any>null;
            if (Array.isArray(_data["eventHistoryList"])) {
                this.eventHistoryList = [] as any;
                for (let item of _data["eventHistoryList"])
                    this.eventHistoryList!.push(ModbusEventHistoryEntryInfo.fromJS(item));
            }
            else {
                this.eventHistoryList = <any>null;
            }
        }
    }

    static fromJS(data: any): ModbusRTUDiagnosticsInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ModbusRTUDiagnosticsInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["batteryVolts"] = this.batteryVolts !== undefined ? this.batteryVolts : <any>null;
        data["expansionBoardSupplyVoltage"] = this.expansionBoardSupplyVoltage !== undefined ? this.expansionBoardSupplyVoltage : <any>null;
        data["lastCommissionTimeStamp"] = this.lastCommissionTimeStamp ? this.lastCommissionTimeStamp.toISOString() : <any>null;
        data["lastUpdatedTimeStamp"] = this.lastUpdatedTimeStamp ? this.lastUpdatedTimeStamp.toISOString() : <any>null;
        data["rtuStatus"] = this.rtuStatus !== undefined ? this.rtuStatus : <any>null;
        data["softwareVersion"] = this.softwareVersion !== undefined ? this.softwareVersion : <any>null;
        data["supplyVoltage"] = this.supplyVoltage !== undefined ? this.supplyVoltage : <any>null;
        data["timeErrorSeconds"] = this.timeErrorSeconds !== undefined ? this.timeErrorSeconds : <any>null;
        data["transmitterLoopVoltage"] = this.transmitterLoopVoltage !== undefined ? this.transmitterLoopVoltage : <any>null;
        if (Array.isArray(this.eventHistoryList)) {
            data["eventHistoryList"] = [];
            for (let item of this.eventHistoryList)
                data["eventHistoryList"].push(item.toJSON());
        }
        return data;
    }
}

export class ModbusEventHistoryEntryInfo {
    eventType?: string | null;
    channelIndex?: string | null;
    loggedAtTimeStamp?: Date;
    rawData?: number;

    init(_data?: any) {
        if (_data) {
            this.eventType = _data["eventType"] !== undefined ? _data["eventType"] : <any>null;
            this.channelIndex = _data["channelIndex"] !== undefined ? _data["channelIndex"] : <any>null;
            this.loggedAtTimeStamp = _data["loggedAtTimeStamp"] ? new Date(_data["loggedAtTimeStamp"].toString()) : <any>null;
            this.rawData = _data["rawData"] !== undefined ? _data["rawData"] : <any>null;
        }
    }

    static fromJS(data: any): ModbusEventHistoryEntryInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ModbusEventHistoryEntryInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["eventType"] = this.eventType !== undefined ? this.eventType : <any>null;
        data["channelIndex"] = this.channelIndex !== undefined ? this.channelIndex : <any>null;
        data["loggedAtTimeStamp"] = this.loggedAtTimeStamp ? this.loggedAtTimeStamp.toISOString() : <any>null;
        data["rawData"] = this.rawData !== undefined ? this.rawData : <any>null;
        return data;
    }
}

export class HornerRTUConfigurationInfo extends EditBase {
    isDataLoggingEnabled?: boolean;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.isDataLoggingEnabled = _data["isDataLoggingEnabled"] !== undefined ? _data["isDataLoggingEnabled"] : <any>null;
        }
    }

    static fromJS(data: any): HornerRTUConfigurationInfo {
        data = typeof data === 'object' ? data : {};
        let result = new HornerRTUConfigurationInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isDataLoggingEnabled"] = this.isDataLoggingEnabled !== undefined ? this.isDataLoggingEnabled : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class RTU400SeriesConfigurationInfo extends EditBase {
    powerSource?: RTU400SeriesPowerSourceType;
    lowBatteryVoltage?: number;
    displayOnError?: RTU400SeriesDisplayOnErrorType;
    displayOnUnused?: RTU400SeriesDisplayOnUnusedType;
    hasAlarmRelay?: boolean;
    inputSensorType?: RTU400SeriesInputOutputType;
    isSerialAnalogInputInstalled?: boolean;
    hasPotentiometer?: boolean;
    isCurrentAnalogInputInstalled?: boolean;
    isCurrentAnalogInput2Installed?: boolean;
    isGpsFitted?: boolean;
    isVoltageAnalogInputInstalled?: boolean;
    isVoltageAnalogInput2Installed?: boolean;
    isLoadcellAnalogInputInstalled?: boolean;
    isSonarAnalogInputInstalled?: boolean;
    hardwareCapabilityDisplayType?: number | null;
    hardCapability?: number;
    outputSensorType?: RTU400SeriesInputOutputType;
    isOptionCardFitted?: boolean;
    optionCardType?: RTU400SeriesOptionCardType | null;
    isExpansionCardFitted?: boolean;
    expansionCardType?: RTU400SeriesExpansionCardType | null;
    timezoneOffset?: string;
    optionExpansionCardType?: RTU400SeriesOptionCardType | null;
    primaryCommunicationsSlot?: number;
    slot1CommunicationsInfo?: RTU400SeriesCommunicationsSlotInfo | null;
    slot2CommunicationsInfo?: RTU400SeriesCommunicationsSlotInfo | null;
    scalingMaps?: RTU400SeriesScalingMapInfo[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.powerSource = _data["powerSource"] !== undefined ? _data["powerSource"] : <any>null;
            this.lowBatteryVoltage = _data["lowBatteryVoltage"] !== undefined ? _data["lowBatteryVoltage"] : <any>null;
            this.displayOnError = _data["displayOnError"] !== undefined ? _data["displayOnError"] : <any>null;
            this.displayOnUnused = _data["displayOnUnused"] !== undefined ? _data["displayOnUnused"] : <any>null;
            this.hasAlarmRelay = _data["hasAlarmRelay"] !== undefined ? _data["hasAlarmRelay"] : <any>null;
            this.inputSensorType = _data["inputSensorType"] !== undefined ? _data["inputSensorType"] : <any>null;
            this.isSerialAnalogInputInstalled = _data["isSerialAnalogInputInstalled"] !== undefined ? _data["isSerialAnalogInputInstalled"] : <any>null;
            this.hasPotentiometer = _data["hasPotentiometer"] !== undefined ? _data["hasPotentiometer"] : <any>null;
            this.isCurrentAnalogInputInstalled = _data["isCurrentAnalogInputInstalled"] !== undefined ? _data["isCurrentAnalogInputInstalled"] : <any>null;
            this.isCurrentAnalogInput2Installed = _data["isCurrentAnalogInput2Installed"] !== undefined ? _data["isCurrentAnalogInput2Installed"] : <any>null;
            this.isGpsFitted = _data["isGpsFitted"] !== undefined ? _data["isGpsFitted"] : <any>null;
            this.isVoltageAnalogInputInstalled = _data["isVoltageAnalogInputInstalled"] !== undefined ? _data["isVoltageAnalogInputInstalled"] : <any>null;
            this.isVoltageAnalogInput2Installed = _data["isVoltageAnalogInput2Installed"] !== undefined ? _data["isVoltageAnalogInput2Installed"] : <any>null;
            this.isLoadcellAnalogInputInstalled = _data["isLoadcellAnalogInputInstalled"] !== undefined ? _data["isLoadcellAnalogInputInstalled"] : <any>null;
            this.isSonarAnalogInputInstalled = _data["isSonarAnalogInputInstalled"] !== undefined ? _data["isSonarAnalogInputInstalled"] : <any>null;
            this.hardwareCapabilityDisplayType = _data["hardwareCapabilityDisplayType"] !== undefined ? _data["hardwareCapabilityDisplayType"] : <any>null;
            this.hardCapability = _data["hardCapability"] !== undefined ? _data["hardCapability"] : <any>null;
            this.outputSensorType = _data["outputSensorType"] !== undefined ? _data["outputSensorType"] : <any>null;
            this.isOptionCardFitted = _data["isOptionCardFitted"] !== undefined ? _data["isOptionCardFitted"] : <any>null;
            this.optionCardType = _data["optionCardType"] !== undefined ? _data["optionCardType"] : <any>null;
            this.isExpansionCardFitted = _data["isExpansionCardFitted"] !== undefined ? _data["isExpansionCardFitted"] : <any>null;
            this.expansionCardType = _data["expansionCardType"] !== undefined ? _data["expansionCardType"] : <any>null;
            this.timezoneOffset = _data["timezoneOffset"] !== undefined ? _data["timezoneOffset"] : <any>null;
            this.optionExpansionCardType = _data["optionExpansionCardType"] !== undefined ? _data["optionExpansionCardType"] : <any>null;
            this.primaryCommunicationsSlot = _data["primaryCommunicationsSlot"] !== undefined ? _data["primaryCommunicationsSlot"] : <any>null;
            this.slot1CommunicationsInfo = _data["slot1CommunicationsInfo"] ? RTU400SeriesCommunicationsSlotInfo.fromJS(_data["slot1CommunicationsInfo"]) : <any>null;
            this.slot2CommunicationsInfo = _data["slot2CommunicationsInfo"] ? RTU400SeriesCommunicationsSlotInfo.fromJS(_data["slot2CommunicationsInfo"]) : <any>null;
            if (Array.isArray(_data["scalingMaps"])) {
                this.scalingMaps = [] as any;
                for (let item of _data["scalingMaps"])
                    this.scalingMaps!.push(RTU400SeriesScalingMapInfo.fromJS(item));
            }
            else {
                this.scalingMaps = <any>null;
            }
        }
    }

    static fromJS(data: any): RTU400SeriesConfigurationInfo {
        data = typeof data === 'object' ? data : {};
        let result = new RTU400SeriesConfigurationInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["powerSource"] = this.powerSource !== undefined ? this.powerSource : <any>null;
        data["lowBatteryVoltage"] = this.lowBatteryVoltage !== undefined ? this.lowBatteryVoltage : <any>null;
        data["displayOnError"] = this.displayOnError !== undefined ? this.displayOnError : <any>null;
        data["displayOnUnused"] = this.displayOnUnused !== undefined ? this.displayOnUnused : <any>null;
        data["hasAlarmRelay"] = this.hasAlarmRelay !== undefined ? this.hasAlarmRelay : <any>null;
        data["inputSensorType"] = this.inputSensorType !== undefined ? this.inputSensorType : <any>null;
        data["isSerialAnalogInputInstalled"] = this.isSerialAnalogInputInstalled !== undefined ? this.isSerialAnalogInputInstalled : <any>null;
        data["hasPotentiometer"] = this.hasPotentiometer !== undefined ? this.hasPotentiometer : <any>null;
        data["isCurrentAnalogInputInstalled"] = this.isCurrentAnalogInputInstalled !== undefined ? this.isCurrentAnalogInputInstalled : <any>null;
        data["isCurrentAnalogInput2Installed"] = this.isCurrentAnalogInput2Installed !== undefined ? this.isCurrentAnalogInput2Installed : <any>null;
        data["isGpsFitted"] = this.isGpsFitted !== undefined ? this.isGpsFitted : <any>null;
        data["isVoltageAnalogInputInstalled"] = this.isVoltageAnalogInputInstalled !== undefined ? this.isVoltageAnalogInputInstalled : <any>null;
        data["isVoltageAnalogInput2Installed"] = this.isVoltageAnalogInput2Installed !== undefined ? this.isVoltageAnalogInput2Installed : <any>null;
        data["isLoadcellAnalogInputInstalled"] = this.isLoadcellAnalogInputInstalled !== undefined ? this.isLoadcellAnalogInputInstalled : <any>null;
        data["isSonarAnalogInputInstalled"] = this.isSonarAnalogInputInstalled !== undefined ? this.isSonarAnalogInputInstalled : <any>null;
        data["hardwareCapabilityDisplayType"] = this.hardwareCapabilityDisplayType !== undefined ? this.hardwareCapabilityDisplayType : <any>null;
        data["hardCapability"] = this.hardCapability !== undefined ? this.hardCapability : <any>null;
        data["outputSensorType"] = this.outputSensorType !== undefined ? this.outputSensorType : <any>null;
        data["isOptionCardFitted"] = this.isOptionCardFitted !== undefined ? this.isOptionCardFitted : <any>null;
        data["optionCardType"] = this.optionCardType !== undefined ? this.optionCardType : <any>null;
        data["isExpansionCardFitted"] = this.isExpansionCardFitted !== undefined ? this.isExpansionCardFitted : <any>null;
        data["expansionCardType"] = this.expansionCardType !== undefined ? this.expansionCardType : <any>null;
        data["timezoneOffset"] = this.timezoneOffset !== undefined ? this.timezoneOffset : <any>null;
        data["optionExpansionCardType"] = this.optionExpansionCardType !== undefined ? this.optionExpansionCardType : <any>null;
        data["primaryCommunicationsSlot"] = this.primaryCommunicationsSlot !== undefined ? this.primaryCommunicationsSlot : <any>null;
        data["slot1CommunicationsInfo"] = this.slot1CommunicationsInfo ? this.slot1CommunicationsInfo.toJSON() : <any>null;
        data["slot2CommunicationsInfo"] = this.slot2CommunicationsInfo ? this.slot2CommunicationsInfo.toJSON() : <any>null;
        if (Array.isArray(this.scalingMaps)) {
            data["scalingMaps"] = [];
            for (let item of this.scalingMaps)
                data["scalingMaps"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export enum RTU400SeriesPowerSourceType {
    PrimaryBattery = 0,
    MainsOnly = 1,
    SolarBattery = 2,
    MainsBattery = 3,
}

export enum RTU400SeriesDisplayOnErrorType {
    Value = 0,
    Error = 1,
    UnderOrOver = 2,
}

export enum RTU400SeriesDisplayOnUnusedType {
    Zeros = 0,
    Dashes = 1,
    Blank = 2,
}

export enum RTU400SeriesInputOutputType {
    None = 0,
    MAmps4To20 = 1,
    Volts05To45 = 2,
}

export enum RTU400SeriesOptionCardType {
    IR246 = 6,
    AE280 = 7,
    DI303 = 8,
    AR217 = 9,
    AE407 = 10,
    CO243 = 11,
    CL310 = 12,
    IR247 = 13,
    SS468 = 15,
    IS453 = 16,
    AS452 = 17,
    TM416 = 18,
    UT459 = 19,
    VI271 = 20,
    VI388 = 21,
    SB457 = 22,
    AD481 = 27,
    VM394 = 28,
    EG501 = 29,
}

export enum RTU400SeriesExpansionCardType {
    EX487 = 14,
    SS468 = 15,
    AD481 = 27,
}

export class RTU400SeriesCommunicationsSlotInfo extends EditBase {
    slotNumber?: number;
    moduleType?: RTU400SeriesModuleType;
    networkType?: Rtu400SeriesNetworkType;
    isSmsEnabled?: boolean;
    isIpEnabled?: boolean;
    isPollable?: boolean;
    carrier?: CarrierType | null;
    apn?: string | null;
    gprsUsername?: string | null;
    gprsPassword?: string | null;
    hostName?: string | null;
    hostPort?: number | null;
    reportedIPAddress?: string | null;
    simIccd?: string | null;
    devicePhoneNumber?: string | null;
    destinationPhoneNumber?: string | null;
    serviceCenterPhoneNumber?: string | null;
    destinationEmailAddress?: string | null;
    pollWindowDuration?: number | null;
    pollWindowStartHour?: number | null;
    epochCorrection?: number;
    isEnsEnabled?: boolean;
    ipNetworkAddress?: string | null;
    outgoingSmsInterface?: CarrierType | null;
    smsNetworkAddress?: string | null;
    modemString?: string | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.slotNumber = _data["slotNumber"] !== undefined ? _data["slotNumber"] : <any>null;
            this.moduleType = _data["moduleType"] !== undefined ? _data["moduleType"] : <any>null;
            this.networkType = _data["networkType"] !== undefined ? _data["networkType"] : <any>null;
            this.isSmsEnabled = _data["isSmsEnabled"] !== undefined ? _data["isSmsEnabled"] : <any>null;
            this.isIpEnabled = _data["isIpEnabled"] !== undefined ? _data["isIpEnabled"] : <any>null;
            this.isPollable = _data["isPollable"] !== undefined ? _data["isPollable"] : <any>null;
            this.carrier = _data["carrier"] !== undefined ? _data["carrier"] : <any>null;
            this.apn = _data["apn"] !== undefined ? _data["apn"] : <any>null;
            this.gprsUsername = _data["gprsUsername"] !== undefined ? _data["gprsUsername"] : <any>null;
            this.gprsPassword = _data["gprsPassword"] !== undefined ? _data["gprsPassword"] : <any>null;
            this.hostName = _data["hostName"] !== undefined ? _data["hostName"] : <any>null;
            this.hostPort = _data["hostPort"] !== undefined ? _data["hostPort"] : <any>null;
            this.reportedIPAddress = _data["reportedIPAddress"] !== undefined ? _data["reportedIPAddress"] : <any>null;
            this.simIccd = _data["simIccd"] !== undefined ? _data["simIccd"] : <any>null;
            this.devicePhoneNumber = _data["devicePhoneNumber"] !== undefined ? _data["devicePhoneNumber"] : <any>null;
            this.destinationPhoneNumber = _data["destinationPhoneNumber"] !== undefined ? _data["destinationPhoneNumber"] : <any>null;
            this.serviceCenterPhoneNumber = _data["serviceCenterPhoneNumber"] !== undefined ? _data["serviceCenterPhoneNumber"] : <any>null;
            this.destinationEmailAddress = _data["destinationEmailAddress"] !== undefined ? _data["destinationEmailAddress"] : <any>null;
            this.pollWindowDuration = _data["pollWindowDuration"] !== undefined ? _data["pollWindowDuration"] : <any>null;
            this.pollWindowStartHour = _data["pollWindowStartHour"] !== undefined ? _data["pollWindowStartHour"] : <any>null;
            this.epochCorrection = _data["epochCorrection"] !== undefined ? _data["epochCorrection"] : <any>null;
            this.isEnsEnabled = _data["isEnsEnabled"] !== undefined ? _data["isEnsEnabled"] : <any>null;
            this.ipNetworkAddress = _data["ipNetworkAddress"] !== undefined ? _data["ipNetworkAddress"] : <any>null;
            this.outgoingSmsInterface = _data["outgoingSmsInterface"] !== undefined ? _data["outgoingSmsInterface"] : <any>null;
            this.smsNetworkAddress = _data["smsNetworkAddress"] !== undefined ? _data["smsNetworkAddress"] : <any>null;
            this.modemString = _data["modemString"] !== undefined ? _data["modemString"] : <any>null;
        }
    }

    static fromJS(data: any): RTU400SeriesCommunicationsSlotInfo {
        data = typeof data === 'object' ? data : {};
        let result = new RTU400SeriesCommunicationsSlotInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["slotNumber"] = this.slotNumber !== undefined ? this.slotNumber : <any>null;
        data["moduleType"] = this.moduleType !== undefined ? this.moduleType : <any>null;
        data["networkType"] = this.networkType !== undefined ? this.networkType : <any>null;
        data["isSmsEnabled"] = this.isSmsEnabled !== undefined ? this.isSmsEnabled : <any>null;
        data["isIpEnabled"] = this.isIpEnabled !== undefined ? this.isIpEnabled : <any>null;
        data["isPollable"] = this.isPollable !== undefined ? this.isPollable : <any>null;
        data["carrier"] = this.carrier !== undefined ? this.carrier : <any>null;
        data["apn"] = this.apn !== undefined ? this.apn : <any>null;
        data["gprsUsername"] = this.gprsUsername !== undefined ? this.gprsUsername : <any>null;
        data["gprsPassword"] = this.gprsPassword !== undefined ? this.gprsPassword : <any>null;
        data["hostName"] = this.hostName !== undefined ? this.hostName : <any>null;
        data["hostPort"] = this.hostPort !== undefined ? this.hostPort : <any>null;
        data["reportedIPAddress"] = this.reportedIPAddress !== undefined ? this.reportedIPAddress : <any>null;
        data["simIccd"] = this.simIccd !== undefined ? this.simIccd : <any>null;
        data["devicePhoneNumber"] = this.devicePhoneNumber !== undefined ? this.devicePhoneNumber : <any>null;
        data["destinationPhoneNumber"] = this.destinationPhoneNumber !== undefined ? this.destinationPhoneNumber : <any>null;
        data["serviceCenterPhoneNumber"] = this.serviceCenterPhoneNumber !== undefined ? this.serviceCenterPhoneNumber : <any>null;
        data["destinationEmailAddress"] = this.destinationEmailAddress !== undefined ? this.destinationEmailAddress : <any>null;
        data["pollWindowDuration"] = this.pollWindowDuration !== undefined ? this.pollWindowDuration : <any>null;
        data["pollWindowStartHour"] = this.pollWindowStartHour !== undefined ? this.pollWindowStartHour : <any>null;
        data["epochCorrection"] = this.epochCorrection !== undefined ? this.epochCorrection : <any>null;
        data["isEnsEnabled"] = this.isEnsEnabled !== undefined ? this.isEnsEnabled : <any>null;
        data["ipNetworkAddress"] = this.ipNetworkAddress !== undefined ? this.ipNetworkAddress : <any>null;
        data["outgoingSmsInterface"] = this.outgoingSmsInterface !== undefined ? this.outgoingSmsInterface : <any>null;
        data["smsNetworkAddress"] = this.smsNetworkAddress !== undefined ? this.smsNetworkAddress : <any>null;
        data["modemString"] = this.modemString !== undefined ? this.modemString : <any>null;
        super.toJSON(data);
        return data;
    }
}

export enum RTU400SeriesModuleType {
    NoModem = 0,
    LocalWireless = 1,
    Telit910Series = 2,
    Iridium = 3,
    IridiumGps = 4,
    Gps = 5,
    GemaltoPLS62W = 6,
}

export enum Rtu400SeriesNetworkType {
    None = 0,
    LAN = 1,
    Iridium = 2,
    GSM = 3,
}

export class RTU400SeriesScalingMapInfo extends EditBase {
    index?: number;
    displayUnit?: UnitType | null;
    displayUnitTypeAsText?: string | null;
    generatedByMappedMode?: boolean;
    rawUnitTypeAsText?: string | null;
    decimalPlaces?: number;
    points?: RTU400SeriesScalingMapPointInfo[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.index = _data["index"] !== undefined ? _data["index"] : <any>null;
            this.displayUnit = _data["displayUnit"] !== undefined ? _data["displayUnit"] : <any>null;
            this.displayUnitTypeAsText = _data["displayUnitTypeAsText"] !== undefined ? _data["displayUnitTypeAsText"] : <any>null;
            this.generatedByMappedMode = _data["generatedByMappedMode"] !== undefined ? _data["generatedByMappedMode"] : <any>null;
            this.rawUnitTypeAsText = _data["rawUnitTypeAsText"] !== undefined ? _data["rawUnitTypeAsText"] : <any>null;
            this.decimalPlaces = _data["decimalPlaces"] !== undefined ? _data["decimalPlaces"] : <any>null;
            if (Array.isArray(_data["points"])) {
                this.points = [] as any;
                for (let item of _data["points"])
                    this.points!.push(RTU400SeriesScalingMapPointInfo.fromJS(item));
            }
            else {
                this.points = <any>null;
            }
        }
    }

    static fromJS(data: any): RTU400SeriesScalingMapInfo {
        data = typeof data === 'object' ? data : {};
        let result = new RTU400SeriesScalingMapInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["index"] = this.index !== undefined ? this.index : <any>null;
        data["displayUnit"] = this.displayUnit !== undefined ? this.displayUnit : <any>null;
        data["displayUnitTypeAsText"] = this.displayUnitTypeAsText !== undefined ? this.displayUnitTypeAsText : <any>null;
        data["generatedByMappedMode"] = this.generatedByMappedMode !== undefined ? this.generatedByMappedMode : <any>null;
        data["rawUnitTypeAsText"] = this.rawUnitTypeAsText !== undefined ? this.rawUnitTypeAsText : <any>null;
        data["decimalPlaces"] = this.decimalPlaces !== undefined ? this.decimalPlaces : <any>null;
        if (Array.isArray(this.points)) {
            data["points"] = [];
            for (let item of this.points)
                data["points"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export class RTU400SeriesScalingMapPointInfo extends EditBase {
    index?: number;
    adc?: number;
    scaledValue?: number;
    rawValue?: number | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.index = _data["index"] !== undefined ? _data["index"] : <any>null;
            this.adc = _data["adc"] !== undefined ? _data["adc"] : <any>null;
            this.scaledValue = _data["scaledValue"] !== undefined ? _data["scaledValue"] : <any>null;
            this.rawValue = _data["rawValue"] !== undefined ? _data["rawValue"] : <any>null;
        }
    }

    static fromJS(data: any): RTU400SeriesScalingMapPointInfo {
        data = typeof data === 'object' ? data : {};
        let result = new RTU400SeriesScalingMapPointInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["index"] = this.index !== undefined ? this.index : <any>null;
        data["adc"] = this.adc !== undefined ? this.adc : <any>null;
        data["scaledValue"] = this.scaledValue !== undefined ? this.scaledValue : <any>null;
        data["rawValue"] = this.rawValue !== undefined ? this.rawValue : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class RTU400SeriesDiagnosticsInfo {
    softwareVersion?: string | null;
    currentCharge?: number | null;
    batteryVolts?: number | null;
    systemTime?: Date | null;
    timeError?: string | null;
    productCode?: number;
    productDescription?: string | null;
    signalStrength?: number | null;
    rtuCaseTemperature?: number | null;
    networkTechnology?: string | null;
    timeErrorCalculationTimestamp?: Date | null;

    init(_data?: any) {
        if (_data) {
            this.softwareVersion = _data["softwareVersion"] !== undefined ? _data["softwareVersion"] : <any>null;
            this.currentCharge = _data["currentCharge"] !== undefined ? _data["currentCharge"] : <any>null;
            this.batteryVolts = _data["batteryVolts"] !== undefined ? _data["batteryVolts"] : <any>null;
            this.systemTime = _data["systemTime"] ? new Date(_data["systemTime"].toString()) : <any>null;
            this.timeError = _data["timeError"] !== undefined ? _data["timeError"] : <any>null;
            this.productCode = _data["productCode"] !== undefined ? _data["productCode"] : <any>null;
            this.productDescription = _data["productDescription"] !== undefined ? _data["productDescription"] : <any>null;
            this.signalStrength = _data["signalStrength"] !== undefined ? _data["signalStrength"] : <any>null;
            this.rtuCaseTemperature = _data["rtuCaseTemperature"] !== undefined ? _data["rtuCaseTemperature"] : <any>null;
            this.networkTechnology = _data["networkTechnology"] !== undefined ? _data["networkTechnology"] : <any>null;
            this.timeErrorCalculationTimestamp = _data["timeErrorCalculationTimestamp"] ? new Date(_data["timeErrorCalculationTimestamp"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): RTU400SeriesDiagnosticsInfo {
        data = typeof data === 'object' ? data : {};
        let result = new RTU400SeriesDiagnosticsInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["softwareVersion"] = this.softwareVersion !== undefined ? this.softwareVersion : <any>null;
        data["currentCharge"] = this.currentCharge !== undefined ? this.currentCharge : <any>null;
        data["batteryVolts"] = this.batteryVolts !== undefined ? this.batteryVolts : <any>null;
        data["systemTime"] = this.systemTime ? this.systemTime.toISOString() : <any>null;
        data["timeError"] = this.timeError !== undefined ? this.timeError : <any>null;
        data["productCode"] = this.productCode !== undefined ? this.productCode : <any>null;
        data["productDescription"] = this.productDescription !== undefined ? this.productDescription : <any>null;
        data["signalStrength"] = this.signalStrength !== undefined ? this.signalStrength : <any>null;
        data["rtuCaseTemperature"] = this.rtuCaseTemperature !== undefined ? this.rtuCaseTemperature : <any>null;
        data["networkTechnology"] = this.networkTechnology !== undefined ? this.networkTechnology : <any>null;
        data["timeErrorCalculationTimestamp"] = this.timeErrorCalculationTimestamp ? this.timeErrorCalculationTimestamp.toISOString() : <any>null;
        return data;
    }
}

export class SaveRtuPollScheduleGroupResponse {
    saveRtuPollScheduleGroupResult?: SaveRtuPollScheduleGroupResult | null;

    init(_data?: any) {
        if (_data) {
            this.saveRtuPollScheduleGroupResult = _data["saveRtuPollScheduleGroupResult"] ? SaveRtuPollScheduleGroupResult.fromJS(_data["saveRtuPollScheduleGroupResult"]) : <any>null;
        }
    }

    static fromJS(data: any): SaveRtuPollScheduleGroupResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SaveRtuPollScheduleGroupResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["saveRtuPollScheduleGroupResult"] = this.saveRtuPollScheduleGroupResult ? this.saveRtuPollScheduleGroupResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveSaveRtuPollScheduleGroupResponse extends SaveRtuPollScheduleGroupResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveSaveRtuPollScheduleGroupResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveRtuPollScheduleGroupResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class BaseSaveResultOfEditRtuPollScheduleGroup extends SaveResult {
    editObject?: EditRtuPollScheduleGroup | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.editObject = _data["editObject"] ? EditRtuPollScheduleGroup.fromJS(_data["editObject"]) : <any>null;
        }
    }

    static fromJS(data: any): BaseSaveResultOfEditRtuPollScheduleGroup {
        data = typeof data === 'object' ? data : {};
        let result = new BaseSaveResultOfEditRtuPollScheduleGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["editObject"] = this.editObject ? this.editObject.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class SaveRtuPollScheduleGroupResult extends BaseSaveResultOfEditRtuPollScheduleGroup {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): SaveRtuPollScheduleGroupResult {
        data = typeof data === 'object' ? data : {};
        let result = new SaveRtuPollScheduleGroupResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class SaveRtuPollScheduleGroupRequest extends WcfProxyUserDetails {
    rtuPollScheduleGroup?: EditRtuPollScheduleGroup | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.rtuPollScheduleGroup = _data["rtuPollScheduleGroup"] ? EditRtuPollScheduleGroup.fromJS(_data["rtuPollScheduleGroup"]) : <any>null;
        }
    }

    static fromJS(data: any): SaveRtuPollScheduleGroupRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SaveRtuPollScheduleGroupRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rtuPollScheduleGroup"] = this.rtuPollScheduleGroup ? this.rtuPollScheduleGroup.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveSaveRtuPollScheduleGroupRequest extends SaveRtuPollScheduleGroupRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveSaveRtuPollScheduleGroupRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveRtuPollScheduleGroupRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class Send400SeriesOutboundMessagesRequest extends WcfProxyUserDetails {
    request?: RTU400SeriesOutboundRequestInfo | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.request = _data["request"] ? RTU400SeriesOutboundRequestInfo.fromJS(_data["request"]) : <any>null;
        }
    }

    static fromJS(data: any): Send400SeriesOutboundMessagesRequest {
        data = typeof data === 'object' ? data : {};
        let result = new Send400SeriesOutboundMessagesRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["request"] = this.request ? this.request.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveSend400SeriesOutboundMessagesRequest extends Send400SeriesOutboundMessagesRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveSend400SeriesOutboundMessagesRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSend400SeriesOutboundMessagesRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RTU400SeriesOutboundRequestInfo {
    rtuId?: string;
    sendOnCommSlotNumber?: number;
    transportType?: RTU400SeriesOutboundRequestTransportType;
    isUpdateTimeCommand?: boolean;
    isSyncTimeZoneCommand?: boolean;
    requests?: RTU400SeriesOutboundRequest[] | null;
    isSetCounterValueCommand?: boolean;
    counterResetValue?: number | null;
    counterChannelNumber?: string | null;

    init(_data?: any) {
        if (_data) {
            this.rtuId = _data["rtuId"] !== undefined ? _data["rtuId"] : <any>null;
            this.sendOnCommSlotNumber = _data["sendOnCommSlotNumber"] !== undefined ? _data["sendOnCommSlotNumber"] : <any>null;
            this.transportType = _data["transportType"] !== undefined ? _data["transportType"] : <any>null;
            this.isUpdateTimeCommand = _data["isUpdateTimeCommand"] !== undefined ? _data["isUpdateTimeCommand"] : <any>null;
            this.isSyncTimeZoneCommand = _data["isSyncTimeZoneCommand"] !== undefined ? _data["isSyncTimeZoneCommand"] : <any>null;
            if (Array.isArray(_data["requests"])) {
                this.requests = [] as any;
                for (let item of _data["requests"])
                    this.requests!.push(RTU400SeriesOutboundRequest.fromJS(item));
            }
            else {
                this.requests = <any>null;
            }
            this.isSetCounterValueCommand = _data["isSetCounterValueCommand"] !== undefined ? _data["isSetCounterValueCommand"] : <any>null;
            this.counterResetValue = _data["counterResetValue"] !== undefined ? _data["counterResetValue"] : <any>null;
            this.counterChannelNumber = _data["counterChannelNumber"] !== undefined ? _data["counterChannelNumber"] : <any>null;
        }
    }

    static fromJS(data: any): RTU400SeriesOutboundRequestInfo {
        data = typeof data === 'object' ? data : {};
        let result = new RTU400SeriesOutboundRequestInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rtuId"] = this.rtuId !== undefined ? this.rtuId : <any>null;
        data["sendOnCommSlotNumber"] = this.sendOnCommSlotNumber !== undefined ? this.sendOnCommSlotNumber : <any>null;
        data["transportType"] = this.transportType !== undefined ? this.transportType : <any>null;
        data["isUpdateTimeCommand"] = this.isUpdateTimeCommand !== undefined ? this.isUpdateTimeCommand : <any>null;
        data["isSyncTimeZoneCommand"] = this.isSyncTimeZoneCommand !== undefined ? this.isSyncTimeZoneCommand : <any>null;
        if (Array.isArray(this.requests)) {
            data["requests"] = [];
            for (let item of this.requests)
                data["requests"].push(item.toJSON());
        }
        data["isSetCounterValueCommand"] = this.isSetCounterValueCommand !== undefined ? this.isSetCounterValueCommand : <any>null;
        data["counterResetValue"] = this.counterResetValue !== undefined ? this.counterResetValue : <any>null;
        data["counterChannelNumber"] = this.counterChannelNumber !== undefined ? this.counterChannelNumber : <any>null;
        return data;
    }
}

export enum RTU400SeriesOutboundRequestTransportType {
    Sms = 0,
    Udp = 1,
}

export class RTU400SeriesOutboundRequest {
    channelNumber?: string | null;
    slotNumber?: number | null;
    requestType?: RTU400SeriesOutboundRequestType;

    init(_data?: any) {
        if (_data) {
            this.channelNumber = _data["channelNumber"] !== undefined ? _data["channelNumber"] : <any>null;
            this.slotNumber = _data["slotNumber"] !== undefined ? _data["slotNumber"] : <any>null;
            this.requestType = _data["requestType"] !== undefined ? _data["requestType"] : <any>null;
        }
    }

    static fromJS(data: any): RTU400SeriesOutboundRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RTU400SeriesOutboundRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["channelNumber"] = this.channelNumber !== undefined ? this.channelNumber : <any>null;
        data["slotNumber"] = this.slotNumber !== undefined ? this.slotNumber : <any>null;
        data["requestType"] = this.requestType !== undefined ? this.requestType : <any>null;
        return data;
    }
}

export enum RTU400SeriesOutboundRequestType {
    RequestRtuConfiguration = 1,
    SendRtuConfiguration = 2,
    RequestStrappingCharts = 3,
    SendStrappingCharts = 4,
    RequestChannelConfiguraiton = 10,
    SendChannelConfiguration = 11,
    SyncCommunicationsSlot = 20,
    RequestCommunicationsSlot = 21,
}

export class DeleteProductByIdListResponse {
    deleteProductByIdListResult?: boolean;

    init(_data?: any) {
        if (_data) {
            this.deleteProductByIdListResult = _data["deleteProductByIdListResult"] !== undefined ? _data["deleteProductByIdListResult"] : <any>null;
        }
    }

    static fromJS(data: any): DeleteProductByIdListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteProductByIdListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deleteProductByIdListResult"] = this.deleteProductByIdListResult !== undefined ? this.deleteProductByIdListResult : <any>null;
        return data;
    }
}

export class EvolveDeleteProductByIdListResponse extends DeleteProductByIdListResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveDeleteProductByIdListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveDeleteProductByIdListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class DeleteProductByIdListRequest extends WcfProxyUserDetails {
    productIds?: string[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["productIds"])) {
                this.productIds = [] as any;
                for (let item of _data["productIds"])
                    this.productIds!.push(item);
            }
            else {
                this.productIds = <any>null;
            }
        }
    }

    static fromJS(data: any): DeleteProductByIdListRequest {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteProductByIdListRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.productIds)) {
            data["productIds"] = [];
            for (let item of this.productIds)
                data["productIds"].push(item);
        }
        super.toJSON(data);
        return data;
    }
}

export class EvolveDeleteProductByIdListRequest extends DeleteProductByIdListRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveDeleteProductByIdListRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveDeleteProductByIdListRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class DeleteSitesByIdListResponse {
    deleteSitesByIdListResult?: boolean;

    init(_data?: any) {
        if (_data) {
            this.deleteSitesByIdListResult = _data["deleteSitesByIdListResult"] !== undefined ? _data["deleteSitesByIdListResult"] : <any>null;
        }
    }

    static fromJS(data: any): DeleteSitesByIdListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteSitesByIdListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deleteSitesByIdListResult"] = this.deleteSitesByIdListResult !== undefined ? this.deleteSitesByIdListResult : <any>null;
        return data;
    }
}

export class EvolveDeleteSitesByIdListResponse extends DeleteSitesByIdListResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveDeleteSitesByIdListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveDeleteSitesByIdListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class DeleteSitesByIdListRequest extends WcfProxyUserDetails {
    siteIds?: string[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["siteIds"])) {
                this.siteIds = [] as any;
                for (let item of _data["siteIds"])
                    this.siteIds!.push(item);
            }
            else {
                this.siteIds = <any>null;
            }
        }
    }

    static fromJS(data: any): DeleteSitesByIdListRequest {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteSitesByIdListRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.siteIds)) {
            data["siteIds"] = [];
            for (let item of this.siteIds)
                data["siteIds"].push(item);
        }
        super.toJSON(data);
        return data;
    }
}

export class EvolveDeleteSitesByIdListRequest extends DeleteSitesByIdListRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveDeleteSitesByIdListRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveDeleteSitesByIdListRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class DeleteTankDimensionsByIdListResponse {
    deleteTankDimensionsByIdListResult?: boolean;

    init(_data?: any) {
        if (_data) {
            this.deleteTankDimensionsByIdListResult = _data["deleteTankDimensionsByIdListResult"] !== undefined ? _data["deleteTankDimensionsByIdListResult"] : <any>null;
        }
    }

    static fromJS(data: any): DeleteTankDimensionsByIdListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteTankDimensionsByIdListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deleteTankDimensionsByIdListResult"] = this.deleteTankDimensionsByIdListResult !== undefined ? this.deleteTankDimensionsByIdListResult : <any>null;
        return data;
    }
}

export class EvolveDeleteTankDimensionsByIdListResponse extends DeleteTankDimensionsByIdListResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveDeleteTankDimensionsByIdListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveDeleteTankDimensionsByIdListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class DeleteTankDimensionsByIdListRequest extends WcfProxyUserDetails {
    tankDimensionIds?: string[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["tankDimensionIds"])) {
                this.tankDimensionIds = [] as any;
                for (let item of _data["tankDimensionIds"])
                    this.tankDimensionIds!.push(item);
            }
            else {
                this.tankDimensionIds = <any>null;
            }
        }
    }

    static fromJS(data: any): DeleteTankDimensionsByIdListRequest {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteTankDimensionsByIdListRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.tankDimensionIds)) {
            data["tankDimensionIds"] = [];
            for (let item of this.tankDimensionIds)
                data["tankDimensionIds"].push(item);
        }
        super.toJSON(data);
        return data;
    }
}

export class EvolveDeleteTankDimensionsByIdListRequest extends DeleteTankDimensionsByIdListRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveDeleteTankDimensionsByIdListRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveDeleteTankDimensionsByIdListRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveAuditHistoryByOptionsResponse {
    retrieveAuditHistoryByOptionsResult?: AuditListResult | null;

    init(_data?: any) {
        if (_data) {
            this.retrieveAuditHistoryByOptionsResult = _data["retrieveAuditHistoryByOptionsResult"] ? AuditListResult.fromJS(_data["retrieveAuditHistoryByOptionsResult"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveAuditHistoryByOptionsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveAuditHistoryByOptionsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["retrieveAuditHistoryByOptionsResult"] = this.retrieveAuditHistoryByOptionsResult ? this.retrieveAuditHistoryByOptionsResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveRetrieveAuditHistoryByOptionsResponse extends RetrieveAuditHistoryByOptionsResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveAuditHistoryByOptionsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveAuditHistoryByOptionsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class BaseListResultOfAuditRecord {
    records?: AuditRecord[] | null;
    totalRecords?: number | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["records"])) {
                this.records = [] as any;
                for (let item of _data["records"])
                    this.records!.push(AuditRecord.fromJS(item));
            }
            else {
                this.records = <any>null;
            }
            this.totalRecords = _data["totalRecords"] !== undefined ? _data["totalRecords"] : <any>null;
        }
    }

    static fromJS(data: any): BaseListResultOfAuditRecord {
        data = typeof data === 'object' ? data : {};
        let result = new BaseListResultOfAuditRecord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.records)) {
            data["records"] = [];
            for (let item of this.records)
                data["records"].push(item.toJSON());
        }
        data["totalRecords"] = this.totalRecords !== undefined ? this.totalRecords : <any>null;
        return data;
    }
}

export class AuditListResult extends BaseListResultOfAuditRecord {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): AuditListResult {
        data = typeof data === 'object' ? data : {};
        let result = new AuditListResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class AuditRecord {
    username?: string | null;
    timestamp?: Date;
    detailRecords?: AuditDetailRecord[] | null;

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"] !== undefined ? _data["username"] : <any>null;
            this.timestamp = _data["timestamp"] ? new Date(_data["timestamp"].toString()) : <any>null;
            if (Array.isArray(_data["detailRecords"])) {
                this.detailRecords = [] as any;
                for (let item of _data["detailRecords"])
                    this.detailRecords!.push(AuditDetailRecord.fromJS(item));
            }
            else {
                this.detailRecords = <any>null;
            }
        }
    }

    static fromJS(data: any): AuditRecord {
        data = typeof data === 'object' ? data : {};
        let result = new AuditRecord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username !== undefined ? this.username : <any>null;
        data["timestamp"] = this.timestamp ? this.timestamp.toISOString() : <any>null;
        if (Array.isArray(this.detailRecords)) {
            data["detailRecords"] = [];
            for (let item of this.detailRecords)
                data["detailRecords"].push(item.toJSON());
        }
        return data;
    }
}

export class AuditDetailRecord {
    description?: string | null;
    actionType?: AuditHistoryActionType;
    fieldName?: string | null;
    beforeValue?: string | null;
    afterValue?: string | null;
    type?: AuditType;

    init(_data?: any) {
        if (_data) {
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.actionType = _data["actionType"] !== undefined ? _data["actionType"] : <any>null;
            this.fieldName = _data["fieldName"] !== undefined ? _data["fieldName"] : <any>null;
            this.beforeValue = _data["beforeValue"] !== undefined ? _data["beforeValue"] : <any>null;
            this.afterValue = _data["afterValue"] !== undefined ? _data["afterValue"] : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
        }
    }

    static fromJS(data: any): AuditDetailRecord {
        data = typeof data === 'object' ? data : {};
        let result = new AuditDetailRecord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["actionType"] = this.actionType !== undefined ? this.actionType : <any>null;
        data["fieldName"] = this.fieldName !== undefined ? this.fieldName : <any>null;
        data["beforeValue"] = this.beforeValue !== undefined ? this.beforeValue : <any>null;
        data["afterValue"] = this.afterValue !== undefined ? this.afterValue : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        return data;
    }
}

export class RetrieveAuditHistoryByOptionsRequest extends WcfProxyUserDetails {
    domainId?: string;
    type?: AuditType;
    pageIndex?: number;
    itemsPerPage?: number;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.pageIndex = _data["pageIndex"] !== undefined ? _data["pageIndex"] : <any>null;
            this.itemsPerPage = _data["itemsPerPage"] !== undefined ? _data["itemsPerPage"] : <any>null;
        }
    }

    static fromJS(data: any): RetrieveAuditHistoryByOptionsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveAuditHistoryByOptionsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["pageIndex"] = this.pageIndex !== undefined ? this.pageIndex : <any>null;
        data["itemsPerPage"] = this.itemsPerPage !== undefined ? this.itemsPerPage : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveAuditHistoryByOptionsRequest extends RetrieveAuditHistoryByOptionsRequest {
    /** This is to replace domainId which has been incorrectly generated by the legacy service code.
Someone must have copy/pasted a method stub in the WCF service but forgot to change the name from DomainId to
TransactionId.
             */
    transactionId?: string;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.transactionId = _data["transactionId"] !== undefined ? _data["transactionId"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveRetrieveAuditHistoryByOptionsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveAuditHistoryByOptionsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transactionId"] = this.transactionId !== undefined ? this.transactionId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class RetrieveDomainEditComponentsByIdResponse {
    retrieveDomainEditComponentsByIdResult?: RetrieveDomainEditComponentsResult | null;

    init(_data?: any) {
        if (_data) {
            this.retrieveDomainEditComponentsByIdResult = _data["retrieveDomainEditComponentsByIdResult"] ? RetrieveDomainEditComponentsResult.fromJS(_data["retrieveDomainEditComponentsByIdResult"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveDomainEditComponentsByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveDomainEditComponentsByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["retrieveDomainEditComponentsByIdResult"] = this.retrieveDomainEditComponentsByIdResult ? this.retrieveDomainEditComponentsByIdResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveRetrieveDomainEditComponentsByIdResponse extends RetrieveDomainEditComponentsByIdResponse {
    dataChannelTemplates?: DataChannelTemplateDetail[] | null;
    eventRuleGroups?: EventRuleGroupInfo[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["dataChannelTemplates"])) {
                this.dataChannelTemplates = [] as any;
                for (let item of _data["dataChannelTemplates"])
                    this.dataChannelTemplates!.push(DataChannelTemplateDetail.fromJS(item));
            }
            else {
                this.dataChannelTemplates = <any>null;
            }
            if (Array.isArray(_data["eventRuleGroups"])) {
                this.eventRuleGroups = [] as any;
                for (let item of _data["eventRuleGroups"])
                    this.eventRuleGroups!.push(EventRuleGroupInfo.fromJS(item));
            }
            else {
                this.eventRuleGroups = <any>null;
            }
        }
    }

    static fromJS(data: any): EvolveRetrieveDomainEditComponentsByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveDomainEditComponentsByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dataChannelTemplates)) {
            data["dataChannelTemplates"] = [];
            for (let item of this.dataChannelTemplates)
                data["dataChannelTemplates"].push(item.toJSON());
        }
        if (Array.isArray(this.eventRuleGroups)) {
            data["eventRuleGroups"] = [];
            for (let item of this.eventRuleGroups)
                data["eventRuleGroups"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export class DataChannelTemplateDetail {
    dataChannelTemplateId?: string;
    domainId?: string | null;
    description?: string | null;
    dataChannelType?: DataChannelType;
    manufacturer?: string | null;
    modelNumber?: string | null;
    rawUnits?: RawUnitType | null;
    scalingMode?: ScalingModeType | null;
    rawUnitsText?: string | null;
    rawUnitsAtFullScale?: number | null;
    rawUnitsAtZero?: number | null;
    rawUnitsAtOverRange?: number | null;
    rawUnitsAtScaledMax?: number | null;
    rawUnitsAtScaledMin?: number | null;
    rawUnitsAtUnderRange?: number | null;
    usePrescaling?: boolean;
    useLimits?: boolean;
    scaledMax?: number | null;
    scaledMin?: number | null;
    scaledUnits?: string | null;
    sensorVoltage?: SensorLoopVoltage | null;
    sensorWakeUp?: number | null;

    init(_data?: any) {
        if (_data) {
            this.dataChannelTemplateId = _data["dataChannelTemplateId"] !== undefined ? _data["dataChannelTemplateId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.dataChannelType = _data["dataChannelType"] !== undefined ? _data["dataChannelType"] : <any>null;
            this.manufacturer = _data["manufacturer"] !== undefined ? _data["manufacturer"] : <any>null;
            this.modelNumber = _data["modelNumber"] !== undefined ? _data["modelNumber"] : <any>null;
            this.rawUnits = _data["rawUnits"] !== undefined ? _data["rawUnits"] : <any>null;
            this.scalingMode = _data["scalingMode"] !== undefined ? _data["scalingMode"] : <any>null;
            this.rawUnitsText = _data["rawUnitsText"] !== undefined ? _data["rawUnitsText"] : <any>null;
            this.rawUnitsAtFullScale = _data["rawUnitsAtFullScale"] !== undefined ? _data["rawUnitsAtFullScale"] : <any>null;
            this.rawUnitsAtZero = _data["rawUnitsAtZero"] !== undefined ? _data["rawUnitsAtZero"] : <any>null;
            this.rawUnitsAtOverRange = _data["rawUnitsAtOverRange"] !== undefined ? _data["rawUnitsAtOverRange"] : <any>null;
            this.rawUnitsAtScaledMax = _data["rawUnitsAtScaledMax"] !== undefined ? _data["rawUnitsAtScaledMax"] : <any>null;
            this.rawUnitsAtScaledMin = _data["rawUnitsAtScaledMin"] !== undefined ? _data["rawUnitsAtScaledMin"] : <any>null;
            this.rawUnitsAtUnderRange = _data["rawUnitsAtUnderRange"] !== undefined ? _data["rawUnitsAtUnderRange"] : <any>null;
            this.usePrescaling = _data["usePrescaling"] !== undefined ? _data["usePrescaling"] : <any>null;
            this.useLimits = _data["useLimits"] !== undefined ? _data["useLimits"] : <any>null;
            this.scaledMax = _data["scaledMax"] !== undefined ? _data["scaledMax"] : <any>null;
            this.scaledMin = _data["scaledMin"] !== undefined ? _data["scaledMin"] : <any>null;
            this.scaledUnits = _data["scaledUnits"] !== undefined ? _data["scaledUnits"] : <any>null;
            this.sensorVoltage = _data["sensorVoltage"] !== undefined ? _data["sensorVoltage"] : <any>null;
            this.sensorWakeUp = _data["sensorWakeUp"] !== undefined ? _data["sensorWakeUp"] : <any>null;
        }
    }

    static fromJS(data: any): DataChannelTemplateDetail {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelTemplateDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelTemplateId"] = this.dataChannelTemplateId !== undefined ? this.dataChannelTemplateId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["dataChannelType"] = this.dataChannelType !== undefined ? this.dataChannelType : <any>null;
        data["manufacturer"] = this.manufacturer !== undefined ? this.manufacturer : <any>null;
        data["modelNumber"] = this.modelNumber !== undefined ? this.modelNumber : <any>null;
        data["rawUnits"] = this.rawUnits !== undefined ? this.rawUnits : <any>null;
        data["scalingMode"] = this.scalingMode !== undefined ? this.scalingMode : <any>null;
        data["rawUnitsText"] = this.rawUnitsText !== undefined ? this.rawUnitsText : <any>null;
        data["rawUnitsAtFullScale"] = this.rawUnitsAtFullScale !== undefined ? this.rawUnitsAtFullScale : <any>null;
        data["rawUnitsAtZero"] = this.rawUnitsAtZero !== undefined ? this.rawUnitsAtZero : <any>null;
        data["rawUnitsAtOverRange"] = this.rawUnitsAtOverRange !== undefined ? this.rawUnitsAtOverRange : <any>null;
        data["rawUnitsAtScaledMax"] = this.rawUnitsAtScaledMax !== undefined ? this.rawUnitsAtScaledMax : <any>null;
        data["rawUnitsAtScaledMin"] = this.rawUnitsAtScaledMin !== undefined ? this.rawUnitsAtScaledMin : <any>null;
        data["rawUnitsAtUnderRange"] = this.rawUnitsAtUnderRange !== undefined ? this.rawUnitsAtUnderRange : <any>null;
        data["usePrescaling"] = this.usePrescaling !== undefined ? this.usePrescaling : <any>null;
        data["useLimits"] = this.useLimits !== undefined ? this.useLimits : <any>null;
        data["scaledMax"] = this.scaledMax !== undefined ? this.scaledMax : <any>null;
        data["scaledMin"] = this.scaledMin !== undefined ? this.scaledMin : <any>null;
        data["scaledUnits"] = this.scaledUnits !== undefined ? this.scaledUnits : <any>null;
        data["sensorVoltage"] = this.sensorVoltage !== undefined ? this.sensorVoltage : <any>null;
        data["sensorWakeUp"] = this.sensorWakeUp !== undefined ? this.sensorWakeUp : <any>null;
        return data;
    }
}

export enum ScalingModeType {
    NotSet = 1,
    Linear = 2,
    Ratio = 3,
    Mapped = 4,
    Prescaled = 5,
}

export enum SensorLoopVoltage {
    FifteenVolts = 15,
    TwentyThreeVolts = 23,
}

export class EventRuleGroupInfo {
    eventRuleGroupId?: number;
    description?: string | null;
    assetTypes?: AssetType[] | null;

    init(_data?: any) {
        if (_data) {
            this.eventRuleGroupId = _data["eventRuleGroupId"] !== undefined ? _data["eventRuleGroupId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            if (Array.isArray(_data["assetTypes"])) {
                this.assetTypes = [] as any;
                for (let item of _data["assetTypes"])
                    this.assetTypes!.push(item);
            }
            else {
                this.assetTypes = <any>null;
            }
        }
    }

    static fromJS(data: any): EventRuleGroupInfo {
        data = typeof data === 'object' ? data : {};
        let result = new EventRuleGroupInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["eventRuleGroupId"] = this.eventRuleGroupId !== undefined ? this.eventRuleGroupId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        if (Array.isArray(this.assetTypes)) {
            data["assetTypes"] = [];
            for (let item of this.assetTypes)
                data["assetTypes"].push(item);
        }
        return data;
    }
}

export class BaseEditComponentsResultOfEditDomain {
    editObject?: EditDomain | null;
    areEditComponentsLoaded?: boolean;

    init(_data?: any) {
        if (_data) {
            this.editObject = _data["editObject"] ? EditDomain.fromJS(_data["editObject"]) : <any>null;
            this.areEditComponentsLoaded = _data["areEditComponentsLoaded"] !== undefined ? _data["areEditComponentsLoaded"] : <any>null;
        }
    }

    static fromJS(data: any): BaseEditComponentsResultOfEditDomain {
        data = typeof data === 'object' ? data : {};
        let result = new BaseEditComponentsResultOfEditDomain();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["editObject"] = this.editObject ? this.editObject.toJSON() : <any>null;
        data["areEditComponentsLoaded"] = this.areEditComponentsLoaded !== undefined ? this.areEditComponentsLoaded : <any>null;
        return data;
    }
}

export class RetrieveDomainEditComponentsResult extends BaseEditComponentsResultOfEditDomain {
    domains?: DomainInfoRecord[] | null;
    timeZones?: TimezoneInfo[] | null;
    ftpDomains?: FtpDomainInfo[] | null;
    assetTitleTemplates?: AssetTitleTemplateInfo[] | null;
    assetSummaryTemplates?: AssetSummaryTemplateInfo[] | null;
    rosters?: DataChannelEventRuleRosterInfo[] | null;
    eventRuleGroups?: EventRuleGroupInfo[] | null;
    timeAdjustment?: number | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["domains"])) {
                this.domains = [] as any;
                for (let item of _data["domains"])
                    this.domains!.push(DomainInfoRecord.fromJS(item));
            }
            else {
                this.domains = <any>null;
            }
            if (Array.isArray(_data["timeZones"])) {
                this.timeZones = [] as any;
                for (let item of _data["timeZones"])
                    this.timeZones!.push(TimezoneInfo.fromJS(item));
            }
            else {
                this.timeZones = <any>null;
            }
            if (Array.isArray(_data["ftpDomains"])) {
                this.ftpDomains = [] as any;
                for (let item of _data["ftpDomains"])
                    this.ftpDomains!.push(FtpDomainInfo.fromJS(item));
            }
            else {
                this.ftpDomains = <any>null;
            }
            if (Array.isArray(_data["assetTitleTemplates"])) {
                this.assetTitleTemplates = [] as any;
                for (let item of _data["assetTitleTemplates"])
                    this.assetTitleTemplates!.push(AssetTitleTemplateInfo.fromJS(item));
            }
            else {
                this.assetTitleTemplates = <any>null;
            }
            if (Array.isArray(_data["assetSummaryTemplates"])) {
                this.assetSummaryTemplates = [] as any;
                for (let item of _data["assetSummaryTemplates"])
                    this.assetSummaryTemplates!.push(AssetSummaryTemplateInfo.fromJS(item));
            }
            else {
                this.assetSummaryTemplates = <any>null;
            }
            if (Array.isArray(_data["rosters"])) {
                this.rosters = [] as any;
                for (let item of _data["rosters"])
                    this.rosters!.push(DataChannelEventRuleRosterInfo.fromJS(item));
            }
            else {
                this.rosters = <any>null;
            }
            if (Array.isArray(_data["eventRuleGroups"])) {
                this.eventRuleGroups = [] as any;
                for (let item of _data["eventRuleGroups"])
                    this.eventRuleGroups!.push(EventRuleGroupInfo.fromJS(item));
            }
            else {
                this.eventRuleGroups = <any>null;
            }
            this.timeAdjustment = _data["timeAdjustment"] !== undefined ? _data["timeAdjustment"] : <any>null;
        }
    }

    static fromJS(data: any): RetrieveDomainEditComponentsResult {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveDomainEditComponentsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.domains)) {
            data["domains"] = [];
            for (let item of this.domains)
                data["domains"].push(item.toJSON());
        }
        if (Array.isArray(this.timeZones)) {
            data["timeZones"] = [];
            for (let item of this.timeZones)
                data["timeZones"].push(item.toJSON());
        }
        if (Array.isArray(this.ftpDomains)) {
            data["ftpDomains"] = [];
            for (let item of this.ftpDomains)
                data["ftpDomains"].push(item.toJSON());
        }
        if (Array.isArray(this.assetTitleTemplates)) {
            data["assetTitleTemplates"] = [];
            for (let item of this.assetTitleTemplates)
                data["assetTitleTemplates"].push(item.toJSON());
        }
        if (Array.isArray(this.assetSummaryTemplates)) {
            data["assetSummaryTemplates"] = [];
            for (let item of this.assetSummaryTemplates)
                data["assetSummaryTemplates"].push(item.toJSON());
        }
        if (Array.isArray(this.rosters)) {
            data["rosters"] = [];
            for (let item of this.rosters)
                data["rosters"].push(item.toJSON());
        }
        if (Array.isArray(this.eventRuleGroups)) {
            data["eventRuleGroups"] = [];
            for (let item of this.eventRuleGroups)
                data["eventRuleGroups"].push(item.toJSON());
        }
        data["timeAdjustment"] = this.timeAdjustment !== undefined ? this.timeAdjustment : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class DomainInfoRecord {
    domainId?: string;
    name?: string | null;
    domainLevel?: number | null;
    parentDomainName?: string | null;
    screenTitle?: string | null;
    disableUserLogins?: boolean | null;
    ftpFileFormat?: FtpFileFormat | null;
    isDomainDeleted?: boolean | null;
    isFtpProcessingEnabled?: boolean | null;
    defaultEventStateDescription?: string | null;

    init(_data?: any) {
        if (_data) {
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.domainLevel = _data["domainLevel"] !== undefined ? _data["domainLevel"] : <any>null;
            this.parentDomainName = _data["parentDomainName"] !== undefined ? _data["parentDomainName"] : <any>null;
            this.screenTitle = _data["screenTitle"] !== undefined ? _data["screenTitle"] : <any>null;
            this.disableUserLogins = _data["disableUserLogins"] !== undefined ? _data["disableUserLogins"] : <any>null;
            this.ftpFileFormat = _data["ftpFileFormat"] !== undefined ? _data["ftpFileFormat"] : <any>null;
            this.isDomainDeleted = _data["isDomainDeleted"] !== undefined ? _data["isDomainDeleted"] : <any>null;
            this.isFtpProcessingEnabled = _data["isFtpProcessingEnabled"] !== undefined ? _data["isFtpProcessingEnabled"] : <any>null;
            this.defaultEventStateDescription = _data["defaultEventStateDescription"] !== undefined ? _data["defaultEventStateDescription"] : <any>null;
        }
    }

    static fromJS(data: any): DomainInfoRecord {
        data = typeof data === 'object' ? data : {};
        let result = new DomainInfoRecord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["domainLevel"] = this.domainLevel !== undefined ? this.domainLevel : <any>null;
        data["parentDomainName"] = this.parentDomainName !== undefined ? this.parentDomainName : <any>null;
        data["screenTitle"] = this.screenTitle !== undefined ? this.screenTitle : <any>null;
        data["disableUserLogins"] = this.disableUserLogins !== undefined ? this.disableUserLogins : <any>null;
        data["ftpFileFormat"] = this.ftpFileFormat !== undefined ? this.ftpFileFormat : <any>null;
        data["isDomainDeleted"] = this.isDomainDeleted !== undefined ? this.isDomainDeleted : <any>null;
        data["isFtpProcessingEnabled"] = this.isFtpProcessingEnabled !== undefined ? this.isFtpProcessingEnabled : <any>null;
        data["defaultEventStateDescription"] = this.defaultEventStateDescription !== undefined ? this.defaultEventStateDescription : <any>null;
        return data;
    }
}

export class FtpDomainInfo {
    targetDomainId?: string;
    targetDomainName?: string | null;
    autoGenerateFtpId?: boolean;
    targetDomainFtpFileFormat?: FtpFileFormat;

    init(_data?: any) {
        if (_data) {
            this.targetDomainId = _data["targetDomainId"] !== undefined ? _data["targetDomainId"] : <any>null;
            this.targetDomainName = _data["targetDomainName"] !== undefined ? _data["targetDomainName"] : <any>null;
            this.autoGenerateFtpId = _data["autoGenerateFtpId"] !== undefined ? _data["autoGenerateFtpId"] : <any>null;
            this.targetDomainFtpFileFormat = _data["targetDomainFtpFileFormat"] !== undefined ? _data["targetDomainFtpFileFormat"] : <any>null;
        }
    }

    static fromJS(data: any): FtpDomainInfo {
        data = typeof data === 'object' ? data : {};
        let result = new FtpDomainInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["targetDomainId"] = this.targetDomainId !== undefined ? this.targetDomainId : <any>null;
        data["targetDomainName"] = this.targetDomainName !== undefined ? this.targetDomainName : <any>null;
        data["autoGenerateFtpId"] = this.autoGenerateFtpId !== undefined ? this.autoGenerateFtpId : <any>null;
        data["targetDomainFtpFileFormat"] = this.targetDomainFtpFileFormat !== undefined ? this.targetDomainFtpFileFormat : <any>null;
        return data;
    }
}

export class AssetTitleTemplateInfo {
    name?: string | null;
    title?: string | null;
    integrationProfile?: IntegrationProfileType | null;
    excludedProfileIds?: string | null;

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.title = _data["title"] !== undefined ? _data["title"] : <any>null;
            this.integrationProfile = _data["integrationProfile"] !== undefined ? _data["integrationProfile"] : <any>null;
            this.excludedProfileIds = _data["excludedProfileIds"] !== undefined ? _data["excludedProfileIds"] : <any>null;
        }
    }

    static fromJS(data: any): AssetTitleTemplateInfo {
        data = typeof data === 'object' ? data : {};
        let result = new AssetTitleTemplateInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["integrationProfile"] = this.integrationProfile !== undefined ? this.integrationProfile : <any>null;
        data["excludedProfileIds"] = this.excludedProfileIds !== undefined ? this.excludedProfileIds : <any>null;
        return data;
    }
}

export class AssetSummaryTemplateInfo {
    name?: string | null;
    title?: string | null;
    integrationProfile?: IntegrationProfileType | null;
    excludedProfileIds?: string | null;

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.title = _data["title"] !== undefined ? _data["title"] : <any>null;
            this.integrationProfile = _data["integrationProfile"] !== undefined ? _data["integrationProfile"] : <any>null;
            this.excludedProfileIds = _data["excludedProfileIds"] !== undefined ? _data["excludedProfileIds"] : <any>null;
        }
    }

    static fromJS(data: any): AssetSummaryTemplateInfo {
        data = typeof data === 'object' ? data : {};
        let result = new AssetSummaryTemplateInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["integrationProfile"] = this.integrationProfile !== undefined ? this.integrationProfile : <any>null;
        data["excludedProfileIds"] = this.excludedProfileIds !== undefined ? this.excludedProfileIds : <any>null;
        return data;
    }
}

export class DataChannelEventRuleRosterInfo {
    rosterId?: number;
    description?: string | null;

    init(_data?: any) {
        if (_data) {
            this.rosterId = _data["rosterId"] !== undefined ? _data["rosterId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
        }
    }

    static fromJS(data: any): DataChannelEventRuleRosterInfo {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelEventRuleRosterInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rosterId"] = this.rosterId !== undefined ? this.rosterId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        return data;
    }
}

export class EditDomain extends EditBase {
    id?: string;
    name?: string | null;
    displayName?: string | null;
    parentDomainId?: string | null;
    screenTitle?: string | null;
    customerReference?: string | null;
    logo?: string | null;
    isEventProcessingEnabled?: boolean;
    isUserLoginsDisabled?: boolean;
    assetTitleTemplate?: string | null;
    outboundEmailFromAddress?: string | null;
    assetSummaryTemplate?: string | null;
    customPropertyTypes?: EditCustomPropertyType[] | null;
    domainTimeZoneIds?: number[] | null;
    maxGraphDays?: number | null;
    applicationTimeout?: string;
    isOrphanChannelScanEnabled?: boolean;
    defaultEventStateDescription?: string | null;
    defaultForecastMode?: ForecastModeType | null;
    defaultSiteId?: string | null;
    defaultSite?: SiteInfoRecord | null;
    isLogoChanged?: boolean;
    forecastInProgress?: boolean;
    assetEventRowColoringEnabled?: boolean;
    publishedDomainIds?: string[] | null;
    isRosterProcessingEnabled?: boolean;
    isFtpProcessingEnabled?: boolean;
    ftpTimeZoneId?: number | null;
    ftpOption?: FtpOption;
    ftpFileFormat?: FtpFileFormat;
    autoGenerateFtpId?: boolean;
    showHighLowForecast?: boolean;
    ftpDomains?: EditFtpDomain[] | null;
    integrationProfile?: IntegrationProfileType | null;
    ftpFileName?: string | null;
    referenceDocumentUrlPrefix?: string | null;
    cloverRTUMajorNumber?: number | null;
    canSubscribeToPublishedDataChannel?: boolean;
    isDeliveryForecasted?: boolean;
    isPublishDataChannelNotificationRoster?: boolean;
    publishDataChannelNotificationRosterId?: number | null;
    isQuickPublishDataChannelNotificationRoster?: boolean;
    quickPublishDataChannelNotificationRosterId?: number | null;
    isFederatedSecurityEnabled?: boolean;
    federatedSecurityAuthenticationEndpoint?: string | null;
    federatedSecurityReplyServiceEndpoint?: string | null;
    federatedUserIDSuffix?: string | null;
    itemsPerAssetSummaryPage?: number | null;
    isDataChannelEventRulesAutoLinked?: boolean;
    defaultRTUEventRuleGroupId?: number | null;
    mapType?: MapType;
    totalizedReadingTimeToleranceInMin?: number;
    useAssetSummaryTable?: boolean;
    isAudibleEventNotificationEnabled?: boolean;
    authenticationKey?: string | null;
    authenticationType?: CustomerEndpointAuthenticationType;
    certificateFileName?: string | null;
    certificateFileData?: string | null;
    certificatePassword?: string | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.displayName = _data["displayName"] !== undefined ? _data["displayName"] : <any>null;
            this.parentDomainId = _data["parentDomainId"] !== undefined ? _data["parentDomainId"] : <any>null;
            this.screenTitle = _data["screenTitle"] !== undefined ? _data["screenTitle"] : <any>null;
            this.customerReference = _data["customerReference"] !== undefined ? _data["customerReference"] : <any>null;
            this.logo = _data["logo"] !== undefined ? _data["logo"] : <any>null;
            this.isEventProcessingEnabled = _data["isEventProcessingEnabled"] !== undefined ? _data["isEventProcessingEnabled"] : <any>null;
            this.isUserLoginsDisabled = _data["isUserLoginsDisabled"] !== undefined ? _data["isUserLoginsDisabled"] : <any>null;
            this.assetTitleTemplate = _data["assetTitleTemplate"] !== undefined ? _data["assetTitleTemplate"] : <any>null;
            this.outboundEmailFromAddress = _data["outboundEmailFromAddress"] !== undefined ? _data["outboundEmailFromAddress"] : <any>null;
            this.assetSummaryTemplate = _data["assetSummaryTemplate"] !== undefined ? _data["assetSummaryTemplate"] : <any>null;
            if (Array.isArray(_data["customPropertyTypes"])) {
                this.customPropertyTypes = [] as any;
                for (let item of _data["customPropertyTypes"])
                    this.customPropertyTypes!.push(EditCustomPropertyType.fromJS(item));
            }
            else {
                this.customPropertyTypes = <any>null;
            }
            if (Array.isArray(_data["domainTimeZoneIds"])) {
                this.domainTimeZoneIds = [] as any;
                for (let item of _data["domainTimeZoneIds"])
                    this.domainTimeZoneIds!.push(item);
            }
            else {
                this.domainTimeZoneIds = <any>null;
            }
            this.maxGraphDays = _data["maxGraphDays"] !== undefined ? _data["maxGraphDays"] : <any>null;
            this.applicationTimeout = _data["applicationTimeout"] !== undefined ? _data["applicationTimeout"] : <any>null;
            this.isOrphanChannelScanEnabled = _data["isOrphanChannelScanEnabled"] !== undefined ? _data["isOrphanChannelScanEnabled"] : <any>null;
            this.defaultEventStateDescription = _data["defaultEventStateDescription"] !== undefined ? _data["defaultEventStateDescription"] : <any>null;
            this.defaultForecastMode = _data["defaultForecastMode"] !== undefined ? _data["defaultForecastMode"] : <any>null;
            this.defaultSiteId = _data["defaultSiteId"] !== undefined ? _data["defaultSiteId"] : <any>null;
            this.defaultSite = _data["defaultSite"] ? SiteInfoRecord.fromJS(_data["defaultSite"]) : <any>null;
            this.isLogoChanged = _data["isLogoChanged"] !== undefined ? _data["isLogoChanged"] : <any>null;
            this.forecastInProgress = _data["forecastInProgress"] !== undefined ? _data["forecastInProgress"] : <any>null;
            this.assetEventRowColoringEnabled = _data["assetEventRowColoringEnabled"] !== undefined ? _data["assetEventRowColoringEnabled"] : <any>null;
            if (Array.isArray(_data["publishedDomainIds"])) {
                this.publishedDomainIds = [] as any;
                for (let item of _data["publishedDomainIds"])
                    this.publishedDomainIds!.push(item);
            }
            else {
                this.publishedDomainIds = <any>null;
            }
            this.isRosterProcessingEnabled = _data["isRosterProcessingEnabled"] !== undefined ? _data["isRosterProcessingEnabled"] : <any>null;
            this.isFtpProcessingEnabled = _data["isFtpProcessingEnabled"] !== undefined ? _data["isFtpProcessingEnabled"] : <any>null;
            this.ftpTimeZoneId = _data["ftpTimeZoneId"] !== undefined ? _data["ftpTimeZoneId"] : <any>null;
            this.ftpOption = _data["ftpOption"] !== undefined ? _data["ftpOption"] : <any>null;
            this.ftpFileFormat = _data["ftpFileFormat"] !== undefined ? _data["ftpFileFormat"] : <any>null;
            this.autoGenerateFtpId = _data["autoGenerateFtpId"] !== undefined ? _data["autoGenerateFtpId"] : <any>null;
            this.showHighLowForecast = _data["showHighLowForecast"] !== undefined ? _data["showHighLowForecast"] : <any>null;
            if (Array.isArray(_data["ftpDomains"])) {
                this.ftpDomains = [] as any;
                for (let item of _data["ftpDomains"])
                    this.ftpDomains!.push(EditFtpDomain.fromJS(item));
            }
            else {
                this.ftpDomains = <any>null;
            }
            this.integrationProfile = _data["integrationProfile"] !== undefined ? _data["integrationProfile"] : <any>null;
            this.ftpFileName = _data["ftpFileName"] !== undefined ? _data["ftpFileName"] : <any>null;
            this.referenceDocumentUrlPrefix = _data["referenceDocumentUrlPrefix"] !== undefined ? _data["referenceDocumentUrlPrefix"] : <any>null;
            this.cloverRTUMajorNumber = _data["cloverRTUMajorNumber"] !== undefined ? _data["cloverRTUMajorNumber"] : <any>null;
            this.canSubscribeToPublishedDataChannel = _data["canSubscribeToPublishedDataChannel"] !== undefined ? _data["canSubscribeToPublishedDataChannel"] : <any>null;
            this.isDeliveryForecasted = _data["isDeliveryForecasted"] !== undefined ? _data["isDeliveryForecasted"] : <any>null;
            this.isPublishDataChannelNotificationRoster = _data["isPublishDataChannelNotificationRoster"] !== undefined ? _data["isPublishDataChannelNotificationRoster"] : <any>null;
            this.publishDataChannelNotificationRosterId = _data["publishDataChannelNotificationRosterId"] !== undefined ? _data["publishDataChannelNotificationRosterId"] : <any>null;
            this.isQuickPublishDataChannelNotificationRoster = _data["isQuickPublishDataChannelNotificationRoster"] !== undefined ? _data["isQuickPublishDataChannelNotificationRoster"] : <any>null;
            this.quickPublishDataChannelNotificationRosterId = _data["quickPublishDataChannelNotificationRosterId"] !== undefined ? _data["quickPublishDataChannelNotificationRosterId"] : <any>null;
            this.isFederatedSecurityEnabled = _data["isFederatedSecurityEnabled"] !== undefined ? _data["isFederatedSecurityEnabled"] : <any>null;
            this.federatedSecurityAuthenticationEndpoint = _data["federatedSecurityAuthenticationEndpoint"] !== undefined ? _data["federatedSecurityAuthenticationEndpoint"] : <any>null;
            this.federatedSecurityReplyServiceEndpoint = _data["federatedSecurityReplyServiceEndpoint"] !== undefined ? _data["federatedSecurityReplyServiceEndpoint"] : <any>null;
            this.federatedUserIDSuffix = _data["federatedUserIDSuffix"] !== undefined ? _data["federatedUserIDSuffix"] : <any>null;
            this.itemsPerAssetSummaryPage = _data["itemsPerAssetSummaryPage"] !== undefined ? _data["itemsPerAssetSummaryPage"] : <any>null;
            this.isDataChannelEventRulesAutoLinked = _data["isDataChannelEventRulesAutoLinked"] !== undefined ? _data["isDataChannelEventRulesAutoLinked"] : <any>null;
            this.defaultRTUEventRuleGroupId = _data["defaultRTUEventRuleGroupId"] !== undefined ? _data["defaultRTUEventRuleGroupId"] : <any>null;
            this.mapType = _data["mapType"] !== undefined ? _data["mapType"] : <any>null;
            this.totalizedReadingTimeToleranceInMin = _data["totalizedReadingTimeToleranceInMin"] !== undefined ? _data["totalizedReadingTimeToleranceInMin"] : <any>null;
            this.useAssetSummaryTable = _data["useAssetSummaryTable"] !== undefined ? _data["useAssetSummaryTable"] : <any>null;
            this.isAudibleEventNotificationEnabled = _data["isAudibleEventNotificationEnabled"] !== undefined ? _data["isAudibleEventNotificationEnabled"] : <any>null;
            this.authenticationKey = _data["authenticationKey"] !== undefined ? _data["authenticationKey"] : <any>null;
            this.authenticationType = _data["authenticationType"] !== undefined ? _data["authenticationType"] : <any>null;
            this.certificateFileName = _data["certificateFileName"] !== undefined ? _data["certificateFileName"] : <any>null;
            this.certificateFileData = _data["certificateFileData"] !== undefined ? _data["certificateFileData"] : <any>null;
            this.certificatePassword = _data["certificatePassword"] !== undefined ? _data["certificatePassword"] : <any>null;
        }
    }

    static fromJS(data: any): EditDomain {
        data = typeof data === 'object' ? data : {};
        let result = new EditDomain();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : <any>null;
        data["parentDomainId"] = this.parentDomainId !== undefined ? this.parentDomainId : <any>null;
        data["screenTitle"] = this.screenTitle !== undefined ? this.screenTitle : <any>null;
        data["customerReference"] = this.customerReference !== undefined ? this.customerReference : <any>null;
        data["logo"] = this.logo !== undefined ? this.logo : <any>null;
        data["isEventProcessingEnabled"] = this.isEventProcessingEnabled !== undefined ? this.isEventProcessingEnabled : <any>null;
        data["isUserLoginsDisabled"] = this.isUserLoginsDisabled !== undefined ? this.isUserLoginsDisabled : <any>null;
        data["assetTitleTemplate"] = this.assetTitleTemplate !== undefined ? this.assetTitleTemplate : <any>null;
        data["outboundEmailFromAddress"] = this.outboundEmailFromAddress !== undefined ? this.outboundEmailFromAddress : <any>null;
        data["assetSummaryTemplate"] = this.assetSummaryTemplate !== undefined ? this.assetSummaryTemplate : <any>null;
        if (Array.isArray(this.customPropertyTypes)) {
            data["customPropertyTypes"] = [];
            for (let item of this.customPropertyTypes)
                data["customPropertyTypes"].push(item.toJSON());
        }
        if (Array.isArray(this.domainTimeZoneIds)) {
            data["domainTimeZoneIds"] = [];
            for (let item of this.domainTimeZoneIds)
                data["domainTimeZoneIds"].push(item);
        }
        data["maxGraphDays"] = this.maxGraphDays !== undefined ? this.maxGraphDays : <any>null;
        data["applicationTimeout"] = this.applicationTimeout !== undefined ? this.applicationTimeout : <any>null;
        data["isOrphanChannelScanEnabled"] = this.isOrphanChannelScanEnabled !== undefined ? this.isOrphanChannelScanEnabled : <any>null;
        data["defaultEventStateDescription"] = this.defaultEventStateDescription !== undefined ? this.defaultEventStateDescription : <any>null;
        data["defaultForecastMode"] = this.defaultForecastMode !== undefined ? this.defaultForecastMode : <any>null;
        data["defaultSiteId"] = this.defaultSiteId !== undefined ? this.defaultSiteId : <any>null;
        data["defaultSite"] = this.defaultSite ? this.defaultSite.toJSON() : <any>null;
        data["isLogoChanged"] = this.isLogoChanged !== undefined ? this.isLogoChanged : <any>null;
        data["forecastInProgress"] = this.forecastInProgress !== undefined ? this.forecastInProgress : <any>null;
        data["assetEventRowColoringEnabled"] = this.assetEventRowColoringEnabled !== undefined ? this.assetEventRowColoringEnabled : <any>null;
        if (Array.isArray(this.publishedDomainIds)) {
            data["publishedDomainIds"] = [];
            for (let item of this.publishedDomainIds)
                data["publishedDomainIds"].push(item);
        }
        data["isRosterProcessingEnabled"] = this.isRosterProcessingEnabled !== undefined ? this.isRosterProcessingEnabled : <any>null;
        data["isFtpProcessingEnabled"] = this.isFtpProcessingEnabled !== undefined ? this.isFtpProcessingEnabled : <any>null;
        data["ftpTimeZoneId"] = this.ftpTimeZoneId !== undefined ? this.ftpTimeZoneId : <any>null;
        data["ftpOption"] = this.ftpOption !== undefined ? this.ftpOption : <any>null;
        data["ftpFileFormat"] = this.ftpFileFormat !== undefined ? this.ftpFileFormat : <any>null;
        data["autoGenerateFtpId"] = this.autoGenerateFtpId !== undefined ? this.autoGenerateFtpId : <any>null;
        data["showHighLowForecast"] = this.showHighLowForecast !== undefined ? this.showHighLowForecast : <any>null;
        if (Array.isArray(this.ftpDomains)) {
            data["ftpDomains"] = [];
            for (let item of this.ftpDomains)
                data["ftpDomains"].push(item.toJSON());
        }
        data["integrationProfile"] = this.integrationProfile !== undefined ? this.integrationProfile : <any>null;
        data["ftpFileName"] = this.ftpFileName !== undefined ? this.ftpFileName : <any>null;
        data["referenceDocumentUrlPrefix"] = this.referenceDocumentUrlPrefix !== undefined ? this.referenceDocumentUrlPrefix : <any>null;
        data["cloverRTUMajorNumber"] = this.cloverRTUMajorNumber !== undefined ? this.cloverRTUMajorNumber : <any>null;
        data["canSubscribeToPublishedDataChannel"] = this.canSubscribeToPublishedDataChannel !== undefined ? this.canSubscribeToPublishedDataChannel : <any>null;
        data["isDeliveryForecasted"] = this.isDeliveryForecasted !== undefined ? this.isDeliveryForecasted : <any>null;
        data["isPublishDataChannelNotificationRoster"] = this.isPublishDataChannelNotificationRoster !== undefined ? this.isPublishDataChannelNotificationRoster : <any>null;
        data["publishDataChannelNotificationRosterId"] = this.publishDataChannelNotificationRosterId !== undefined ? this.publishDataChannelNotificationRosterId : <any>null;
        data["isQuickPublishDataChannelNotificationRoster"] = this.isQuickPublishDataChannelNotificationRoster !== undefined ? this.isQuickPublishDataChannelNotificationRoster : <any>null;
        data["quickPublishDataChannelNotificationRosterId"] = this.quickPublishDataChannelNotificationRosterId !== undefined ? this.quickPublishDataChannelNotificationRosterId : <any>null;
        data["isFederatedSecurityEnabled"] = this.isFederatedSecurityEnabled !== undefined ? this.isFederatedSecurityEnabled : <any>null;
        data["federatedSecurityAuthenticationEndpoint"] = this.federatedSecurityAuthenticationEndpoint !== undefined ? this.federatedSecurityAuthenticationEndpoint : <any>null;
        data["federatedSecurityReplyServiceEndpoint"] = this.federatedSecurityReplyServiceEndpoint !== undefined ? this.federatedSecurityReplyServiceEndpoint : <any>null;
        data["federatedUserIDSuffix"] = this.federatedUserIDSuffix !== undefined ? this.federatedUserIDSuffix : <any>null;
        data["itemsPerAssetSummaryPage"] = this.itemsPerAssetSummaryPage !== undefined ? this.itemsPerAssetSummaryPage : <any>null;
        data["isDataChannelEventRulesAutoLinked"] = this.isDataChannelEventRulesAutoLinked !== undefined ? this.isDataChannelEventRulesAutoLinked : <any>null;
        data["defaultRTUEventRuleGroupId"] = this.defaultRTUEventRuleGroupId !== undefined ? this.defaultRTUEventRuleGroupId : <any>null;
        data["mapType"] = this.mapType !== undefined ? this.mapType : <any>null;
        data["totalizedReadingTimeToleranceInMin"] = this.totalizedReadingTimeToleranceInMin !== undefined ? this.totalizedReadingTimeToleranceInMin : <any>null;
        data["useAssetSummaryTable"] = this.useAssetSummaryTable !== undefined ? this.useAssetSummaryTable : <any>null;
        data["isAudibleEventNotificationEnabled"] = this.isAudibleEventNotificationEnabled !== undefined ? this.isAudibleEventNotificationEnabled : <any>null;
        data["authenticationKey"] = this.authenticationKey !== undefined ? this.authenticationKey : <any>null;
        data["authenticationType"] = this.authenticationType !== undefined ? this.authenticationType : <any>null;
        data["certificateFileName"] = this.certificateFileName !== undefined ? this.certificateFileName : <any>null;
        data["certificateFileData"] = this.certificateFileData !== undefined ? this.certificateFileData : <any>null;
        data["certificatePassword"] = this.certificatePassword !== undefined ? this.certificatePassword : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EditCustomPropertyType extends EditBase {
    id?: string;
    name?: string | null;
    domainId?: string;
    alias?: string | null;
    dataType?: CustomPropertyDataType;
    minimum?: number | null;
    maximum?: number | null;
    precision?: number | null;
    listValues?: string | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.alias = _data["alias"] !== undefined ? _data["alias"] : <any>null;
            this.dataType = _data["dataType"] !== undefined ? _data["dataType"] : <any>null;
            this.minimum = _data["minimum"] !== undefined ? _data["minimum"] : <any>null;
            this.maximum = _data["maximum"] !== undefined ? _data["maximum"] : <any>null;
            this.precision = _data["precision"] !== undefined ? _data["precision"] : <any>null;
            this.listValues = _data["listValues"] !== undefined ? _data["listValues"] : <any>null;
        }
    }

    static fromJS(data: any): EditCustomPropertyType {
        data = typeof data === 'object' ? data : {};
        let result = new EditCustomPropertyType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["alias"] = this.alias !== undefined ? this.alias : <any>null;
        data["dataType"] = this.dataType !== undefined ? this.dataType : <any>null;
        data["minimum"] = this.minimum !== undefined ? this.minimum : <any>null;
        data["maximum"] = this.maximum !== undefined ? this.maximum : <any>null;
        data["precision"] = this.precision !== undefined ? this.precision : <any>null;
        data["listValues"] = this.listValues !== undefined ? this.listValues : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class SiteInfoRecord {
    siteId?: string;
    customerName?: string | null;
    siteNumber?: string | null;
    companyName?: string | null;
    address1?: string | null;
    address2?: string | null;
    address3?: string | null;
    city?: string | null;
    state?: string | null;
    country?: string | null;
    timeZoneName?: string | null;
    isReadOnly?: boolean;
    isFromExternalSource?: boolean;
    assetCount?: number;
    rtuCount?: number;

    init(_data?: any) {
        if (_data) {
            this.siteId = _data["siteId"] !== undefined ? _data["siteId"] : <any>null;
            this.customerName = _data["customerName"] !== undefined ? _data["customerName"] : <any>null;
            this.siteNumber = _data["siteNumber"] !== undefined ? _data["siteNumber"] : <any>null;
            this.companyName = _data["companyName"] !== undefined ? _data["companyName"] : <any>null;
            this.address1 = _data["address1"] !== undefined ? _data["address1"] : <any>null;
            this.address2 = _data["address2"] !== undefined ? _data["address2"] : <any>null;
            this.address3 = _data["address3"] !== undefined ? _data["address3"] : <any>null;
            this.city = _data["city"] !== undefined ? _data["city"] : <any>null;
            this.state = _data["state"] !== undefined ? _data["state"] : <any>null;
            this.country = _data["country"] !== undefined ? _data["country"] : <any>null;
            this.timeZoneName = _data["timeZoneName"] !== undefined ? _data["timeZoneName"] : <any>null;
            this.isReadOnly = _data["isReadOnly"] !== undefined ? _data["isReadOnly"] : <any>null;
            this.isFromExternalSource = _data["isFromExternalSource"] !== undefined ? _data["isFromExternalSource"] : <any>null;
            this.assetCount = _data["assetCount"] !== undefined ? _data["assetCount"] : <any>null;
            this.rtuCount = _data["rtuCount"] !== undefined ? _data["rtuCount"] : <any>null;
        }
    }

    static fromJS(data: any): SiteInfoRecord {
        data = typeof data === 'object' ? data : {};
        let result = new SiteInfoRecord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["siteId"] = this.siteId !== undefined ? this.siteId : <any>null;
        data["customerName"] = this.customerName !== undefined ? this.customerName : <any>null;
        data["siteNumber"] = this.siteNumber !== undefined ? this.siteNumber : <any>null;
        data["companyName"] = this.companyName !== undefined ? this.companyName : <any>null;
        data["address1"] = this.address1 !== undefined ? this.address1 : <any>null;
        data["address2"] = this.address2 !== undefined ? this.address2 : <any>null;
        data["address3"] = this.address3 !== undefined ? this.address3 : <any>null;
        data["city"] = this.city !== undefined ? this.city : <any>null;
        data["state"] = this.state !== undefined ? this.state : <any>null;
        data["country"] = this.country !== undefined ? this.country : <any>null;
        data["timeZoneName"] = this.timeZoneName !== undefined ? this.timeZoneName : <any>null;
        data["isReadOnly"] = this.isReadOnly !== undefined ? this.isReadOnly : <any>null;
        data["isFromExternalSource"] = this.isFromExternalSource !== undefined ? this.isFromExternalSource : <any>null;
        data["assetCount"] = this.assetCount !== undefined ? this.assetCount : <any>null;
        data["rtuCount"] = this.rtuCount !== undefined ? this.rtuCount : <any>null;
        return data;
    }
}

export enum FtpOption {
    None = 0,
    LatestReadingOnly = 1,
    AllReadings = 2,
}

export class EditFtpDomain extends EditBase {
    id?: string;
    sourceDomainId?: string;
    targetDomainId?: string;
    targetDomainName?: string | null;
    isEnabled?: boolean;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.sourceDomainId = _data["sourceDomainId"] !== undefined ? _data["sourceDomainId"] : <any>null;
            this.targetDomainId = _data["targetDomainId"] !== undefined ? _data["targetDomainId"] : <any>null;
            this.targetDomainName = _data["targetDomainName"] !== undefined ? _data["targetDomainName"] : <any>null;
            this.isEnabled = _data["isEnabled"] !== undefined ? _data["isEnabled"] : <any>null;
        }
    }

    static fromJS(data: any): EditFtpDomain {
        data = typeof data === 'object' ? data : {};
        let result = new EditFtpDomain();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["sourceDomainId"] = this.sourceDomainId !== undefined ? this.sourceDomainId : <any>null;
        data["targetDomainId"] = this.targetDomainId !== undefined ? this.targetDomainId : <any>null;
        data["targetDomainName"] = this.targetDomainName !== undefined ? this.targetDomainName : <any>null;
        data["isEnabled"] = this.isEnabled !== undefined ? this.isEnabled : <any>null;
        super.toJSON(data);
        return data;
    }
}

export enum MapType {
    Google = 0,
    Baidu = 1,
    Mapbox = 2,
}

export enum CustomerEndpointAuthenticationType {
    None = 0,
    X509 = 1,
    ApiKey = 2,
}

export class RetrieveDomainEditComponentsByIdRequest extends WcfProxyUserDetails {
    domainId?: string;
    loadEditComponents?: boolean;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.loadEditComponents = _data["loadEditComponents"] !== undefined ? _data["loadEditComponents"] : <any>null;
        }
    }

    static fromJS(data: any): RetrieveDomainEditComponentsByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveDomainEditComponentsByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["loadEditComponents"] = this.loadEditComponents !== undefined ? this.loadEditComponents : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveDomainEditComponentsByIdRequest extends RetrieveDomainEditComponentsByIdRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveDomainEditComponentsByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveDomainEditComponentsByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveDomainInfoRecordsByParentDomainIdResponse {
    retrieveDomainInfoRecordsByParentDomainIdResult?: DomainInfoRecord[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["retrieveDomainInfoRecordsByParentDomainIdResult"])) {
                this.retrieveDomainInfoRecordsByParentDomainIdResult = [] as any;
                for (let item of _data["retrieveDomainInfoRecordsByParentDomainIdResult"])
                    this.retrieveDomainInfoRecordsByParentDomainIdResult!.push(DomainInfoRecord.fromJS(item));
            }
            else {
                this.retrieveDomainInfoRecordsByParentDomainIdResult = <any>null;
            }
        }
    }

    static fromJS(data: any): RetrieveDomainInfoRecordsByParentDomainIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveDomainInfoRecordsByParentDomainIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.retrieveDomainInfoRecordsByParentDomainIdResult)) {
            data["retrieveDomainInfoRecordsByParentDomainIdResult"] = [];
            for (let item of this.retrieveDomainInfoRecordsByParentDomainIdResult)
                data["retrieveDomainInfoRecordsByParentDomainIdResult"].push(item.toJSON());
        }
        return data;
    }
}

export class EvolveRetrieveDomainInfoRecordsByParentDomainIdResponse extends RetrieveDomainInfoRecordsByParentDomainIdResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveDomainInfoRecordsByParentDomainIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveDomainInfoRecordsByParentDomainIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveDomainInfoRecordsByParentDomainIdRequest extends WcfProxyUserDetails {
    parentDomainId?: string;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.parentDomainId = _data["parentDomainId"] !== undefined ? _data["parentDomainId"] : <any>null;
        }
    }

    static fromJS(data: any): RetrieveDomainInfoRecordsByParentDomainIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveDomainInfoRecordsByParentDomainIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentDomainId"] = this.parentDomainId !== undefined ? this.parentDomainId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveDomainInfoRecordsByParentDomainIdRequest extends RetrieveDomainInfoRecordsByParentDomainIdRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveDomainInfoRecordsByParentDomainIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveDomainInfoRecordsByParentDomainIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveProductDetailByIdResponse {
    retrieveProductDetailByIdResult?: ProductDetail | null;

    init(_data?: any) {
        if (_data) {
            this.retrieveProductDetailByIdResult = _data["retrieveProductDetailByIdResult"] ? ProductDetail.fromJS(_data["retrieveProductDetailByIdResult"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveProductDetailByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveProductDetailByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["retrieveProductDetailByIdResult"] = this.retrieveProductDetailByIdResult ? this.retrieveProductDetailByIdResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveRetrieveProductDetailByIdResponse extends RetrieveProductDetailByIdResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveProductDetailByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveProductDetailByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class ProductDetail {
    productId?: string | null;
    name?: string | null;
    description?: string | null;
    specificGravity?: number | null;
    standardVolumePerCubicMeter?: number | null;
    isLoaded?: boolean;
    defaultDisplayUnits?: UnitType | null;

    init(_data?: any) {
        if (_data) {
            this.productId = _data["productId"] !== undefined ? _data["productId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.specificGravity = _data["specificGravity"] !== undefined ? _data["specificGravity"] : <any>null;
            this.standardVolumePerCubicMeter = _data["standardVolumePerCubicMeter"] !== undefined ? _data["standardVolumePerCubicMeter"] : <any>null;
            this.isLoaded = _data["isLoaded"] !== undefined ? _data["isLoaded"] : <any>null;
            this.defaultDisplayUnits = _data["defaultDisplayUnits"] !== undefined ? _data["defaultDisplayUnits"] : <any>null;
        }
    }

    static fromJS(data: any): ProductDetail {
        data = typeof data === 'object' ? data : {};
        let result = new ProductDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId !== undefined ? this.productId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["specificGravity"] = this.specificGravity !== undefined ? this.specificGravity : <any>null;
        data["standardVolumePerCubicMeter"] = this.standardVolumePerCubicMeter !== undefined ? this.standardVolumePerCubicMeter : <any>null;
        data["isLoaded"] = this.isLoaded !== undefined ? this.isLoaded : <any>null;
        data["defaultDisplayUnits"] = this.defaultDisplayUnits !== undefined ? this.defaultDisplayUnits : <any>null;
        return data;
    }
}

export class RetrieveProductDetailByIdRequest extends WcfProxyUserDetails {
    productId?: string;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.productId = _data["productId"] !== undefined ? _data["productId"] : <any>null;
        }
    }

    static fromJS(data: any): RetrieveProductDetailByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveProductDetailByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId !== undefined ? this.productId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveProductDetailByIdRequest extends RetrieveProductDetailByIdRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveProductDetailByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveProductDetailByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveProductEditComponentsResponse {
    retrieveProductEditComponentsResult?: RetrieveProductEditComponentsResult | null;

    init(_data?: any) {
        if (_data) {
            this.retrieveProductEditComponentsResult = _data["retrieveProductEditComponentsResult"] ? RetrieveProductEditComponentsResult.fromJS(_data["retrieveProductEditComponentsResult"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveProductEditComponentsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveProductEditComponentsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["retrieveProductEditComponentsResult"] = this.retrieveProductEditComponentsResult ? this.retrieveProductEditComponentsResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveRetrieveProductEditComponentsResponse extends RetrieveProductEditComponentsResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveProductEditComponentsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveProductEditComponentsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class BaseEditComponentsResultOfEditProduct {
    editObject?: EditProduct | null;
    areEditComponentsLoaded?: boolean;

    init(_data?: any) {
        if (_data) {
            this.editObject = _data["editObject"] ? EditProduct.fromJS(_data["editObject"]) : <any>null;
            this.areEditComponentsLoaded = _data["areEditComponentsLoaded"] !== undefined ? _data["areEditComponentsLoaded"] : <any>null;
        }
    }

    static fromJS(data: any): BaseEditComponentsResultOfEditProduct {
        data = typeof data === 'object' ? data : {};
        let result = new BaseEditComponentsResultOfEditProduct();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["editObject"] = this.editObject ? this.editObject.toJSON() : <any>null;
        data["areEditComponentsLoaded"] = this.areEditComponentsLoaded !== undefined ? this.areEditComponentsLoaded : <any>null;
        return data;
    }
}

export class RetrieveProductEditComponentsResult extends BaseEditComponentsResultOfEditProduct {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): RetrieveProductEditComponentsResult {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveProductEditComponentsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class EditProduct extends EditBase {
    id?: string;
    name?: string | null;
    description?: string | null;
    specificGravity?: number | null;
    standardVolumePerCubicMeter?: number | null;
    domainId?: string;
    productGroup?: string | null;
    isDeleted?: boolean | null;
    dataChannelCount?: number | null;
    productGroupList?: string[] | null;
    displayUnit?: number | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.specificGravity = _data["specificGravity"] !== undefined ? _data["specificGravity"] : <any>null;
            this.standardVolumePerCubicMeter = _data["standardVolumePerCubicMeter"] !== undefined ? _data["standardVolumePerCubicMeter"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.productGroup = _data["productGroup"] !== undefined ? _data["productGroup"] : <any>null;
            this.isDeleted = _data["isDeleted"] !== undefined ? _data["isDeleted"] : <any>null;
            this.dataChannelCount = _data["dataChannelCount"] !== undefined ? _data["dataChannelCount"] : <any>null;
            if (Array.isArray(_data["productGroupList"])) {
                this.productGroupList = [] as any;
                for (let item of _data["productGroupList"])
                    this.productGroupList!.push(item);
            }
            else {
                this.productGroupList = <any>null;
            }
            this.displayUnit = _data["displayUnit"] !== undefined ? _data["displayUnit"] : <any>null;
        }
    }

    static fromJS(data: any): EditProduct {
        data = typeof data === 'object' ? data : {};
        let result = new EditProduct();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["specificGravity"] = this.specificGravity !== undefined ? this.specificGravity : <any>null;
        data["standardVolumePerCubicMeter"] = this.standardVolumePerCubicMeter !== undefined ? this.standardVolumePerCubicMeter : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["productGroup"] = this.productGroup !== undefined ? this.productGroup : <any>null;
        data["isDeleted"] = this.isDeleted !== undefined ? this.isDeleted : <any>null;
        data["dataChannelCount"] = this.dataChannelCount !== undefined ? this.dataChannelCount : <any>null;
        if (Array.isArray(this.productGroupList)) {
            data["productGroupList"] = [];
            for (let item of this.productGroupList)
                data["productGroupList"].push(item);
        }
        data["displayUnit"] = this.displayUnit !== undefined ? this.displayUnit : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class RetrieveProductEditComponentsRequest extends WcfProxyUserDetails {
    productId?: string | null;
    domainId?: string | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.productId = _data["productId"] !== undefined ? _data["productId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
        }
    }

    static fromJS(data: any): RetrieveProductEditComponentsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveProductEditComponentsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId !== undefined ? this.productId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveProductEditComponentsRequest extends RetrieveProductEditComponentsRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveProductEditComponentsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveProductEditComponentsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveProductNameInfoListByPrefixResponse {
    retrieveProductNameInfoListByPrefixResult?: ProductNameInfo[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["retrieveProductNameInfoListByPrefixResult"])) {
                this.retrieveProductNameInfoListByPrefixResult = [] as any;
                for (let item of _data["retrieveProductNameInfoListByPrefixResult"])
                    this.retrieveProductNameInfoListByPrefixResult!.push(ProductNameInfo.fromJS(item));
            }
            else {
                this.retrieveProductNameInfoListByPrefixResult = <any>null;
            }
        }
    }

    static fromJS(data: any): RetrieveProductNameInfoListByPrefixResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveProductNameInfoListByPrefixResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.retrieveProductNameInfoListByPrefixResult)) {
            data["retrieveProductNameInfoListByPrefixResult"] = [];
            for (let item of this.retrieveProductNameInfoListByPrefixResult)
                data["retrieveProductNameInfoListByPrefixResult"].push(item.toJSON());
        }
        return data;
    }
}

export class EvolveRetrieveProductNameInfoListByPrefixResponse extends RetrieveProductNameInfoListByPrefixResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveProductNameInfoListByPrefixResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveProductNameInfoListByPrefixResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class ProductNameInfo {
    productId?: string;
    name?: string | null;
    description?: string | null;
    defaultDisplayUnits?: UnitType | null;

    init(_data?: any) {
        if (_data) {
            this.productId = _data["productId"] !== undefined ? _data["productId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.defaultDisplayUnits = _data["defaultDisplayUnits"] !== undefined ? _data["defaultDisplayUnits"] : <any>null;
        }
    }

    static fromJS(data: any): ProductNameInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ProductNameInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId !== undefined ? this.productId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["defaultDisplayUnits"] = this.defaultDisplayUnits !== undefined ? this.defaultDisplayUnits : <any>null;
        return data;
    }
}

export class RetrieveProductNameInfoListByPrefixRequest extends WcfProxyUserDetails {
    namePrefix?: string | null;
    domainId?: string | null;
    maxRecords?: number;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.namePrefix = _data["namePrefix"] !== undefined ? _data["namePrefix"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.maxRecords = _data["maxRecords"] !== undefined ? _data["maxRecords"] : <any>null;
        }
    }

    static fromJS(data: any): RetrieveProductNameInfoListByPrefixRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveProductNameInfoListByPrefixRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["namePrefix"] = this.namePrefix !== undefined ? this.namePrefix : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["maxRecords"] = this.maxRecords !== undefined ? this.maxRecords : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveProductNameInfoListByPrefixRequest extends RetrieveProductNameInfoListByPrefixRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveProductNameInfoListByPrefixRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveProductNameInfoListByPrefixRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveProductRecordsByDomainResponse {
    retrieveProductRecordsByDomainResult?: ProductRecord[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["retrieveProductRecordsByDomainResult"])) {
                this.retrieveProductRecordsByDomainResult = [] as any;
                for (let item of _data["retrieveProductRecordsByDomainResult"])
                    this.retrieveProductRecordsByDomainResult!.push(ProductRecord.fromJS(item));
            }
            else {
                this.retrieveProductRecordsByDomainResult = <any>null;
            }
        }
    }

    static fromJS(data: any): RetrieveProductRecordsByDomainResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveProductRecordsByDomainResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.retrieveProductRecordsByDomainResult)) {
            data["retrieveProductRecordsByDomainResult"] = [];
            for (let item of this.retrieveProductRecordsByDomainResult)
                data["retrieveProductRecordsByDomainResult"].push(item.toJSON());
        }
        return data;
    }
}

export class EvolveRetrieveProductRecordsByDomainResponse extends RetrieveProductRecordsByDomainResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveProductRecordsByDomainResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveProductRecordsByDomainResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class ProductRecord {
    productId?: string;
    name?: string | null;
    description?: string | null;
    productGroup?: string | null;
    specificGravity?: number | null;
    standardVolumePerCubicMeter?: number | null;
    dataChannelCount?: number | null;
    defaultDisplayUnits?: UnitType | null;

    init(_data?: any) {
        if (_data) {
            this.productId = _data["productId"] !== undefined ? _data["productId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.productGroup = _data["productGroup"] !== undefined ? _data["productGroup"] : <any>null;
            this.specificGravity = _data["specificGravity"] !== undefined ? _data["specificGravity"] : <any>null;
            this.standardVolumePerCubicMeter = _data["standardVolumePerCubicMeter"] !== undefined ? _data["standardVolumePerCubicMeter"] : <any>null;
            this.dataChannelCount = _data["dataChannelCount"] !== undefined ? _data["dataChannelCount"] : <any>null;
            this.defaultDisplayUnits = _data["defaultDisplayUnits"] !== undefined ? _data["defaultDisplayUnits"] : <any>null;
        }
    }

    static fromJS(data: any): ProductRecord {
        data = typeof data === 'object' ? data : {};
        let result = new ProductRecord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId !== undefined ? this.productId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["productGroup"] = this.productGroup !== undefined ? this.productGroup : <any>null;
        data["specificGravity"] = this.specificGravity !== undefined ? this.specificGravity : <any>null;
        data["standardVolumePerCubicMeter"] = this.standardVolumePerCubicMeter !== undefined ? this.standardVolumePerCubicMeter : <any>null;
        data["dataChannelCount"] = this.dataChannelCount !== undefined ? this.dataChannelCount : <any>null;
        data["defaultDisplayUnits"] = this.defaultDisplayUnits !== undefined ? this.defaultDisplayUnits : <any>null;
        return data;
    }
}

export class RetrieveProductRecordsByDomainRequest extends WcfProxyUserDetails {
    domainId?: string;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
        }
    }

    static fromJS(data: any): RetrieveProductRecordsByDomainRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveProductRecordsByDomainRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveProductRecordsByDomainRequest extends RetrieveProductRecordsByDomainRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveProductRecordsByDomainRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveProductRecordsByDomainRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveRTURequestQueueInfoRecordsByOptionsRequest extends WcfProxyUserDetails {
    options?: RTURequestQueueRetrievalOptions | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.options = _data["options"] ? RTURequestQueueRetrievalOptions.fromJS(_data["options"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveRTURequestQueueInfoRecordsByOptionsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveRTURequestQueueInfoRecordsByOptionsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["options"] = this.options ? this.options.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveRtuRequestQueueInfoRecordsByOptionsRequest extends RetrieveRTURequestQueueInfoRecordsByOptionsRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveRtuRequestQueueInfoRecordsByOptionsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveRtuRequestQueueInfoRecordsByOptionsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RTURequestQueueRetrievalOptions {
    rtuDeviceId?: string | null;
    rtuChannelDeviceId?: string | null;
    rtuType?: RTUType | null;
    channelOptions?: string | null;
    channelNumber?: string | null;
    requestClassifier?: RtuRequestStatusClassifiers | null;
    rowCount?: number | null;
    startDateInUTC?: Date | null;
    isMostRecentFlag?: boolean;
    showRTUDeviceId?: boolean;
    showChannelOptions?: boolean;

    init(_data?: any) {
        if (_data) {
            this.rtuDeviceId = _data["rtuDeviceId"] !== undefined ? _data["rtuDeviceId"] : <any>null;
            this.rtuChannelDeviceId = _data["rtuChannelDeviceId"] !== undefined ? _data["rtuChannelDeviceId"] : <any>null;
            this.rtuType = _data["rtuType"] !== undefined ? _data["rtuType"] : <any>null;
            this.channelOptions = _data["channelOptions"] !== undefined ? _data["channelOptions"] : <any>null;
            this.channelNumber = _data["channelNumber"] !== undefined ? _data["channelNumber"] : <any>null;
            this.requestClassifier = _data["requestClassifier"] !== undefined ? _data["requestClassifier"] : <any>null;
            this.rowCount = _data["rowCount"] !== undefined ? _data["rowCount"] : <any>null;
            this.startDateInUTC = _data["startDateInUTC"] ? new Date(_data["startDateInUTC"].toString()) : <any>null;
            this.isMostRecentFlag = _data["isMostRecentFlag"] !== undefined ? _data["isMostRecentFlag"] : <any>null;
            this.showRTUDeviceId = _data["showRTUDeviceId"] !== undefined ? _data["showRTUDeviceId"] : <any>null;
            this.showChannelOptions = _data["showChannelOptions"] !== undefined ? _data["showChannelOptions"] : <any>null;
        }
    }

    static fromJS(data: any): RTURequestQueueRetrievalOptions {
        data = typeof data === 'object' ? data : {};
        let result = new RTURequestQueueRetrievalOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rtuDeviceId"] = this.rtuDeviceId !== undefined ? this.rtuDeviceId : <any>null;
        data["rtuChannelDeviceId"] = this.rtuChannelDeviceId !== undefined ? this.rtuChannelDeviceId : <any>null;
        data["rtuType"] = this.rtuType !== undefined ? this.rtuType : <any>null;
        data["channelOptions"] = this.channelOptions !== undefined ? this.channelOptions : <any>null;
        data["channelNumber"] = this.channelNumber !== undefined ? this.channelNumber : <any>null;
        data["requestClassifier"] = this.requestClassifier !== undefined ? this.requestClassifier : <any>null;
        data["rowCount"] = this.rowCount !== undefined ? this.rowCount : <any>null;
        data["startDateInUTC"] = this.startDateInUTC ? this.startDateInUTC.toISOString() : <any>null;
        data["isMostRecentFlag"] = this.isMostRecentFlag !== undefined ? this.isMostRecentFlag : <any>null;
        data["showRTUDeviceId"] = this.showRTUDeviceId !== undefined ? this.showRTUDeviceId : <any>null;
        data["showChannelOptions"] = this.showChannelOptions !== undefined ? this.showChannelOptions : <any>null;
        return data;
    }
}

export enum RtuRequestStatusClassifiers {
    All = 0,
    InProgress = 1,
    Completed = 2,
    UnSuccessful = 3,
}

export class RetrieveSiteEditComponentsByIdResponse {
    retrieveSiteEditComponentsByIdResult?: RetrieveSiteEditComponentsResult | null;

    init(_data?: any) {
        if (_data) {
            this.retrieveSiteEditComponentsByIdResult = _data["retrieveSiteEditComponentsByIdResult"] ? RetrieveSiteEditComponentsResult.fromJS(_data["retrieveSiteEditComponentsByIdResult"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveSiteEditComponentsByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveSiteEditComponentsByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["retrieveSiteEditComponentsByIdResult"] = this.retrieveSiteEditComponentsByIdResult ? this.retrieveSiteEditComponentsByIdResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveRetrieveSiteEditComponentsByIdResponse extends RetrieveSiteEditComponentsByIdResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveSiteEditComponentsByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveSiteEditComponentsByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class BaseEditComponentsResultOfEditSite {
    editObject?: EditSite | null;
    areEditComponentsLoaded?: boolean;

    init(_data?: any) {
        if (_data) {
            this.editObject = _data["editObject"] ? EditSite.fromJS(_data["editObject"]) : <any>null;
            this.areEditComponentsLoaded = _data["areEditComponentsLoaded"] !== undefined ? _data["areEditComponentsLoaded"] : <any>null;
        }
    }

    static fromJS(data: any): BaseEditComponentsResultOfEditSite {
        data = typeof data === 'object' ? data : {};
        let result = new BaseEditComponentsResultOfEditSite();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["editObject"] = this.editObject ? this.editObject.toJSON() : <any>null;
        data["areEditComponentsLoaded"] = this.areEditComponentsLoaded !== undefined ? this.areEditComponentsLoaded : <any>null;
        return data;
    }
}

export class RetrieveSiteEditComponentsResult extends BaseEditComponentsResultOfEditSite {
    timeZones?: TimezoneInfo[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["timeZones"])) {
                this.timeZones = [] as any;
                for (let item of _data["timeZones"])
                    this.timeZones!.push(TimezoneInfo.fromJS(item));
            }
            else {
                this.timeZones = <any>null;
            }
        }
    }

    static fromJS(data: any): RetrieveSiteEditComponentsResult {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveSiteEditComponentsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.timeZones)) {
            data["timeZones"] = [];
            for (let item of this.timeZones)
                data["timeZones"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export class EditSite extends EditBase {
    siteId?: string;
    domainId?: string;
    siteDescription?: string | null;
    customerName?: string | null;
    contactName?: string | null;
    contactPhone?: string | null;
    notes?: string | null;
    status?: number | null;
    latitude?: number | null;
    longitude?: number | null;
    isGeoCodeManual?: boolean;
    address1?: string | null;
    address2?: string | null;
    address3?: string | null;
    city?: string | null;
    state?: string | null;
    postalCode?: string | null;
    country?: string | null;
    timeZoneId?: number | null;
    rtuCount?: number;
    assetCount?: number;
    companyName?: string | null;
    siteNumber?: string | null;
    isReadOnly?: boolean;
    isFromExternalSource?: boolean;
    productClass?: string | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.siteId = _data["siteId"] !== undefined ? _data["siteId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.siteDescription = _data["siteDescription"] !== undefined ? _data["siteDescription"] : <any>null;
            this.customerName = _data["customerName"] !== undefined ? _data["customerName"] : <any>null;
            this.contactName = _data["contactName"] !== undefined ? _data["contactName"] : <any>null;
            this.contactPhone = _data["contactPhone"] !== undefined ? _data["contactPhone"] : <any>null;
            this.notes = _data["notes"] !== undefined ? _data["notes"] : <any>null;
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
            this.latitude = _data["latitude"] !== undefined ? _data["latitude"] : <any>null;
            this.longitude = _data["longitude"] !== undefined ? _data["longitude"] : <any>null;
            this.isGeoCodeManual = _data["isGeoCodeManual"] !== undefined ? _data["isGeoCodeManual"] : <any>null;
            this.address1 = _data["address1"] !== undefined ? _data["address1"] : <any>null;
            this.address2 = _data["address2"] !== undefined ? _data["address2"] : <any>null;
            this.address3 = _data["address3"] !== undefined ? _data["address3"] : <any>null;
            this.city = _data["city"] !== undefined ? _data["city"] : <any>null;
            this.state = _data["state"] !== undefined ? _data["state"] : <any>null;
            this.postalCode = _data["postalCode"] !== undefined ? _data["postalCode"] : <any>null;
            this.country = _data["country"] !== undefined ? _data["country"] : <any>null;
            this.timeZoneId = _data["timeZoneId"] !== undefined ? _data["timeZoneId"] : <any>null;
            this.rtuCount = _data["rtuCount"] !== undefined ? _data["rtuCount"] : <any>null;
            this.assetCount = _data["assetCount"] !== undefined ? _data["assetCount"] : <any>null;
            this.companyName = _data["companyName"] !== undefined ? _data["companyName"] : <any>null;
            this.siteNumber = _data["siteNumber"] !== undefined ? _data["siteNumber"] : <any>null;
            this.isReadOnly = _data["isReadOnly"] !== undefined ? _data["isReadOnly"] : <any>null;
            this.isFromExternalSource = _data["isFromExternalSource"] !== undefined ? _data["isFromExternalSource"] : <any>null;
            this.productClass = _data["productClass"] !== undefined ? _data["productClass"] : <any>null;
        }
    }

    static fromJS(data: any): EditSite {
        data = typeof data === 'object' ? data : {};
        let result = new EditSite();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["siteId"] = this.siteId !== undefined ? this.siteId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["siteDescription"] = this.siteDescription !== undefined ? this.siteDescription : <any>null;
        data["customerName"] = this.customerName !== undefined ? this.customerName : <any>null;
        data["contactName"] = this.contactName !== undefined ? this.contactName : <any>null;
        data["contactPhone"] = this.contactPhone !== undefined ? this.contactPhone : <any>null;
        data["notes"] = this.notes !== undefined ? this.notes : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["latitude"] = this.latitude !== undefined ? this.latitude : <any>null;
        data["longitude"] = this.longitude !== undefined ? this.longitude : <any>null;
        data["isGeoCodeManual"] = this.isGeoCodeManual !== undefined ? this.isGeoCodeManual : <any>null;
        data["address1"] = this.address1 !== undefined ? this.address1 : <any>null;
        data["address2"] = this.address2 !== undefined ? this.address2 : <any>null;
        data["address3"] = this.address3 !== undefined ? this.address3 : <any>null;
        data["city"] = this.city !== undefined ? this.city : <any>null;
        data["state"] = this.state !== undefined ? this.state : <any>null;
        data["postalCode"] = this.postalCode !== undefined ? this.postalCode : <any>null;
        data["country"] = this.country !== undefined ? this.country : <any>null;
        data["timeZoneId"] = this.timeZoneId !== undefined ? this.timeZoneId : <any>null;
        data["rtuCount"] = this.rtuCount !== undefined ? this.rtuCount : <any>null;
        data["assetCount"] = this.assetCount !== undefined ? this.assetCount : <any>null;
        data["companyName"] = this.companyName !== undefined ? this.companyName : <any>null;
        data["siteNumber"] = this.siteNumber !== undefined ? this.siteNumber : <any>null;
        data["isReadOnly"] = this.isReadOnly !== undefined ? this.isReadOnly : <any>null;
        data["isFromExternalSource"] = this.isFromExternalSource !== undefined ? this.isFromExternalSource : <any>null;
        data["productClass"] = this.productClass !== undefined ? this.productClass : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class RetrieveSiteEditComponentsByIdRequest extends WcfProxyUserDetails {
    siteId?: string;
    loadEditComponents?: boolean;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.siteId = _data["siteId"] !== undefined ? _data["siteId"] : <any>null;
            this.loadEditComponents = _data["loadEditComponents"] !== undefined ? _data["loadEditComponents"] : <any>null;
        }
    }

    static fromJS(data: any): RetrieveSiteEditComponentsByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveSiteEditComponentsByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["siteId"] = this.siteId !== undefined ? this.siteId : <any>null;
        data["loadEditComponents"] = this.loadEditComponents !== undefined ? this.loadEditComponents : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveSiteEditComponentsByIdRequest extends RetrieveSiteEditComponentsByIdRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveSiteEditComponentsByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveSiteEditComponentsByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveSiteInfoRecordByIdResponse {
    retrieveSiteInfoRecordByIdResult?: SiteInfoRecord | null;

    init(_data?: any) {
        if (_data) {
            this.retrieveSiteInfoRecordByIdResult = _data["retrieveSiteInfoRecordByIdResult"] ? SiteInfoRecord.fromJS(_data["retrieveSiteInfoRecordByIdResult"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveSiteInfoRecordByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveSiteInfoRecordByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["retrieveSiteInfoRecordByIdResult"] = this.retrieveSiteInfoRecordByIdResult ? this.retrieveSiteInfoRecordByIdResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveRetrieveSiteInfoRecordByIdResponse extends RetrieveSiteInfoRecordByIdResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveSiteInfoRecordByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveSiteInfoRecordByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveSiteInfoRecordByIdRequest extends WcfProxyUserDetails {
    siteId?: string;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.siteId = _data["siteId"] !== undefined ? _data["siteId"] : <any>null;
        }
    }

    static fromJS(data: any): RetrieveSiteInfoRecordByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveSiteInfoRecordByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["siteId"] = this.siteId !== undefined ? this.siteId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveSiteInfoRecordByIdRequest extends RetrieveSiteInfoRecordByIdRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveSiteInfoRecordByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveSiteInfoRecordByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveSiteInfoRecordsByAutoCompleteOptionsResponse {
    retrieveSiteInfoRecordsByAutoCompleteOptionsResult?: SiteInfoRecord[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["retrieveSiteInfoRecordsByAutoCompleteOptionsResult"])) {
                this.retrieveSiteInfoRecordsByAutoCompleteOptionsResult = [] as any;
                for (let item of _data["retrieveSiteInfoRecordsByAutoCompleteOptionsResult"])
                    this.retrieveSiteInfoRecordsByAutoCompleteOptionsResult!.push(SiteInfoRecord.fromJS(item));
            }
            else {
                this.retrieveSiteInfoRecordsByAutoCompleteOptionsResult = <any>null;
            }
        }
    }

    static fromJS(data: any): RetrieveSiteInfoRecordsByAutoCompleteOptionsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveSiteInfoRecordsByAutoCompleteOptionsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.retrieveSiteInfoRecordsByAutoCompleteOptionsResult)) {
            data["retrieveSiteInfoRecordsByAutoCompleteOptionsResult"] = [];
            for (let item of this.retrieveSiteInfoRecordsByAutoCompleteOptionsResult)
                data["retrieveSiteInfoRecordsByAutoCompleteOptionsResult"].push(item.toJSON());
        }
        return data;
    }
}

export class EvolveRetrieveSiteInfoRecordsByAutoCompleteOptionsResponse extends RetrieveSiteInfoRecordsByAutoCompleteOptionsResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveSiteInfoRecordsByAutoCompleteOptionsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveSiteInfoRecordsByAutoCompleteOptionsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveSiteInfoRecordsByAutoCompleteOptionsRequest extends WcfProxyUserDetails {
    options?: AutoCompleteOptions | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.options = _data["options"] ? AutoCompleteOptions.fromJS(_data["options"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveSiteInfoRecordsByAutoCompleteOptionsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveSiteInfoRecordsByAutoCompleteOptionsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["options"] = this.options ? this.options.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveSiteInfoRecordsByAutoCompleteOptionsRequest extends RetrieveSiteInfoRecordsByAutoCompleteOptionsRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveSiteInfoRecordsByAutoCompleteOptionsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveSiteInfoRecordsByAutoCompleteOptionsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class AutoCompleteOptions {
    userId?: string;
    domainId?: string;
    prefixText?: string | null;
    resultCount?: number;
    isUsingIntegrationProfile?: boolean;

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.prefixText = _data["prefixText"] !== undefined ? _data["prefixText"] : <any>null;
            this.resultCount = _data["resultCount"] !== undefined ? _data["resultCount"] : <any>null;
            this.isUsingIntegrationProfile = _data["isUsingIntegrationProfile"] !== undefined ? _data["isUsingIntegrationProfile"] : <any>null;
        }
    }

    static fromJS(data: any): AutoCompleteOptions {
        data = typeof data === 'object' ? data : {};
        let result = new AutoCompleteOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["prefixText"] = this.prefixText !== undefined ? this.prefixText : <any>null;
        data["resultCount"] = this.resultCount !== undefined ? this.resultCount : <any>null;
        data["isUsingIntegrationProfile"] = this.isUsingIntegrationProfile !== undefined ? this.isUsingIntegrationProfile : <any>null;
        return data;
    }
}

export class RetrieveSiteInfoRecordsByOptionsResponse {
    retrieveSiteInfoRecordsByOptionsResult?: RetrieveSiteInfoListResult | null;

    init(_data?: any) {
        if (_data) {
            this.retrieveSiteInfoRecordsByOptionsResult = _data["retrieveSiteInfoRecordsByOptionsResult"] ? RetrieveSiteInfoListResult.fromJS(_data["retrieveSiteInfoRecordsByOptionsResult"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveSiteInfoRecordsByOptionsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveSiteInfoRecordsByOptionsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["retrieveSiteInfoRecordsByOptionsResult"] = this.retrieveSiteInfoRecordsByOptionsResult ? this.retrieveSiteInfoRecordsByOptionsResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveRetrieveSiteInfoRecordsByOptionsResponse extends RetrieveSiteInfoRecordsByOptionsResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveSiteInfoRecordsByOptionsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveSiteInfoRecordsByOptionsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class BaseListResultOfSiteInfoRecord {
    records?: SiteInfoRecord[] | null;
    totalRecords?: number | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["records"])) {
                this.records = [] as any;
                for (let item of _data["records"])
                    this.records!.push(SiteInfoRecord.fromJS(item));
            }
            else {
                this.records = <any>null;
            }
            this.totalRecords = _data["totalRecords"] !== undefined ? _data["totalRecords"] : <any>null;
        }
    }

    static fromJS(data: any): BaseListResultOfSiteInfoRecord {
        data = typeof data === 'object' ? data : {};
        let result = new BaseListResultOfSiteInfoRecord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.records)) {
            data["records"] = [];
            for (let item of this.records)
                data["records"].push(item.toJSON());
        }
        data["totalRecords"] = this.totalRecords !== undefined ? this.totalRecords : <any>null;
        return data;
    }
}

export class RetrieveSiteInfoListResult extends BaseListResultOfSiteInfoRecord {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): RetrieveSiteInfoListResult {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveSiteInfoListResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveSiteInfoRecordsByOptionsRequest extends WcfProxyUserDetails {
    options?: SiteInfoRetrievalOptions | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.options = _data["options"] ? SiteInfoRetrievalOptions.fromJS(_data["options"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveSiteInfoRecordsByOptionsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveSiteInfoRecordsByOptionsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["options"] = this.options ? this.options.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveSiteInfoRecordsByOptionsRequest extends RetrieveSiteInfoRecordsByOptionsRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveSiteInfoRecordsByOptionsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveSiteInfoRecordsByOptionsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class SiteInfoRetrievalOptions extends BaseRetrievalOptions {
    filterBy?: SiteListFilterOptions;
    groupBy?: SiteListGroupingOptions;
    siteId?: string | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.filterBy = _data["filterBy"] !== undefined ? _data["filterBy"] : <any>null;
            this.groupBy = _data["groupBy"] !== undefined ? _data["groupBy"] : <any>null;
            this.siteId = _data["siteId"] !== undefined ? _data["siteId"] : <any>null;
        }
    }

    static fromJS(data: any): SiteInfoRetrievalOptions {
        data = typeof data === 'object' ? data : {};
        let result = new SiteInfoRetrievalOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["filterBy"] = this.filterBy !== undefined ? this.filterBy : <any>null;
        data["groupBy"] = this.groupBy !== undefined ? this.groupBy : <any>null;
        data["siteId"] = this.siteId !== undefined ? this.siteId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export enum SiteListFilterOptions {
    CustomerName = 0,
    State = 1,
    City = 2,
    Country = 3,
}

export enum SiteListGroupingOptions {
    None = 0,
    CustomerName = 1,
    State = 2,
    Country = 3,
}

export class RetrieveSiteLocationInfoAutoCompleteListByOptionsResponse {
    retrieveSiteLocationInfoAutoCompleteListByOptionsResult?: SiteLocationInfoFilterItem[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["retrieveSiteLocationInfoAutoCompleteListByOptionsResult"])) {
                this.retrieveSiteLocationInfoAutoCompleteListByOptionsResult = [] as any;
                for (let item of _data["retrieveSiteLocationInfoAutoCompleteListByOptionsResult"])
                    this.retrieveSiteLocationInfoAutoCompleteListByOptionsResult!.push(SiteLocationInfoFilterItem.fromJS(item));
            }
            else {
                this.retrieveSiteLocationInfoAutoCompleteListByOptionsResult = <any>null;
            }
        }
    }

    static fromJS(data: any): RetrieveSiteLocationInfoAutoCompleteListByOptionsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveSiteLocationInfoAutoCompleteListByOptionsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.retrieveSiteLocationInfoAutoCompleteListByOptionsResult)) {
            data["retrieveSiteLocationInfoAutoCompleteListByOptionsResult"] = [];
            for (let item of this.retrieveSiteLocationInfoAutoCompleteListByOptionsResult)
                data["retrieveSiteLocationInfoAutoCompleteListByOptionsResult"].push(item.toJSON());
        }
        return data;
    }
}

export class EvolveRetrieveSiteLocationInfoAutoCompleteListByOptionsResponse extends RetrieveSiteLocationInfoAutoCompleteListByOptionsResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveSiteLocationInfoAutoCompleteListByOptionsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveSiteLocationInfoAutoCompleteListByOptionsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class SiteLocationInfoFilterItem {
    text?: string | null;

    init(_data?: any) {
        if (_data) {
            this.text = _data["text"] !== undefined ? _data["text"] : <any>null;
        }
    }

    static fromJS(data: any): SiteLocationInfoFilterItem {
        data = typeof data === 'object' ? data : {};
        let result = new SiteLocationInfoFilterItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["text"] = this.text !== undefined ? this.text : <any>null;
        return data;
    }
}

export class RetrieveSiteLocationInfoAutoCompleteListByOptionsRequest extends WcfProxyUserDetails {
    options?: SiteLocationInfoAutoCompleteOptions | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.options = _data["options"] ? SiteLocationInfoAutoCompleteOptions.fromJS(_data["options"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveSiteLocationInfoAutoCompleteListByOptionsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveSiteLocationInfoAutoCompleteListByOptionsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["options"] = this.options ? this.options.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveSiteLocationInfoAutoCompleteListByOptionsRequest extends RetrieveSiteLocationInfoAutoCompleteListByOptionsRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveSiteLocationInfoAutoCompleteListByOptionsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveSiteLocationInfoAutoCompleteListByOptionsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class SiteLocationInfoAutoCompleteOptions {
    searchType?: SiteLocationInfoAutoCompleteListType;
    prefixText?: string | null;
    country?: string | null;
    state?: string | null;

    init(_data?: any) {
        if (_data) {
            this.searchType = _data["searchType"] !== undefined ? _data["searchType"] : <any>null;
            this.prefixText = _data["prefixText"] !== undefined ? _data["prefixText"] : <any>null;
            this.country = _data["country"] !== undefined ? _data["country"] : <any>null;
            this.state = _data["state"] !== undefined ? _data["state"] : <any>null;
        }
    }

    static fromJS(data: any): SiteLocationInfoAutoCompleteOptions {
        data = typeof data === 'object' ? data : {};
        let result = new SiteLocationInfoAutoCompleteOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["searchType"] = this.searchType !== undefined ? this.searchType : <any>null;
        data["prefixText"] = this.prefixText !== undefined ? this.prefixText : <any>null;
        data["country"] = this.country !== undefined ? this.country : <any>null;
        data["state"] = this.state !== undefined ? this.state : <any>null;
        return data;
    }
}

export enum SiteLocationInfoAutoCompleteListType {
    CustomerName = 0,
    Country = 1,
    State = 2,
    City = 3,
}

export class RetrieveTankDimensionDescriptionInfoListByPrefixResponse {
    retrieveTankDimensionDescriptionInfoListByPrefixResult?: TankDimensionDescriptionInfo[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["retrieveTankDimensionDescriptionInfoListByPrefixResult"])) {
                this.retrieveTankDimensionDescriptionInfoListByPrefixResult = [] as any;
                for (let item of _data["retrieveTankDimensionDescriptionInfoListByPrefixResult"])
                    this.retrieveTankDimensionDescriptionInfoListByPrefixResult!.push(TankDimensionDescriptionInfo.fromJS(item));
            }
            else {
                this.retrieveTankDimensionDescriptionInfoListByPrefixResult = <any>null;
            }
        }
    }

    static fromJS(data: any): RetrieveTankDimensionDescriptionInfoListByPrefixResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveTankDimensionDescriptionInfoListByPrefixResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.retrieveTankDimensionDescriptionInfoListByPrefixResult)) {
            data["retrieveTankDimensionDescriptionInfoListByPrefixResult"] = [];
            for (let item of this.retrieveTankDimensionDescriptionInfoListByPrefixResult)
                data["retrieveTankDimensionDescriptionInfoListByPrefixResult"].push(item.toJSON());
        }
        return data;
    }
}

export class EvolveRetrieveTankDimensionDescriptionInfoListByPrefixResponse extends RetrieveTankDimensionDescriptionInfoListByPrefixResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveTankDimensionDescriptionInfoListByPrefixResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveTankDimensionDescriptionInfoListByPrefixResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class TankDimensionDescriptionInfo {
    tankDimensionId?: string;
    name?: string | null;
    description?: string | null;
    tankType?: TankType;

    init(_data?: any) {
        if (_data) {
            this.tankDimensionId = _data["tankDimensionId"] !== undefined ? _data["tankDimensionId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.tankType = _data["tankType"] !== undefined ? _data["tankType"] : <any>null;
        }
    }

    static fromJS(data: any): TankDimensionDescriptionInfo {
        data = typeof data === 'object' ? data : {};
        let result = new TankDimensionDescriptionInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tankDimensionId"] = this.tankDimensionId !== undefined ? this.tankDimensionId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["tankType"] = this.tankType !== undefined ? this.tankType : <any>null;
        return data;
    }
}

export class RetrieveTankDimensionDescriptionInfoListByPrefixRequest extends WcfProxyUserDetails {
    descriptionPrefix?: string | null;
    domainId?: string | null;
    maxRecords?: number;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.descriptionPrefix = _data["descriptionPrefix"] !== undefined ? _data["descriptionPrefix"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.maxRecords = _data["maxRecords"] !== undefined ? _data["maxRecords"] : <any>null;
        }
    }

    static fromJS(data: any): RetrieveTankDimensionDescriptionInfoListByPrefixRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveTankDimensionDescriptionInfoListByPrefixRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["descriptionPrefix"] = this.descriptionPrefix !== undefined ? this.descriptionPrefix : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["maxRecords"] = this.maxRecords !== undefined ? this.maxRecords : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveTankDimensionDescriptionInfoListByPrefixRequest extends RetrieveTankDimensionDescriptionInfoListByPrefixRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveTankDimensionDescriptionInfoListByPrefixRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveTankDimensionDescriptionInfoListByPrefixRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveTankDimensionDetailByIdResponse {
    retrieveTankDimensionDetailByIdResult?: TankDimensionDetail | null;

    init(_data?: any) {
        if (_data) {
            this.retrieveTankDimensionDetailByIdResult = _data["retrieveTankDimensionDetailByIdResult"] ? TankDimensionDetail.fromJS(_data["retrieveTankDimensionDetailByIdResult"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveTankDimensionDetailByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveTankDimensionDetailByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["retrieveTankDimensionDetailByIdResult"] = this.retrieveTankDimensionDetailByIdResult ? this.retrieveTankDimensionDetailByIdResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveRetrieveTankDimensionDetailByIdResponse extends RetrieveTankDimensionDetailByIdResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveTankDimensionDetailByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveTankDimensionDetailByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class TankDimensionDetail {
    tankDimensionId?: string | null;
    description?: string | null;
    tankType?: TankType | null;
    isStrappingUsedForWeb?: boolean;
    tankDimensionUnits?: UnitType | null;
    strappingLevelUnits?: UnitType | null;
    strappingVolumeUnits?: UnitType | null;
    height?: number | null;
    width?: number | null;
    dishHeight?: number | null;
    tankDiameterInMeters?: number | null;
    tankLengthInMeters?: number | null;
    tankDishHeightInMeters?: number | null;
    tankHeightInMeters?: number | null;
    tankWidthInMeters?: number | null;
    strappingChartInfo?: StrappingChartInfo[] | null;
    isLoaded?: boolean;

    init(_data?: any) {
        if (_data) {
            this.tankDimensionId = _data["tankDimensionId"] !== undefined ? _data["tankDimensionId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.tankType = _data["tankType"] !== undefined ? _data["tankType"] : <any>null;
            this.isStrappingUsedForWeb = _data["isStrappingUsedForWeb"] !== undefined ? _data["isStrappingUsedForWeb"] : <any>null;
            this.tankDimensionUnits = _data["tankDimensionUnits"] !== undefined ? _data["tankDimensionUnits"] : <any>null;
            this.strappingLevelUnits = _data["strappingLevelUnits"] !== undefined ? _data["strappingLevelUnits"] : <any>null;
            this.strappingVolumeUnits = _data["strappingVolumeUnits"] !== undefined ? _data["strappingVolumeUnits"] : <any>null;
            this.height = _data["height"] !== undefined ? _data["height"] : <any>null;
            this.width = _data["width"] !== undefined ? _data["width"] : <any>null;
            this.dishHeight = _data["dishHeight"] !== undefined ? _data["dishHeight"] : <any>null;
            this.tankDiameterInMeters = _data["tankDiameterInMeters"] !== undefined ? _data["tankDiameterInMeters"] : <any>null;
            this.tankLengthInMeters = _data["tankLengthInMeters"] !== undefined ? _data["tankLengthInMeters"] : <any>null;
            this.tankDishHeightInMeters = _data["tankDishHeightInMeters"] !== undefined ? _data["tankDishHeightInMeters"] : <any>null;
            this.tankHeightInMeters = _data["tankHeightInMeters"] !== undefined ? _data["tankHeightInMeters"] : <any>null;
            this.tankWidthInMeters = _data["tankWidthInMeters"] !== undefined ? _data["tankWidthInMeters"] : <any>null;
            if (Array.isArray(_data["strappingChartInfo"])) {
                this.strappingChartInfo = [] as any;
                for (let item of _data["strappingChartInfo"])
                    this.strappingChartInfo!.push(StrappingChartInfo.fromJS(item));
            }
            else {
                this.strappingChartInfo = <any>null;
            }
            this.isLoaded = _data["isLoaded"] !== undefined ? _data["isLoaded"] : <any>null;
        }
    }

    static fromJS(data: any): TankDimensionDetail {
        data = typeof data === 'object' ? data : {};
        let result = new TankDimensionDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tankDimensionId"] = this.tankDimensionId !== undefined ? this.tankDimensionId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["tankType"] = this.tankType !== undefined ? this.tankType : <any>null;
        data["isStrappingUsedForWeb"] = this.isStrappingUsedForWeb !== undefined ? this.isStrappingUsedForWeb : <any>null;
        data["tankDimensionUnits"] = this.tankDimensionUnits !== undefined ? this.tankDimensionUnits : <any>null;
        data["strappingLevelUnits"] = this.strappingLevelUnits !== undefined ? this.strappingLevelUnits : <any>null;
        data["strappingVolumeUnits"] = this.strappingVolumeUnits !== undefined ? this.strappingVolumeUnits : <any>null;
        data["height"] = this.height !== undefined ? this.height : <any>null;
        data["width"] = this.width !== undefined ? this.width : <any>null;
        data["dishHeight"] = this.dishHeight !== undefined ? this.dishHeight : <any>null;
        data["tankDiameterInMeters"] = this.tankDiameterInMeters !== undefined ? this.tankDiameterInMeters : <any>null;
        data["tankLengthInMeters"] = this.tankLengthInMeters !== undefined ? this.tankLengthInMeters : <any>null;
        data["tankDishHeightInMeters"] = this.tankDishHeightInMeters !== undefined ? this.tankDishHeightInMeters : <any>null;
        data["tankHeightInMeters"] = this.tankHeightInMeters !== undefined ? this.tankHeightInMeters : <any>null;
        data["tankWidthInMeters"] = this.tankWidthInMeters !== undefined ? this.tankWidthInMeters : <any>null;
        if (Array.isArray(this.strappingChartInfo)) {
            data["strappingChartInfo"] = [];
            for (let item of this.strappingChartInfo)
                data["strappingChartInfo"].push(item.toJSON());
        }
        data["isLoaded"] = this.isLoaded !== undefined ? this.isLoaded : <any>null;
        return data;
    }
}

export class RetrieveTankDimensionDetailByIdRequest extends WcfProxyUserDetails {
    tankDimensionId?: string;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.tankDimensionId = _data["tankDimensionId"] !== undefined ? _data["tankDimensionId"] : <any>null;
        }
    }

    static fromJS(data: any): RetrieveTankDimensionDetailByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveTankDimensionDetailByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tankDimensionId"] = this.tankDimensionId !== undefined ? this.tankDimensionId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveTankDimensionDetailByIdRequest extends RetrieveTankDimensionDetailByIdRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveTankDimensionDetailByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveTankDimensionDetailByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveTankDimensionEditComponentsByIdResponse {
    retrieveTankDimensionEditComponentsByIdResult?: RetrieveTankDimensionEditComponentsResult | null;

    init(_data?: any) {
        if (_data) {
            this.retrieveTankDimensionEditComponentsByIdResult = _data["retrieveTankDimensionEditComponentsByIdResult"] ? RetrieveTankDimensionEditComponentsResult.fromJS(_data["retrieveTankDimensionEditComponentsByIdResult"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveTankDimensionEditComponentsByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveTankDimensionEditComponentsByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["retrieveTankDimensionEditComponentsByIdResult"] = this.retrieveTankDimensionEditComponentsByIdResult ? this.retrieveTankDimensionEditComponentsByIdResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveRetrieveTankDimensionEditComponentsByIdResponse extends RetrieveTankDimensionEditComponentsByIdResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveTankDimensionEditComponentsByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveTankDimensionEditComponentsByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class BaseEditComponentsResultOfEditTankDimension {
    editObject?: EditTankDimension | null;
    areEditComponentsLoaded?: boolean;

    init(_data?: any) {
        if (_data) {
            this.editObject = _data["editObject"] ? EditTankDimension.fromJS(_data["editObject"]) : <any>null;
            this.areEditComponentsLoaded = _data["areEditComponentsLoaded"] !== undefined ? _data["areEditComponentsLoaded"] : <any>null;
        }
    }

    static fromJS(data: any): BaseEditComponentsResultOfEditTankDimension {
        data = typeof data === 'object' ? data : {};
        let result = new BaseEditComponentsResultOfEditTankDimension();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["editObject"] = this.editObject ? this.editObject.toJSON() : <any>null;
        data["areEditComponentsLoaded"] = this.areEditComponentsLoaded !== undefined ? this.areEditComponentsLoaded : <any>null;
        return data;
    }
}

export class RetrieveTankDimensionEditComponentsResult extends BaseEditComponentsResultOfEditTankDimension {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): RetrieveTankDimensionEditComponentsResult {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveTankDimensionEditComponentsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class EditTankDimension extends EditBase {
    tankDimensionId?: string;
    domainId?: string;
    description?: string | null;
    tankType?: TankType | null;
    height?: number | null;
    width?: number | null;
    dishHeight?: number | null;
    unitsOfMeasure?: UnitType | null;
    isStrappingUsedForWeb?: boolean;
    strappingLevelUnits?: UnitType | null;
    strappingVolumeUnits?: UnitType | null;
    tankStrappings?: EditTankStrapping[] | null;
    tankAssetNames?: string | null;
    dataChannelCount?: number;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.tankDimensionId = _data["tankDimensionId"] !== undefined ? _data["tankDimensionId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.tankType = _data["tankType"] !== undefined ? _data["tankType"] : <any>null;
            this.height = _data["height"] !== undefined ? _data["height"] : <any>null;
            this.width = _data["width"] !== undefined ? _data["width"] : <any>null;
            this.dishHeight = _data["dishHeight"] !== undefined ? _data["dishHeight"] : <any>null;
            this.unitsOfMeasure = _data["unitsOfMeasure"] !== undefined ? _data["unitsOfMeasure"] : <any>null;
            this.isStrappingUsedForWeb = _data["isStrappingUsedForWeb"] !== undefined ? _data["isStrappingUsedForWeb"] : <any>null;
            this.strappingLevelUnits = _data["strappingLevelUnits"] !== undefined ? _data["strappingLevelUnits"] : <any>null;
            this.strappingVolumeUnits = _data["strappingVolumeUnits"] !== undefined ? _data["strappingVolumeUnits"] : <any>null;
            if (Array.isArray(_data["tankStrappings"])) {
                this.tankStrappings = [] as any;
                for (let item of _data["tankStrappings"])
                    this.tankStrappings!.push(EditTankStrapping.fromJS(item));
            }
            else {
                this.tankStrappings = <any>null;
            }
            this.tankAssetNames = _data["tankAssetNames"] !== undefined ? _data["tankAssetNames"] : <any>null;
            this.dataChannelCount = _data["dataChannelCount"] !== undefined ? _data["dataChannelCount"] : <any>null;
        }
    }

    static fromJS(data: any): EditTankDimension {
        data = typeof data === 'object' ? data : {};
        let result = new EditTankDimension();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tankDimensionId"] = this.tankDimensionId !== undefined ? this.tankDimensionId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["tankType"] = this.tankType !== undefined ? this.tankType : <any>null;
        data["height"] = this.height !== undefined ? this.height : <any>null;
        data["width"] = this.width !== undefined ? this.width : <any>null;
        data["dishHeight"] = this.dishHeight !== undefined ? this.dishHeight : <any>null;
        data["unitsOfMeasure"] = this.unitsOfMeasure !== undefined ? this.unitsOfMeasure : <any>null;
        data["isStrappingUsedForWeb"] = this.isStrappingUsedForWeb !== undefined ? this.isStrappingUsedForWeb : <any>null;
        data["strappingLevelUnits"] = this.strappingLevelUnits !== undefined ? this.strappingLevelUnits : <any>null;
        data["strappingVolumeUnits"] = this.strappingVolumeUnits !== undefined ? this.strappingVolumeUnits : <any>null;
        if (Array.isArray(this.tankStrappings)) {
            data["tankStrappings"] = [];
            for (let item of this.tankStrappings)
                data["tankStrappings"].push(item.toJSON());
        }
        data["tankAssetNames"] = this.tankAssetNames !== undefined ? this.tankAssetNames : <any>null;
        data["dataChannelCount"] = this.dataChannelCount !== undefined ? this.dataChannelCount : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EditTankStrapping extends EditBase {
    id?: string;
    height?: number | null;
    volume?: number | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.height = _data["height"] !== undefined ? _data["height"] : <any>null;
            this.volume = _data["volume"] !== undefined ? _data["volume"] : <any>null;
        }
    }

    static fromJS(data: any): EditTankStrapping {
        data = typeof data === 'object' ? data : {};
        let result = new EditTankStrapping();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["height"] = this.height !== undefined ? this.height : <any>null;
        data["volume"] = this.volume !== undefined ? this.volume : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class RetrieveTankDimensionEditComponentsByIdRequest extends WcfProxyUserDetails {
    tankDimensionId?: string;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.tankDimensionId = _data["tankDimensionId"] !== undefined ? _data["tankDimensionId"] : <any>null;
        }
    }

    static fromJS(data: any): RetrieveTankDimensionEditComponentsByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveTankDimensionEditComponentsByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tankDimensionId"] = this.tankDimensionId !== undefined ? this.tankDimensionId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveTankDimensionEditComponentsByIdRequest extends RetrieveTankDimensionEditComponentsByIdRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveTankDimensionEditComponentsByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveTankDimensionEditComponentsByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveTankDimensionInfoRecordsByDomainResponse {
    retrieveTankDimensionInfoRecordsByDomainResult?: TankDimensionInfoRecord[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["retrieveTankDimensionInfoRecordsByDomainResult"])) {
                this.retrieveTankDimensionInfoRecordsByDomainResult = [] as any;
                for (let item of _data["retrieveTankDimensionInfoRecordsByDomainResult"])
                    this.retrieveTankDimensionInfoRecordsByDomainResult!.push(TankDimensionInfoRecord.fromJS(item));
            }
            else {
                this.retrieveTankDimensionInfoRecordsByDomainResult = <any>null;
            }
        }
    }

    static fromJS(data: any): RetrieveTankDimensionInfoRecordsByDomainResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveTankDimensionInfoRecordsByDomainResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.retrieveTankDimensionInfoRecordsByDomainResult)) {
            data["retrieveTankDimensionInfoRecordsByDomainResult"] = [];
            for (let item of this.retrieveTankDimensionInfoRecordsByDomainResult)
                data["retrieveTankDimensionInfoRecordsByDomainResult"].push(item.toJSON());
        }
        return data;
    }
}

export class EvolveRetrieveTankDimensionInfoRecordsByDomainResponse extends RetrieveTankDimensionInfoRecordsByDomainResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveTankDimensionInfoRecordsByDomainResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveTankDimensionInfoRecordsByDomainResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class TankDimensionInfoRecord {
    tankDimensionId?: string;
    description?: string | null;
    type?: TankType;
    height?: number | null;
    width?: number | null;
    dishHeight?: number | null;
    units?: UnitType | null;
    dataChannelCount?: number;

    init(_data?: any) {
        if (_data) {
            this.tankDimensionId = _data["tankDimensionId"] !== undefined ? _data["tankDimensionId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.height = _data["height"] !== undefined ? _data["height"] : <any>null;
            this.width = _data["width"] !== undefined ? _data["width"] : <any>null;
            this.dishHeight = _data["dishHeight"] !== undefined ? _data["dishHeight"] : <any>null;
            this.units = _data["units"] !== undefined ? _data["units"] : <any>null;
            this.dataChannelCount = _data["dataChannelCount"] !== undefined ? _data["dataChannelCount"] : <any>null;
        }
    }

    static fromJS(data: any): TankDimensionInfoRecord {
        data = typeof data === 'object' ? data : {};
        let result = new TankDimensionInfoRecord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tankDimensionId"] = this.tankDimensionId !== undefined ? this.tankDimensionId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["height"] = this.height !== undefined ? this.height : <any>null;
        data["width"] = this.width !== undefined ? this.width : <any>null;
        data["dishHeight"] = this.dishHeight !== undefined ? this.dishHeight : <any>null;
        data["units"] = this.units !== undefined ? this.units : <any>null;
        data["dataChannelCount"] = this.dataChannelCount !== undefined ? this.dataChannelCount : <any>null;
        return data;
    }
}

export class RetrieveTankDimensionInfoRecordsByDomainRequest extends WcfProxyUserDetails {
    domainId?: string;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
        }
    }

    static fromJS(data: any): RetrieveTankDimensionInfoRecordsByDomainRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveTankDimensionInfoRecordsByDomainRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveTankDimensionInfoRecordsByDomainRequest extends RetrieveTankDimensionInfoRecordsByDomainRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveTankDimensionInfoRecordsByDomainRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveTankDimensionInfoRecordsByDomainRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveUnitTypeByUnitQuantityTypeIdResponse {
    retrieveUnitTypeByUnitQuantityTypeIdResult?: UnitType[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["retrieveUnitTypeByUnitQuantityTypeIdResult"])) {
                this.retrieveUnitTypeByUnitQuantityTypeIdResult = [] as any;
                for (let item of _data["retrieveUnitTypeByUnitQuantityTypeIdResult"])
                    this.retrieveUnitTypeByUnitQuantityTypeIdResult!.push(item);
            }
            else {
                this.retrieveUnitTypeByUnitQuantityTypeIdResult = <any>null;
            }
        }
    }

    static fromJS(data: any): RetrieveUnitTypeByUnitQuantityTypeIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveUnitTypeByUnitQuantityTypeIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.retrieveUnitTypeByUnitQuantityTypeIdResult)) {
            data["retrieveUnitTypeByUnitQuantityTypeIdResult"] = [];
            for (let item of this.retrieveUnitTypeByUnitQuantityTypeIdResult)
                data["retrieveUnitTypeByUnitQuantityTypeIdResult"].push(item);
        }
        return data;
    }
}

export class EvolveRetrieveUnitTypeByUnitQuantityTypeIdResponse extends RetrieveUnitTypeByUnitQuantityTypeIdResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveUnitTypeByUnitQuantityTypeIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveUnitTypeByUnitQuantityTypeIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveUnitTypeByUnitQuantityTypeIdRequest extends WcfProxyUserDetails {
    unitQuantityTypeIds?: number[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["unitQuantityTypeIds"])) {
                this.unitQuantityTypeIds = [] as any;
                for (let item of _data["unitQuantityTypeIds"])
                    this.unitQuantityTypeIds!.push(item);
            }
            else {
                this.unitQuantityTypeIds = <any>null;
            }
        }
    }

    static fromJS(data: any): RetrieveUnitTypeByUnitQuantityTypeIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveUnitTypeByUnitQuantityTypeIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.unitQuantityTypeIds)) {
            data["unitQuantityTypeIds"] = [];
            for (let item of this.unitQuantityTypeIds)
                data["unitQuantityTypeIds"].push(item);
        }
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveUnitTypeByUnitQuantityTypeIdRequest extends RetrieveUnitTypeByUnitQuantityTypeIdRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveUnitTypeByUnitQuantityTypeIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveUnitTypeByUnitQuantityTypeIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class SaveDomainResponse {
    saveDomainResult?: SaveDomainResult | null;

    init(_data?: any) {
        if (_data) {
            this.saveDomainResult = _data["saveDomainResult"] ? SaveDomainResult.fromJS(_data["saveDomainResult"]) : <any>null;
        }
    }

    static fromJS(data: any): SaveDomainResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SaveDomainResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["saveDomainResult"] = this.saveDomainResult ? this.saveDomainResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveSaveDomainResponse extends SaveDomainResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveSaveDomainResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveDomainResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class BaseSaveResultOfEditDomain extends SaveResult {
    editObject?: EditDomain | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.editObject = _data["editObject"] ? EditDomain.fromJS(_data["editObject"]) : <any>null;
        }
    }

    static fromJS(data: any): BaseSaveResultOfEditDomain {
        data = typeof data === 'object' ? data : {};
        let result = new BaseSaveResultOfEditDomain();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["editObject"] = this.editObject ? this.editObject.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class SaveDomainResult extends BaseSaveResultOfEditDomain {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): SaveDomainResult {
        data = typeof data === 'object' ? data : {};
        let result = new SaveDomainResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class SaveDomainRequest extends WcfProxyUserDetails {
    item?: EditDomain | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.item = _data["item"] ? EditDomain.fromJS(_data["item"]) : <any>null;
        }
    }

    static fromJS(data: any): SaveDomainRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SaveDomainRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item"] = this.item ? this.item.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveSaveDomainRequest extends SaveDomainRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveSaveDomainRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveDomainRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class SaveProductResponse {
    saveProductResult?: SaveProductResult | null;

    init(_data?: any) {
        if (_data) {
            this.saveProductResult = _data["saveProductResult"] ? SaveProductResult.fromJS(_data["saveProductResult"]) : <any>null;
        }
    }

    static fromJS(data: any): SaveProductResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SaveProductResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["saveProductResult"] = this.saveProductResult ? this.saveProductResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveSaveProductResponse extends SaveProductResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveSaveProductResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveProductResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class BaseSaveResultOfEditProduct extends SaveResult {
    editObject?: EditProduct | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.editObject = _data["editObject"] ? EditProduct.fromJS(_data["editObject"]) : <any>null;
        }
    }

    static fromJS(data: any): BaseSaveResultOfEditProduct {
        data = typeof data === 'object' ? data : {};
        let result = new BaseSaveResultOfEditProduct();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["editObject"] = this.editObject ? this.editObject.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class SaveProductResult extends BaseSaveResultOfEditProduct {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): SaveProductResult {
        data = typeof data === 'object' ? data : {};
        let result = new SaveProductResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class SaveProductRequest extends WcfProxyUserDetails {
    item?: EditProduct | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.item = _data["item"] ? EditProduct.fromJS(_data["item"]) : <any>null;
        }
    }

    static fromJS(data: any): SaveProductRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SaveProductRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item"] = this.item ? this.item.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveSaveProductRequest extends SaveProductRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveSaveProductRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveProductRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class SaveSiteResponse {
    saveSiteResult?: SaveSiteResult | null;

    init(_data?: any) {
        if (_data) {
            this.saveSiteResult = _data["saveSiteResult"] ? SaveSiteResult.fromJS(_data["saveSiteResult"]) : <any>null;
        }
    }

    static fromJS(data: any): SaveSiteResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SaveSiteResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["saveSiteResult"] = this.saveSiteResult ? this.saveSiteResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveSaveSiteResponse extends SaveSiteResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveSaveSiteResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveSiteResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class BaseSaveResultOfEditSite extends SaveResult {
    editObject?: EditSite | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.editObject = _data["editObject"] ? EditSite.fromJS(_data["editObject"]) : <any>null;
        }
    }

    static fromJS(data: any): BaseSaveResultOfEditSite {
        data = typeof data === 'object' ? data : {};
        let result = new BaseSaveResultOfEditSite();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["editObject"] = this.editObject ? this.editObject.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class SaveSiteResult extends BaseSaveResultOfEditSite {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): SaveSiteResult {
        data = typeof data === 'object' ? data : {};
        let result = new SaveSiteResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class SaveSiteRequest extends WcfProxyUserDetails {
    site?: EditSite | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.site = _data["site"] ? EditSite.fromJS(_data["site"]) : <any>null;
        }
    }

    static fromJS(data: any): SaveSiteRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SaveSiteRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["site"] = this.site ? this.site.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveSaveSiteRequest extends SaveSiteRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveSaveSiteRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveSiteRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class SaveTankDimensionResponse {
    saveTankDimensionResult?: SaveTankDimensionResult | null;

    init(_data?: any) {
        if (_data) {
            this.saveTankDimensionResult = _data["saveTankDimensionResult"] ? SaveTankDimensionResult.fromJS(_data["saveTankDimensionResult"]) : <any>null;
        }
    }

    static fromJS(data: any): SaveTankDimensionResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SaveTankDimensionResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["saveTankDimensionResult"] = this.saveTankDimensionResult ? this.saveTankDimensionResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveSaveTankDimensionResponse extends SaveTankDimensionResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveSaveTankDimensionResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveTankDimensionResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class BaseSaveResultOfEditTankDimension extends SaveResult {
    editObject?: EditTankDimension | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.editObject = _data["editObject"] ? EditTankDimension.fromJS(_data["editObject"]) : <any>null;
        }
    }

    static fromJS(data: any): BaseSaveResultOfEditTankDimension {
        data = typeof data === 'object' ? data : {};
        let result = new BaseSaveResultOfEditTankDimension();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["editObject"] = this.editObject ? this.editObject.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class SaveTankDimensionResult extends BaseSaveResultOfEditTankDimension {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): SaveTankDimensionResult {
        data = typeof data === 'object' ? data : {};
        let result = new SaveTankDimensionResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class SaveTankDimensionRequest extends WcfProxyUserDetails {
    tankDimension?: EditTankDimension | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.tankDimension = _data["tankDimension"] ? EditTankDimension.fromJS(_data["tankDimension"]) : <any>null;
        }
    }

    static fromJS(data: any): SaveTankDimensionRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SaveTankDimensionRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tankDimension"] = this.tankDimension ? this.tankDimension.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveSaveTankDimensionRequest extends SaveTankDimensionRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveSaveTankDimensionRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveTankDimensionRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveEventRuleGroupRuleInfoListByTypeAndInventoryStatusResponse {
    retrieveEventRuleGroupRuleInfoListByTypeAndInventoryStatusResult?: EventRuleInfo[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["retrieveEventRuleGroupRuleInfoListByTypeAndInventoryStatusResult"])) {
                this.retrieveEventRuleGroupRuleInfoListByTypeAndInventoryStatusResult = [] as any;
                for (let item of _data["retrieveEventRuleGroupRuleInfoListByTypeAndInventoryStatusResult"])
                    this.retrieveEventRuleGroupRuleInfoListByTypeAndInventoryStatusResult!.push(EventRuleInfo.fromJS(item));
            }
            else {
                this.retrieveEventRuleGroupRuleInfoListByTypeAndInventoryStatusResult = <any>null;
            }
        }
    }

    static fromJS(data: any): RetrieveEventRuleGroupRuleInfoListByTypeAndInventoryStatusResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveEventRuleGroupRuleInfoListByTypeAndInventoryStatusResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.retrieveEventRuleGroupRuleInfoListByTypeAndInventoryStatusResult)) {
            data["retrieveEventRuleGroupRuleInfoListByTypeAndInventoryStatusResult"] = [];
            for (let item of this.retrieveEventRuleGroupRuleInfoListByTypeAndInventoryStatusResult)
                data["retrieveEventRuleGroupRuleInfoListByTypeAndInventoryStatusResult"].push(item.toJSON());
        }
        return data;
    }
}

export class EvolveRetrieveEventRuleGroupRuleInfoListByTypeAndInventoryStatusResponse extends RetrieveEventRuleGroupRuleInfoListByTypeAndInventoryStatusResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveEventRuleGroupRuleInfoListByTypeAndInventoryStatusResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveEventRuleGroupRuleInfoListByTypeAndInventoryStatusResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class EventRuleInfo {
    eventRuleId?: number;
    description?: string | null;
    eventRuleGroupId?: number;
    ruleType?: EventRuleType;
    inventoryStatusType?: EventInventoryStatusType | null;
    comparatorType?: EventComparatorType | null;
    importanceLevelType?: EventImportanceLevelType;
    isAlwaysTriggered?: boolean;
    isDisplayedOnGraph?: boolean;
    isEnabled?: boolean;
    eventValue?: number | null;
    sortIndex?: number;
    hysteresis?: number;

    init(_data?: any) {
        if (_data) {
            this.eventRuleId = _data["eventRuleId"] !== undefined ? _data["eventRuleId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.eventRuleGroupId = _data["eventRuleGroupId"] !== undefined ? _data["eventRuleGroupId"] : <any>null;
            this.ruleType = _data["ruleType"] !== undefined ? _data["ruleType"] : <any>null;
            this.inventoryStatusType = _data["inventoryStatusType"] !== undefined ? _data["inventoryStatusType"] : <any>null;
            this.comparatorType = _data["comparatorType"] !== undefined ? _data["comparatorType"] : <any>null;
            this.importanceLevelType = _data["importanceLevelType"] !== undefined ? _data["importanceLevelType"] : <any>null;
            this.isAlwaysTriggered = _data["isAlwaysTriggered"] !== undefined ? _data["isAlwaysTriggered"] : <any>null;
            this.isDisplayedOnGraph = _data["isDisplayedOnGraph"] !== undefined ? _data["isDisplayedOnGraph"] : <any>null;
            this.isEnabled = _data["isEnabled"] !== undefined ? _data["isEnabled"] : <any>null;
            this.eventValue = _data["eventValue"] !== undefined ? _data["eventValue"] : <any>null;
            this.sortIndex = _data["sortIndex"] !== undefined ? _data["sortIndex"] : <any>null;
            this.hysteresis = _data["hysteresis"] !== undefined ? _data["hysteresis"] : <any>null;
        }
    }

    static fromJS(data: any): EventRuleInfo {
        data = typeof data === 'object' ? data : {};
        let result = new EventRuleInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["eventRuleId"] = this.eventRuleId !== undefined ? this.eventRuleId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["eventRuleGroupId"] = this.eventRuleGroupId !== undefined ? this.eventRuleGroupId : <any>null;
        data["ruleType"] = this.ruleType !== undefined ? this.ruleType : <any>null;
        data["inventoryStatusType"] = this.inventoryStatusType !== undefined ? this.inventoryStatusType : <any>null;
        data["comparatorType"] = this.comparatorType !== undefined ? this.comparatorType : <any>null;
        data["importanceLevelType"] = this.importanceLevelType !== undefined ? this.importanceLevelType : <any>null;
        data["isAlwaysTriggered"] = this.isAlwaysTriggered !== undefined ? this.isAlwaysTriggered : <any>null;
        data["isDisplayedOnGraph"] = this.isDisplayedOnGraph !== undefined ? this.isDisplayedOnGraph : <any>null;
        data["isEnabled"] = this.isEnabled !== undefined ? this.isEnabled : <any>null;
        data["eventValue"] = this.eventValue !== undefined ? this.eventValue : <any>null;
        data["sortIndex"] = this.sortIndex !== undefined ? this.sortIndex : <any>null;
        data["hysteresis"] = this.hysteresis !== undefined ? this.hysteresis : <any>null;
        return data;
    }
}

export class RetrieveEventRuleGroupRuleInfoListByTypeAndInventoryStatusRequest extends WcfProxyUserDetails {
    eventRuleGroupId?: number;
    ruleType?: EventRuleType;
    inventoryStatusTypes?: EventInventoryStatusType[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.eventRuleGroupId = _data["eventRuleGroupId"] !== undefined ? _data["eventRuleGroupId"] : <any>null;
            this.ruleType = _data["ruleType"] !== undefined ? _data["ruleType"] : <any>null;
            if (Array.isArray(_data["inventoryStatusTypes"])) {
                this.inventoryStatusTypes = [] as any;
                for (let item of _data["inventoryStatusTypes"])
                    this.inventoryStatusTypes!.push(item);
            }
            else {
                this.inventoryStatusTypes = <any>null;
            }
        }
    }

    static fromJS(data: any): RetrieveEventRuleGroupRuleInfoListByTypeAndInventoryStatusRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveEventRuleGroupRuleInfoListByTypeAndInventoryStatusRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["eventRuleGroupId"] = this.eventRuleGroupId !== undefined ? this.eventRuleGroupId : <any>null;
        data["ruleType"] = this.ruleType !== undefined ? this.ruleType : <any>null;
        if (Array.isArray(this.inventoryStatusTypes)) {
            data["inventoryStatusTypes"] = [];
            for (let item of this.inventoryStatusTypes)
                data["inventoryStatusTypes"].push(item);
        }
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveEventRuleGroupRuleInfoListByTypeAndInventoryStatusRequest extends RetrieveEventRuleGroupRuleInfoListByTypeAndInventoryStatusRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveEventRuleGroupRuleInfoListByTypeAndInventoryStatusRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveEventRuleGroupRuleInfoListByTypeAndInventoryStatusRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class UpdateDataChannelEventRuleToDeactivateEventRequest extends WcfProxyUserDetails {
    eventIds?: number[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["eventIds"])) {
                this.eventIds = [] as any;
                for (let item of _data["eventIds"])
                    this.eventIds!.push(item);
            }
            else {
                this.eventIds = <any>null;
            }
        }
    }

    static fromJS(data: any): UpdateDataChannelEventRuleToDeactivateEventRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateDataChannelEventRuleToDeactivateEventRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.eventIds)) {
            data["eventIds"] = [];
            for (let item of this.eventIds)
                data["eventIds"].push(item);
        }
        super.toJSON(data);
        return data;
    }
}

export class EvolveUpdateDataChannelEventRuleToDeactivateEventRequest extends UpdateDataChannelEventRuleToDeactivateEventRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveUpdateDataChannelEventRuleToDeactivateEventRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveUpdateDataChannelEventRuleToDeactivateEventRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class DeleteDataChannelReadingsByDateRangeResponse {
    deleteDataChannelReadingsByDateRangeResult?: SaveResult | null;

    init(_data?: any) {
        if (_data) {
            this.deleteDataChannelReadingsByDateRangeResult = _data["deleteDataChannelReadingsByDateRangeResult"] ? SaveResult.fromJS(_data["deleteDataChannelReadingsByDateRangeResult"]) : <any>null;
        }
    }

    static fromJS(data: any): DeleteDataChannelReadingsByDateRangeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteDataChannelReadingsByDateRangeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deleteDataChannelReadingsByDateRangeResult"] = this.deleteDataChannelReadingsByDateRangeResult ? this.deleteDataChannelReadingsByDateRangeResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveDeleteDataChannelReadingsByDateRangeResponse extends DeleteDataChannelReadingsByDateRangeResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveDeleteDataChannelReadingsByDateRangeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveDeleteDataChannelReadingsByDateRangeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class DeleteDataChannelReadingsByDateRangeRequest extends WcfProxyUserDetails {
    dataChannelId?: string;
    startTime?: Date;
    endTime?: Date;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.startTime = _data["startTime"] ? new Date(_data["startTime"].toString()) : <any>null;
            this.endTime = _data["endTime"] ? new Date(_data["endTime"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): DeleteDataChannelReadingsByDateRangeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteDataChannelReadingsByDateRangeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>null;
        data["endTime"] = this.endTime ? this.endTime.toISOString() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveDeleteDataChannelReadingsByDateRangeRequest extends DeleteDataChannelReadingsByDateRangeRequest {
    domainId?: string;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveDeleteDataChannelReadingsByDateRangeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveDeleteDataChannelReadingsByDateRangeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class DeleteDataChannelsByIdListResponse {
    deleteDataChannelsByIdListResult?: boolean;

    init(_data?: any) {
        if (_data) {
            this.deleteDataChannelsByIdListResult = _data["deleteDataChannelsByIdListResult"] !== undefined ? _data["deleteDataChannelsByIdListResult"] : <any>null;
        }
    }

    static fromJS(data: any): DeleteDataChannelsByIdListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteDataChannelsByIdListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deleteDataChannelsByIdListResult"] = this.deleteDataChannelsByIdListResult !== undefined ? this.deleteDataChannelsByIdListResult : <any>null;
        return data;
    }
}

export class EvolveDeleteDataChannelsByIdListResponse extends DeleteDataChannelsByIdListResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveDeleteDataChannelsByIdListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveDeleteDataChannelsByIdListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class DeleteDataChannelsByIdListRequest extends WcfProxyUserDetails {
    dataChannelIds?: string[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["dataChannelIds"])) {
                this.dataChannelIds = [] as any;
                for (let item of _data["dataChannelIds"])
                    this.dataChannelIds!.push(item);
            }
            else {
                this.dataChannelIds = <any>null;
            }
        }
    }

    static fromJS(data: any): DeleteDataChannelsByIdListRequest {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteDataChannelsByIdListRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dataChannelIds)) {
            data["dataChannelIds"] = [];
            for (let item of this.dataChannelIds)
                data["dataChannelIds"].push(item);
        }
        super.toJSON(data);
        return data;
    }
}

export class EvolveDeleteDataChannelsByIdListRequest extends DeleteDataChannelsByIdListRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveDeleteDataChannelsByIdListRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveDeleteDataChannelsByIdListRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class ExecuteRescaleDataChannelReadingsByDateRangeResponse {
    executeRescaleDataChannelReadingsByDateRangeResult?: SaveResult | null;

    init(_data?: any) {
        if (_data) {
            this.executeRescaleDataChannelReadingsByDateRangeResult = _data["executeRescaleDataChannelReadingsByDateRangeResult"] ? SaveResult.fromJS(_data["executeRescaleDataChannelReadingsByDateRangeResult"]) : <any>null;
        }
    }

    static fromJS(data: any): ExecuteRescaleDataChannelReadingsByDateRangeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ExecuteRescaleDataChannelReadingsByDateRangeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["executeRescaleDataChannelReadingsByDateRangeResult"] = this.executeRescaleDataChannelReadingsByDateRangeResult ? this.executeRescaleDataChannelReadingsByDateRangeResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveExecuteRescaleDataChannelReadingsByDateRangeResponse extends ExecuteRescaleDataChannelReadingsByDateRangeResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveExecuteRescaleDataChannelReadingsByDateRangeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveExecuteRescaleDataChannelReadingsByDateRangeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class EvolveExecuteRescaleDataChannelReadingsByDateRangeRequest {
    dataChannelId?: string;
    domainId?: string;
    startTime?: Date;

    init(_data?: any) {
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.startTime = _data["startTime"] ? new Date(_data["startTime"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): EvolveExecuteRescaleDataChannelReadingsByDateRangeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveExecuteRescaleDataChannelReadingsByDateRangeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>null;
        return data;
    }
}

export class RecalculateTotalizedDataChannelReadingsByIdResponse {
    recalculateTotalizedDataChannelReadingsByIdResult?: boolean;

    init(_data?: any) {
        if (_data) {
            this.recalculateTotalizedDataChannelReadingsByIdResult = _data["recalculateTotalizedDataChannelReadingsByIdResult"] !== undefined ? _data["recalculateTotalizedDataChannelReadingsByIdResult"] : <any>null;
        }
    }

    static fromJS(data: any): RecalculateTotalizedDataChannelReadingsByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RecalculateTotalizedDataChannelReadingsByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["recalculateTotalizedDataChannelReadingsByIdResult"] = this.recalculateTotalizedDataChannelReadingsByIdResult !== undefined ? this.recalculateTotalizedDataChannelReadingsByIdResult : <any>null;
        return data;
    }
}

export class EvolveRecalculateTotalizedDataChannelReadingsByIdResponse extends RecalculateTotalizedDataChannelReadingsByIdResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRecalculateTotalizedDataChannelReadingsByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRecalculateTotalizedDataChannelReadingsByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RecalculateTotalizedDataChannelReadingsByIdRequest extends WcfProxyUserDetails {
    dataChannelId?: string;
    startDateTime?: Date;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.startDateTime = _data["startDateTime"] ? new Date(_data["startDateTime"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): RecalculateTotalizedDataChannelReadingsByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RecalculateTotalizedDataChannelReadingsByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["startDateTime"] = this.startDateTime ? this.startDateTime.toISOString() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRecalculateTotalizedDataChannelReadingsByIdRequest extends RecalculateTotalizedDataChannelReadingsByIdRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRecalculateTotalizedDataChannelReadingsByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRecalculateTotalizedDataChannelReadingsByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveDataChannelEditComponentsByIdRequest extends WcfProxyUserDetails {
    dataChannelId?: string;
    loadEditComponents?: boolean;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.loadEditComponents = _data["loadEditComponents"] !== undefined ? _data["loadEditComponents"] : <any>null;
        }
    }

    static fromJS(data: any): RetrieveDataChannelEditComponentsByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveDataChannelEditComponentsByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["loadEditComponents"] = this.loadEditComponents !== undefined ? this.loadEditComponents : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveDataChannelEditComponentsByIdRequest extends RetrieveDataChannelEditComponentsByIdRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveDataChannelEditComponentsByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveDataChannelEditComponentsByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveDataChannelInfoRecordByIdResponse {
    retrieveDataChannelInfoRecordByIdResult?: DataChannelInfoRecord | null;

    init(_data?: any) {
        if (_data) {
            this.retrieveDataChannelInfoRecordByIdResult = _data["retrieveDataChannelInfoRecordByIdResult"] ? DataChannelInfoRecord.fromJS(_data["retrieveDataChannelInfoRecordByIdResult"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveDataChannelInfoRecordByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveDataChannelInfoRecordByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["retrieveDataChannelInfoRecordByIdResult"] = this.retrieveDataChannelInfoRecordByIdResult ? this.retrieveDataChannelInfoRecordByIdResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveRetrieveDataChannelInfoRecordByIdResponse extends RetrieveDataChannelInfoRecordByIdResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveDataChannelInfoRecordByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveDataChannelInfoRecordByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class DataChannelInfoRecord {
    dataChannelId?: string;
    domainId?: string;
    dataChannelDescription?: string | null;
    latestScaledValue?: number | null;
    latestScaledValue2?: number | null;
    latestReadingTime?: Date | null;
    dataChannelTemplateName?: string | null;
    assetIsDeleted?: boolean | null;
    assetId?: string | null;
    assetTimeZoneId?: number | null;
    dataChannelType?: string | null;
    dataChannelTypeId?: DataChannelType;
    rtuId?: string | null;
    deviceId?: string | null;
    channelNumber?: string | null;
    productName?: string | null;
    customerName?: string | null;
    assetTitle?: string | null;
    rtuType?: RTUType | null;
    rtuCategory?: RTUCategoryType | null;
    ftpTankIdentifier?: string | null;
    ftpTankIdentifier2?: string | null;
    displayPriority?: number | null;
    dataSourceType?: DataChannelDataSourceType;
    publishedComments?: string | null;
    isPublished?: boolean;
    dataChannelSiteNumber?: string | null;
    referenceCount?: number;

    init(_data?: any) {
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.dataChannelDescription = _data["dataChannelDescription"] !== undefined ? _data["dataChannelDescription"] : <any>null;
            this.latestScaledValue = _data["latestScaledValue"] !== undefined ? _data["latestScaledValue"] : <any>null;
            this.latestScaledValue2 = _data["latestScaledValue2"] !== undefined ? _data["latestScaledValue2"] : <any>null;
            this.latestReadingTime = _data["latestReadingTime"] ? new Date(_data["latestReadingTime"].toString()) : <any>null;
            this.dataChannelTemplateName = _data["dataChannelTemplateName"] !== undefined ? _data["dataChannelTemplateName"] : <any>null;
            this.assetIsDeleted = _data["assetIsDeleted"] !== undefined ? _data["assetIsDeleted"] : <any>null;
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.assetTimeZoneId = _data["assetTimeZoneId"] !== undefined ? _data["assetTimeZoneId"] : <any>null;
            this.dataChannelType = _data["dataChannelType"] !== undefined ? _data["dataChannelType"] : <any>null;
            this.dataChannelTypeId = _data["dataChannelTypeId"] !== undefined ? _data["dataChannelTypeId"] : <any>null;
            this.rtuId = _data["rtuId"] !== undefined ? _data["rtuId"] : <any>null;
            this.deviceId = _data["deviceId"] !== undefined ? _data["deviceId"] : <any>null;
            this.channelNumber = _data["channelNumber"] !== undefined ? _data["channelNumber"] : <any>null;
            this.productName = _data["productName"] !== undefined ? _data["productName"] : <any>null;
            this.customerName = _data["customerName"] !== undefined ? _data["customerName"] : <any>null;
            this.assetTitle = _data["assetTitle"] !== undefined ? _data["assetTitle"] : <any>null;
            this.rtuType = _data["rtuType"] !== undefined ? _data["rtuType"] : <any>null;
            this.rtuCategory = _data["rtuCategory"] !== undefined ? _data["rtuCategory"] : <any>null;
            this.ftpTankIdentifier = _data["ftpTankIdentifier"] !== undefined ? _data["ftpTankIdentifier"] : <any>null;
            this.ftpTankIdentifier2 = _data["ftpTankIdentifier2"] !== undefined ? _data["ftpTankIdentifier2"] : <any>null;
            this.displayPriority = _data["displayPriority"] !== undefined ? _data["displayPriority"] : <any>null;
            this.dataSourceType = _data["dataSourceType"] !== undefined ? _data["dataSourceType"] : <any>null;
            this.publishedComments = _data["publishedComments"] !== undefined ? _data["publishedComments"] : <any>null;
            this.isPublished = _data["isPublished"] !== undefined ? _data["isPublished"] : <any>null;
            this.dataChannelSiteNumber = _data["dataChannelSiteNumber"] !== undefined ? _data["dataChannelSiteNumber"] : <any>null;
            this.referenceCount = _data["referenceCount"] !== undefined ? _data["referenceCount"] : <any>null;
        }
    }

    static fromJS(data: any): DataChannelInfoRecord {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelInfoRecord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["dataChannelDescription"] = this.dataChannelDescription !== undefined ? this.dataChannelDescription : <any>null;
        data["latestScaledValue"] = this.latestScaledValue !== undefined ? this.latestScaledValue : <any>null;
        data["latestScaledValue2"] = this.latestScaledValue2 !== undefined ? this.latestScaledValue2 : <any>null;
        data["latestReadingTime"] = this.latestReadingTime ? this.latestReadingTime.toISOString() : <any>null;
        data["dataChannelTemplateName"] = this.dataChannelTemplateName !== undefined ? this.dataChannelTemplateName : <any>null;
        data["assetIsDeleted"] = this.assetIsDeleted !== undefined ? this.assetIsDeleted : <any>null;
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["assetTimeZoneId"] = this.assetTimeZoneId !== undefined ? this.assetTimeZoneId : <any>null;
        data["dataChannelType"] = this.dataChannelType !== undefined ? this.dataChannelType : <any>null;
        data["dataChannelTypeId"] = this.dataChannelTypeId !== undefined ? this.dataChannelTypeId : <any>null;
        data["rtuId"] = this.rtuId !== undefined ? this.rtuId : <any>null;
        data["deviceId"] = this.deviceId !== undefined ? this.deviceId : <any>null;
        data["channelNumber"] = this.channelNumber !== undefined ? this.channelNumber : <any>null;
        data["productName"] = this.productName !== undefined ? this.productName : <any>null;
        data["customerName"] = this.customerName !== undefined ? this.customerName : <any>null;
        data["assetTitle"] = this.assetTitle !== undefined ? this.assetTitle : <any>null;
        data["rtuType"] = this.rtuType !== undefined ? this.rtuType : <any>null;
        data["rtuCategory"] = this.rtuCategory !== undefined ? this.rtuCategory : <any>null;
        data["ftpTankIdentifier"] = this.ftpTankIdentifier !== undefined ? this.ftpTankIdentifier : <any>null;
        data["ftpTankIdentifier2"] = this.ftpTankIdentifier2 !== undefined ? this.ftpTankIdentifier2 : <any>null;
        data["displayPriority"] = this.displayPriority !== undefined ? this.displayPriority : <any>null;
        data["dataSourceType"] = this.dataSourceType !== undefined ? this.dataSourceType : <any>null;
        data["publishedComments"] = this.publishedComments !== undefined ? this.publishedComments : <any>null;
        data["isPublished"] = this.isPublished !== undefined ? this.isPublished : <any>null;
        data["dataChannelSiteNumber"] = this.dataChannelSiteNumber !== undefined ? this.dataChannelSiteNumber : <any>null;
        data["referenceCount"] = this.referenceCount !== undefined ? this.referenceCount : <any>null;
        return data;
    }
}

export class RetrieveDataChannelInfoRecordByIdRequest extends WcfProxyUserDetails {
    dataChannelId?: string;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
        }
    }

    static fromJS(data: any): RetrieveDataChannelInfoRecordByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveDataChannelInfoRecordByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveDataChannelInfoRecordByIdRequest extends RetrieveDataChannelInfoRecordByIdRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveDataChannelInfoRecordByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveDataChannelInfoRecordByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveDataChannelInfoRecordsByOptionsResponse {
    retrieveDataChannelInfoRecordsByOptionsResult?: RetrieveDataChannelInfoListResult | null;

    init(_data?: any) {
        if (_data) {
            this.retrieveDataChannelInfoRecordsByOptionsResult = _data["retrieveDataChannelInfoRecordsByOptionsResult"] ? RetrieveDataChannelInfoListResult.fromJS(_data["retrieveDataChannelInfoRecordsByOptionsResult"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveDataChannelInfoRecordsByOptionsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveDataChannelInfoRecordsByOptionsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["retrieveDataChannelInfoRecordsByOptionsResult"] = this.retrieveDataChannelInfoRecordsByOptionsResult ? this.retrieveDataChannelInfoRecordsByOptionsResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveRetrieveDataChannelInfoRecordsByOptionsResponse extends RetrieveDataChannelInfoRecordsByOptionsResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveDataChannelInfoRecordsByOptionsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveDataChannelInfoRecordsByOptionsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class BaseListResultOfDataChannelInfoRecord {
    records?: DataChannelInfoRecord[] | null;
    totalRecords?: number | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["records"])) {
                this.records = [] as any;
                for (let item of _data["records"])
                    this.records!.push(DataChannelInfoRecord.fromJS(item));
            }
            else {
                this.records = <any>null;
            }
            this.totalRecords = _data["totalRecords"] !== undefined ? _data["totalRecords"] : <any>null;
        }
    }

    static fromJS(data: any): BaseListResultOfDataChannelInfoRecord {
        data = typeof data === 'object' ? data : {};
        let result = new BaseListResultOfDataChannelInfoRecord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.records)) {
            data["records"] = [];
            for (let item of this.records)
                data["records"].push(item.toJSON());
        }
        data["totalRecords"] = this.totalRecords !== undefined ? this.totalRecords : <any>null;
        return data;
    }
}

export class RetrieveDataChannelInfoListResult extends BaseListResultOfDataChannelInfoRecord {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): RetrieveDataChannelInfoListResult {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveDataChannelInfoListResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveDataChannelInfoRecordsByOptionsRequest extends WcfProxyUserDetails {
    options?: DataChannelInfoRetrievalOptions | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.options = _data["options"] ? DataChannelInfoRetrievalOptions.fromJS(_data["options"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveDataChannelInfoRecordsByOptionsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveDataChannelInfoRecordsByOptionsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["options"] = this.options ? this.options.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveDataChannelInfoRecordsByOptionsRequest extends RetrieveDataChannelInfoRecordsByOptionsRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveDataChannelInfoRecordsByOptionsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveDataChannelInfoRecordsByOptionsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class DataChannelInfoRetrievalOptions extends BaseRetrievalOptions {
    filterBy?: DataChannelListFilterOptions;
    groupBy?: DataChannelListGroupingOptions;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.filterBy = _data["filterBy"] !== undefined ? _data["filterBy"] : <any>null;
            this.groupBy = _data["groupBy"] !== undefined ? _data["groupBy"] : <any>null;
        }
    }

    static fromJS(data: any): DataChannelInfoRetrievalOptions {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelInfoRetrievalOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["filterBy"] = this.filterBy !== undefined ? this.filterBy : <any>null;
        data["groupBy"] = this.groupBy !== undefined ? this.groupBy : <any>null;
        super.toJSON(data);
        return data;
    }
}

export enum DataChannelListFilterOptions {
    Description = 0,
    CustomerName = 1,
    Type = 2,
    RTU = 3,
    AssetTitle = 4,
    PublishedComments = 5,
}

export enum DataChannelListGroupingOptions {
    None = 0,
    Asset = 1,
    CustomerName = 2,
    RTU = 3,
}

export class RetrieveDataChannelReversePollDetailByRTUChannelIdResponse {
    retrieveDataChannelReversePollDetailByRTUChannelIdResult?: EditDataChannelReversePollDetail | null;

    init(_data?: any) {
        if (_data) {
            this.retrieveDataChannelReversePollDetailByRTUChannelIdResult = _data["retrieveDataChannelReversePollDetailByRTUChannelIdResult"] ? EditDataChannelReversePollDetail.fromJS(_data["retrieveDataChannelReversePollDetailByRTUChannelIdResult"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveDataChannelReversePollDetailByRTUChannelIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveDataChannelReversePollDetailByRTUChannelIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["retrieveDataChannelReversePollDetailByRTUChannelIdResult"] = this.retrieveDataChannelReversePollDetailByRTUChannelIdResult ? this.retrieveDataChannelReversePollDetailByRTUChannelIdResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveRetrieveDataChannelReversePollDetailByRtuChannelIdResponse extends RetrieveDataChannelReversePollDetailByRTUChannelIdResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveDataChannelReversePollDetailByRtuChannelIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveDataChannelReversePollDetailByRtuChannelIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class EditDataChannelReversePollDetail extends EditBase {
    rawUnitInfo?: Rtu400SeriesPortConfigurationInputSignalTypeInfo | null;
    rtuChannelId?: string;
    rtuCategory?: RTUCategoryType;
    channelNumber?: string | null;
    channelType?: RTUChannelType;
    maxFallingReversePollPoints?: number;
    maxRisingReversePollPoints?: number;
    reversePollEdge?: number;
    reversePollDelay?: number | null;
    sensorZeroPoint?: number | null;
    sensorSpan?: number | null;
    displayDecimalPlaces?: number | null;
    displayUnits?: UnitType | null;
    displayUnitsAsText?: string | null;
    dataLoggingRate?: number | null;
    transmitInterval?: number | null;
    transmitHour?: number | null;
    rawUnitType?: RawUnitType | null;
    rawUnitsAtSensorMax?: number | null;
    rawUnitsAtSensorMin?: number | null;
    sensorMax?: number | null;
    sensorMin?: number | null;
    maxADC?: number;
    reversePollPoints?: EditDataChannelReversePollPoint[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.rawUnitInfo = _data["rawUnitInfo"] ? Rtu400SeriesPortConfigurationInputSignalTypeInfo.fromJS(_data["rawUnitInfo"]) : <any>null;
            this.rtuChannelId = _data["rtuChannelId"] !== undefined ? _data["rtuChannelId"] : <any>null;
            this.rtuCategory = _data["rtuCategory"] !== undefined ? _data["rtuCategory"] : <any>null;
            this.channelNumber = _data["channelNumber"] !== undefined ? _data["channelNumber"] : <any>null;
            this.channelType = _data["channelType"] !== undefined ? _data["channelType"] : <any>null;
            this.maxFallingReversePollPoints = _data["maxFallingReversePollPoints"] !== undefined ? _data["maxFallingReversePollPoints"] : <any>null;
            this.maxRisingReversePollPoints = _data["maxRisingReversePollPoints"] !== undefined ? _data["maxRisingReversePollPoints"] : <any>null;
            this.reversePollEdge = _data["reversePollEdge"] !== undefined ? _data["reversePollEdge"] : <any>null;
            this.reversePollDelay = _data["reversePollDelay"] !== undefined ? _data["reversePollDelay"] : <any>null;
            this.sensorZeroPoint = _data["sensorZeroPoint"] !== undefined ? _data["sensorZeroPoint"] : <any>null;
            this.sensorSpan = _data["sensorSpan"] !== undefined ? _data["sensorSpan"] : <any>null;
            this.displayDecimalPlaces = _data["displayDecimalPlaces"] !== undefined ? _data["displayDecimalPlaces"] : <any>null;
            this.displayUnits = _data["displayUnits"] !== undefined ? _data["displayUnits"] : <any>null;
            this.displayUnitsAsText = _data["displayUnitsAsText"] !== undefined ? _data["displayUnitsAsText"] : <any>null;
            this.dataLoggingRate = _data["dataLoggingRate"] !== undefined ? _data["dataLoggingRate"] : <any>null;
            this.transmitInterval = _data["transmitInterval"] !== undefined ? _data["transmitInterval"] : <any>null;
            this.transmitHour = _data["transmitHour"] !== undefined ? _data["transmitHour"] : <any>null;
            this.rawUnitType = _data["rawUnitType"] !== undefined ? _data["rawUnitType"] : <any>null;
            this.rawUnitsAtSensorMax = _data["rawUnitsAtSensorMax"] !== undefined ? _data["rawUnitsAtSensorMax"] : <any>null;
            this.rawUnitsAtSensorMin = _data["rawUnitsAtSensorMin"] !== undefined ? _data["rawUnitsAtSensorMin"] : <any>null;
            this.sensorMax = _data["sensorMax"] !== undefined ? _data["sensorMax"] : <any>null;
            this.sensorMin = _data["sensorMin"] !== undefined ? _data["sensorMin"] : <any>null;
            this.maxADC = _data["maxADC"] !== undefined ? _data["maxADC"] : <any>null;
            if (Array.isArray(_data["reversePollPoints"])) {
                this.reversePollPoints = [] as any;
                for (let item of _data["reversePollPoints"])
                    this.reversePollPoints!.push(EditDataChannelReversePollPoint.fromJS(item));
            }
            else {
                this.reversePollPoints = <any>null;
            }
        }
    }

    static fromJS(data: any): EditDataChannelReversePollDetail {
        data = typeof data === 'object' ? data : {};
        let result = new EditDataChannelReversePollDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rawUnitInfo"] = this.rawUnitInfo ? this.rawUnitInfo.toJSON() : <any>null;
        data["rtuChannelId"] = this.rtuChannelId !== undefined ? this.rtuChannelId : <any>null;
        data["rtuCategory"] = this.rtuCategory !== undefined ? this.rtuCategory : <any>null;
        data["channelNumber"] = this.channelNumber !== undefined ? this.channelNumber : <any>null;
        data["channelType"] = this.channelType !== undefined ? this.channelType : <any>null;
        data["maxFallingReversePollPoints"] = this.maxFallingReversePollPoints !== undefined ? this.maxFallingReversePollPoints : <any>null;
        data["maxRisingReversePollPoints"] = this.maxRisingReversePollPoints !== undefined ? this.maxRisingReversePollPoints : <any>null;
        data["reversePollEdge"] = this.reversePollEdge !== undefined ? this.reversePollEdge : <any>null;
        data["reversePollDelay"] = this.reversePollDelay !== undefined ? this.reversePollDelay : <any>null;
        data["sensorZeroPoint"] = this.sensorZeroPoint !== undefined ? this.sensorZeroPoint : <any>null;
        data["sensorSpan"] = this.sensorSpan !== undefined ? this.sensorSpan : <any>null;
        data["displayDecimalPlaces"] = this.displayDecimalPlaces !== undefined ? this.displayDecimalPlaces : <any>null;
        data["displayUnits"] = this.displayUnits !== undefined ? this.displayUnits : <any>null;
        data["displayUnitsAsText"] = this.displayUnitsAsText !== undefined ? this.displayUnitsAsText : <any>null;
        data["dataLoggingRate"] = this.dataLoggingRate !== undefined ? this.dataLoggingRate : <any>null;
        data["transmitInterval"] = this.transmitInterval !== undefined ? this.transmitInterval : <any>null;
        data["transmitHour"] = this.transmitHour !== undefined ? this.transmitHour : <any>null;
        data["rawUnitType"] = this.rawUnitType !== undefined ? this.rawUnitType : <any>null;
        data["rawUnitsAtSensorMax"] = this.rawUnitsAtSensorMax !== undefined ? this.rawUnitsAtSensorMax : <any>null;
        data["rawUnitsAtSensorMin"] = this.rawUnitsAtSensorMin !== undefined ? this.rawUnitsAtSensorMin : <any>null;
        data["sensorMax"] = this.sensorMax !== undefined ? this.sensorMax : <any>null;
        data["sensorMin"] = this.sensorMin !== undefined ? this.sensorMin : <any>null;
        data["maxADC"] = this.maxADC !== undefined ? this.maxADC : <any>null;
        if (Array.isArray(this.reversePollPoints)) {
            data["reversePollPoints"] = [];
            for (let item of this.reversePollPoints)
                data["reversePollPoints"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export class Rtu400SeriesPortConfigurationInputSignalTypeInfo {
    rtu400SeriesPortConfigurationInputSignalTypeId?: number;
    rtu400SeriesPortConfigurationId?: number;
    inputSignalTypeId?: number;
    name?: string | null;
    unitSymbol?: string | null;
    valueAtZeroADC?: number;
    valueAtFullScaleADC?: number;
    defaultRUAtScaledMinADC?: number;
    defaultRUAtScaledMaxADC?: number;

    init(_data?: any) {
        if (_data) {
            this.rtu400SeriesPortConfigurationInputSignalTypeId = _data["rtu400SeriesPortConfigurationInputSignalTypeId"] !== undefined ? _data["rtu400SeriesPortConfigurationInputSignalTypeId"] : <any>null;
            this.rtu400SeriesPortConfigurationId = _data["rtu400SeriesPortConfigurationId"] !== undefined ? _data["rtu400SeriesPortConfigurationId"] : <any>null;
            this.inputSignalTypeId = _data["inputSignalTypeId"] !== undefined ? _data["inputSignalTypeId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.unitSymbol = _data["unitSymbol"] !== undefined ? _data["unitSymbol"] : <any>null;
            this.valueAtZeroADC = _data["valueAtZeroADC"] !== undefined ? _data["valueAtZeroADC"] : <any>null;
            this.valueAtFullScaleADC = _data["valueAtFullScaleADC"] !== undefined ? _data["valueAtFullScaleADC"] : <any>null;
            this.defaultRUAtScaledMinADC = _data["defaultRUAtScaledMinADC"] !== undefined ? _data["defaultRUAtScaledMinADC"] : <any>null;
            this.defaultRUAtScaledMaxADC = _data["defaultRUAtScaledMaxADC"] !== undefined ? _data["defaultRUAtScaledMaxADC"] : <any>null;
        }
    }

    static fromJS(data: any): Rtu400SeriesPortConfigurationInputSignalTypeInfo {
        data = typeof data === 'object' ? data : {};
        let result = new Rtu400SeriesPortConfigurationInputSignalTypeInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rtu400SeriesPortConfigurationInputSignalTypeId"] = this.rtu400SeriesPortConfigurationInputSignalTypeId !== undefined ? this.rtu400SeriesPortConfigurationInputSignalTypeId : <any>null;
        data["rtu400SeriesPortConfigurationId"] = this.rtu400SeriesPortConfigurationId !== undefined ? this.rtu400SeriesPortConfigurationId : <any>null;
        data["inputSignalTypeId"] = this.inputSignalTypeId !== undefined ? this.inputSignalTypeId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["unitSymbol"] = this.unitSymbol !== undefined ? this.unitSymbol : <any>null;
        data["valueAtZeroADC"] = this.valueAtZeroADC !== undefined ? this.valueAtZeroADC : <any>null;
        data["valueAtFullScaleADC"] = this.valueAtFullScaleADC !== undefined ? this.valueAtFullScaleADC : <any>null;
        data["defaultRUAtScaledMinADC"] = this.defaultRUAtScaledMinADC !== undefined ? this.defaultRUAtScaledMinADC : <any>null;
        data["defaultRUAtScaledMaxADC"] = this.defaultRUAtScaledMaxADC !== undefined ? this.defaultRUAtScaledMaxADC : <any>null;
        return data;
    }
}

export class EditDataChannelReversePollPoint extends EditBase {
    index?: number;
    level?: number | null;
    adjust?: number | null;
    setPointType?: RTUChannelSetPointType | null;
    direction?: RTUReversePollDirectionType;
    nullableDirection?: RTUReversePollDirectionType | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.index = _data["index"] !== undefined ? _data["index"] : <any>null;
            this.level = _data["level"] !== undefined ? _data["level"] : <any>null;
            this.adjust = _data["adjust"] !== undefined ? _data["adjust"] : <any>null;
            this.setPointType = _data["setPointType"] !== undefined ? _data["setPointType"] : <any>null;
            this.direction = _data["direction"] !== undefined ? _data["direction"] : <any>null;
            this.nullableDirection = _data["nullableDirection"] !== undefined ? _data["nullableDirection"] : <any>null;
        }
    }

    static fromJS(data: any): EditDataChannelReversePollPoint {
        data = typeof data === 'object' ? data : {};
        let result = new EditDataChannelReversePollPoint();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["index"] = this.index !== undefined ? this.index : <any>null;
        data["level"] = this.level !== undefined ? this.level : <any>null;
        data["adjust"] = this.adjust !== undefined ? this.adjust : <any>null;
        data["setPointType"] = this.setPointType !== undefined ? this.setPointType : <any>null;
        data["direction"] = this.direction !== undefined ? this.direction : <any>null;
        data["nullableDirection"] = this.nullableDirection !== undefined ? this.nullableDirection : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class RetrieveDataChannelReversePollDetailByRTUChannelIdRequest extends WcfProxyUserDetails {
    dataChannelId?: string;
    rtuChannelId?: string;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.rtuChannelId = _data["rtuChannelId"] !== undefined ? _data["rtuChannelId"] : <any>null;
        }
    }

    static fromJS(data: any): RetrieveDataChannelReversePollDetailByRTUChannelIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveDataChannelReversePollDetailByRTUChannelIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["rtuChannelId"] = this.rtuChannelId !== undefined ? this.rtuChannelId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveDataChannelReversePollDetailByRtuChannelIdRequest extends RetrieveDataChannelReversePollDetailByRTUChannelIdRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveDataChannelReversePollDetailByRtuChannelIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveDataChannelReversePollDetailByRtuChannelIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrievePublishedDataChannelSearchInfoListByCommentsResponse {
    retrievePublishedDataChannelSearchInfoListByCommentsResult?: PublishedDataChannelSearchInfo[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["retrievePublishedDataChannelSearchInfoListByCommentsResult"])) {
                this.retrievePublishedDataChannelSearchInfoListByCommentsResult = [] as any;
                for (let item of _data["retrievePublishedDataChannelSearchInfoListByCommentsResult"])
                    this.retrievePublishedDataChannelSearchInfoListByCommentsResult!.push(PublishedDataChannelSearchInfo.fromJS(item));
            }
            else {
                this.retrievePublishedDataChannelSearchInfoListByCommentsResult = <any>null;
            }
        }
    }

    static fromJS(data: any): RetrievePublishedDataChannelSearchInfoListByCommentsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrievePublishedDataChannelSearchInfoListByCommentsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.retrievePublishedDataChannelSearchInfoListByCommentsResult)) {
            data["retrievePublishedDataChannelSearchInfoListByCommentsResult"] = [];
            for (let item of this.retrievePublishedDataChannelSearchInfoListByCommentsResult)
                data["retrievePublishedDataChannelSearchInfoListByCommentsResult"].push(item.toJSON());
        }
        return data;
    }
}

export class EvolveRetrievePublishedDataChannelSearchInfoListByCommentsResponse extends RetrievePublishedDataChannelSearchInfoListByCommentsResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrievePublishedDataChannelSearchInfoListByCommentsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrievePublishedDataChannelSearchInfoListByCommentsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class PublishedDataChannelSearchInfo {
    dataChannelPublishInfoId?: number;
    sourceDataChannelId?: string;
    publishedComments?: string | null;
    sourceDomainId?: string;
    sourceDomainName?: string | null;
    publishedDate?: Date | null;
    unpublishedDate?: Date | null;

    init(_data?: any) {
        if (_data) {
            this.dataChannelPublishInfoId = _data["dataChannelPublishInfoId"] !== undefined ? _data["dataChannelPublishInfoId"] : <any>null;
            this.sourceDataChannelId = _data["sourceDataChannelId"] !== undefined ? _data["sourceDataChannelId"] : <any>null;
            this.publishedComments = _data["publishedComments"] !== undefined ? _data["publishedComments"] : <any>null;
            this.sourceDomainId = _data["sourceDomainId"] !== undefined ? _data["sourceDomainId"] : <any>null;
            this.sourceDomainName = _data["sourceDomainName"] !== undefined ? _data["sourceDomainName"] : <any>null;
            this.publishedDate = _data["publishedDate"] ? new Date(_data["publishedDate"].toString()) : <any>null;
            this.unpublishedDate = _data["unpublishedDate"] ? new Date(_data["unpublishedDate"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): PublishedDataChannelSearchInfo {
        data = typeof data === 'object' ? data : {};
        let result = new PublishedDataChannelSearchInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelPublishInfoId"] = this.dataChannelPublishInfoId !== undefined ? this.dataChannelPublishInfoId : <any>null;
        data["sourceDataChannelId"] = this.sourceDataChannelId !== undefined ? this.sourceDataChannelId : <any>null;
        data["publishedComments"] = this.publishedComments !== undefined ? this.publishedComments : <any>null;
        data["sourceDomainId"] = this.sourceDomainId !== undefined ? this.sourceDomainId : <any>null;
        data["sourceDomainName"] = this.sourceDomainName !== undefined ? this.sourceDomainName : <any>null;
        data["publishedDate"] = this.publishedDate ? this.publishedDate.toISOString() : <any>null;
        data["unpublishedDate"] = this.unpublishedDate ? this.unpublishedDate.toISOString() : <any>null;
        return data;
    }
}

export class RetrievePublishedDataChannelSearchInfoListByCommentsRequest extends WcfProxyUserDetails {
    options?: PublishedDataChannelSearchOptions | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.options = _data["options"] ? PublishedDataChannelSearchOptions.fromJS(_data["options"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrievePublishedDataChannelSearchInfoListByCommentsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrievePublishedDataChannelSearchInfoListByCommentsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["options"] = this.options ? this.options.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrievePublishedDataChannelSearchInfoListByCommentsRequest extends RetrievePublishedDataChannelSearchInfoListByCommentsRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrievePublishedDataChannelSearchInfoListByCommentsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrievePublishedDataChannelSearchInfoListByCommentsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class PublishedDataChannelSearchOptions {
    publishedComments?: string | null;
    domainId?: string | null;
    dataChannelType?: DataChannelType | null;
    subscriberDataChannelId?: string | null;
    maxRecords?: number;

    init(_data?: any) {
        if (_data) {
            this.publishedComments = _data["publishedComments"] !== undefined ? _data["publishedComments"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.dataChannelType = _data["dataChannelType"] !== undefined ? _data["dataChannelType"] : <any>null;
            this.subscriberDataChannelId = _data["subscriberDataChannelId"] !== undefined ? _data["subscriberDataChannelId"] : <any>null;
            this.maxRecords = _data["maxRecords"] !== undefined ? _data["maxRecords"] : <any>null;
        }
    }

    static fromJS(data: any): PublishedDataChannelSearchOptions {
        data = typeof data === 'object' ? data : {};
        let result = new PublishedDataChannelSearchOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["publishedComments"] = this.publishedComments !== undefined ? this.publishedComments : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["dataChannelType"] = this.dataChannelType !== undefined ? this.dataChannelType : <any>null;
        data["subscriberDataChannelId"] = this.subscriberDataChannelId !== undefined ? this.subscriberDataChannelId : <any>null;
        data["maxRecords"] = this.maxRecords !== undefined ? this.maxRecords : <any>null;
        return data;
    }
}

export class RetrieveRateOfChangeDataChannelEditComponentsByIdResponse {
    retrieveRateOfChangeDataChannelEditComponentsByIdResult?: RetrieveRateOfChangeDataChannelEditComponentsResult | null;

    init(_data?: any) {
        if (_data) {
            this.retrieveRateOfChangeDataChannelEditComponentsByIdResult = _data["retrieveRateOfChangeDataChannelEditComponentsByIdResult"] ? RetrieveRateOfChangeDataChannelEditComponentsResult.fromJS(_data["retrieveRateOfChangeDataChannelEditComponentsByIdResult"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveRateOfChangeDataChannelEditComponentsByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveRateOfChangeDataChannelEditComponentsByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["retrieveRateOfChangeDataChannelEditComponentsByIdResult"] = this.retrieveRateOfChangeDataChannelEditComponentsByIdResult ? this.retrieveRateOfChangeDataChannelEditComponentsByIdResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveRetrieveRateOfChangeDataChannelEditComponentsByIdResponse extends RetrieveRateOfChangeDataChannelEditComponentsByIdResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveRateOfChangeDataChannelEditComponentsByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveRateOfChangeDataChannelEditComponentsByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class BaseEditComponentsResultOfEditRateOfChangeDataChannel {
    editObject?: EditRateOfChangeDataChannel | null;
    areEditComponentsLoaded?: boolean;

    init(_data?: any) {
        if (_data) {
            this.editObject = _data["editObject"] ? EditRateOfChangeDataChannel.fromJS(_data["editObject"]) : <any>null;
            this.areEditComponentsLoaded = _data["areEditComponentsLoaded"] !== undefined ? _data["areEditComponentsLoaded"] : <any>null;
        }
    }

    static fromJS(data: any): BaseEditComponentsResultOfEditRateOfChangeDataChannel {
        data = typeof data === 'object' ? data : {};
        let result = new BaseEditComponentsResultOfEditRateOfChangeDataChannel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["editObject"] = this.editObject ? this.editObject.toJSON() : <any>null;
        data["areEditComponentsLoaded"] = this.areEditComponentsLoaded !== undefined ? this.areEditComponentsLoaded : <any>null;
        return data;
    }
}

export class RetrieveRateOfChangeDataChannelEditComponentsResult extends BaseEditComponentsResultOfEditRateOfChangeDataChannel {
    dataChannelTemplates?: DataChannelTemplateDetail[] | null;
    assetDataChannels?: DataChannelComponentInfo[] | null;
    ftpTargetDomains?: FtpDomainInfo[] | null;
    rosters?: DataChannelEventRuleRosterInfo[] | null;
    eventRuleGroups?: EventRuleGroupInfo[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["dataChannelTemplates"])) {
                this.dataChannelTemplates = [] as any;
                for (let item of _data["dataChannelTemplates"])
                    this.dataChannelTemplates!.push(DataChannelTemplateDetail.fromJS(item));
            }
            else {
                this.dataChannelTemplates = <any>null;
            }
            if (Array.isArray(_data["assetDataChannels"])) {
                this.assetDataChannels = [] as any;
                for (let item of _data["assetDataChannels"])
                    this.assetDataChannels!.push(DataChannelComponentInfo.fromJS(item));
            }
            else {
                this.assetDataChannels = <any>null;
            }
            if (Array.isArray(_data["ftpTargetDomains"])) {
                this.ftpTargetDomains = [] as any;
                for (let item of _data["ftpTargetDomains"])
                    this.ftpTargetDomains!.push(FtpDomainInfo.fromJS(item));
            }
            else {
                this.ftpTargetDomains = <any>null;
            }
            if (Array.isArray(_data["rosters"])) {
                this.rosters = [] as any;
                for (let item of _data["rosters"])
                    this.rosters!.push(DataChannelEventRuleRosterInfo.fromJS(item));
            }
            else {
                this.rosters = <any>null;
            }
            if (Array.isArray(_data["eventRuleGroups"])) {
                this.eventRuleGroups = [] as any;
                for (let item of _data["eventRuleGroups"])
                    this.eventRuleGroups!.push(EventRuleGroupInfo.fromJS(item));
            }
            else {
                this.eventRuleGroups = <any>null;
            }
        }
    }

    static fromJS(data: any): RetrieveRateOfChangeDataChannelEditComponentsResult {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveRateOfChangeDataChannelEditComponentsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dataChannelTemplates)) {
            data["dataChannelTemplates"] = [];
            for (let item of this.dataChannelTemplates)
                data["dataChannelTemplates"].push(item.toJSON());
        }
        if (Array.isArray(this.assetDataChannels)) {
            data["assetDataChannels"] = [];
            for (let item of this.assetDataChannels)
                data["assetDataChannels"].push(item.toJSON());
        }
        if (Array.isArray(this.ftpTargetDomains)) {
            data["ftpTargetDomains"] = [];
            for (let item of this.ftpTargetDomains)
                data["ftpTargetDomains"].push(item.toJSON());
        }
        if (Array.isArray(this.rosters)) {
            data["rosters"] = [];
            for (let item of this.rosters)
                data["rosters"].push(item.toJSON());
        }
        if (Array.isArray(this.eventRuleGroups)) {
            data["eventRuleGroups"] = [];
            for (let item of this.eventRuleGroups)
                data["eventRuleGroups"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export class DataChannelComponentInfo {
    dataChannelId?: string;
    dataChannelDescription?: string | null;
    assetId?: string | null;
    assetTimeZoneId?: number | null;
    dataChannelTypeId?: DataChannelType;
    rtuId?: string | null;
    deviceId?: string | null;
    channelNumber?: string | null;
    ftpTankIdentifier?: string | null;
    ftpTankIdentifier2?: string | null;
    ftpDomainId?: string | null;
    ftpDomainId2?: string | null;
    productName?: string | null;
    productDescription?: string | null;
    displayUnits?: UnitType | null;
    displayUnitsAsText?: string | null;
    scaledUnits?: UnitType | null;
    scaledUnitsAsText?: string | null;
    isVolumetric?: boolean;
    scaledMin?: number;
    scaledMax?: number;
    scaledMaxProductHeight?: number;
    maxProductHeight?: number | null;
    productSpecificGravity?: number | null;
    standardVolumePerCubicMeter?: number | null;
    tankType?: TankType | null;
    useStrappingChartForConversion?: boolean;
    strappingLevelUnits?: UnitType | null;
    strappingVolumeUnits?: UnitType | null;
    tankDiameterInMeters?: number | null;
    tankLengthInMeters?: number | null;
    tankDishHeightInMeters?: number | null;
    tankHeightInMeters?: number | null;
    tankWidthInMeters?: number | null;
    strappingChartInfo?: StrappingChartInfo[] | null;

    init(_data?: any) {
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.dataChannelDescription = _data["dataChannelDescription"] !== undefined ? _data["dataChannelDescription"] : <any>null;
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.assetTimeZoneId = _data["assetTimeZoneId"] !== undefined ? _data["assetTimeZoneId"] : <any>null;
            this.dataChannelTypeId = _data["dataChannelTypeId"] !== undefined ? _data["dataChannelTypeId"] : <any>null;
            this.rtuId = _data["rtuId"] !== undefined ? _data["rtuId"] : <any>null;
            this.deviceId = _data["deviceId"] !== undefined ? _data["deviceId"] : <any>null;
            this.channelNumber = _data["channelNumber"] !== undefined ? _data["channelNumber"] : <any>null;
            this.ftpTankIdentifier = _data["ftpTankIdentifier"] !== undefined ? _data["ftpTankIdentifier"] : <any>null;
            this.ftpTankIdentifier2 = _data["ftpTankIdentifier2"] !== undefined ? _data["ftpTankIdentifier2"] : <any>null;
            this.ftpDomainId = _data["ftpDomainId"] !== undefined ? _data["ftpDomainId"] : <any>null;
            this.ftpDomainId2 = _data["ftpDomainId2"] !== undefined ? _data["ftpDomainId2"] : <any>null;
            this.productName = _data["productName"] !== undefined ? _data["productName"] : <any>null;
            this.productDescription = _data["productDescription"] !== undefined ? _data["productDescription"] : <any>null;
            this.displayUnits = _data["displayUnits"] !== undefined ? _data["displayUnits"] : <any>null;
            this.displayUnitsAsText = _data["displayUnitsAsText"] !== undefined ? _data["displayUnitsAsText"] : <any>null;
            this.scaledUnits = _data["scaledUnits"] !== undefined ? _data["scaledUnits"] : <any>null;
            this.scaledUnitsAsText = _data["scaledUnitsAsText"] !== undefined ? _data["scaledUnitsAsText"] : <any>null;
            this.isVolumetric = _data["isVolumetric"] !== undefined ? _data["isVolumetric"] : <any>null;
            this.scaledMin = _data["scaledMin"] !== undefined ? _data["scaledMin"] : <any>null;
            this.scaledMax = _data["scaledMax"] !== undefined ? _data["scaledMax"] : <any>null;
            this.scaledMaxProductHeight = _data["scaledMaxProductHeight"] !== undefined ? _data["scaledMaxProductHeight"] : <any>null;
            this.maxProductHeight = _data["maxProductHeight"] !== undefined ? _data["maxProductHeight"] : <any>null;
            this.productSpecificGravity = _data["productSpecificGravity"] !== undefined ? _data["productSpecificGravity"] : <any>null;
            this.standardVolumePerCubicMeter = _data["standardVolumePerCubicMeter"] !== undefined ? _data["standardVolumePerCubicMeter"] : <any>null;
            this.tankType = _data["tankType"] !== undefined ? _data["tankType"] : <any>null;
            this.useStrappingChartForConversion = _data["useStrappingChartForConversion"] !== undefined ? _data["useStrappingChartForConversion"] : <any>null;
            this.strappingLevelUnits = _data["strappingLevelUnits"] !== undefined ? _data["strappingLevelUnits"] : <any>null;
            this.strappingVolumeUnits = _data["strappingVolumeUnits"] !== undefined ? _data["strappingVolumeUnits"] : <any>null;
            this.tankDiameterInMeters = _data["tankDiameterInMeters"] !== undefined ? _data["tankDiameterInMeters"] : <any>null;
            this.tankLengthInMeters = _data["tankLengthInMeters"] !== undefined ? _data["tankLengthInMeters"] : <any>null;
            this.tankDishHeightInMeters = _data["tankDishHeightInMeters"] !== undefined ? _data["tankDishHeightInMeters"] : <any>null;
            this.tankHeightInMeters = _data["tankHeightInMeters"] !== undefined ? _data["tankHeightInMeters"] : <any>null;
            this.tankWidthInMeters = _data["tankWidthInMeters"] !== undefined ? _data["tankWidthInMeters"] : <any>null;
            if (Array.isArray(_data["strappingChartInfo"])) {
                this.strappingChartInfo = [] as any;
                for (let item of _data["strappingChartInfo"])
                    this.strappingChartInfo!.push(StrappingChartInfo.fromJS(item));
            }
            else {
                this.strappingChartInfo = <any>null;
            }
        }
    }

    static fromJS(data: any): DataChannelComponentInfo {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelComponentInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["dataChannelDescription"] = this.dataChannelDescription !== undefined ? this.dataChannelDescription : <any>null;
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["assetTimeZoneId"] = this.assetTimeZoneId !== undefined ? this.assetTimeZoneId : <any>null;
        data["dataChannelTypeId"] = this.dataChannelTypeId !== undefined ? this.dataChannelTypeId : <any>null;
        data["rtuId"] = this.rtuId !== undefined ? this.rtuId : <any>null;
        data["deviceId"] = this.deviceId !== undefined ? this.deviceId : <any>null;
        data["channelNumber"] = this.channelNumber !== undefined ? this.channelNumber : <any>null;
        data["ftpTankIdentifier"] = this.ftpTankIdentifier !== undefined ? this.ftpTankIdentifier : <any>null;
        data["ftpTankIdentifier2"] = this.ftpTankIdentifier2 !== undefined ? this.ftpTankIdentifier2 : <any>null;
        data["ftpDomainId"] = this.ftpDomainId !== undefined ? this.ftpDomainId : <any>null;
        data["ftpDomainId2"] = this.ftpDomainId2 !== undefined ? this.ftpDomainId2 : <any>null;
        data["productName"] = this.productName !== undefined ? this.productName : <any>null;
        data["productDescription"] = this.productDescription !== undefined ? this.productDescription : <any>null;
        data["displayUnits"] = this.displayUnits !== undefined ? this.displayUnits : <any>null;
        data["displayUnitsAsText"] = this.displayUnitsAsText !== undefined ? this.displayUnitsAsText : <any>null;
        data["scaledUnits"] = this.scaledUnits !== undefined ? this.scaledUnits : <any>null;
        data["scaledUnitsAsText"] = this.scaledUnitsAsText !== undefined ? this.scaledUnitsAsText : <any>null;
        data["isVolumetric"] = this.isVolumetric !== undefined ? this.isVolumetric : <any>null;
        data["scaledMin"] = this.scaledMin !== undefined ? this.scaledMin : <any>null;
        data["scaledMax"] = this.scaledMax !== undefined ? this.scaledMax : <any>null;
        data["scaledMaxProductHeight"] = this.scaledMaxProductHeight !== undefined ? this.scaledMaxProductHeight : <any>null;
        data["maxProductHeight"] = this.maxProductHeight !== undefined ? this.maxProductHeight : <any>null;
        data["productSpecificGravity"] = this.productSpecificGravity !== undefined ? this.productSpecificGravity : <any>null;
        data["standardVolumePerCubicMeter"] = this.standardVolumePerCubicMeter !== undefined ? this.standardVolumePerCubicMeter : <any>null;
        data["tankType"] = this.tankType !== undefined ? this.tankType : <any>null;
        data["useStrappingChartForConversion"] = this.useStrappingChartForConversion !== undefined ? this.useStrappingChartForConversion : <any>null;
        data["strappingLevelUnits"] = this.strappingLevelUnits !== undefined ? this.strappingLevelUnits : <any>null;
        data["strappingVolumeUnits"] = this.strappingVolumeUnits !== undefined ? this.strappingVolumeUnits : <any>null;
        data["tankDiameterInMeters"] = this.tankDiameterInMeters !== undefined ? this.tankDiameterInMeters : <any>null;
        data["tankLengthInMeters"] = this.tankLengthInMeters !== undefined ? this.tankLengthInMeters : <any>null;
        data["tankDishHeightInMeters"] = this.tankDishHeightInMeters !== undefined ? this.tankDishHeightInMeters : <any>null;
        data["tankHeightInMeters"] = this.tankHeightInMeters !== undefined ? this.tankHeightInMeters : <any>null;
        data["tankWidthInMeters"] = this.tankWidthInMeters !== undefined ? this.tankWidthInMeters : <any>null;
        if (Array.isArray(this.strappingChartInfo)) {
            data["strappingChartInfo"] = [];
            for (let item of this.strappingChartInfo)
                data["strappingChartInfo"].push(item.toJSON());
        }
        return data;
    }
}

export class EditRateOfChangeDataChannel extends EditBase {
    dataChannelId?: string;
    name?: string | null;
    description?: string | null;
    type?: DataChannelType;
    gasMixerDataChannelType?: GasMixerDataChannelType | null;
    dataChannelTemplateId?: string;
    domainId?: string;
    assetId?: string | null;
    assetType?: AssetType | null;
    assetDescription?: string | null;
    assetTimeZoneId?: number | null;
    siteId?: string | null;
    siteNumber?: string | null;
    siteCustomerName?: string | null;
    siteCity?: string | null;
    siteState?: string | null;
    sourceDataChannelId?: string | null;
    autoGenerateFtpId1?: boolean;
    autoGenerateFtpId2?: boolean;
    scaledUnits?: UnitType | null;
    scaledUnitsAsText?: string | null;
    displayUnits?: UnitType | null;
    displayUnitsAsText?: string | null;
    ftpDomainId?: string | null;
    ftpDomainId2?: string | null;
    ftpEnabled?: boolean;
    ftpEnabled2?: boolean;
    ftpTankIdentifier?: string | null;
    ftpTankIdentifier2?: string | null;
    decimalPlaces?: number;
    latestScaledValue?: number | null;
    latestScaledValue2?: number | null;
    latestReadingTimestamp?: Date | null;
    graphMin?: number | null;
    graphMax?: number | null;
    displayPriority?: number | null;
    eventRuleGroupId?: number | null;
    apciTankFunction?: APCITankFunctionType | null;
    isAPCISendToLBShell?: boolean;
    apciUnits?: APCIUnitType | null;
    isAPCILBShellSubscriber?: boolean;
    eventRules?: EditDataChannelEventRule[] | null;
    aggregationModeType?: AggregationModeType | null;
    aggregationPeriodHours?: number | null;
    scaleFactor?: number | null;
    isUsageRate?: boolean | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.gasMixerDataChannelType = _data["gasMixerDataChannelType"] !== undefined ? _data["gasMixerDataChannelType"] : <any>null;
            this.dataChannelTemplateId = _data["dataChannelTemplateId"] !== undefined ? _data["dataChannelTemplateId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.assetType = _data["assetType"] !== undefined ? _data["assetType"] : <any>null;
            this.assetDescription = _data["assetDescription"] !== undefined ? _data["assetDescription"] : <any>null;
            this.assetTimeZoneId = _data["assetTimeZoneId"] !== undefined ? _data["assetTimeZoneId"] : <any>null;
            this.siteId = _data["siteId"] !== undefined ? _data["siteId"] : <any>null;
            this.siteNumber = _data["siteNumber"] !== undefined ? _data["siteNumber"] : <any>null;
            this.siteCustomerName = _data["siteCustomerName"] !== undefined ? _data["siteCustomerName"] : <any>null;
            this.siteCity = _data["siteCity"] !== undefined ? _data["siteCity"] : <any>null;
            this.siteState = _data["siteState"] !== undefined ? _data["siteState"] : <any>null;
            this.sourceDataChannelId = _data["sourceDataChannelId"] !== undefined ? _data["sourceDataChannelId"] : <any>null;
            this.autoGenerateFtpId1 = _data["autoGenerateFtpId1"] !== undefined ? _data["autoGenerateFtpId1"] : <any>null;
            this.autoGenerateFtpId2 = _data["autoGenerateFtpId2"] !== undefined ? _data["autoGenerateFtpId2"] : <any>null;
            this.scaledUnits = _data["scaledUnits"] !== undefined ? _data["scaledUnits"] : <any>null;
            this.scaledUnitsAsText = _data["scaledUnitsAsText"] !== undefined ? _data["scaledUnitsAsText"] : <any>null;
            this.displayUnits = _data["displayUnits"] !== undefined ? _data["displayUnits"] : <any>null;
            this.displayUnitsAsText = _data["displayUnitsAsText"] !== undefined ? _data["displayUnitsAsText"] : <any>null;
            this.ftpDomainId = _data["ftpDomainId"] !== undefined ? _data["ftpDomainId"] : <any>null;
            this.ftpDomainId2 = _data["ftpDomainId2"] !== undefined ? _data["ftpDomainId2"] : <any>null;
            this.ftpEnabled = _data["ftpEnabled"] !== undefined ? _data["ftpEnabled"] : <any>null;
            this.ftpEnabled2 = _data["ftpEnabled2"] !== undefined ? _data["ftpEnabled2"] : <any>null;
            this.ftpTankIdentifier = _data["ftpTankIdentifier"] !== undefined ? _data["ftpTankIdentifier"] : <any>null;
            this.ftpTankIdentifier2 = _data["ftpTankIdentifier2"] !== undefined ? _data["ftpTankIdentifier2"] : <any>null;
            this.decimalPlaces = _data["decimalPlaces"] !== undefined ? _data["decimalPlaces"] : <any>null;
            this.latestScaledValue = _data["latestScaledValue"] !== undefined ? _data["latestScaledValue"] : <any>null;
            this.latestScaledValue2 = _data["latestScaledValue2"] !== undefined ? _data["latestScaledValue2"] : <any>null;
            this.latestReadingTimestamp = _data["latestReadingTimestamp"] ? new Date(_data["latestReadingTimestamp"].toString()) : <any>null;
            this.graphMin = _data["graphMin"] !== undefined ? _data["graphMin"] : <any>null;
            this.graphMax = _data["graphMax"] !== undefined ? _data["graphMax"] : <any>null;
            this.displayPriority = _data["displayPriority"] !== undefined ? _data["displayPriority"] : <any>null;
            this.eventRuleGroupId = _data["eventRuleGroupId"] !== undefined ? _data["eventRuleGroupId"] : <any>null;
            this.apciTankFunction = _data["apciTankFunction"] !== undefined ? _data["apciTankFunction"] : <any>null;
            this.isAPCISendToLBShell = _data["isAPCISendToLBShell"] !== undefined ? _data["isAPCISendToLBShell"] : <any>null;
            this.apciUnits = _data["apciUnits"] !== undefined ? _data["apciUnits"] : <any>null;
            this.isAPCILBShellSubscriber = _data["isAPCILBShellSubscriber"] !== undefined ? _data["isAPCILBShellSubscriber"] : <any>null;
            if (Array.isArray(_data["eventRules"])) {
                this.eventRules = [] as any;
                for (let item of _data["eventRules"])
                    this.eventRules!.push(EditDataChannelEventRule.fromJS(item));
            }
            else {
                this.eventRules = <any>null;
            }
            this.aggregationModeType = _data["aggregationModeType"] !== undefined ? _data["aggregationModeType"] : <any>null;
            this.aggregationPeriodHours = _data["aggregationPeriodHours"] !== undefined ? _data["aggregationPeriodHours"] : <any>null;
            this.scaleFactor = _data["scaleFactor"] !== undefined ? _data["scaleFactor"] : <any>null;
            this.isUsageRate = _data["isUsageRate"] !== undefined ? _data["isUsageRate"] : <any>null;
        }
    }

    static fromJS(data: any): EditRateOfChangeDataChannel {
        data = typeof data === 'object' ? data : {};
        let result = new EditRateOfChangeDataChannel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["gasMixerDataChannelType"] = this.gasMixerDataChannelType !== undefined ? this.gasMixerDataChannelType : <any>null;
        data["dataChannelTemplateId"] = this.dataChannelTemplateId !== undefined ? this.dataChannelTemplateId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["assetType"] = this.assetType !== undefined ? this.assetType : <any>null;
        data["assetDescription"] = this.assetDescription !== undefined ? this.assetDescription : <any>null;
        data["assetTimeZoneId"] = this.assetTimeZoneId !== undefined ? this.assetTimeZoneId : <any>null;
        data["siteId"] = this.siteId !== undefined ? this.siteId : <any>null;
        data["siteNumber"] = this.siteNumber !== undefined ? this.siteNumber : <any>null;
        data["siteCustomerName"] = this.siteCustomerName !== undefined ? this.siteCustomerName : <any>null;
        data["siteCity"] = this.siteCity !== undefined ? this.siteCity : <any>null;
        data["siteState"] = this.siteState !== undefined ? this.siteState : <any>null;
        data["sourceDataChannelId"] = this.sourceDataChannelId !== undefined ? this.sourceDataChannelId : <any>null;
        data["autoGenerateFtpId1"] = this.autoGenerateFtpId1 !== undefined ? this.autoGenerateFtpId1 : <any>null;
        data["autoGenerateFtpId2"] = this.autoGenerateFtpId2 !== undefined ? this.autoGenerateFtpId2 : <any>null;
        data["scaledUnits"] = this.scaledUnits !== undefined ? this.scaledUnits : <any>null;
        data["scaledUnitsAsText"] = this.scaledUnitsAsText !== undefined ? this.scaledUnitsAsText : <any>null;
        data["displayUnits"] = this.displayUnits !== undefined ? this.displayUnits : <any>null;
        data["displayUnitsAsText"] = this.displayUnitsAsText !== undefined ? this.displayUnitsAsText : <any>null;
        data["ftpDomainId"] = this.ftpDomainId !== undefined ? this.ftpDomainId : <any>null;
        data["ftpDomainId2"] = this.ftpDomainId2 !== undefined ? this.ftpDomainId2 : <any>null;
        data["ftpEnabled"] = this.ftpEnabled !== undefined ? this.ftpEnabled : <any>null;
        data["ftpEnabled2"] = this.ftpEnabled2 !== undefined ? this.ftpEnabled2 : <any>null;
        data["ftpTankIdentifier"] = this.ftpTankIdentifier !== undefined ? this.ftpTankIdentifier : <any>null;
        data["ftpTankIdentifier2"] = this.ftpTankIdentifier2 !== undefined ? this.ftpTankIdentifier2 : <any>null;
        data["decimalPlaces"] = this.decimalPlaces !== undefined ? this.decimalPlaces : <any>null;
        data["latestScaledValue"] = this.latestScaledValue !== undefined ? this.latestScaledValue : <any>null;
        data["latestScaledValue2"] = this.latestScaledValue2 !== undefined ? this.latestScaledValue2 : <any>null;
        data["latestReadingTimestamp"] = this.latestReadingTimestamp ? this.latestReadingTimestamp.toISOString() : <any>null;
        data["graphMin"] = this.graphMin !== undefined ? this.graphMin : <any>null;
        data["graphMax"] = this.graphMax !== undefined ? this.graphMax : <any>null;
        data["displayPriority"] = this.displayPriority !== undefined ? this.displayPriority : <any>null;
        data["eventRuleGroupId"] = this.eventRuleGroupId !== undefined ? this.eventRuleGroupId : <any>null;
        data["apciTankFunction"] = this.apciTankFunction !== undefined ? this.apciTankFunction : <any>null;
        data["isAPCISendToLBShell"] = this.isAPCISendToLBShell !== undefined ? this.isAPCISendToLBShell : <any>null;
        data["apciUnits"] = this.apciUnits !== undefined ? this.apciUnits : <any>null;
        data["isAPCILBShellSubscriber"] = this.isAPCILBShellSubscriber !== undefined ? this.isAPCILBShellSubscriber : <any>null;
        if (Array.isArray(this.eventRules)) {
            data["eventRules"] = [];
            for (let item of this.eventRules)
                data["eventRules"].push(item.toJSON());
        }
        data["aggregationModeType"] = this.aggregationModeType !== undefined ? this.aggregationModeType : <any>null;
        data["aggregationPeriodHours"] = this.aggregationPeriodHours !== undefined ? this.aggregationPeriodHours : <any>null;
        data["scaleFactor"] = this.scaleFactor !== undefined ? this.scaleFactor : <any>null;
        data["isUsageRate"] = this.isUsageRate !== undefined ? this.isUsageRate : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EditDataChannelEventRule extends EditBase {
    dataChannelEventRuleId?: number;
    eventRuleId?: number;
    description?: string | null;
    eventRuleType?: EventRuleType;
    rtuEventType?: RTUEventType | null;
    isEnabled?: boolean;
    isEventRuleEnabled?: boolean;
    isLinkedToEventRule?: boolean;
    eventInventoryStatus?: EventInventoryStatusType | null;
    dataChannelType?: DataChannelType;
    eventImportanceLevel?: EventImportanceLevelType;
    eventComparator?: EventComparatorType | null;
    eventValue?: number | null;
    setpointIndex?: number | null;
    isAlwaysTriggered?: boolean;
    isDisplayedOnGraph?: boolean;
    isDisplayedInSummary?: boolean;
    isAcknowledgementRequired?: boolean;
    descriptionAbbreviation?: string | null;
    isRoster1Enabled?: boolean;
    rosterId1?: number | null;
    isRoster2Enabled?: boolean;
    rosterId2?: number | null;
    tags?: string[] | null;
    isAutoCreateProblemReport?: boolean;
    isAutoCloseProblemReport?: boolean;
    problemReportImportanceLevel?: EventImportanceLevelType | null;
    eventTemplate?: string | null;
    sortOrderIndex?: number;
    usageRate?: number;
    minimumReadingPeriod?: number;
    integrationName?: string | null;
    hysteresis?: number;
    delay?: number;
    isDelayEnabled?: boolean;
    minuteDelay?: number | null;
    hourDelay?: number | null;
    secondDelay?: number | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.dataChannelEventRuleId = _data["dataChannelEventRuleId"] !== undefined ? _data["dataChannelEventRuleId"] : <any>null;
            this.eventRuleId = _data["eventRuleId"] !== undefined ? _data["eventRuleId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.eventRuleType = _data["eventRuleType"] !== undefined ? _data["eventRuleType"] : <any>null;
            this.rtuEventType = _data["rtuEventType"] !== undefined ? _data["rtuEventType"] : <any>null;
            this.isEnabled = _data["isEnabled"] !== undefined ? _data["isEnabled"] : <any>null;
            this.isEventRuleEnabled = _data["isEventRuleEnabled"] !== undefined ? _data["isEventRuleEnabled"] : <any>null;
            this.isLinkedToEventRule = _data["isLinkedToEventRule"] !== undefined ? _data["isLinkedToEventRule"] : <any>null;
            this.eventInventoryStatus = _data["eventInventoryStatus"] !== undefined ? _data["eventInventoryStatus"] : <any>null;
            this.dataChannelType = _data["dataChannelType"] !== undefined ? _data["dataChannelType"] : <any>null;
            this.eventImportanceLevel = _data["eventImportanceLevel"] !== undefined ? _data["eventImportanceLevel"] : <any>null;
            this.eventComparator = _data["eventComparator"] !== undefined ? _data["eventComparator"] : <any>null;
            this.eventValue = _data["eventValue"] !== undefined ? _data["eventValue"] : <any>null;
            this.setpointIndex = _data["setpointIndex"] !== undefined ? _data["setpointIndex"] : <any>null;
            this.isAlwaysTriggered = _data["isAlwaysTriggered"] !== undefined ? _data["isAlwaysTriggered"] : <any>null;
            this.isDisplayedOnGraph = _data["isDisplayedOnGraph"] !== undefined ? _data["isDisplayedOnGraph"] : <any>null;
            this.isDisplayedInSummary = _data["isDisplayedInSummary"] !== undefined ? _data["isDisplayedInSummary"] : <any>null;
            this.isAcknowledgementRequired = _data["isAcknowledgementRequired"] !== undefined ? _data["isAcknowledgementRequired"] : <any>null;
            this.descriptionAbbreviation = _data["descriptionAbbreviation"] !== undefined ? _data["descriptionAbbreviation"] : <any>null;
            this.isRoster1Enabled = _data["isRoster1Enabled"] !== undefined ? _data["isRoster1Enabled"] : <any>null;
            this.rosterId1 = _data["rosterId1"] !== undefined ? _data["rosterId1"] : <any>null;
            this.isRoster2Enabled = _data["isRoster2Enabled"] !== undefined ? _data["isRoster2Enabled"] : <any>null;
            this.rosterId2 = _data["rosterId2"] !== undefined ? _data["rosterId2"] : <any>null;
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags!.push(item);
            }
            else {
                this.tags = <any>null;
            }
            this.isAutoCreateProblemReport = _data["isAutoCreateProblemReport"] !== undefined ? _data["isAutoCreateProblemReport"] : <any>null;
            this.isAutoCloseProblemReport = _data["isAutoCloseProblemReport"] !== undefined ? _data["isAutoCloseProblemReport"] : <any>null;
            this.problemReportImportanceLevel = _data["problemReportImportanceLevel"] !== undefined ? _data["problemReportImportanceLevel"] : <any>null;
            this.eventTemplate = _data["eventTemplate"] !== undefined ? _data["eventTemplate"] : <any>null;
            this.sortOrderIndex = _data["sortOrderIndex"] !== undefined ? _data["sortOrderIndex"] : <any>null;
            this.usageRate = _data["usageRate"] !== undefined ? _data["usageRate"] : <any>null;
            this.minimumReadingPeriod = _data["minimumReadingPeriod"] !== undefined ? _data["minimumReadingPeriod"] : <any>null;
            this.integrationName = _data["integrationName"] !== undefined ? _data["integrationName"] : <any>null;
            this.hysteresis = _data["hysteresis"] !== undefined ? _data["hysteresis"] : <any>null;
            this.delay = _data["delay"] !== undefined ? _data["delay"] : <any>null;
            this.isDelayEnabled = _data["isDelayEnabled"] !== undefined ? _data["isDelayEnabled"] : <any>null;
            this.minuteDelay = _data["minuteDelay"] !== undefined ? _data["minuteDelay"] : <any>null;
            this.hourDelay = _data["hourDelay"] !== undefined ? _data["hourDelay"] : <any>null;
            this.secondDelay = _data["secondDelay"] !== undefined ? _data["secondDelay"] : <any>null;
        }
    }

    static fromJS(data: any): EditDataChannelEventRule {
        data = typeof data === 'object' ? data : {};
        let result = new EditDataChannelEventRule();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelEventRuleId"] = this.dataChannelEventRuleId !== undefined ? this.dataChannelEventRuleId : <any>null;
        data["eventRuleId"] = this.eventRuleId !== undefined ? this.eventRuleId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["eventRuleType"] = this.eventRuleType !== undefined ? this.eventRuleType : <any>null;
        data["rtuEventType"] = this.rtuEventType !== undefined ? this.rtuEventType : <any>null;
        data["isEnabled"] = this.isEnabled !== undefined ? this.isEnabled : <any>null;
        data["isEventRuleEnabled"] = this.isEventRuleEnabled !== undefined ? this.isEventRuleEnabled : <any>null;
        data["isLinkedToEventRule"] = this.isLinkedToEventRule !== undefined ? this.isLinkedToEventRule : <any>null;
        data["eventInventoryStatus"] = this.eventInventoryStatus !== undefined ? this.eventInventoryStatus : <any>null;
        data["dataChannelType"] = this.dataChannelType !== undefined ? this.dataChannelType : <any>null;
        data["eventImportanceLevel"] = this.eventImportanceLevel !== undefined ? this.eventImportanceLevel : <any>null;
        data["eventComparator"] = this.eventComparator !== undefined ? this.eventComparator : <any>null;
        data["eventValue"] = this.eventValue !== undefined ? this.eventValue : <any>null;
        data["setpointIndex"] = this.setpointIndex !== undefined ? this.setpointIndex : <any>null;
        data["isAlwaysTriggered"] = this.isAlwaysTriggered !== undefined ? this.isAlwaysTriggered : <any>null;
        data["isDisplayedOnGraph"] = this.isDisplayedOnGraph !== undefined ? this.isDisplayedOnGraph : <any>null;
        data["isDisplayedInSummary"] = this.isDisplayedInSummary !== undefined ? this.isDisplayedInSummary : <any>null;
        data["isAcknowledgementRequired"] = this.isAcknowledgementRequired !== undefined ? this.isAcknowledgementRequired : <any>null;
        data["descriptionAbbreviation"] = this.descriptionAbbreviation !== undefined ? this.descriptionAbbreviation : <any>null;
        data["isRoster1Enabled"] = this.isRoster1Enabled !== undefined ? this.isRoster1Enabled : <any>null;
        data["rosterId1"] = this.rosterId1 !== undefined ? this.rosterId1 : <any>null;
        data["isRoster2Enabled"] = this.isRoster2Enabled !== undefined ? this.isRoster2Enabled : <any>null;
        data["rosterId2"] = this.rosterId2 !== undefined ? this.rosterId2 : <any>null;
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item);
        }
        data["isAutoCreateProblemReport"] = this.isAutoCreateProblemReport !== undefined ? this.isAutoCreateProblemReport : <any>null;
        data["isAutoCloseProblemReport"] = this.isAutoCloseProblemReport !== undefined ? this.isAutoCloseProblemReport : <any>null;
        data["problemReportImportanceLevel"] = this.problemReportImportanceLevel !== undefined ? this.problemReportImportanceLevel : <any>null;
        data["eventTemplate"] = this.eventTemplate !== undefined ? this.eventTemplate : <any>null;
        data["sortOrderIndex"] = this.sortOrderIndex !== undefined ? this.sortOrderIndex : <any>null;
        data["usageRate"] = this.usageRate !== undefined ? this.usageRate : <any>null;
        data["minimumReadingPeriod"] = this.minimumReadingPeriod !== undefined ? this.minimumReadingPeriod : <any>null;
        data["integrationName"] = this.integrationName !== undefined ? this.integrationName : <any>null;
        data["hysteresis"] = this.hysteresis !== undefined ? this.hysteresis : <any>null;
        data["delay"] = this.delay !== undefined ? this.delay : <any>null;
        data["isDelayEnabled"] = this.isDelayEnabled !== undefined ? this.isDelayEnabled : <any>null;
        data["minuteDelay"] = this.minuteDelay !== undefined ? this.minuteDelay : <any>null;
        data["hourDelay"] = this.hourDelay !== undefined ? this.hourDelay : <any>null;
        data["secondDelay"] = this.secondDelay !== undefined ? this.secondDelay : <any>null;
        super.toJSON(data);
        return data;
    }
}

export enum AggregationModeType {
    None = 0,
    Average = 1,
    RollingAverage = 2,
    Sum = 3,
    RollingSum = 4,
}

export class RetrieveRateOfChangeDataChannelEditComponentsByIdRequest extends WcfProxyUserDetails {
    dataChannelId?: string;
    loadEditComponents?: boolean;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.loadEditComponents = _data["loadEditComponents"] !== undefined ? _data["loadEditComponents"] : <any>null;
        }
    }

    static fromJS(data: any): RetrieveRateOfChangeDataChannelEditComponentsByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveRateOfChangeDataChannelEditComponentsByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["loadEditComponents"] = this.loadEditComponents !== undefined ? this.loadEditComponents : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveRateOfChangeDataChannelEditComponentsByIdRequest extends RetrieveRateOfChangeDataChannelEditComponentsByIdRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveRateOfChangeDataChannelEditComponentsByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveRateOfChangeDataChannelEditComponentsByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveSourceDataChannelDefaultsByIdResponse {
    retrieveSourceDataChannelDefaultsByIdResult?: SourceDataChannelDefaultsInfo | null;

    init(_data?: any) {
        if (_data) {
            this.retrieveSourceDataChannelDefaultsByIdResult = _data["retrieveSourceDataChannelDefaultsByIdResult"] ? SourceDataChannelDefaultsInfo.fromJS(_data["retrieveSourceDataChannelDefaultsByIdResult"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveSourceDataChannelDefaultsByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveSourceDataChannelDefaultsByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["retrieveSourceDataChannelDefaultsByIdResult"] = this.retrieveSourceDataChannelDefaultsByIdResult ? this.retrieveSourceDataChannelDefaultsByIdResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveRetrieveSourceDataChannelDefaultsByIdResponse extends RetrieveSourceDataChannelDefaultsByIdResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveSourceDataChannelDefaultsByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveSourceDataChannelDefaultsByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class SourceDataChannelDefaultsInfo {
    dataChannelId?: string;
    name?: string | null;
    description?: string | null;
    type?: DataChannelType;
    dataChannelTemplateId?: string;
    dataChannelTemplateDescription?: string | null;
    manufacturer?: string | null;
    modelNumber?: string | null;
    productId?: string | null;
    productName?: string | null;
    productDescription?: string | null;
    isVolumetric?: boolean;
    rawUnits?: RawUnitType | null;
    rawUnitsAtFullScale?: number | null;
    rawUnitsAtOverRange?: number | null;
    rawUnitsAtScaledMax?: number | null;
    rawUnitsAtScaledMin?: number | null;
    rawUnitsAtUnderRange?: number | null;
    rawUnitsAtZero?: number | null;
    scaledUnits?: UnitType | null;
    scaledUnitsAsText?: string | null;
    displayUnits?: UnitType | null;
    displayUnitsAsText?: string | null;
    sensorPosition?: number | null;
    sensorPositionUnits?: UnitType | null;
    forecastMode?: ForecastModeType | null;
    scaledMin?: number | null;
    scaledMax?: number | null;
    graphMin?: number | null;
    graphMax?: number | null;
    maxProductHeight?: number | null;
    tankType?: TankType | null;
    digitalState0Limit?: number | null;
    digitalState0Text?: string | null;
    digitalState1Limit?: number | null;
    digitalState1Text?: string | null;
    digitalState2Limit?: number | null;
    digitalState2Text?: string | null;
    digitalState3Limit?: number | null;
    digitalState3Text?: string | null;
    isLoaded?: boolean;
    defaultDisplayUnits?: UnitType | null;

    init(_data?: any) {
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.dataChannelTemplateId = _data["dataChannelTemplateId"] !== undefined ? _data["dataChannelTemplateId"] : <any>null;
            this.dataChannelTemplateDescription = _data["dataChannelTemplateDescription"] !== undefined ? _data["dataChannelTemplateDescription"] : <any>null;
            this.manufacturer = _data["manufacturer"] !== undefined ? _data["manufacturer"] : <any>null;
            this.modelNumber = _data["modelNumber"] !== undefined ? _data["modelNumber"] : <any>null;
            this.productId = _data["productId"] !== undefined ? _data["productId"] : <any>null;
            this.productName = _data["productName"] !== undefined ? _data["productName"] : <any>null;
            this.productDescription = _data["productDescription"] !== undefined ? _data["productDescription"] : <any>null;
            this.isVolumetric = _data["isVolumetric"] !== undefined ? _data["isVolumetric"] : <any>null;
            this.rawUnits = _data["rawUnits"] !== undefined ? _data["rawUnits"] : <any>null;
            this.rawUnitsAtFullScale = _data["rawUnitsAtFullScale"] !== undefined ? _data["rawUnitsAtFullScale"] : <any>null;
            this.rawUnitsAtOverRange = _data["rawUnitsAtOverRange"] !== undefined ? _data["rawUnitsAtOverRange"] : <any>null;
            this.rawUnitsAtScaledMax = _data["rawUnitsAtScaledMax"] !== undefined ? _data["rawUnitsAtScaledMax"] : <any>null;
            this.rawUnitsAtScaledMin = _data["rawUnitsAtScaledMin"] !== undefined ? _data["rawUnitsAtScaledMin"] : <any>null;
            this.rawUnitsAtUnderRange = _data["rawUnitsAtUnderRange"] !== undefined ? _data["rawUnitsAtUnderRange"] : <any>null;
            this.rawUnitsAtZero = _data["rawUnitsAtZero"] !== undefined ? _data["rawUnitsAtZero"] : <any>null;
            this.scaledUnits = _data["scaledUnits"] !== undefined ? _data["scaledUnits"] : <any>null;
            this.scaledUnitsAsText = _data["scaledUnitsAsText"] !== undefined ? _data["scaledUnitsAsText"] : <any>null;
            this.displayUnits = _data["displayUnits"] !== undefined ? _data["displayUnits"] : <any>null;
            this.displayUnitsAsText = _data["displayUnitsAsText"] !== undefined ? _data["displayUnitsAsText"] : <any>null;
            this.sensorPosition = _data["sensorPosition"] !== undefined ? _data["sensorPosition"] : <any>null;
            this.sensorPositionUnits = _data["sensorPositionUnits"] !== undefined ? _data["sensorPositionUnits"] : <any>null;
            this.forecastMode = _data["forecastMode"] !== undefined ? _data["forecastMode"] : <any>null;
            this.scaledMin = _data["scaledMin"] !== undefined ? _data["scaledMin"] : <any>null;
            this.scaledMax = _data["scaledMax"] !== undefined ? _data["scaledMax"] : <any>null;
            this.graphMin = _data["graphMin"] !== undefined ? _data["graphMin"] : <any>null;
            this.graphMax = _data["graphMax"] !== undefined ? _data["graphMax"] : <any>null;
            this.maxProductHeight = _data["maxProductHeight"] !== undefined ? _data["maxProductHeight"] : <any>null;
            this.tankType = _data["tankType"] !== undefined ? _data["tankType"] : <any>null;
            this.digitalState0Limit = _data["digitalState0Limit"] !== undefined ? _data["digitalState0Limit"] : <any>null;
            this.digitalState0Text = _data["digitalState0Text"] !== undefined ? _data["digitalState0Text"] : <any>null;
            this.digitalState1Limit = _data["digitalState1Limit"] !== undefined ? _data["digitalState1Limit"] : <any>null;
            this.digitalState1Text = _data["digitalState1Text"] !== undefined ? _data["digitalState1Text"] : <any>null;
            this.digitalState2Limit = _data["digitalState2Limit"] !== undefined ? _data["digitalState2Limit"] : <any>null;
            this.digitalState2Text = _data["digitalState2Text"] !== undefined ? _data["digitalState2Text"] : <any>null;
            this.digitalState3Limit = _data["digitalState3Limit"] !== undefined ? _data["digitalState3Limit"] : <any>null;
            this.digitalState3Text = _data["digitalState3Text"] !== undefined ? _data["digitalState3Text"] : <any>null;
            this.isLoaded = _data["isLoaded"] !== undefined ? _data["isLoaded"] : <any>null;
            this.defaultDisplayUnits = _data["defaultDisplayUnits"] !== undefined ? _data["defaultDisplayUnits"] : <any>null;
        }
    }

    static fromJS(data: any): SourceDataChannelDefaultsInfo {
        data = typeof data === 'object' ? data : {};
        let result = new SourceDataChannelDefaultsInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["dataChannelTemplateId"] = this.dataChannelTemplateId !== undefined ? this.dataChannelTemplateId : <any>null;
        data["dataChannelTemplateDescription"] = this.dataChannelTemplateDescription !== undefined ? this.dataChannelTemplateDescription : <any>null;
        data["manufacturer"] = this.manufacturer !== undefined ? this.manufacturer : <any>null;
        data["modelNumber"] = this.modelNumber !== undefined ? this.modelNumber : <any>null;
        data["productId"] = this.productId !== undefined ? this.productId : <any>null;
        data["productName"] = this.productName !== undefined ? this.productName : <any>null;
        data["productDescription"] = this.productDescription !== undefined ? this.productDescription : <any>null;
        data["isVolumetric"] = this.isVolumetric !== undefined ? this.isVolumetric : <any>null;
        data["rawUnits"] = this.rawUnits !== undefined ? this.rawUnits : <any>null;
        data["rawUnitsAtFullScale"] = this.rawUnitsAtFullScale !== undefined ? this.rawUnitsAtFullScale : <any>null;
        data["rawUnitsAtOverRange"] = this.rawUnitsAtOverRange !== undefined ? this.rawUnitsAtOverRange : <any>null;
        data["rawUnitsAtScaledMax"] = this.rawUnitsAtScaledMax !== undefined ? this.rawUnitsAtScaledMax : <any>null;
        data["rawUnitsAtScaledMin"] = this.rawUnitsAtScaledMin !== undefined ? this.rawUnitsAtScaledMin : <any>null;
        data["rawUnitsAtUnderRange"] = this.rawUnitsAtUnderRange !== undefined ? this.rawUnitsAtUnderRange : <any>null;
        data["rawUnitsAtZero"] = this.rawUnitsAtZero !== undefined ? this.rawUnitsAtZero : <any>null;
        data["scaledUnits"] = this.scaledUnits !== undefined ? this.scaledUnits : <any>null;
        data["scaledUnitsAsText"] = this.scaledUnitsAsText !== undefined ? this.scaledUnitsAsText : <any>null;
        data["displayUnits"] = this.displayUnits !== undefined ? this.displayUnits : <any>null;
        data["displayUnitsAsText"] = this.displayUnitsAsText !== undefined ? this.displayUnitsAsText : <any>null;
        data["sensorPosition"] = this.sensorPosition !== undefined ? this.sensorPosition : <any>null;
        data["sensorPositionUnits"] = this.sensorPositionUnits !== undefined ? this.sensorPositionUnits : <any>null;
        data["forecastMode"] = this.forecastMode !== undefined ? this.forecastMode : <any>null;
        data["scaledMin"] = this.scaledMin !== undefined ? this.scaledMin : <any>null;
        data["scaledMax"] = this.scaledMax !== undefined ? this.scaledMax : <any>null;
        data["graphMin"] = this.graphMin !== undefined ? this.graphMin : <any>null;
        data["graphMax"] = this.graphMax !== undefined ? this.graphMax : <any>null;
        data["maxProductHeight"] = this.maxProductHeight !== undefined ? this.maxProductHeight : <any>null;
        data["tankType"] = this.tankType !== undefined ? this.tankType : <any>null;
        data["digitalState0Limit"] = this.digitalState0Limit !== undefined ? this.digitalState0Limit : <any>null;
        data["digitalState0Text"] = this.digitalState0Text !== undefined ? this.digitalState0Text : <any>null;
        data["digitalState1Limit"] = this.digitalState1Limit !== undefined ? this.digitalState1Limit : <any>null;
        data["digitalState1Text"] = this.digitalState1Text !== undefined ? this.digitalState1Text : <any>null;
        data["digitalState2Limit"] = this.digitalState2Limit !== undefined ? this.digitalState2Limit : <any>null;
        data["digitalState2Text"] = this.digitalState2Text !== undefined ? this.digitalState2Text : <any>null;
        data["digitalState3Limit"] = this.digitalState3Limit !== undefined ? this.digitalState3Limit : <any>null;
        data["digitalState3Text"] = this.digitalState3Text !== undefined ? this.digitalState3Text : <any>null;
        data["isLoaded"] = this.isLoaded !== undefined ? this.isLoaded : <any>null;
        data["defaultDisplayUnits"] = this.defaultDisplayUnits !== undefined ? this.defaultDisplayUnits : <any>null;
        return data;
    }
}

export class RetrieveSourceDataChannelDefaultsByIdRequest extends WcfProxyUserDetails {
    sourceDataChannelId?: string;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.sourceDataChannelId = _data["sourceDataChannelId"] !== undefined ? _data["sourceDataChannelId"] : <any>null;
        }
    }

    static fromJS(data: any): RetrieveSourceDataChannelDefaultsByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveSourceDataChannelDefaultsByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sourceDataChannelId"] = this.sourceDataChannelId !== undefined ? this.sourceDataChannelId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveSourceDataChannelDefaultsByIdRequest extends RetrieveSourceDataChannelDefaultsByIdRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveSourceDataChannelDefaultsByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveSourceDataChannelDefaultsByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveTotalizedDataChannelEditComponentsByIdResponse {
    retrieveTotalizedDataChannelEditComponentsByIdResult?: RetrieveTotalizedDataChannelEditComponentsResult | null;

    init(_data?: any) {
        if (_data) {
            this.retrieveTotalizedDataChannelEditComponentsByIdResult = _data["retrieveTotalizedDataChannelEditComponentsByIdResult"] ? RetrieveTotalizedDataChannelEditComponentsResult.fromJS(_data["retrieveTotalizedDataChannelEditComponentsByIdResult"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveTotalizedDataChannelEditComponentsByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveTotalizedDataChannelEditComponentsByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["retrieveTotalizedDataChannelEditComponentsByIdResult"] = this.retrieveTotalizedDataChannelEditComponentsByIdResult ? this.retrieveTotalizedDataChannelEditComponentsByIdResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveRetrieveTotalizedDataChannelEditComponentsByIdResponse extends RetrieveTotalizedDataChannelEditComponentsByIdResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveTotalizedDataChannelEditComponentsByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveTotalizedDataChannelEditComponentsByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class BaseEditComponentsResultOfEditTotalizedDataChannel {
    editObject?: EditTotalizedDataChannel | null;
    areEditComponentsLoaded?: boolean;

    init(_data?: any) {
        if (_data) {
            this.editObject = _data["editObject"] ? EditTotalizedDataChannel.fromJS(_data["editObject"]) : <any>null;
            this.areEditComponentsLoaded = _data["areEditComponentsLoaded"] !== undefined ? _data["areEditComponentsLoaded"] : <any>null;
        }
    }

    static fromJS(data: any): BaseEditComponentsResultOfEditTotalizedDataChannel {
        data = typeof data === 'object' ? data : {};
        let result = new BaseEditComponentsResultOfEditTotalizedDataChannel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["editObject"] = this.editObject ? this.editObject.toJSON() : <any>null;
        data["areEditComponentsLoaded"] = this.areEditComponentsLoaded !== undefined ? this.areEditComponentsLoaded : <any>null;
        return data;
    }
}

export class RetrieveTotalizedDataChannelEditComponentsResult extends BaseEditComponentsResultOfEditTotalizedDataChannel {
    dataChannelTemplates?: DataChannelTemplateDetail[] | null;
    assetDataChannels?: DataChannelComponentInfo[] | null;
    ftpTargetDomains?: FtpDomainInfo[] | null;
    rosters?: DataChannelEventRuleRosterInfo[] | null;
    eventRuleGroups?: EventRuleGroupInfo[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["dataChannelTemplates"])) {
                this.dataChannelTemplates = [] as any;
                for (let item of _data["dataChannelTemplates"])
                    this.dataChannelTemplates!.push(DataChannelTemplateDetail.fromJS(item));
            }
            else {
                this.dataChannelTemplates = <any>null;
            }
            if (Array.isArray(_data["assetDataChannels"])) {
                this.assetDataChannels = [] as any;
                for (let item of _data["assetDataChannels"])
                    this.assetDataChannels!.push(DataChannelComponentInfo.fromJS(item));
            }
            else {
                this.assetDataChannels = <any>null;
            }
            if (Array.isArray(_data["ftpTargetDomains"])) {
                this.ftpTargetDomains = [] as any;
                for (let item of _data["ftpTargetDomains"])
                    this.ftpTargetDomains!.push(FtpDomainInfo.fromJS(item));
            }
            else {
                this.ftpTargetDomains = <any>null;
            }
            if (Array.isArray(_data["rosters"])) {
                this.rosters = [] as any;
                for (let item of _data["rosters"])
                    this.rosters!.push(DataChannelEventRuleRosterInfo.fromJS(item));
            }
            else {
                this.rosters = <any>null;
            }
            if (Array.isArray(_data["eventRuleGroups"])) {
                this.eventRuleGroups = [] as any;
                for (let item of _data["eventRuleGroups"])
                    this.eventRuleGroups!.push(EventRuleGroupInfo.fromJS(item));
            }
            else {
                this.eventRuleGroups = <any>null;
            }
        }
    }

    static fromJS(data: any): RetrieveTotalizedDataChannelEditComponentsResult {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveTotalizedDataChannelEditComponentsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dataChannelTemplates)) {
            data["dataChannelTemplates"] = [];
            for (let item of this.dataChannelTemplates)
                data["dataChannelTemplates"].push(item.toJSON());
        }
        if (Array.isArray(this.assetDataChannels)) {
            data["assetDataChannels"] = [];
            for (let item of this.assetDataChannels)
                data["assetDataChannels"].push(item.toJSON());
        }
        if (Array.isArray(this.ftpTargetDomains)) {
            data["ftpTargetDomains"] = [];
            for (let item of this.ftpTargetDomains)
                data["ftpTargetDomains"].push(item.toJSON());
        }
        if (Array.isArray(this.rosters)) {
            data["rosters"] = [];
            for (let item of this.rosters)
                data["rosters"].push(item.toJSON());
        }
        if (Array.isArray(this.eventRuleGroups)) {
            data["eventRuleGroups"] = [];
            for (let item of this.eventRuleGroups)
                data["eventRuleGroups"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export class EditTotalizedDataChannel extends EditBase {
    dataChannelId?: string;
    domainId?: string;
    description?: string | null;
    assetId?: string | null;
    assetType?: AssetType | null;
    assetTimeZoneId?: number | null;
    siteId?: string | null;
    siteNumber?: string | null;
    siteCustomerName?: string | null;
    siteCity?: string | null;
    siteState?: string | null;
    forecastMode?: ForecastModeType | null;
    forecastState?: ForecastState | null;
    dataChannelTemplateId?: string | null;
    isAllComponentDCsVolumetric?: boolean | null;
    ftpEnabled?: boolean;
    autoGenerateFtpId1?: boolean;
    ftpTankIdentifier?: string | null;
    ftpDomainId?: string | null;
    ftpEnabled2?: boolean;
    autoGenerateFtpId2?: boolean;
    ftpTankIdentifier2?: string | null;
    ftpDomainId2?: string | null;
    productId?: string | null;
    productName?: string | null;
    tankType?: TankType | null;
    units?: string | null;
    graphMin?: number | null;
    graphMax?: number | null;
    maxProductHeight?: number | null;
    maxDeliverQuantity?: number | null;
    apciTankFunction?: APCITankFunctionType | null;
    isAPCISendToLBShell?: boolean;
    apciUnits?: APCIUnitType | null;
    eventRules?: EditDataChannelEventRule[] | null;
    isRtuOrChannelRequired?: boolean;
    autoFtpTankId_DataChannelId1?: string | null;
    isRtuOrChannelRequired2?: boolean;
    autoFtpTankId_DataChannelId2?: string | null;
    selectedDataChannelIds?: string[] | null;
    eventRuleGroupId?: number | null;
    resetReadings?: boolean;
    type?: DataChannelType;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.assetType = _data["assetType"] !== undefined ? _data["assetType"] : <any>null;
            this.assetTimeZoneId = _data["assetTimeZoneId"] !== undefined ? _data["assetTimeZoneId"] : <any>null;
            this.siteId = _data["siteId"] !== undefined ? _data["siteId"] : <any>null;
            this.siteNumber = _data["siteNumber"] !== undefined ? _data["siteNumber"] : <any>null;
            this.siteCustomerName = _data["siteCustomerName"] !== undefined ? _data["siteCustomerName"] : <any>null;
            this.siteCity = _data["siteCity"] !== undefined ? _data["siteCity"] : <any>null;
            this.siteState = _data["siteState"] !== undefined ? _data["siteState"] : <any>null;
            this.forecastMode = _data["forecastMode"] !== undefined ? _data["forecastMode"] : <any>null;
            this.forecastState = _data["forecastState"] !== undefined ? _data["forecastState"] : <any>null;
            this.dataChannelTemplateId = _data["dataChannelTemplateId"] !== undefined ? _data["dataChannelTemplateId"] : <any>null;
            this.isAllComponentDCsVolumetric = _data["isAllComponentDCsVolumetric"] !== undefined ? _data["isAllComponentDCsVolumetric"] : <any>null;
            this.ftpEnabled = _data["ftpEnabled"] !== undefined ? _data["ftpEnabled"] : <any>null;
            this.autoGenerateFtpId1 = _data["autoGenerateFtpId1"] !== undefined ? _data["autoGenerateFtpId1"] : <any>null;
            this.ftpTankIdentifier = _data["ftpTankIdentifier"] !== undefined ? _data["ftpTankIdentifier"] : <any>null;
            this.ftpDomainId = _data["ftpDomainId"] !== undefined ? _data["ftpDomainId"] : <any>null;
            this.ftpEnabled2 = _data["ftpEnabled2"] !== undefined ? _data["ftpEnabled2"] : <any>null;
            this.autoGenerateFtpId2 = _data["autoGenerateFtpId2"] !== undefined ? _data["autoGenerateFtpId2"] : <any>null;
            this.ftpTankIdentifier2 = _data["ftpTankIdentifier2"] !== undefined ? _data["ftpTankIdentifier2"] : <any>null;
            this.ftpDomainId2 = _data["ftpDomainId2"] !== undefined ? _data["ftpDomainId2"] : <any>null;
            this.productId = _data["productId"] !== undefined ? _data["productId"] : <any>null;
            this.productName = _data["productName"] !== undefined ? _data["productName"] : <any>null;
            this.tankType = _data["tankType"] !== undefined ? _data["tankType"] : <any>null;
            this.units = _data["units"] !== undefined ? _data["units"] : <any>null;
            this.graphMin = _data["graphMin"] !== undefined ? _data["graphMin"] : <any>null;
            this.graphMax = _data["graphMax"] !== undefined ? _data["graphMax"] : <any>null;
            this.maxProductHeight = _data["maxProductHeight"] !== undefined ? _data["maxProductHeight"] : <any>null;
            this.maxDeliverQuantity = _data["maxDeliverQuantity"] !== undefined ? _data["maxDeliverQuantity"] : <any>null;
            this.apciTankFunction = _data["apciTankFunction"] !== undefined ? _data["apciTankFunction"] : <any>null;
            this.isAPCISendToLBShell = _data["isAPCISendToLBShell"] !== undefined ? _data["isAPCISendToLBShell"] : <any>null;
            this.apciUnits = _data["apciUnits"] !== undefined ? _data["apciUnits"] : <any>null;
            if (Array.isArray(_data["eventRules"])) {
                this.eventRules = [] as any;
                for (let item of _data["eventRules"])
                    this.eventRules!.push(EditDataChannelEventRule.fromJS(item));
            }
            else {
                this.eventRules = <any>null;
            }
            this.isRtuOrChannelRequired = _data["isRtuOrChannelRequired"] !== undefined ? _data["isRtuOrChannelRequired"] : <any>null;
            this.autoFtpTankId_DataChannelId1 = _data["autoFtpTankId_DataChannelId1"] !== undefined ? _data["autoFtpTankId_DataChannelId1"] : <any>null;
            this.isRtuOrChannelRequired2 = _data["isRtuOrChannelRequired2"] !== undefined ? _data["isRtuOrChannelRequired2"] : <any>null;
            this.autoFtpTankId_DataChannelId2 = _data["autoFtpTankId_DataChannelId2"] !== undefined ? _data["autoFtpTankId_DataChannelId2"] : <any>null;
            if (Array.isArray(_data["selectedDataChannelIds"])) {
                this.selectedDataChannelIds = [] as any;
                for (let item of _data["selectedDataChannelIds"])
                    this.selectedDataChannelIds!.push(item);
            }
            else {
                this.selectedDataChannelIds = <any>null;
            }
            this.eventRuleGroupId = _data["eventRuleGroupId"] !== undefined ? _data["eventRuleGroupId"] : <any>null;
            this.resetReadings = _data["resetReadings"] !== undefined ? _data["resetReadings"] : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
        }
    }

    static fromJS(data: any): EditTotalizedDataChannel {
        data = typeof data === 'object' ? data : {};
        let result = new EditTotalizedDataChannel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["assetType"] = this.assetType !== undefined ? this.assetType : <any>null;
        data["assetTimeZoneId"] = this.assetTimeZoneId !== undefined ? this.assetTimeZoneId : <any>null;
        data["siteId"] = this.siteId !== undefined ? this.siteId : <any>null;
        data["siteNumber"] = this.siteNumber !== undefined ? this.siteNumber : <any>null;
        data["siteCustomerName"] = this.siteCustomerName !== undefined ? this.siteCustomerName : <any>null;
        data["siteCity"] = this.siteCity !== undefined ? this.siteCity : <any>null;
        data["siteState"] = this.siteState !== undefined ? this.siteState : <any>null;
        data["forecastMode"] = this.forecastMode !== undefined ? this.forecastMode : <any>null;
        data["forecastState"] = this.forecastState !== undefined ? this.forecastState : <any>null;
        data["dataChannelTemplateId"] = this.dataChannelTemplateId !== undefined ? this.dataChannelTemplateId : <any>null;
        data["isAllComponentDCsVolumetric"] = this.isAllComponentDCsVolumetric !== undefined ? this.isAllComponentDCsVolumetric : <any>null;
        data["ftpEnabled"] = this.ftpEnabled !== undefined ? this.ftpEnabled : <any>null;
        data["autoGenerateFtpId1"] = this.autoGenerateFtpId1 !== undefined ? this.autoGenerateFtpId1 : <any>null;
        data["ftpTankIdentifier"] = this.ftpTankIdentifier !== undefined ? this.ftpTankIdentifier : <any>null;
        data["ftpDomainId"] = this.ftpDomainId !== undefined ? this.ftpDomainId : <any>null;
        data["ftpEnabled2"] = this.ftpEnabled2 !== undefined ? this.ftpEnabled2 : <any>null;
        data["autoGenerateFtpId2"] = this.autoGenerateFtpId2 !== undefined ? this.autoGenerateFtpId2 : <any>null;
        data["ftpTankIdentifier2"] = this.ftpTankIdentifier2 !== undefined ? this.ftpTankIdentifier2 : <any>null;
        data["ftpDomainId2"] = this.ftpDomainId2 !== undefined ? this.ftpDomainId2 : <any>null;
        data["productId"] = this.productId !== undefined ? this.productId : <any>null;
        data["productName"] = this.productName !== undefined ? this.productName : <any>null;
        data["tankType"] = this.tankType !== undefined ? this.tankType : <any>null;
        data["units"] = this.units !== undefined ? this.units : <any>null;
        data["graphMin"] = this.graphMin !== undefined ? this.graphMin : <any>null;
        data["graphMax"] = this.graphMax !== undefined ? this.graphMax : <any>null;
        data["maxProductHeight"] = this.maxProductHeight !== undefined ? this.maxProductHeight : <any>null;
        data["maxDeliverQuantity"] = this.maxDeliverQuantity !== undefined ? this.maxDeliverQuantity : <any>null;
        data["apciTankFunction"] = this.apciTankFunction !== undefined ? this.apciTankFunction : <any>null;
        data["isAPCISendToLBShell"] = this.isAPCISendToLBShell !== undefined ? this.isAPCISendToLBShell : <any>null;
        data["apciUnits"] = this.apciUnits !== undefined ? this.apciUnits : <any>null;
        if (Array.isArray(this.eventRules)) {
            data["eventRules"] = [];
            for (let item of this.eventRules)
                data["eventRules"].push(item.toJSON());
        }
        data["isRtuOrChannelRequired"] = this.isRtuOrChannelRequired !== undefined ? this.isRtuOrChannelRequired : <any>null;
        data["autoFtpTankId_DataChannelId1"] = this.autoFtpTankId_DataChannelId1 !== undefined ? this.autoFtpTankId_DataChannelId1 : <any>null;
        data["isRtuOrChannelRequired2"] = this.isRtuOrChannelRequired2 !== undefined ? this.isRtuOrChannelRequired2 : <any>null;
        data["autoFtpTankId_DataChannelId2"] = this.autoFtpTankId_DataChannelId2 !== undefined ? this.autoFtpTankId_DataChannelId2 : <any>null;
        if (Array.isArray(this.selectedDataChannelIds)) {
            data["selectedDataChannelIds"] = [];
            for (let item of this.selectedDataChannelIds)
                data["selectedDataChannelIds"].push(item);
        }
        data["eventRuleGroupId"] = this.eventRuleGroupId !== undefined ? this.eventRuleGroupId : <any>null;
        data["resetReadings"] = this.resetReadings !== undefined ? this.resetReadings : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class RetrieveTotalizedDataChannelEditComponentsByIdRequest extends WcfProxyUserDetails {
    dataChannelId?: string;
    loadEditComponents?: boolean;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.loadEditComponents = _data["loadEditComponents"] !== undefined ? _data["loadEditComponents"] : <any>null;
        }
    }

    static fromJS(data: any): RetrieveTotalizedDataChannelEditComponentsByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveTotalizedDataChannelEditComponentsByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["loadEditComponents"] = this.loadEditComponents !== undefined ? this.loadEditComponents : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveTotalizedDataChannelEditComponentsByIdRequest extends RetrieveTotalizedDataChannelEditComponentsByIdRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveTotalizedDataChannelEditComponentsByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveTotalizedDataChannelEditComponentsByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveVirtualChannelEditComponentsByIdResponse {
    retrieveVirtualChannelEditComponentsByIdResult?: RetrieveVirtualChannelEditComponentsResult | null;

    init(_data?: any) {
        if (_data) {
            this.retrieveVirtualChannelEditComponentsByIdResult = _data["retrieveVirtualChannelEditComponentsByIdResult"] ? RetrieveVirtualChannelEditComponentsResult.fromJS(_data["retrieveVirtualChannelEditComponentsByIdResult"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveVirtualChannelEditComponentsByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveVirtualChannelEditComponentsByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["retrieveVirtualChannelEditComponentsByIdResult"] = this.retrieveVirtualChannelEditComponentsByIdResult ? this.retrieveVirtualChannelEditComponentsByIdResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveRetrieveVirtualChannelEditComponentsByIdResponse extends RetrieveVirtualChannelEditComponentsByIdResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveVirtualChannelEditComponentsByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveVirtualChannelEditComponentsByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class BaseEditComponentsResultOfEditVirtualChannel {
    editObject?: EditVirtualChannel | null;
    areEditComponentsLoaded?: boolean;

    init(_data?: any) {
        if (_data) {
            this.editObject = _data["editObject"] ? EditVirtualChannel.fromJS(_data["editObject"]) : <any>null;
            this.areEditComponentsLoaded = _data["areEditComponentsLoaded"] !== undefined ? _data["areEditComponentsLoaded"] : <any>null;
        }
    }

    static fromJS(data: any): BaseEditComponentsResultOfEditVirtualChannel {
        data = typeof data === 'object' ? data : {};
        let result = new BaseEditComponentsResultOfEditVirtualChannel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["editObject"] = this.editObject ? this.editObject.toJSON() : <any>null;
        data["areEditComponentsLoaded"] = this.areEditComponentsLoaded !== undefined ? this.areEditComponentsLoaded : <any>null;
        return data;
    }
}

export class RetrieveVirtualChannelEditComponentsResult extends BaseEditComponentsResultOfEditVirtualChannel {
    ftpTargetDomains?: FtpDomainInfo[] | null;
    dataChannelTemplates?: DataChannelTemplateDetail[] | null;
    rosters?: DataChannelEventRuleRosterInfo[] | null;
    availableDataChannels?: DataChannelLookupInfo[] | null;
    eventRuleGroups?: EventRuleGroupInfo[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["ftpTargetDomains"])) {
                this.ftpTargetDomains = [] as any;
                for (let item of _data["ftpTargetDomains"])
                    this.ftpTargetDomains!.push(FtpDomainInfo.fromJS(item));
            }
            else {
                this.ftpTargetDomains = <any>null;
            }
            if (Array.isArray(_data["dataChannelTemplates"])) {
                this.dataChannelTemplates = [] as any;
                for (let item of _data["dataChannelTemplates"])
                    this.dataChannelTemplates!.push(DataChannelTemplateDetail.fromJS(item));
            }
            else {
                this.dataChannelTemplates = <any>null;
            }
            if (Array.isArray(_data["rosters"])) {
                this.rosters = [] as any;
                for (let item of _data["rosters"])
                    this.rosters!.push(DataChannelEventRuleRosterInfo.fromJS(item));
            }
            else {
                this.rosters = <any>null;
            }
            if (Array.isArray(_data["availableDataChannels"])) {
                this.availableDataChannels = [] as any;
                for (let item of _data["availableDataChannels"])
                    this.availableDataChannels!.push(DataChannelLookupInfo.fromJS(item));
            }
            else {
                this.availableDataChannels = <any>null;
            }
            if (Array.isArray(_data["eventRuleGroups"])) {
                this.eventRuleGroups = [] as any;
                for (let item of _data["eventRuleGroups"])
                    this.eventRuleGroups!.push(EventRuleGroupInfo.fromJS(item));
            }
            else {
                this.eventRuleGroups = <any>null;
            }
        }
    }

    static fromJS(data: any): RetrieveVirtualChannelEditComponentsResult {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveVirtualChannelEditComponentsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.ftpTargetDomains)) {
            data["ftpTargetDomains"] = [];
            for (let item of this.ftpTargetDomains)
                data["ftpTargetDomains"].push(item.toJSON());
        }
        if (Array.isArray(this.dataChannelTemplates)) {
            data["dataChannelTemplates"] = [];
            for (let item of this.dataChannelTemplates)
                data["dataChannelTemplates"].push(item.toJSON());
        }
        if (Array.isArray(this.rosters)) {
            data["rosters"] = [];
            for (let item of this.rosters)
                data["rosters"].push(item.toJSON());
        }
        if (Array.isArray(this.availableDataChannels)) {
            data["availableDataChannels"] = [];
            for (let item of this.availableDataChannels)
                data["availableDataChannels"].push(item.toJSON());
        }
        if (Array.isArray(this.eventRuleGroups)) {
            data["eventRuleGroups"] = [];
            for (let item of this.eventRuleGroups)
                data["eventRuleGroups"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export class DataChannelLookupInfo {
    dataChannelId?: string;
    description?: string | null;

    init(_data?: any) {
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
        }
    }

    static fromJS(data: any): DataChannelLookupInfo {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelLookupInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        return data;
    }
}

export class EditVirtualChannel extends EditBase {
    dataChannelId?: string;
    description?: string | null;
    type?: DataChannelType;
    dataChannelTemplateId?: string;
    domainId?: string;
    assetId?: string | null;
    assetType?: AssetType | null;
    assetTimeZoneId?: number | null;
    siteId?: string | null;
    siteNumber?: string | null;
    siteCustomerName?: string | null;
    siteCity?: string | null;
    siteState?: string | null;
    displayUnitsAsText?: string | null;
    autoGenerateFtpId1?: boolean;
    autoGenerateFtpId2?: boolean;
    ftpDomainId?: string | null;
    ftpDomainId2?: string | null;
    ftpEnabled?: boolean;
    ftpEnabled2?: boolean;
    ftpTankIdentifier?: string | null;
    ftpTankIdentifier2?: string | null;
    latestScaledValue?: number | null;
    latestScaledValue2?: number | null;
    latestReadingTimestamp?: Date | null;
    graphMin?: number | null;
    graphMax?: number | null;
    maxProductHeight?: number | null;
    displayPriority?: number | null;
    apciTankFunction?: APCITankFunctionType | null;
    isAPCISendToLBShell?: boolean;
    apciUnits?: APCIUnitType | null;
    eventRuleGroupId?: number | null;
    eventRules?: EditDataChannelEventRule[] | null;
    formulaParts?: EditVirtualChannelFormulaPart[] | null;
    virtualChannelFormulaExpression?: string | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.dataChannelTemplateId = _data["dataChannelTemplateId"] !== undefined ? _data["dataChannelTemplateId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.assetType = _data["assetType"] !== undefined ? _data["assetType"] : <any>null;
            this.assetTimeZoneId = _data["assetTimeZoneId"] !== undefined ? _data["assetTimeZoneId"] : <any>null;
            this.siteId = _data["siteId"] !== undefined ? _data["siteId"] : <any>null;
            this.siteNumber = _data["siteNumber"] !== undefined ? _data["siteNumber"] : <any>null;
            this.siteCustomerName = _data["siteCustomerName"] !== undefined ? _data["siteCustomerName"] : <any>null;
            this.siteCity = _data["siteCity"] !== undefined ? _data["siteCity"] : <any>null;
            this.siteState = _data["siteState"] !== undefined ? _data["siteState"] : <any>null;
            this.displayUnitsAsText = _data["displayUnitsAsText"] !== undefined ? _data["displayUnitsAsText"] : <any>null;
            this.autoGenerateFtpId1 = _data["autoGenerateFtpId1"] !== undefined ? _data["autoGenerateFtpId1"] : <any>null;
            this.autoGenerateFtpId2 = _data["autoGenerateFtpId2"] !== undefined ? _data["autoGenerateFtpId2"] : <any>null;
            this.ftpDomainId = _data["ftpDomainId"] !== undefined ? _data["ftpDomainId"] : <any>null;
            this.ftpDomainId2 = _data["ftpDomainId2"] !== undefined ? _data["ftpDomainId2"] : <any>null;
            this.ftpEnabled = _data["ftpEnabled"] !== undefined ? _data["ftpEnabled"] : <any>null;
            this.ftpEnabled2 = _data["ftpEnabled2"] !== undefined ? _data["ftpEnabled2"] : <any>null;
            this.ftpTankIdentifier = _data["ftpTankIdentifier"] !== undefined ? _data["ftpTankIdentifier"] : <any>null;
            this.ftpTankIdentifier2 = _data["ftpTankIdentifier2"] !== undefined ? _data["ftpTankIdentifier2"] : <any>null;
            this.latestScaledValue = _data["latestScaledValue"] !== undefined ? _data["latestScaledValue"] : <any>null;
            this.latestScaledValue2 = _data["latestScaledValue2"] !== undefined ? _data["latestScaledValue2"] : <any>null;
            this.latestReadingTimestamp = _data["latestReadingTimestamp"] ? new Date(_data["latestReadingTimestamp"].toString()) : <any>null;
            this.graphMin = _data["graphMin"] !== undefined ? _data["graphMin"] : <any>null;
            this.graphMax = _data["graphMax"] !== undefined ? _data["graphMax"] : <any>null;
            this.maxProductHeight = _data["maxProductHeight"] !== undefined ? _data["maxProductHeight"] : <any>null;
            this.displayPriority = _data["displayPriority"] !== undefined ? _data["displayPriority"] : <any>null;
            this.apciTankFunction = _data["apciTankFunction"] !== undefined ? _data["apciTankFunction"] : <any>null;
            this.isAPCISendToLBShell = _data["isAPCISendToLBShell"] !== undefined ? _data["isAPCISendToLBShell"] : <any>null;
            this.apciUnits = _data["apciUnits"] !== undefined ? _data["apciUnits"] : <any>null;
            this.eventRuleGroupId = _data["eventRuleGroupId"] !== undefined ? _data["eventRuleGroupId"] : <any>null;
            if (Array.isArray(_data["eventRules"])) {
                this.eventRules = [] as any;
                for (let item of _data["eventRules"])
                    this.eventRules!.push(EditDataChannelEventRule.fromJS(item));
            }
            else {
                this.eventRules = <any>null;
            }
            if (Array.isArray(_data["formulaParts"])) {
                this.formulaParts = [] as any;
                for (let item of _data["formulaParts"])
                    this.formulaParts!.push(EditVirtualChannelFormulaPart.fromJS(item));
            }
            else {
                this.formulaParts = <any>null;
            }
            this.virtualChannelFormulaExpression = _data["virtualChannelFormulaExpression"] !== undefined ? _data["virtualChannelFormulaExpression"] : <any>null;
        }
    }

    static fromJS(data: any): EditVirtualChannel {
        data = typeof data === 'object' ? data : {};
        let result = new EditVirtualChannel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["dataChannelTemplateId"] = this.dataChannelTemplateId !== undefined ? this.dataChannelTemplateId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["assetType"] = this.assetType !== undefined ? this.assetType : <any>null;
        data["assetTimeZoneId"] = this.assetTimeZoneId !== undefined ? this.assetTimeZoneId : <any>null;
        data["siteId"] = this.siteId !== undefined ? this.siteId : <any>null;
        data["siteNumber"] = this.siteNumber !== undefined ? this.siteNumber : <any>null;
        data["siteCustomerName"] = this.siteCustomerName !== undefined ? this.siteCustomerName : <any>null;
        data["siteCity"] = this.siteCity !== undefined ? this.siteCity : <any>null;
        data["siteState"] = this.siteState !== undefined ? this.siteState : <any>null;
        data["displayUnitsAsText"] = this.displayUnitsAsText !== undefined ? this.displayUnitsAsText : <any>null;
        data["autoGenerateFtpId1"] = this.autoGenerateFtpId1 !== undefined ? this.autoGenerateFtpId1 : <any>null;
        data["autoGenerateFtpId2"] = this.autoGenerateFtpId2 !== undefined ? this.autoGenerateFtpId2 : <any>null;
        data["ftpDomainId"] = this.ftpDomainId !== undefined ? this.ftpDomainId : <any>null;
        data["ftpDomainId2"] = this.ftpDomainId2 !== undefined ? this.ftpDomainId2 : <any>null;
        data["ftpEnabled"] = this.ftpEnabled !== undefined ? this.ftpEnabled : <any>null;
        data["ftpEnabled2"] = this.ftpEnabled2 !== undefined ? this.ftpEnabled2 : <any>null;
        data["ftpTankIdentifier"] = this.ftpTankIdentifier !== undefined ? this.ftpTankIdentifier : <any>null;
        data["ftpTankIdentifier2"] = this.ftpTankIdentifier2 !== undefined ? this.ftpTankIdentifier2 : <any>null;
        data["latestScaledValue"] = this.latestScaledValue !== undefined ? this.latestScaledValue : <any>null;
        data["latestScaledValue2"] = this.latestScaledValue2 !== undefined ? this.latestScaledValue2 : <any>null;
        data["latestReadingTimestamp"] = this.latestReadingTimestamp ? this.latestReadingTimestamp.toISOString() : <any>null;
        data["graphMin"] = this.graphMin !== undefined ? this.graphMin : <any>null;
        data["graphMax"] = this.graphMax !== undefined ? this.graphMax : <any>null;
        data["maxProductHeight"] = this.maxProductHeight !== undefined ? this.maxProductHeight : <any>null;
        data["displayPriority"] = this.displayPriority !== undefined ? this.displayPriority : <any>null;
        data["apciTankFunction"] = this.apciTankFunction !== undefined ? this.apciTankFunction : <any>null;
        data["isAPCISendToLBShell"] = this.isAPCISendToLBShell !== undefined ? this.isAPCISendToLBShell : <any>null;
        data["apciUnits"] = this.apciUnits !== undefined ? this.apciUnits : <any>null;
        data["eventRuleGroupId"] = this.eventRuleGroupId !== undefined ? this.eventRuleGroupId : <any>null;
        if (Array.isArray(this.eventRules)) {
            data["eventRules"] = [];
            for (let item of this.eventRules)
                data["eventRules"].push(item.toJSON());
        }
        if (Array.isArray(this.formulaParts)) {
            data["formulaParts"] = [];
            for (let item of this.formulaParts)
                data["formulaParts"].push(item.toJSON());
        }
        data["virtualChannelFormulaExpression"] = this.virtualChannelFormulaExpression !== undefined ? this.virtualChannelFormulaExpression : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EditVirtualChannelFormulaPart extends EditBase {
    virtualChannelFormulaPartId?: number;
    isEnabled?: boolean;
    expressionDataChannelId?: string | null;
    expression?: string | null;
    constant?: number | null;
    operator?: VirtualChannelOperatorType;
    sortIndex?: number;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.virtualChannelFormulaPartId = _data["virtualChannelFormulaPartId"] !== undefined ? _data["virtualChannelFormulaPartId"] : <any>null;
            this.isEnabled = _data["isEnabled"] !== undefined ? _data["isEnabled"] : <any>null;
            this.expressionDataChannelId = _data["expressionDataChannelId"] !== undefined ? _data["expressionDataChannelId"] : <any>null;
            this.expression = _data["expression"] !== undefined ? _data["expression"] : <any>null;
            this.constant = _data["constant"] !== undefined ? _data["constant"] : <any>null;
            this.operator = _data["operator"] !== undefined ? _data["operator"] : <any>null;
            this.sortIndex = _data["sortIndex"] !== undefined ? _data["sortIndex"] : <any>null;
        }
    }

    static fromJS(data: any): EditVirtualChannelFormulaPart {
        data = typeof data === 'object' ? data : {};
        let result = new EditVirtualChannelFormulaPart();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["virtualChannelFormulaPartId"] = this.virtualChannelFormulaPartId !== undefined ? this.virtualChannelFormulaPartId : <any>null;
        data["isEnabled"] = this.isEnabled !== undefined ? this.isEnabled : <any>null;
        data["expressionDataChannelId"] = this.expressionDataChannelId !== undefined ? this.expressionDataChannelId : <any>null;
        data["expression"] = this.expression !== undefined ? this.expression : <any>null;
        data["constant"] = this.constant !== undefined ? this.constant : <any>null;
        data["operator"] = this.operator !== undefined ? this.operator : <any>null;
        data["sortIndex"] = this.sortIndex !== undefined ? this.sortIndex : <any>null;
        super.toJSON(data);
        return data;
    }
}

export enum VirtualChannelOperatorType {
    None = 0,
    Addition = 1,
    Subtraction = 2,
    Multiplication = 3,
    Division = 4,
    And = 5,
    Or = 6,
    Expoentiation = 7,
}

export class RetrieveVirtualChannelEditComponentsByIdRequest extends WcfProxyUserDetails {
    dataChannelId?: string;
    loadEditComponents?: boolean;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.loadEditComponents = _data["loadEditComponents"] !== undefined ? _data["loadEditComponents"] : <any>null;
        }
    }

    static fromJS(data: any): RetrieveVirtualChannelEditComponentsByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveVirtualChannelEditComponentsByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["loadEditComponents"] = this.loadEditComponents !== undefined ? this.loadEditComponents : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveVirtualChannelEditComponentsByIdRequest extends RetrieveVirtualChannelEditComponentsByIdRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveVirtualChannelEditComponentsByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveVirtualChannelEditComponentsByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class SaveDataChannelResponse {
    saveDataChannelResult?: SaveDataChannelResult | null;

    init(_data?: any) {
        if (_data) {
            this.saveDataChannelResult = _data["saveDataChannelResult"] ? SaveDataChannelResult.fromJS(_data["saveDataChannelResult"]) : <any>null;
        }
    }

    static fromJS(data: any): SaveDataChannelResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SaveDataChannelResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["saveDataChannelResult"] = this.saveDataChannelResult ? this.saveDataChannelResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveSaveDataChannelResponse extends SaveDataChannelResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveSaveDataChannelResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveDataChannelResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class BaseSaveResultOfEditDataChannel extends SaveResult {
    editObject?: EditDataChannel | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.editObject = _data["editObject"] ? EditDataChannel.fromJS(_data["editObject"]) : <any>null;
        }
    }

    static fromJS(data: any): BaseSaveResultOfEditDataChannel {
        data = typeof data === 'object' ? data : {};
        let result = new BaseSaveResultOfEditDataChannel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["editObject"] = this.editObject ? this.editObject.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class SaveDataChannelResult extends BaseSaveResultOfEditDataChannel {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): SaveDataChannelResult {
        data = typeof data === 'object' ? data : {};
        let result = new SaveDataChannelResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class EditDataChannel extends EditBase {
    dataChannelId?: string;
    name?: string | null;
    description?: string | null;
    type?: DataChannelType;
    gasMixerDataChannelType?: GasMixerDataChannelType | null;
    dataChannelTemplateId?: string;
    dataChannelTemplateDescription?: string | null;
    manufacturer?: string | null;
    modelNumber?: string | null;
    domainId?: string;
    assetId?: string | null;
    assetType?: AssetType | null;
    assetDescription?: string | null;
    assetTimeZoneId?: number | null;
    siteId?: string | null;
    siteNumber?: string | null;
    siteCustomerName?: string | null;
    siteCity?: string | null;
    siteState?: string | null;
    dataSource?: DataChannelDataSourceType;
    sourceDataChannelId?: string | null;
    publishedComments?: string | null;
    isPublished?: boolean;
    publishedDate?: Date | null;
    unpublishedDate?: Date | null;
    sourceDomainId?: string | null;
    sourceDomainName?: string | null;
    rtuId?: string | null;
    rtuCategory?: RTUCategoryType | null;
    initialRTUCategory?: RTUCategoryType | null;
    rtuDeviceId?: string | null;
    rtuChannelId?: string | null;
    rtuChannelNumber?: string | null;
    isRTUChannelMaster?: boolean | null;
    noRTUChannelConfig?: boolean;
    productId?: string | null;
    productName?: string | null;
    productDescription?: string | null;
    productSpecificGravity?: number | null;
    standardVolumePerCubicMeter?: number | null;
    autoGenerateFtpId1?: boolean;
    autoGenerateFtpId2?: boolean;
    isVolumetric?: boolean;
    rawUnits?: RawUnitType | null;
    rawUnitsAtZero?: number | null;
    rawUnitsAtFullScale?: number | null;
    rawUnitsAtOverRange?: number | null;
    rawUnitsAtScaledMax?: number | null;
    rawUnitsAtScaledMin?: number | null;
    rawUnitsAtUnderRange?: number | null;
    scaledUnits?: UnitType | null;
    scaledUnitsAsText?: string | null;
    displayUnits?: UnitType | null;
    displayUnitsAsText?: string | null;
    sensorPosition?: number | null;
    sensorPositionUnits?: UnitType | null;
    scalingMode?: ScalingModeType | null;
    rawUnitsText?: string | null;
    sensorSerialNumber?: string | null;
    forecastMode?: ForecastModeType | null;
    previousForecastMode?: ForecastModeType | null;
    ftpDomainId?: string | null;
    ftpDomainId2?: string | null;
    showHighLowForecast?: boolean;
    previousShowHighLowForecast?: boolean | null;
    ftpEnabled?: boolean;
    ftpEnabled2?: boolean;
    isDeliveryForecasted?: boolean;
    previousIsDeliveryForecasted?: boolean | null;
    ftpTankIdentifier?: string | null;
    ftpTankIdentifier2?: string | null;
    latestScaledValue?: number | null;
    latestScaledValue2?: number | null;
    latestReadingTimestamp?: Date | null;
    scaledMin?: number | null;
    scaledMax?: number | null;
    graphMin?: number | null;
    graphMax?: number | null;
    isPartOfComposite?: boolean | null;
    manualUsageRate?: number | null;
    previousManualUsageRate?: number | null;
    maxProductHeight?: number | null;
    maxDeliverQuantity?: number | null;
    tankDimensionId?: string | null;
    tankDimensionDescription?: string | null;
    tankType?: TankType | null;
    useStrappingChartForConversion?: boolean;
    strappingLevelUnits?: UnitType | null;
    strappingVolumeUnits?: UnitType | null;
    tankDiameterInMeters?: number | null;
    tankLengthInMeters?: number | null;
    tankDishHeightInMeters?: number | null;
    tankHeightInMeters?: number | null;
    tankWidthInMeters?: number | null;
    digitalState0Limit?: number | null;
    digitalState0Text?: string | null;
    digitalState1Limit?: number | null;
    digitalState1Text?: string | null;
    digitalState2Limit?: number | null;
    digitalState2Text?: string | null;
    digitalState3Limit?: number | null;
    digitalState3Text?: string | null;
    status?: number | null;
    displayPriority?: number | null;
    maxProductHeightInCubicMeters?: number | null;
    maxProductHeightInDisplayUnits?: number | null;
    eventRuleGroupId?: number | null;
    dataAggregationMode?: DataAggregationModeType | null;
    dataAggregationPeriod?: number | null;
    gpsSourceTypeId?: GpsSourceType;
    isDataInverted?: boolean;
    usePrescaling?: boolean;
    useLimits?: boolean;
    apciTankFunction?: APCITankFunctionType | null;
    isAPCISendToLBShell?: boolean;
    apciUnits?: APCIUnitType | null;
    isAPCILBShellSubscriber?: boolean;
    totalizedFTPDomainInfo?: TotalizedDataChannelFTPDomainInfo[] | null;
    publishInfo?: EditDataChannelPublishInfo[] | null;
    strappingChartInfo?: StrappingChartInfo[] | null;
    eventRules?: EditDataChannelEventRule[] | null;
    rtuChannelReversePollDetail?: EditDataChannelReversePollDetail | null;
    rawToScaledMapInfo?: DcRawToScaledMapPoint[] | null;
    isDesignCurveEnabled?: boolean;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.gasMixerDataChannelType = _data["gasMixerDataChannelType"] !== undefined ? _data["gasMixerDataChannelType"] : <any>null;
            this.dataChannelTemplateId = _data["dataChannelTemplateId"] !== undefined ? _data["dataChannelTemplateId"] : <any>null;
            this.dataChannelTemplateDescription = _data["dataChannelTemplateDescription"] !== undefined ? _data["dataChannelTemplateDescription"] : <any>null;
            this.manufacturer = _data["manufacturer"] !== undefined ? _data["manufacturer"] : <any>null;
            this.modelNumber = _data["modelNumber"] !== undefined ? _data["modelNumber"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.assetType = _data["assetType"] !== undefined ? _data["assetType"] : <any>null;
            this.assetDescription = _data["assetDescription"] !== undefined ? _data["assetDescription"] : <any>null;
            this.assetTimeZoneId = _data["assetTimeZoneId"] !== undefined ? _data["assetTimeZoneId"] : <any>null;
            this.siteId = _data["siteId"] !== undefined ? _data["siteId"] : <any>null;
            this.siteNumber = _data["siteNumber"] !== undefined ? _data["siteNumber"] : <any>null;
            this.siteCustomerName = _data["siteCustomerName"] !== undefined ? _data["siteCustomerName"] : <any>null;
            this.siteCity = _data["siteCity"] !== undefined ? _data["siteCity"] : <any>null;
            this.siteState = _data["siteState"] !== undefined ? _data["siteState"] : <any>null;
            this.dataSource = _data["dataSource"] !== undefined ? _data["dataSource"] : <any>null;
            this.sourceDataChannelId = _data["sourceDataChannelId"] !== undefined ? _data["sourceDataChannelId"] : <any>null;
            this.publishedComments = _data["publishedComments"] !== undefined ? _data["publishedComments"] : <any>null;
            this.isPublished = _data["isPublished"] !== undefined ? _data["isPublished"] : <any>null;
            this.publishedDate = _data["publishedDate"] ? new Date(_data["publishedDate"].toString()) : <any>null;
            this.unpublishedDate = _data["unpublishedDate"] ? new Date(_data["unpublishedDate"].toString()) : <any>null;
            this.sourceDomainId = _data["sourceDomainId"] !== undefined ? _data["sourceDomainId"] : <any>null;
            this.sourceDomainName = _data["sourceDomainName"] !== undefined ? _data["sourceDomainName"] : <any>null;
            this.rtuId = _data["rtuId"] !== undefined ? _data["rtuId"] : <any>null;
            this.rtuCategory = _data["rtuCategory"] !== undefined ? _data["rtuCategory"] : <any>null;
            this.initialRTUCategory = _data["initialRTUCategory"] !== undefined ? _data["initialRTUCategory"] : <any>null;
            this.rtuDeviceId = _data["rtuDeviceId"] !== undefined ? _data["rtuDeviceId"] : <any>null;
            this.rtuChannelId = _data["rtuChannelId"] !== undefined ? _data["rtuChannelId"] : <any>null;
            this.rtuChannelNumber = _data["rtuChannelNumber"] !== undefined ? _data["rtuChannelNumber"] : <any>null;
            this.isRTUChannelMaster = _data["isRTUChannelMaster"] !== undefined ? _data["isRTUChannelMaster"] : <any>null;
            this.noRTUChannelConfig = _data["noRTUChannelConfig"] !== undefined ? _data["noRTUChannelConfig"] : <any>null;
            this.productId = _data["productId"] !== undefined ? _data["productId"] : <any>null;
            this.productName = _data["productName"] !== undefined ? _data["productName"] : <any>null;
            this.productDescription = _data["productDescription"] !== undefined ? _data["productDescription"] : <any>null;
            this.productSpecificGravity = _data["productSpecificGravity"] !== undefined ? _data["productSpecificGravity"] : <any>null;
            this.standardVolumePerCubicMeter = _data["standardVolumePerCubicMeter"] !== undefined ? _data["standardVolumePerCubicMeter"] : <any>null;
            this.autoGenerateFtpId1 = _data["autoGenerateFtpId1"] !== undefined ? _data["autoGenerateFtpId1"] : <any>null;
            this.autoGenerateFtpId2 = _data["autoGenerateFtpId2"] !== undefined ? _data["autoGenerateFtpId2"] : <any>null;
            this.isVolumetric = _data["isVolumetric"] !== undefined ? _data["isVolumetric"] : <any>null;
            this.rawUnits = _data["rawUnits"] !== undefined ? _data["rawUnits"] : <any>null;
            this.rawUnitsAtZero = _data["rawUnitsAtZero"] !== undefined ? _data["rawUnitsAtZero"] : <any>null;
            this.rawUnitsAtFullScale = _data["rawUnitsAtFullScale"] !== undefined ? _data["rawUnitsAtFullScale"] : <any>null;
            this.rawUnitsAtOverRange = _data["rawUnitsAtOverRange"] !== undefined ? _data["rawUnitsAtOverRange"] : <any>null;
            this.rawUnitsAtScaledMax = _data["rawUnitsAtScaledMax"] !== undefined ? _data["rawUnitsAtScaledMax"] : <any>null;
            this.rawUnitsAtScaledMin = _data["rawUnitsAtScaledMin"] !== undefined ? _data["rawUnitsAtScaledMin"] : <any>null;
            this.rawUnitsAtUnderRange = _data["rawUnitsAtUnderRange"] !== undefined ? _data["rawUnitsAtUnderRange"] : <any>null;
            this.scaledUnits = _data["scaledUnits"] !== undefined ? _data["scaledUnits"] : <any>null;
            this.scaledUnitsAsText = _data["scaledUnitsAsText"] !== undefined ? _data["scaledUnitsAsText"] : <any>null;
            this.displayUnits = _data["displayUnits"] !== undefined ? _data["displayUnits"] : <any>null;
            this.displayUnitsAsText = _data["displayUnitsAsText"] !== undefined ? _data["displayUnitsAsText"] : <any>null;
            this.sensorPosition = _data["sensorPosition"] !== undefined ? _data["sensorPosition"] : <any>null;
            this.sensorPositionUnits = _data["sensorPositionUnits"] !== undefined ? _data["sensorPositionUnits"] : <any>null;
            this.scalingMode = _data["scalingMode"] !== undefined ? _data["scalingMode"] : <any>null;
            this.rawUnitsText = _data["rawUnitsText"] !== undefined ? _data["rawUnitsText"] : <any>null;
            this.sensorSerialNumber = _data["sensorSerialNumber"] !== undefined ? _data["sensorSerialNumber"] : <any>null;
            this.forecastMode = _data["forecastMode"] !== undefined ? _data["forecastMode"] : <any>null;
            this.previousForecastMode = _data["previousForecastMode"] !== undefined ? _data["previousForecastMode"] : <any>null;
            this.ftpDomainId = _data["ftpDomainId"] !== undefined ? _data["ftpDomainId"] : <any>null;
            this.ftpDomainId2 = _data["ftpDomainId2"] !== undefined ? _data["ftpDomainId2"] : <any>null;
            this.showHighLowForecast = _data["showHighLowForecast"] !== undefined ? _data["showHighLowForecast"] : <any>null;
            this.previousShowHighLowForecast = _data["previousShowHighLowForecast"] !== undefined ? _data["previousShowHighLowForecast"] : <any>null;
            this.ftpEnabled = _data["ftpEnabled"] !== undefined ? _data["ftpEnabled"] : <any>null;
            this.ftpEnabled2 = _data["ftpEnabled2"] !== undefined ? _data["ftpEnabled2"] : <any>null;
            this.isDeliveryForecasted = _data["isDeliveryForecasted"] !== undefined ? _data["isDeliveryForecasted"] : <any>null;
            this.previousIsDeliveryForecasted = _data["previousIsDeliveryForecasted"] !== undefined ? _data["previousIsDeliveryForecasted"] : <any>null;
            this.ftpTankIdentifier = _data["ftpTankIdentifier"] !== undefined ? _data["ftpTankIdentifier"] : <any>null;
            this.ftpTankIdentifier2 = _data["ftpTankIdentifier2"] !== undefined ? _data["ftpTankIdentifier2"] : <any>null;
            this.latestScaledValue = _data["latestScaledValue"] !== undefined ? _data["latestScaledValue"] : <any>null;
            this.latestScaledValue2 = _data["latestScaledValue2"] !== undefined ? _data["latestScaledValue2"] : <any>null;
            this.latestReadingTimestamp = _data["latestReadingTimestamp"] ? new Date(_data["latestReadingTimestamp"].toString()) : <any>null;
            this.scaledMin = _data["scaledMin"] !== undefined ? _data["scaledMin"] : <any>null;
            this.scaledMax = _data["scaledMax"] !== undefined ? _data["scaledMax"] : <any>null;
            this.graphMin = _data["graphMin"] !== undefined ? _data["graphMin"] : <any>null;
            this.graphMax = _data["graphMax"] !== undefined ? _data["graphMax"] : <any>null;
            this.isPartOfComposite = _data["isPartOfComposite"] !== undefined ? _data["isPartOfComposite"] : <any>null;
            this.manualUsageRate = _data["manualUsageRate"] !== undefined ? _data["manualUsageRate"] : <any>null;
            this.previousManualUsageRate = _data["previousManualUsageRate"] !== undefined ? _data["previousManualUsageRate"] : <any>null;
            this.maxProductHeight = _data["maxProductHeight"] !== undefined ? _data["maxProductHeight"] : <any>null;
            this.maxDeliverQuantity = _data["maxDeliverQuantity"] !== undefined ? _data["maxDeliverQuantity"] : <any>null;
            this.tankDimensionId = _data["tankDimensionId"] !== undefined ? _data["tankDimensionId"] : <any>null;
            this.tankDimensionDescription = _data["tankDimensionDescription"] !== undefined ? _data["tankDimensionDescription"] : <any>null;
            this.tankType = _data["tankType"] !== undefined ? _data["tankType"] : <any>null;
            this.useStrappingChartForConversion = _data["useStrappingChartForConversion"] !== undefined ? _data["useStrappingChartForConversion"] : <any>null;
            this.strappingLevelUnits = _data["strappingLevelUnits"] !== undefined ? _data["strappingLevelUnits"] : <any>null;
            this.strappingVolumeUnits = _data["strappingVolumeUnits"] !== undefined ? _data["strappingVolumeUnits"] : <any>null;
            this.tankDiameterInMeters = _data["tankDiameterInMeters"] !== undefined ? _data["tankDiameterInMeters"] : <any>null;
            this.tankLengthInMeters = _data["tankLengthInMeters"] !== undefined ? _data["tankLengthInMeters"] : <any>null;
            this.tankDishHeightInMeters = _data["tankDishHeightInMeters"] !== undefined ? _data["tankDishHeightInMeters"] : <any>null;
            this.tankHeightInMeters = _data["tankHeightInMeters"] !== undefined ? _data["tankHeightInMeters"] : <any>null;
            this.tankWidthInMeters = _data["tankWidthInMeters"] !== undefined ? _data["tankWidthInMeters"] : <any>null;
            this.digitalState0Limit = _data["digitalState0Limit"] !== undefined ? _data["digitalState0Limit"] : <any>null;
            this.digitalState0Text = _data["digitalState0Text"] !== undefined ? _data["digitalState0Text"] : <any>null;
            this.digitalState1Limit = _data["digitalState1Limit"] !== undefined ? _data["digitalState1Limit"] : <any>null;
            this.digitalState1Text = _data["digitalState1Text"] !== undefined ? _data["digitalState1Text"] : <any>null;
            this.digitalState2Limit = _data["digitalState2Limit"] !== undefined ? _data["digitalState2Limit"] : <any>null;
            this.digitalState2Text = _data["digitalState2Text"] !== undefined ? _data["digitalState2Text"] : <any>null;
            this.digitalState3Limit = _data["digitalState3Limit"] !== undefined ? _data["digitalState3Limit"] : <any>null;
            this.digitalState3Text = _data["digitalState3Text"] !== undefined ? _data["digitalState3Text"] : <any>null;
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
            this.displayPriority = _data["displayPriority"] !== undefined ? _data["displayPriority"] : <any>null;
            this.maxProductHeightInCubicMeters = _data["maxProductHeightInCubicMeters"] !== undefined ? _data["maxProductHeightInCubicMeters"] : <any>null;
            this.maxProductHeightInDisplayUnits = _data["maxProductHeightInDisplayUnits"] !== undefined ? _data["maxProductHeightInDisplayUnits"] : <any>null;
            this.eventRuleGroupId = _data["eventRuleGroupId"] !== undefined ? _data["eventRuleGroupId"] : <any>null;
            this.dataAggregationMode = _data["dataAggregationMode"] !== undefined ? _data["dataAggregationMode"] : <any>null;
            this.dataAggregationPeriod = _data["dataAggregationPeriod"] !== undefined ? _data["dataAggregationPeriod"] : <any>null;
            this.gpsSourceTypeId = _data["gpsSourceTypeId"] !== undefined ? _data["gpsSourceTypeId"] : <any>null;
            this.isDataInverted = _data["isDataInverted"] !== undefined ? _data["isDataInverted"] : <any>null;
            this.usePrescaling = _data["usePrescaling"] !== undefined ? _data["usePrescaling"] : <any>null;
            this.useLimits = _data["useLimits"] !== undefined ? _data["useLimits"] : <any>null;
            this.apciTankFunction = _data["apciTankFunction"] !== undefined ? _data["apciTankFunction"] : <any>null;
            this.isAPCISendToLBShell = _data["isAPCISendToLBShell"] !== undefined ? _data["isAPCISendToLBShell"] : <any>null;
            this.apciUnits = _data["apciUnits"] !== undefined ? _data["apciUnits"] : <any>null;
            this.isAPCILBShellSubscriber = _data["isAPCILBShellSubscriber"] !== undefined ? _data["isAPCILBShellSubscriber"] : <any>null;
            if (Array.isArray(_data["totalizedFTPDomainInfo"])) {
                this.totalizedFTPDomainInfo = [] as any;
                for (let item of _data["totalizedFTPDomainInfo"])
                    this.totalizedFTPDomainInfo!.push(TotalizedDataChannelFTPDomainInfo.fromJS(item));
            }
            else {
                this.totalizedFTPDomainInfo = <any>null;
            }
            if (Array.isArray(_data["publishInfo"])) {
                this.publishInfo = [] as any;
                for (let item of _data["publishInfo"])
                    this.publishInfo!.push(EditDataChannelPublishInfo.fromJS(item));
            }
            else {
                this.publishInfo = <any>null;
            }
            if (Array.isArray(_data["strappingChartInfo"])) {
                this.strappingChartInfo = [] as any;
                for (let item of _data["strappingChartInfo"])
                    this.strappingChartInfo!.push(StrappingChartInfo.fromJS(item));
            }
            else {
                this.strappingChartInfo = <any>null;
            }
            if (Array.isArray(_data["eventRules"])) {
                this.eventRules = [] as any;
                for (let item of _data["eventRules"])
                    this.eventRules!.push(EditDataChannelEventRule.fromJS(item));
            }
            else {
                this.eventRules = <any>null;
            }
            this.rtuChannelReversePollDetail = _data["rtuChannelReversePollDetail"] ? EditDataChannelReversePollDetail.fromJS(_data["rtuChannelReversePollDetail"]) : <any>null;
            if (Array.isArray(_data["rawToScaledMapInfo"])) {
                this.rawToScaledMapInfo = [] as any;
                for (let item of _data["rawToScaledMapInfo"])
                    this.rawToScaledMapInfo!.push(DcRawToScaledMapPoint.fromJS(item));
            }
            else {
                this.rawToScaledMapInfo = <any>null;
            }
            this.isDesignCurveEnabled = _data["isDesignCurveEnabled"] !== undefined ? _data["isDesignCurveEnabled"] : <any>null;
        }
    }

    static fromJS(data: any): EditDataChannel {
        data = typeof data === 'object' ? data : {};
        let result = new EditDataChannel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["gasMixerDataChannelType"] = this.gasMixerDataChannelType !== undefined ? this.gasMixerDataChannelType : <any>null;
        data["dataChannelTemplateId"] = this.dataChannelTemplateId !== undefined ? this.dataChannelTemplateId : <any>null;
        data["dataChannelTemplateDescription"] = this.dataChannelTemplateDescription !== undefined ? this.dataChannelTemplateDescription : <any>null;
        data["manufacturer"] = this.manufacturer !== undefined ? this.manufacturer : <any>null;
        data["modelNumber"] = this.modelNumber !== undefined ? this.modelNumber : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["assetType"] = this.assetType !== undefined ? this.assetType : <any>null;
        data["assetDescription"] = this.assetDescription !== undefined ? this.assetDescription : <any>null;
        data["assetTimeZoneId"] = this.assetTimeZoneId !== undefined ? this.assetTimeZoneId : <any>null;
        data["siteId"] = this.siteId !== undefined ? this.siteId : <any>null;
        data["siteNumber"] = this.siteNumber !== undefined ? this.siteNumber : <any>null;
        data["siteCustomerName"] = this.siteCustomerName !== undefined ? this.siteCustomerName : <any>null;
        data["siteCity"] = this.siteCity !== undefined ? this.siteCity : <any>null;
        data["siteState"] = this.siteState !== undefined ? this.siteState : <any>null;
        data["dataSource"] = this.dataSource !== undefined ? this.dataSource : <any>null;
        data["sourceDataChannelId"] = this.sourceDataChannelId !== undefined ? this.sourceDataChannelId : <any>null;
        data["publishedComments"] = this.publishedComments !== undefined ? this.publishedComments : <any>null;
        data["isPublished"] = this.isPublished !== undefined ? this.isPublished : <any>null;
        data["publishedDate"] = this.publishedDate ? this.publishedDate.toISOString() : <any>null;
        data["unpublishedDate"] = this.unpublishedDate ? this.unpublishedDate.toISOString() : <any>null;
        data["sourceDomainId"] = this.sourceDomainId !== undefined ? this.sourceDomainId : <any>null;
        data["sourceDomainName"] = this.sourceDomainName !== undefined ? this.sourceDomainName : <any>null;
        data["rtuId"] = this.rtuId !== undefined ? this.rtuId : <any>null;
        data["rtuCategory"] = this.rtuCategory !== undefined ? this.rtuCategory : <any>null;
        data["initialRTUCategory"] = this.initialRTUCategory !== undefined ? this.initialRTUCategory : <any>null;
        data["rtuDeviceId"] = this.rtuDeviceId !== undefined ? this.rtuDeviceId : <any>null;
        data["rtuChannelId"] = this.rtuChannelId !== undefined ? this.rtuChannelId : <any>null;
        data["rtuChannelNumber"] = this.rtuChannelNumber !== undefined ? this.rtuChannelNumber : <any>null;
        data["isRTUChannelMaster"] = this.isRTUChannelMaster !== undefined ? this.isRTUChannelMaster : <any>null;
        data["noRTUChannelConfig"] = this.noRTUChannelConfig !== undefined ? this.noRTUChannelConfig : <any>null;
        data["productId"] = this.productId !== undefined ? this.productId : <any>null;
        data["productName"] = this.productName !== undefined ? this.productName : <any>null;
        data["productDescription"] = this.productDescription !== undefined ? this.productDescription : <any>null;
        data["productSpecificGravity"] = this.productSpecificGravity !== undefined ? this.productSpecificGravity : <any>null;
        data["standardVolumePerCubicMeter"] = this.standardVolumePerCubicMeter !== undefined ? this.standardVolumePerCubicMeter : <any>null;
        data["autoGenerateFtpId1"] = this.autoGenerateFtpId1 !== undefined ? this.autoGenerateFtpId1 : <any>null;
        data["autoGenerateFtpId2"] = this.autoGenerateFtpId2 !== undefined ? this.autoGenerateFtpId2 : <any>null;
        data["isVolumetric"] = this.isVolumetric !== undefined ? this.isVolumetric : <any>null;
        data["rawUnits"] = this.rawUnits !== undefined ? this.rawUnits : <any>null;
        data["rawUnitsAtZero"] = this.rawUnitsAtZero !== undefined ? this.rawUnitsAtZero : <any>null;
        data["rawUnitsAtFullScale"] = this.rawUnitsAtFullScale !== undefined ? this.rawUnitsAtFullScale : <any>null;
        data["rawUnitsAtOverRange"] = this.rawUnitsAtOverRange !== undefined ? this.rawUnitsAtOverRange : <any>null;
        data["rawUnitsAtScaledMax"] = this.rawUnitsAtScaledMax !== undefined ? this.rawUnitsAtScaledMax : <any>null;
        data["rawUnitsAtScaledMin"] = this.rawUnitsAtScaledMin !== undefined ? this.rawUnitsAtScaledMin : <any>null;
        data["rawUnitsAtUnderRange"] = this.rawUnitsAtUnderRange !== undefined ? this.rawUnitsAtUnderRange : <any>null;
        data["scaledUnits"] = this.scaledUnits !== undefined ? this.scaledUnits : <any>null;
        data["scaledUnitsAsText"] = this.scaledUnitsAsText !== undefined ? this.scaledUnitsAsText : <any>null;
        data["displayUnits"] = this.displayUnits !== undefined ? this.displayUnits : <any>null;
        data["displayUnitsAsText"] = this.displayUnitsAsText !== undefined ? this.displayUnitsAsText : <any>null;
        data["sensorPosition"] = this.sensorPosition !== undefined ? this.sensorPosition : <any>null;
        data["sensorPositionUnits"] = this.sensorPositionUnits !== undefined ? this.sensorPositionUnits : <any>null;
        data["scalingMode"] = this.scalingMode !== undefined ? this.scalingMode : <any>null;
        data["rawUnitsText"] = this.rawUnitsText !== undefined ? this.rawUnitsText : <any>null;
        data["sensorSerialNumber"] = this.sensorSerialNumber !== undefined ? this.sensorSerialNumber : <any>null;
        data["forecastMode"] = this.forecastMode !== undefined ? this.forecastMode : <any>null;
        data["previousForecastMode"] = this.previousForecastMode !== undefined ? this.previousForecastMode : <any>null;
        data["ftpDomainId"] = this.ftpDomainId !== undefined ? this.ftpDomainId : <any>null;
        data["ftpDomainId2"] = this.ftpDomainId2 !== undefined ? this.ftpDomainId2 : <any>null;
        data["showHighLowForecast"] = this.showHighLowForecast !== undefined ? this.showHighLowForecast : <any>null;
        data["previousShowHighLowForecast"] = this.previousShowHighLowForecast !== undefined ? this.previousShowHighLowForecast : <any>null;
        data["ftpEnabled"] = this.ftpEnabled !== undefined ? this.ftpEnabled : <any>null;
        data["ftpEnabled2"] = this.ftpEnabled2 !== undefined ? this.ftpEnabled2 : <any>null;
        data["isDeliveryForecasted"] = this.isDeliveryForecasted !== undefined ? this.isDeliveryForecasted : <any>null;
        data["previousIsDeliveryForecasted"] = this.previousIsDeliveryForecasted !== undefined ? this.previousIsDeliveryForecasted : <any>null;
        data["ftpTankIdentifier"] = this.ftpTankIdentifier !== undefined ? this.ftpTankIdentifier : <any>null;
        data["ftpTankIdentifier2"] = this.ftpTankIdentifier2 !== undefined ? this.ftpTankIdentifier2 : <any>null;
        data["latestScaledValue"] = this.latestScaledValue !== undefined ? this.latestScaledValue : <any>null;
        data["latestScaledValue2"] = this.latestScaledValue2 !== undefined ? this.latestScaledValue2 : <any>null;
        data["latestReadingTimestamp"] = this.latestReadingTimestamp ? this.latestReadingTimestamp.toISOString() : <any>null;
        data["scaledMin"] = this.scaledMin !== undefined ? this.scaledMin : <any>null;
        data["scaledMax"] = this.scaledMax !== undefined ? this.scaledMax : <any>null;
        data["graphMin"] = this.graphMin !== undefined ? this.graphMin : <any>null;
        data["graphMax"] = this.graphMax !== undefined ? this.graphMax : <any>null;
        data["isPartOfComposite"] = this.isPartOfComposite !== undefined ? this.isPartOfComposite : <any>null;
        data["manualUsageRate"] = this.manualUsageRate !== undefined ? this.manualUsageRate : <any>null;
        data["previousManualUsageRate"] = this.previousManualUsageRate !== undefined ? this.previousManualUsageRate : <any>null;
        data["maxProductHeight"] = this.maxProductHeight !== undefined ? this.maxProductHeight : <any>null;
        data["maxDeliverQuantity"] = this.maxDeliverQuantity !== undefined ? this.maxDeliverQuantity : <any>null;
        data["tankDimensionId"] = this.tankDimensionId !== undefined ? this.tankDimensionId : <any>null;
        data["tankDimensionDescription"] = this.tankDimensionDescription !== undefined ? this.tankDimensionDescription : <any>null;
        data["tankType"] = this.tankType !== undefined ? this.tankType : <any>null;
        data["useStrappingChartForConversion"] = this.useStrappingChartForConversion !== undefined ? this.useStrappingChartForConversion : <any>null;
        data["strappingLevelUnits"] = this.strappingLevelUnits !== undefined ? this.strappingLevelUnits : <any>null;
        data["strappingVolumeUnits"] = this.strappingVolumeUnits !== undefined ? this.strappingVolumeUnits : <any>null;
        data["tankDiameterInMeters"] = this.tankDiameterInMeters !== undefined ? this.tankDiameterInMeters : <any>null;
        data["tankLengthInMeters"] = this.tankLengthInMeters !== undefined ? this.tankLengthInMeters : <any>null;
        data["tankDishHeightInMeters"] = this.tankDishHeightInMeters !== undefined ? this.tankDishHeightInMeters : <any>null;
        data["tankHeightInMeters"] = this.tankHeightInMeters !== undefined ? this.tankHeightInMeters : <any>null;
        data["tankWidthInMeters"] = this.tankWidthInMeters !== undefined ? this.tankWidthInMeters : <any>null;
        data["digitalState0Limit"] = this.digitalState0Limit !== undefined ? this.digitalState0Limit : <any>null;
        data["digitalState0Text"] = this.digitalState0Text !== undefined ? this.digitalState0Text : <any>null;
        data["digitalState1Limit"] = this.digitalState1Limit !== undefined ? this.digitalState1Limit : <any>null;
        data["digitalState1Text"] = this.digitalState1Text !== undefined ? this.digitalState1Text : <any>null;
        data["digitalState2Limit"] = this.digitalState2Limit !== undefined ? this.digitalState2Limit : <any>null;
        data["digitalState2Text"] = this.digitalState2Text !== undefined ? this.digitalState2Text : <any>null;
        data["digitalState3Limit"] = this.digitalState3Limit !== undefined ? this.digitalState3Limit : <any>null;
        data["digitalState3Text"] = this.digitalState3Text !== undefined ? this.digitalState3Text : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["displayPriority"] = this.displayPriority !== undefined ? this.displayPriority : <any>null;
        data["maxProductHeightInCubicMeters"] = this.maxProductHeightInCubicMeters !== undefined ? this.maxProductHeightInCubicMeters : <any>null;
        data["maxProductHeightInDisplayUnits"] = this.maxProductHeightInDisplayUnits !== undefined ? this.maxProductHeightInDisplayUnits : <any>null;
        data["eventRuleGroupId"] = this.eventRuleGroupId !== undefined ? this.eventRuleGroupId : <any>null;
        data["dataAggregationMode"] = this.dataAggregationMode !== undefined ? this.dataAggregationMode : <any>null;
        data["dataAggregationPeriod"] = this.dataAggregationPeriod !== undefined ? this.dataAggregationPeriod : <any>null;
        data["gpsSourceTypeId"] = this.gpsSourceTypeId !== undefined ? this.gpsSourceTypeId : <any>null;
        data["isDataInverted"] = this.isDataInverted !== undefined ? this.isDataInverted : <any>null;
        data["usePrescaling"] = this.usePrescaling !== undefined ? this.usePrescaling : <any>null;
        data["useLimits"] = this.useLimits !== undefined ? this.useLimits : <any>null;
        data["apciTankFunction"] = this.apciTankFunction !== undefined ? this.apciTankFunction : <any>null;
        data["isAPCISendToLBShell"] = this.isAPCISendToLBShell !== undefined ? this.isAPCISendToLBShell : <any>null;
        data["apciUnits"] = this.apciUnits !== undefined ? this.apciUnits : <any>null;
        data["isAPCILBShellSubscriber"] = this.isAPCILBShellSubscriber !== undefined ? this.isAPCILBShellSubscriber : <any>null;
        if (Array.isArray(this.totalizedFTPDomainInfo)) {
            data["totalizedFTPDomainInfo"] = [];
            for (let item of this.totalizedFTPDomainInfo)
                data["totalizedFTPDomainInfo"].push(item.toJSON());
        }
        if (Array.isArray(this.publishInfo)) {
            data["publishInfo"] = [];
            for (let item of this.publishInfo)
                data["publishInfo"].push(item.toJSON());
        }
        if (Array.isArray(this.strappingChartInfo)) {
            data["strappingChartInfo"] = [];
            for (let item of this.strappingChartInfo)
                data["strappingChartInfo"].push(item.toJSON());
        }
        if (Array.isArray(this.eventRules)) {
            data["eventRules"] = [];
            for (let item of this.eventRules)
                data["eventRules"].push(item.toJSON());
        }
        data["rtuChannelReversePollDetail"] = this.rtuChannelReversePollDetail ? this.rtuChannelReversePollDetail.toJSON() : <any>null;
        if (Array.isArray(this.rawToScaledMapInfo)) {
            data["rawToScaledMapInfo"] = [];
            for (let item of this.rawToScaledMapInfo)
                data["rawToScaledMapInfo"].push(item.toJSON());
        }
        data["isDesignCurveEnabled"] = this.isDesignCurveEnabled !== undefined ? this.isDesignCurveEnabled : <any>null;
        super.toJSON(data);
        return data;
    }
}

export enum DataAggregationModeType {
    None = 0,
    Average = 1,
    Maximum = 2,
    Minimum = 3,
}

export enum GpsSourceType {
    All = 1,
    PacketPayloadOnly = 2,
    PacketAdditionalInformationOnly = 3,
    SmartGps = 4,
}

export class TotalizedDataChannelFTPDomainInfo {
    totalizedDataChannelId?: string;
    assetTitle?: string | null;
    description?: string | null;
    ftpDomainId?: string | null;
    ftpDomainId2?: string | null;

    init(_data?: any) {
        if (_data) {
            this.totalizedDataChannelId = _data["totalizedDataChannelId"] !== undefined ? _data["totalizedDataChannelId"] : <any>null;
            this.assetTitle = _data["assetTitle"] !== undefined ? _data["assetTitle"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.ftpDomainId = _data["ftpDomainId"] !== undefined ? _data["ftpDomainId"] : <any>null;
            this.ftpDomainId2 = _data["ftpDomainId2"] !== undefined ? _data["ftpDomainId2"] : <any>null;
        }
    }

    static fromJS(data: any): TotalizedDataChannelFTPDomainInfo {
        data = typeof data === 'object' ? data : {};
        let result = new TotalizedDataChannelFTPDomainInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalizedDataChannelId"] = this.totalizedDataChannelId !== undefined ? this.totalizedDataChannelId : <any>null;
        data["assetTitle"] = this.assetTitle !== undefined ? this.assetTitle : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["ftpDomainId"] = this.ftpDomainId !== undefined ? this.ftpDomainId : <any>null;
        data["ftpDomainId2"] = this.ftpDomainId2 !== undefined ? this.ftpDomainId2 : <any>null;
        return data;
    }
}

export class EditDataChannelPublishInfo extends EditBase {
    dataChannelPublishInfoId?: number;
    targetDomainId?: string | null;
    targetDomainName?: string | null;
    publishedComments?: string | null;
    inUse?: boolean;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.dataChannelPublishInfoId = _data["dataChannelPublishInfoId"] !== undefined ? _data["dataChannelPublishInfoId"] : <any>null;
            this.targetDomainId = _data["targetDomainId"] !== undefined ? _data["targetDomainId"] : <any>null;
            this.targetDomainName = _data["targetDomainName"] !== undefined ? _data["targetDomainName"] : <any>null;
            this.publishedComments = _data["publishedComments"] !== undefined ? _data["publishedComments"] : <any>null;
            this.inUse = _data["inUse"] !== undefined ? _data["inUse"] : <any>null;
        }
    }

    static fromJS(data: any): EditDataChannelPublishInfo {
        data = typeof data === 'object' ? data : {};
        let result = new EditDataChannelPublishInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelPublishInfoId"] = this.dataChannelPublishInfoId !== undefined ? this.dataChannelPublishInfoId : <any>null;
        data["targetDomainId"] = this.targetDomainId !== undefined ? this.targetDomainId : <any>null;
        data["targetDomainName"] = this.targetDomainName !== undefined ? this.targetDomainName : <any>null;
        data["publishedComments"] = this.publishedComments !== undefined ? this.publishedComments : <any>null;
        data["inUse"] = this.inUse !== undefined ? this.inUse : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class DcRawToScaledMapPoint {
    raw?: number | null;
    scaled?: number | null;

    init(_data?: any) {
        if (_data) {
            this.raw = _data["raw"] !== undefined ? _data["raw"] : <any>null;
            this.scaled = _data["scaled"] !== undefined ? _data["scaled"] : <any>null;
        }
    }

    static fromJS(data: any): DcRawToScaledMapPoint {
        data = typeof data === 'object' ? data : {};
        let result = new DcRawToScaledMapPoint();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["raw"] = this.raw !== undefined ? this.raw : <any>null;
        data["scaled"] = this.scaled !== undefined ? this.scaled : <any>null;
        return data;
    }
}

export class SaveDataChannelRequest extends WcfProxyUserDetails {
    item?: EditDataChannel | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.item = _data["item"] ? EditDataChannel.fromJS(_data["item"]) : <any>null;
        }
    }

    static fromJS(data: any): SaveDataChannelRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SaveDataChannelRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item"] = this.item ? this.item.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveSaveDataChannelRequest extends SaveDataChannelRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveSaveDataChannelRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveDataChannelRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class SaveRateOfChangeDataChannelResponse {
    saveRateOfChangeDataChannelResult?: SaveRateOfChangeDataChannelResult | null;

    init(_data?: any) {
        if (_data) {
            this.saveRateOfChangeDataChannelResult = _data["saveRateOfChangeDataChannelResult"] ? SaveRateOfChangeDataChannelResult.fromJS(_data["saveRateOfChangeDataChannelResult"]) : <any>null;
        }
    }

    static fromJS(data: any): SaveRateOfChangeDataChannelResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SaveRateOfChangeDataChannelResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["saveRateOfChangeDataChannelResult"] = this.saveRateOfChangeDataChannelResult ? this.saveRateOfChangeDataChannelResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveSaveRateOfChangeDataChannelResponse extends SaveRateOfChangeDataChannelResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveSaveRateOfChangeDataChannelResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveRateOfChangeDataChannelResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class BaseSaveResultOfEditRateOfChangeDataChannel extends SaveResult {
    editObject?: EditRateOfChangeDataChannel | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.editObject = _data["editObject"] ? EditRateOfChangeDataChannel.fromJS(_data["editObject"]) : <any>null;
        }
    }

    static fromJS(data: any): BaseSaveResultOfEditRateOfChangeDataChannel {
        data = typeof data === 'object' ? data : {};
        let result = new BaseSaveResultOfEditRateOfChangeDataChannel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["editObject"] = this.editObject ? this.editObject.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class SaveRateOfChangeDataChannelResult extends BaseSaveResultOfEditRateOfChangeDataChannel {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): SaveRateOfChangeDataChannelResult {
        data = typeof data === 'object' ? data : {};
        let result = new SaveRateOfChangeDataChannelResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class SaveRateOfChangeDataChannelRequest extends WcfProxyUserDetails {
    item?: EditRateOfChangeDataChannel | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.item = _data["item"] ? EditRateOfChangeDataChannel.fromJS(_data["item"]) : <any>null;
        }
    }

    static fromJS(data: any): SaveRateOfChangeDataChannelRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SaveRateOfChangeDataChannelRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item"] = this.item ? this.item.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveSaveRateOfChangeDataChannelRequest extends SaveRateOfChangeDataChannelRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveSaveRateOfChangeDataChannelRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveRateOfChangeDataChannelRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class SaveTotalizedDataChannelResponse {
    saveTotalizedDataChannelResult?: SaveTotalizedDataChannelResult | null;

    init(_data?: any) {
        if (_data) {
            this.saveTotalizedDataChannelResult = _data["saveTotalizedDataChannelResult"] ? SaveTotalizedDataChannelResult.fromJS(_data["saveTotalizedDataChannelResult"]) : <any>null;
        }
    }

    static fromJS(data: any): SaveTotalizedDataChannelResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SaveTotalizedDataChannelResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["saveTotalizedDataChannelResult"] = this.saveTotalizedDataChannelResult ? this.saveTotalizedDataChannelResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveSaveTotalizedDataChannelResponse extends SaveTotalizedDataChannelResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveSaveTotalizedDataChannelResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveTotalizedDataChannelResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class BaseSaveResultOfEditTotalizedDataChannel extends SaveResult {
    editObject?: EditTotalizedDataChannel | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.editObject = _data["editObject"] ? EditTotalizedDataChannel.fromJS(_data["editObject"]) : <any>null;
        }
    }

    static fromJS(data: any): BaseSaveResultOfEditTotalizedDataChannel {
        data = typeof data === 'object' ? data : {};
        let result = new BaseSaveResultOfEditTotalizedDataChannel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["editObject"] = this.editObject ? this.editObject.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class SaveTotalizedDataChannelResult extends BaseSaveResultOfEditTotalizedDataChannel {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): SaveTotalizedDataChannelResult {
        data = typeof data === 'object' ? data : {};
        let result = new SaveTotalizedDataChannelResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class SaveTotalizedDataChannelRequest extends WcfProxyUserDetails {
    item?: EditTotalizedDataChannel | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.item = _data["item"] ? EditTotalizedDataChannel.fromJS(_data["item"]) : <any>null;
        }
    }

    static fromJS(data: any): SaveTotalizedDataChannelRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SaveTotalizedDataChannelRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item"] = this.item ? this.item.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveSaveTotalizedDataChannelRequest extends SaveTotalizedDataChannelRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveSaveTotalizedDataChannelRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveTotalizedDataChannelRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class SaveVirtualChannelResponse {
    saveVirtualChannelResult?: SaveVirtualChannelResult | null;

    init(_data?: any) {
        if (_data) {
            this.saveVirtualChannelResult = _data["saveVirtualChannelResult"] ? SaveVirtualChannelResult.fromJS(_data["saveVirtualChannelResult"]) : <any>null;
        }
    }

    static fromJS(data: any): SaveVirtualChannelResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SaveVirtualChannelResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["saveVirtualChannelResult"] = this.saveVirtualChannelResult ? this.saveVirtualChannelResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveSaveVirtualChannelResponse extends SaveVirtualChannelResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveSaveVirtualChannelResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveVirtualChannelResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class BaseSaveResultOfEditVirtualChannel extends SaveResult {
    editObject?: EditVirtualChannel | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.editObject = _data["editObject"] ? EditVirtualChannel.fromJS(_data["editObject"]) : <any>null;
        }
    }

    static fromJS(data: any): BaseSaveResultOfEditVirtualChannel {
        data = typeof data === 'object' ? data : {};
        let result = new BaseSaveResultOfEditVirtualChannel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["editObject"] = this.editObject ? this.editObject.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class SaveVirtualChannelResult extends BaseSaveResultOfEditVirtualChannel {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): SaveVirtualChannelResult {
        data = typeof data === 'object' ? data : {};
        let result = new SaveVirtualChannelResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class SaveVirtualChannelRequest extends WcfProxyUserDetails {
    item?: EditVirtualChannel | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.item = _data["item"] ? EditVirtualChannel.fromJS(_data["item"]) : <any>null;
        }
    }

    static fromJS(data: any): SaveVirtualChannelRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SaveVirtualChannelRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item"] = this.item ? this.item.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveSaveVirtualChannelRequest extends SaveVirtualChannelRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveSaveVirtualChannelRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveVirtualChannelRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class UpdateDataChannelSetToRTUChannelMasterResponse {
    updateDataChannelSetToRTUChannelMasterResult?: SaveResult | null;

    init(_data?: any) {
        if (_data) {
            this.updateDataChannelSetToRTUChannelMasterResult = _data["updateDataChannelSetToRTUChannelMasterResult"] ? SaveResult.fromJS(_data["updateDataChannelSetToRTUChannelMasterResult"]) : <any>null;
        }
    }

    static fromJS(data: any): UpdateDataChannelSetToRTUChannelMasterResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateDataChannelSetToRTUChannelMasterResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["updateDataChannelSetToRTUChannelMasterResult"] = this.updateDataChannelSetToRTUChannelMasterResult ? this.updateDataChannelSetToRTUChannelMasterResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveUpdateDataChannelSetToRtuChannelMasterResponse extends UpdateDataChannelSetToRTUChannelMasterResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveUpdateDataChannelSetToRtuChannelMasterResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveUpdateDataChannelSetToRtuChannelMasterResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class UpdateDataChannelSetToRTUChannelMasterRequest extends WcfProxyUserDetails {
    dataChannelId?: string;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateDataChannelSetToRTUChannelMasterRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateDataChannelSetToRTUChannelMasterRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveUpdateDataChannelSetToRtuChannelMasterRequest extends UpdateDataChannelSetToRTUChannelMasterRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveUpdateDataChannelSetToRtuChannelMasterRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveUpdateDataChannelSetToRtuChannelMasterRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class ValidateDataChannelEventRuleResponse {
    validateDataChannelEventRuleResult?: ValidateDataChannelEventRuleResult | null;

    init(_data?: any) {
        if (_data) {
            this.validateDataChannelEventRuleResult = _data["validateDataChannelEventRuleResult"] ? ValidateDataChannelEventRuleResult.fromJS(_data["validateDataChannelEventRuleResult"]) : <any>null;
        }
    }

    static fromJS(data: any): ValidateDataChannelEventRuleResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ValidateDataChannelEventRuleResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["validateDataChannelEventRuleResult"] = this.validateDataChannelEventRuleResult ? this.validateDataChannelEventRuleResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveValidateDataChannelEventRuleResponse extends ValidateDataChannelEventRuleResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveValidateDataChannelEventRuleResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveValidateDataChannelEventRuleResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class ValidateResultOfEditDataChannelEventRule {
    isValid?: boolean;
    editObject?: EditDataChannelEventRule | null;

    init(_data?: any) {
        if (_data) {
            this.isValid = _data["isValid"] !== undefined ? _data["isValid"] : <any>null;
            this.editObject = _data["editObject"] ? EditDataChannelEventRule.fromJS(_data["editObject"]) : <any>null;
        }
    }

    static fromJS(data: any): ValidateResultOfEditDataChannelEventRule {
        data = typeof data === 'object' ? data : {};
        let result = new ValidateResultOfEditDataChannelEventRule();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isValid"] = this.isValid !== undefined ? this.isValid : <any>null;
        data["editObject"] = this.editObject ? this.editObject.toJSON() : <any>null;
        return data;
    }
}

export class ValidateDataChannelEventRuleResult extends ValidateResultOfEditDataChannelEventRule {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): ValidateDataChannelEventRuleResult {
        data = typeof data === 'object' ? data : {};
        let result = new ValidateDataChannelEventRuleResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class ValidateDataChannelEventRuleRequest extends WcfProxyUserDetails {
    eventRule?: EditDataChannelEventRule | null;
    allEventRules?: EditDataChannelEventRule[] | null;
    dataChannel?: EditDataChannel | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.eventRule = _data["eventRule"] ? EditDataChannelEventRule.fromJS(_data["eventRule"]) : <any>null;
            if (Array.isArray(_data["allEventRules"])) {
                this.allEventRules = [] as any;
                for (let item of _data["allEventRules"])
                    this.allEventRules!.push(EditDataChannelEventRule.fromJS(item));
            }
            else {
                this.allEventRules = <any>null;
            }
            this.dataChannel = _data["dataChannel"] ? EditDataChannel.fromJS(_data["dataChannel"]) : <any>null;
        }
    }

    static fromJS(data: any): ValidateDataChannelEventRuleRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ValidateDataChannelEventRuleRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["eventRule"] = this.eventRule ? this.eventRule.toJSON() : <any>null;
        if (Array.isArray(this.allEventRules)) {
            data["allEventRules"] = [];
            for (let item of this.allEventRules)
                data["allEventRules"].push(item.toJSON());
        }
        data["dataChannel"] = this.dataChannel ? this.dataChannel.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveValidateDataChannelEventRuleRequest extends ValidateDataChannelEventRuleRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveValidateDataChannelEventRuleRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveValidateDataChannelEventRuleRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class ValidateVirtualChannelFormulaResponse {
    validateVirtualChannelFormulaResult?: ValidateVirtualChannelFormulaResult | null;

    init(_data?: any) {
        if (_data) {
            this.validateVirtualChannelFormulaResult = _data["validateVirtualChannelFormulaResult"] ? ValidateVirtualChannelFormulaResult.fromJS(_data["validateVirtualChannelFormulaResult"]) : <any>null;
        }
    }

    static fromJS(data: any): ValidateVirtualChannelFormulaResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ValidateVirtualChannelFormulaResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["validateVirtualChannelFormulaResult"] = this.validateVirtualChannelFormulaResult ? this.validateVirtualChannelFormulaResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveValidateVirtualChannelFormulaResponse extends ValidateVirtualChannelFormulaResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveValidateVirtualChannelFormulaResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveValidateVirtualChannelFormulaResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class ValidateResultOfEditVirtualChannel {
    isValid?: boolean;
    editObject?: EditVirtualChannel | null;

    init(_data?: any) {
        if (_data) {
            this.isValid = _data["isValid"] !== undefined ? _data["isValid"] : <any>null;
            this.editObject = _data["editObject"] ? EditVirtualChannel.fromJS(_data["editObject"]) : <any>null;
        }
    }

    static fromJS(data: any): ValidateResultOfEditVirtualChannel {
        data = typeof data === 'object' ? data : {};
        let result = new ValidateResultOfEditVirtualChannel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isValid"] = this.isValid !== undefined ? this.isValid : <any>null;
        data["editObject"] = this.editObject ? this.editObject.toJSON() : <any>null;
        return data;
    }
}

export class ValidateVirtualChannelFormulaResult extends ValidateResultOfEditVirtualChannel {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): ValidateVirtualChannelFormulaResult {
        data = typeof data === 'object' ? data : {};
        let result = new ValidateVirtualChannelFormulaResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class ValidateVirtualChannelFormulaRequest extends WcfProxyUserDetails {
    item?: EditVirtualChannel | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.item = _data["item"] ? EditVirtualChannel.fromJS(_data["item"]) : <any>null;
        }
    }

    static fromJS(data: any): ValidateVirtualChannelFormulaRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ValidateVirtualChannelFormulaRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item"] = this.item ? this.item.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveValidateVirtualChannelFormulaRequest extends ValidateVirtualChannelFormulaRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveValidateVirtualChannelFormulaRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveValidateVirtualChannelFormulaRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class DeleteAssetGroupsByIdListResponse {
    deleteAssetGroupsByIdListResult?: boolean;

    init(_data?: any) {
        if (_data) {
            this.deleteAssetGroupsByIdListResult = _data["deleteAssetGroupsByIdListResult"] !== undefined ? _data["deleteAssetGroupsByIdListResult"] : <any>null;
        }
    }

    static fromJS(data: any): DeleteAssetGroupsByIdListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteAssetGroupsByIdListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deleteAssetGroupsByIdListResult"] = this.deleteAssetGroupsByIdListResult !== undefined ? this.deleteAssetGroupsByIdListResult : <any>null;
        return data;
    }
}

export class EvolveDeleteAssetGroupsByIdListResponse extends DeleteAssetGroupsByIdListResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveDeleteAssetGroupsByIdListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveDeleteAssetGroupsByIdListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class DeleteAssetGroupsByIdListRequest extends WcfProxyUserDetails {
    assetGroupIds?: string[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["assetGroupIds"])) {
                this.assetGroupIds = [] as any;
                for (let item of _data["assetGroupIds"])
                    this.assetGroupIds!.push(item);
            }
            else {
                this.assetGroupIds = <any>null;
            }
        }
    }

    static fromJS(data: any): DeleteAssetGroupsByIdListRequest {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteAssetGroupsByIdListRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.assetGroupIds)) {
            data["assetGroupIds"] = [];
            for (let item of this.assetGroupIds)
                data["assetGroupIds"].push(item);
        }
        super.toJSON(data);
        return data;
    }
}

export class EvolveDeleteAssetGroupsByIdListRequest extends DeleteAssetGroupsByIdListRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveDeleteAssetGroupsByIdListRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveDeleteAssetGroupsByIdListRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class DeleteAssetsByIdListResponse {
    deleteAssetsByIdListResult?: boolean;

    init(_data?: any) {
        if (_data) {
            this.deleteAssetsByIdListResult = _data["deleteAssetsByIdListResult"] !== undefined ? _data["deleteAssetsByIdListResult"] : <any>null;
        }
    }

    static fromJS(data: any): DeleteAssetsByIdListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteAssetsByIdListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deleteAssetsByIdListResult"] = this.deleteAssetsByIdListResult !== undefined ? this.deleteAssetsByIdListResult : <any>null;
        return data;
    }
}

export class EvolveDeleteAssetsByIdListResponse extends DeleteAssetsByIdListResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveDeleteAssetsByIdListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveDeleteAssetsByIdListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class DeleteAssetsByIdListRequest extends WcfProxyUserDetails {
    assetIds?: string[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["assetIds"])) {
                this.assetIds = [] as any;
                for (let item of _data["assetIds"])
                    this.assetIds!.push(item);
            }
            else {
                this.assetIds = <any>null;
            }
        }
    }

    static fromJS(data: any): DeleteAssetsByIdListRequest {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteAssetsByIdListRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.assetIds)) {
            data["assetIds"] = [];
            for (let item of this.assetIds)
                data["assetIds"].push(item);
        }
        super.toJSON(data);
        return data;
    }
}

export class EvolveDeleteAssetsByIdListRequest extends DeleteAssetsByIdListRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveDeleteAssetsByIdListRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveDeleteAssetsByIdListRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class DeleteAssetTreesByIdListResponse {
    deleteAssetTreesByIdListResult?: boolean;

    init(_data?: any) {
        if (_data) {
            this.deleteAssetTreesByIdListResult = _data["deleteAssetTreesByIdListResult"] !== undefined ? _data["deleteAssetTreesByIdListResult"] : <any>null;
        }
    }

    static fromJS(data: any): DeleteAssetTreesByIdListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteAssetTreesByIdListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deleteAssetTreesByIdListResult"] = this.deleteAssetTreesByIdListResult !== undefined ? this.deleteAssetTreesByIdListResult : <any>null;
        return data;
    }
}

export class EvolveDeleteAssetTreesByIdListResponse extends DeleteAssetTreesByIdListResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveDeleteAssetTreesByIdListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveDeleteAssetTreesByIdListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class DeleteAssetTreesByIdListRequest extends WcfProxyUserDetails {
    assetTreeIds?: string[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["assetTreeIds"])) {
                this.assetTreeIds = [] as any;
                for (let item of _data["assetTreeIds"])
                    this.assetTreeIds!.push(item);
            }
            else {
                this.assetTreeIds = <any>null;
            }
        }
    }

    static fromJS(data: any): DeleteAssetTreesByIdListRequest {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteAssetTreesByIdListRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.assetTreeIds)) {
            data["assetTreeIds"] = [];
            for (let item of this.assetTreeIds)
                data["assetTreeIds"].push(item);
        }
        super.toJSON(data);
        return data;
    }
}

export class EvolveDeleteAssetTreesByIdListRequest extends DeleteAssetTreesByIdListRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveDeleteAssetTreesByIdListRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveDeleteAssetTreesByIdListRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveAssetCopyEditComponentsByIdResponse {
    retrieveAssetCopyEditComponentsByIdResult?: RetrieveAssetCopyEditComponentsResult | null;

    init(_data?: any) {
        if (_data) {
            this.retrieveAssetCopyEditComponentsByIdResult = _data["retrieveAssetCopyEditComponentsByIdResult"] ? RetrieveAssetCopyEditComponentsResult.fromJS(_data["retrieveAssetCopyEditComponentsByIdResult"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveAssetCopyEditComponentsByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveAssetCopyEditComponentsByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["retrieveAssetCopyEditComponentsByIdResult"] = this.retrieveAssetCopyEditComponentsByIdResult ? this.retrieveAssetCopyEditComponentsByIdResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveRetrieveAssetCopyEditComponentsByIdResponse extends RetrieveAssetCopyEditComponentsByIdResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveAssetCopyEditComponentsByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveAssetCopyEditComponentsByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class BaseEditComponentsResultOfEditAssetCopy {
    editObject?: EditAssetCopy | null;
    areEditComponentsLoaded?: boolean;

    init(_data?: any) {
        if (_data) {
            this.editObject = _data["editObject"] ? EditAssetCopy.fromJS(_data["editObject"]) : <any>null;
            this.areEditComponentsLoaded = _data["areEditComponentsLoaded"] !== undefined ? _data["areEditComponentsLoaded"] : <any>null;
        }
    }

    static fromJS(data: any): BaseEditComponentsResultOfEditAssetCopy {
        data = typeof data === 'object' ? data : {};
        let result = new BaseEditComponentsResultOfEditAssetCopy();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["editObject"] = this.editObject ? this.editObject.toJSON() : <any>null;
        data["areEditComponentsLoaded"] = this.areEditComponentsLoaded !== undefined ? this.areEditComponentsLoaded : <any>null;
        return data;
    }
}

export class RetrieveAssetCopyEditComponentsResult extends BaseEditComponentsResultOfEditAssetCopy {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): RetrieveAssetCopyEditComponentsResult {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveAssetCopyEditComponentsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class EditAssetCopy extends EditBase {
    assetId?: string;
    assetTitle?: string | null;
    domainId?: string;
    sourceSiteId?: string;
    sourceSiteName?: string | null;
    sourceTechnician?: string | null;
    targetDescription?: string | null;
    targetSiteId?: string | null;
    targetTechnician?: string | null;
    targetNotes?: string | null;
    isMobile?: boolean;
    geoAreaGroupId?: number | null;
    dataChannels?: EditAssetCopyDataChannelInfo[] | null;
    targetAssetId?: string | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.assetTitle = _data["assetTitle"] !== undefined ? _data["assetTitle"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.sourceSiteId = _data["sourceSiteId"] !== undefined ? _data["sourceSiteId"] : <any>null;
            this.sourceSiteName = _data["sourceSiteName"] !== undefined ? _data["sourceSiteName"] : <any>null;
            this.sourceTechnician = _data["sourceTechnician"] !== undefined ? _data["sourceTechnician"] : <any>null;
            this.targetDescription = _data["targetDescription"] !== undefined ? _data["targetDescription"] : <any>null;
            this.targetSiteId = _data["targetSiteId"] !== undefined ? _data["targetSiteId"] : <any>null;
            this.targetTechnician = _data["targetTechnician"] !== undefined ? _data["targetTechnician"] : <any>null;
            this.targetNotes = _data["targetNotes"] !== undefined ? _data["targetNotes"] : <any>null;
            this.isMobile = _data["isMobile"] !== undefined ? _data["isMobile"] : <any>null;
            this.geoAreaGroupId = _data["geoAreaGroupId"] !== undefined ? _data["geoAreaGroupId"] : <any>null;
            if (Array.isArray(_data["dataChannels"])) {
                this.dataChannels = [] as any;
                for (let item of _data["dataChannels"])
                    this.dataChannels!.push(EditAssetCopyDataChannelInfo.fromJS(item));
            }
            else {
                this.dataChannels = <any>null;
            }
            this.targetAssetId = _data["targetAssetId"] !== undefined ? _data["targetAssetId"] : <any>null;
        }
    }

    static fromJS(data: any): EditAssetCopy {
        data = typeof data === 'object' ? data : {};
        let result = new EditAssetCopy();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["assetTitle"] = this.assetTitle !== undefined ? this.assetTitle : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["sourceSiteId"] = this.sourceSiteId !== undefined ? this.sourceSiteId : <any>null;
        data["sourceSiteName"] = this.sourceSiteName !== undefined ? this.sourceSiteName : <any>null;
        data["sourceTechnician"] = this.sourceTechnician !== undefined ? this.sourceTechnician : <any>null;
        data["targetDescription"] = this.targetDescription !== undefined ? this.targetDescription : <any>null;
        data["targetSiteId"] = this.targetSiteId !== undefined ? this.targetSiteId : <any>null;
        data["targetTechnician"] = this.targetTechnician !== undefined ? this.targetTechnician : <any>null;
        data["targetNotes"] = this.targetNotes !== undefined ? this.targetNotes : <any>null;
        data["isMobile"] = this.isMobile !== undefined ? this.isMobile : <any>null;
        data["geoAreaGroupId"] = this.geoAreaGroupId !== undefined ? this.geoAreaGroupId : <any>null;
        if (Array.isArray(this.dataChannels)) {
            data["dataChannels"] = [];
            for (let item of this.dataChannels)
                data["dataChannels"].push(item.toJSON());
        }
        data["targetAssetId"] = this.targetAssetId !== undefined ? this.targetAssetId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EditAssetCopyDataChannelInfo extends EditBase {
    dataChannelId?: string;
    description?: string | null;
    dataChannelType?: DataChannelType;
    sourceRTUChannelId?: string | null;
    sourceDeviceId?: string | null;
    sourceChannelNumber?: string | null;
    rtuType?: RTUType | null;
    targetRTUChannelId?: string | null;
    targetDeviceId?: string | null;
    targetChannelNumber?: string | null;
    targetDataChannelId?: string | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.dataChannelType = _data["dataChannelType"] !== undefined ? _data["dataChannelType"] : <any>null;
            this.sourceRTUChannelId = _data["sourceRTUChannelId"] !== undefined ? _data["sourceRTUChannelId"] : <any>null;
            this.sourceDeviceId = _data["sourceDeviceId"] !== undefined ? _data["sourceDeviceId"] : <any>null;
            this.sourceChannelNumber = _data["sourceChannelNumber"] !== undefined ? _data["sourceChannelNumber"] : <any>null;
            this.rtuType = _data["rtuType"] !== undefined ? _data["rtuType"] : <any>null;
            this.targetRTUChannelId = _data["targetRTUChannelId"] !== undefined ? _data["targetRTUChannelId"] : <any>null;
            this.targetDeviceId = _data["targetDeviceId"] !== undefined ? _data["targetDeviceId"] : <any>null;
            this.targetChannelNumber = _data["targetChannelNumber"] !== undefined ? _data["targetChannelNumber"] : <any>null;
            this.targetDataChannelId = _data["targetDataChannelId"] !== undefined ? _data["targetDataChannelId"] : <any>null;
        }
    }

    static fromJS(data: any): EditAssetCopyDataChannelInfo {
        data = typeof data === 'object' ? data : {};
        let result = new EditAssetCopyDataChannelInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["dataChannelType"] = this.dataChannelType !== undefined ? this.dataChannelType : <any>null;
        data["sourceRTUChannelId"] = this.sourceRTUChannelId !== undefined ? this.sourceRTUChannelId : <any>null;
        data["sourceDeviceId"] = this.sourceDeviceId !== undefined ? this.sourceDeviceId : <any>null;
        data["sourceChannelNumber"] = this.sourceChannelNumber !== undefined ? this.sourceChannelNumber : <any>null;
        data["rtuType"] = this.rtuType !== undefined ? this.rtuType : <any>null;
        data["targetRTUChannelId"] = this.targetRTUChannelId !== undefined ? this.targetRTUChannelId : <any>null;
        data["targetDeviceId"] = this.targetDeviceId !== undefined ? this.targetDeviceId : <any>null;
        data["targetChannelNumber"] = this.targetChannelNumber !== undefined ? this.targetChannelNumber : <any>null;
        data["targetDataChannelId"] = this.targetDataChannelId !== undefined ? this.targetDataChannelId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class RetrieveAssetCopyEditComponentsByIdRequest extends WcfProxyUserDetails {
    assetId?: string;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
        }
    }

    static fromJS(data: any): RetrieveAssetCopyEditComponentsByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveAssetCopyEditComponentsByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveAssetCopyEditComponentsByIdRequest extends RetrieveAssetCopyEditComponentsByIdRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveAssetCopyEditComponentsByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveAssetCopyEditComponentsByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveAssetEditComponentsByIdResponse {
    retrieveAssetEditComponentsByIdResult?: RetrieveAssetEditComponentsResult | null;

    init(_data?: any) {
        if (_data) {
            this.retrieveAssetEditComponentsByIdResult = _data["retrieveAssetEditComponentsByIdResult"] ? RetrieveAssetEditComponentsResult.fromJS(_data["retrieveAssetEditComponentsByIdResult"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveAssetEditComponentsByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveAssetEditComponentsByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["retrieveAssetEditComponentsByIdResult"] = this.retrieveAssetEditComponentsByIdResult ? this.retrieveAssetEditComponentsByIdResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveRetrieveAssetEditComponentsByIdResponse extends RetrieveAssetEditComponentsByIdResponse {
    /** An extension to the DataChannelTemplateDetail inside the RetrieveAssetEditComponentsByIdResult object.
             */
    dataChannelTemplates?: EvolveDataChannelTemplateDetail[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["dataChannelTemplates"])) {
                this.dataChannelTemplates = [] as any;
                for (let item of _data["dataChannelTemplates"])
                    this.dataChannelTemplates!.push(EvolveDataChannelTemplateDetail.fromJS(item));
            }
            else {
                this.dataChannelTemplates = <any>null;
            }
        }
    }

    static fromJS(data: any): EvolveRetrieveAssetEditComponentsByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveAssetEditComponentsByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dataChannelTemplates)) {
            data["dataChannelTemplates"] = [];
            for (let item of this.dataChannelTemplates)
                data["dataChannelTemplates"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export class EvolveDataChannelTemplateDetail extends DataChannelTemplateDetail {
    isTankRelevant?: boolean;
    isForecastRelevant?: boolean;
    isProductRelevant?: boolean;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.isTankRelevant = _data["isTankRelevant"] !== undefined ? _data["isTankRelevant"] : <any>null;
            this.isForecastRelevant = _data["isForecastRelevant"] !== undefined ? _data["isForecastRelevant"] : <any>null;
            this.isProductRelevant = _data["isProductRelevant"] !== undefined ? _data["isProductRelevant"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveDataChannelTemplateDetail {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveDataChannelTemplateDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isTankRelevant"] = this.isTankRelevant !== undefined ? this.isTankRelevant : <any>null;
        data["isForecastRelevant"] = this.isForecastRelevant !== undefined ? this.isForecastRelevant : <any>null;
        data["isProductRelevant"] = this.isProductRelevant !== undefined ? this.isProductRelevant : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class BaseEditComponentsResultOfEditAsset {
    editObject?: EditAsset | null;
    areEditComponentsLoaded?: boolean;

    init(_data?: any) {
        if (_data) {
            this.editObject = _data["editObject"] ? EditAsset.fromJS(_data["editObject"]) : <any>null;
            this.areEditComponentsLoaded = _data["areEditComponentsLoaded"] !== undefined ? _data["areEditComponentsLoaded"] : <any>null;
        }
    }

    static fromJS(data: any): BaseEditComponentsResultOfEditAsset {
        data = typeof data === 'object' ? data : {};
        let result = new BaseEditComponentsResultOfEditAsset();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["editObject"] = this.editObject ? this.editObject.toJSON() : <any>null;
        data["areEditComponentsLoaded"] = this.areEditComponentsLoaded !== undefined ? this.areEditComponentsLoaded : <any>null;
        return data;
    }
}

export class RetrieveAssetEditComponentsResult extends BaseEditComponentsResultOfEditAsset {
    eventRuleGroups?: EventRuleGroupInfo[] | null;
    dataChannelTemplates?: DataChannelTemplateDetail[] | null;
    unattachedDataChannels?: EditAssetDataChannel[] | null;
    tubeConfigurations?: TubeConfigurationInfo[] | null;
    geoAreaGroups?: GeoAreaGroupInfo[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["eventRuleGroups"])) {
                this.eventRuleGroups = [] as any;
                for (let item of _data["eventRuleGroups"])
                    this.eventRuleGroups!.push(EventRuleGroupInfo.fromJS(item));
            }
            else {
                this.eventRuleGroups = <any>null;
            }
            if (Array.isArray(_data["dataChannelTemplates"])) {
                this.dataChannelTemplates = [] as any;
                for (let item of _data["dataChannelTemplates"])
                    this.dataChannelTemplates!.push(DataChannelTemplateDetail.fromJS(item));
            }
            else {
                this.dataChannelTemplates = <any>null;
            }
            if (Array.isArray(_data["unattachedDataChannels"])) {
                this.unattachedDataChannels = [] as any;
                for (let item of _data["unattachedDataChannels"])
                    this.unattachedDataChannels!.push(EditAssetDataChannel.fromJS(item));
            }
            else {
                this.unattachedDataChannels = <any>null;
            }
            if (Array.isArray(_data["tubeConfigurations"])) {
                this.tubeConfigurations = [] as any;
                for (let item of _data["tubeConfigurations"])
                    this.tubeConfigurations!.push(TubeConfigurationInfo.fromJS(item));
            }
            else {
                this.tubeConfigurations = <any>null;
            }
            if (Array.isArray(_data["geoAreaGroups"])) {
                this.geoAreaGroups = [] as any;
                for (let item of _data["geoAreaGroups"])
                    this.geoAreaGroups!.push(GeoAreaGroupInfo.fromJS(item));
            }
            else {
                this.geoAreaGroups = <any>null;
            }
        }
    }

    static fromJS(data: any): RetrieveAssetEditComponentsResult {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveAssetEditComponentsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.eventRuleGroups)) {
            data["eventRuleGroups"] = [];
            for (let item of this.eventRuleGroups)
                data["eventRuleGroups"].push(item.toJSON());
        }
        if (Array.isArray(this.dataChannelTemplates)) {
            data["dataChannelTemplates"] = [];
            for (let item of this.dataChannelTemplates)
                data["dataChannelTemplates"].push(item.toJSON());
        }
        if (Array.isArray(this.unattachedDataChannels)) {
            data["unattachedDataChannels"] = [];
            for (let item of this.unattachedDataChannels)
                data["unattachedDataChannels"].push(item.toJSON());
        }
        if (Array.isArray(this.tubeConfigurations)) {
            data["tubeConfigurations"] = [];
            for (let item of this.tubeConfigurations)
                data["tubeConfigurations"].push(item.toJSON());
        }
        if (Array.isArray(this.geoAreaGroups)) {
            data["geoAreaGroups"] = [];
            for (let item of this.geoAreaGroups)
                data["geoAreaGroups"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export class EditAssetDataChannel extends EditBase {
    dataChannelId?: string;
    name?: string | null;
    description?: string | null;
    type?: DataChannelType;
    gasMixerDataChannelType?: GasMixerDataChannelType | null;
    dataChannelTemplateId?: string;
    domainId?: string;
    assetId?: string | null;
    siteId?: string | null;
    siteNumber?: string | null;
    siteCustomerName?: string | null;
    siteCity?: string | null;
    siteState?: string | null;
    assetType?: AssetType | null;
    assetTimeZoneId?: number | null;
    dataSource?: DataChannelDataSourceType;
    sourceDataChannelId?: string | null;
    rtuId?: string | null;
    rtuCategory?: RTUCategoryType | null;
    rtuType?: RTUType | null;
    rtuDeviceId?: string | null;
    rtuChannelId?: string | null;
    rtuChannelNumber?: string | null;
    isRTUChannelMaster?: boolean | null;
    isVolumetric?: boolean;
    rawUnits?: RawUnitType | null;
    scalingMode?: ScalingModeType | null;
    rawUnitsText?: string | null;
    rawUnitsAtZero?: number | null;
    rawUnitsAtFullScale?: number | null;
    rawUnitsAtOverRange?: number | null;
    rawUnitsAtScaledMax?: number | null;
    rawUnitsAtScaledMin?: number | null;
    rawUnitsAtUnderRange?: number | null;
    sensorPosition?: number | null;
    sensorPositionUnits?: UnitType | null;
    scaledUnits?: UnitType | null;
    scaledUnitsAsText?: string | null;
    displayUnits?: UnitType | null;
    displayUnitsAsText?: string | null;
    scaledMin?: number | null;
    scaledMax?: number | null;
    graphMin?: number | null;
    graphMax?: number | null;
    maxProductHeight?: number | null;
    forecastMode?: ForecastModeType | null;
    highLowForecastEnabled?: boolean;
    productId?: string | null;
    productName?: string | null;
    productDescription?: string | null;
    productSpecificGravity?: number | null;
    standardVolumePerCubicMeter?: number | null;
    tankDimensionId?: string | null;
    tankDimensionDescription?: string | null;
    tankType?: TankType | null;
    useStrappingChartForConversion?: boolean;
    strappingLevelUnits?: UnitType | null;
    strappingVolumeUnits?: UnitType | null;
    tankDiameterInMeters?: number | null;
    tankLengthInMeters?: number | null;
    tankDishHeightInMeters?: number | null;
    tankHeightInMeters?: number | null;
    tankWidthInMeters?: number | null;
    digitalState0Limit?: number | null;
    digitalState0Text?: string | null;
    digitalState1Limit?: number | null;
    digitalState1Text?: string | null;
    displayPriority?: number | null;
    publishedComments?: string | null;
    isPublished?: boolean;
    eventRuleGroupId?: number | null;
    reorderEventLevel?: number | null;
    criticalEventLevel?: number | null;
    dataAggregationMode?: DataAggregationModeType | null;
    dataAggregationPeriod?: number | null;
    maxDeliverQuantity?: number | null;
    maxProductHeightInDisplayUnits?: number | null;
    usePrescaling?: boolean;
    useLimits?: boolean;
    uniqueId?: string;
    componentDataChannelIdList?: string[] | null;
    strappingChartInfo?: StrappingChartInfo[] | null;
    formulaParts?: EditAssetVirtualChannelFormulaPart[] | null;
    virtualChannelFormulaExpression?: string | null;
    isDeliveryForecasted?: boolean;
    rateOfChangeSourceDataChannelId?: string | null;
    apciTankFunction?: APCITankFunctionType | null;
    isAPCISendToLBShell?: boolean;
    apciUnits?: APCIUnitType | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.gasMixerDataChannelType = _data["gasMixerDataChannelType"] !== undefined ? _data["gasMixerDataChannelType"] : <any>null;
            this.dataChannelTemplateId = _data["dataChannelTemplateId"] !== undefined ? _data["dataChannelTemplateId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.siteId = _data["siteId"] !== undefined ? _data["siteId"] : <any>null;
            this.siteNumber = _data["siteNumber"] !== undefined ? _data["siteNumber"] : <any>null;
            this.siteCustomerName = _data["siteCustomerName"] !== undefined ? _data["siteCustomerName"] : <any>null;
            this.siteCity = _data["siteCity"] !== undefined ? _data["siteCity"] : <any>null;
            this.siteState = _data["siteState"] !== undefined ? _data["siteState"] : <any>null;
            this.assetType = _data["assetType"] !== undefined ? _data["assetType"] : <any>null;
            this.assetTimeZoneId = _data["assetTimeZoneId"] !== undefined ? _data["assetTimeZoneId"] : <any>null;
            this.dataSource = _data["dataSource"] !== undefined ? _data["dataSource"] : <any>null;
            this.sourceDataChannelId = _data["sourceDataChannelId"] !== undefined ? _data["sourceDataChannelId"] : <any>null;
            this.rtuId = _data["rtuId"] !== undefined ? _data["rtuId"] : <any>null;
            this.rtuCategory = _data["rtuCategory"] !== undefined ? _data["rtuCategory"] : <any>null;
            this.rtuType = _data["rtuType"] !== undefined ? _data["rtuType"] : <any>null;
            this.rtuDeviceId = _data["rtuDeviceId"] !== undefined ? _data["rtuDeviceId"] : <any>null;
            this.rtuChannelId = _data["rtuChannelId"] !== undefined ? _data["rtuChannelId"] : <any>null;
            this.rtuChannelNumber = _data["rtuChannelNumber"] !== undefined ? _data["rtuChannelNumber"] : <any>null;
            this.isRTUChannelMaster = _data["isRTUChannelMaster"] !== undefined ? _data["isRTUChannelMaster"] : <any>null;
            this.isVolumetric = _data["isVolumetric"] !== undefined ? _data["isVolumetric"] : <any>null;
            this.rawUnits = _data["rawUnits"] !== undefined ? _data["rawUnits"] : <any>null;
            this.scalingMode = _data["scalingMode"] !== undefined ? _data["scalingMode"] : <any>null;
            this.rawUnitsText = _data["rawUnitsText"] !== undefined ? _data["rawUnitsText"] : <any>null;
            this.rawUnitsAtZero = _data["rawUnitsAtZero"] !== undefined ? _data["rawUnitsAtZero"] : <any>null;
            this.rawUnitsAtFullScale = _data["rawUnitsAtFullScale"] !== undefined ? _data["rawUnitsAtFullScale"] : <any>null;
            this.rawUnitsAtOverRange = _data["rawUnitsAtOverRange"] !== undefined ? _data["rawUnitsAtOverRange"] : <any>null;
            this.rawUnitsAtScaledMax = _data["rawUnitsAtScaledMax"] !== undefined ? _data["rawUnitsAtScaledMax"] : <any>null;
            this.rawUnitsAtScaledMin = _data["rawUnitsAtScaledMin"] !== undefined ? _data["rawUnitsAtScaledMin"] : <any>null;
            this.rawUnitsAtUnderRange = _data["rawUnitsAtUnderRange"] !== undefined ? _data["rawUnitsAtUnderRange"] : <any>null;
            this.sensorPosition = _data["sensorPosition"] !== undefined ? _data["sensorPosition"] : <any>null;
            this.sensorPositionUnits = _data["sensorPositionUnits"] !== undefined ? _data["sensorPositionUnits"] : <any>null;
            this.scaledUnits = _data["scaledUnits"] !== undefined ? _data["scaledUnits"] : <any>null;
            this.scaledUnitsAsText = _data["scaledUnitsAsText"] !== undefined ? _data["scaledUnitsAsText"] : <any>null;
            this.displayUnits = _data["displayUnits"] !== undefined ? _data["displayUnits"] : <any>null;
            this.displayUnitsAsText = _data["displayUnitsAsText"] !== undefined ? _data["displayUnitsAsText"] : <any>null;
            this.scaledMin = _data["scaledMin"] !== undefined ? _data["scaledMin"] : <any>null;
            this.scaledMax = _data["scaledMax"] !== undefined ? _data["scaledMax"] : <any>null;
            this.graphMin = _data["graphMin"] !== undefined ? _data["graphMin"] : <any>null;
            this.graphMax = _data["graphMax"] !== undefined ? _data["graphMax"] : <any>null;
            this.maxProductHeight = _data["maxProductHeight"] !== undefined ? _data["maxProductHeight"] : <any>null;
            this.forecastMode = _data["forecastMode"] !== undefined ? _data["forecastMode"] : <any>null;
            this.highLowForecastEnabled = _data["highLowForecastEnabled"] !== undefined ? _data["highLowForecastEnabled"] : <any>null;
            this.productId = _data["productId"] !== undefined ? _data["productId"] : <any>null;
            this.productName = _data["productName"] !== undefined ? _data["productName"] : <any>null;
            this.productDescription = _data["productDescription"] !== undefined ? _data["productDescription"] : <any>null;
            this.productSpecificGravity = _data["productSpecificGravity"] !== undefined ? _data["productSpecificGravity"] : <any>null;
            this.standardVolumePerCubicMeter = _data["standardVolumePerCubicMeter"] !== undefined ? _data["standardVolumePerCubicMeter"] : <any>null;
            this.tankDimensionId = _data["tankDimensionId"] !== undefined ? _data["tankDimensionId"] : <any>null;
            this.tankDimensionDescription = _data["tankDimensionDescription"] !== undefined ? _data["tankDimensionDescription"] : <any>null;
            this.tankType = _data["tankType"] !== undefined ? _data["tankType"] : <any>null;
            this.useStrappingChartForConversion = _data["useStrappingChartForConversion"] !== undefined ? _data["useStrappingChartForConversion"] : <any>null;
            this.strappingLevelUnits = _data["strappingLevelUnits"] !== undefined ? _data["strappingLevelUnits"] : <any>null;
            this.strappingVolumeUnits = _data["strappingVolumeUnits"] !== undefined ? _data["strappingVolumeUnits"] : <any>null;
            this.tankDiameterInMeters = _data["tankDiameterInMeters"] !== undefined ? _data["tankDiameterInMeters"] : <any>null;
            this.tankLengthInMeters = _data["tankLengthInMeters"] !== undefined ? _data["tankLengthInMeters"] : <any>null;
            this.tankDishHeightInMeters = _data["tankDishHeightInMeters"] !== undefined ? _data["tankDishHeightInMeters"] : <any>null;
            this.tankHeightInMeters = _data["tankHeightInMeters"] !== undefined ? _data["tankHeightInMeters"] : <any>null;
            this.tankWidthInMeters = _data["tankWidthInMeters"] !== undefined ? _data["tankWidthInMeters"] : <any>null;
            this.digitalState0Limit = _data["digitalState0Limit"] !== undefined ? _data["digitalState0Limit"] : <any>null;
            this.digitalState0Text = _data["digitalState0Text"] !== undefined ? _data["digitalState0Text"] : <any>null;
            this.digitalState1Limit = _data["digitalState1Limit"] !== undefined ? _data["digitalState1Limit"] : <any>null;
            this.digitalState1Text = _data["digitalState1Text"] !== undefined ? _data["digitalState1Text"] : <any>null;
            this.displayPriority = _data["displayPriority"] !== undefined ? _data["displayPriority"] : <any>null;
            this.publishedComments = _data["publishedComments"] !== undefined ? _data["publishedComments"] : <any>null;
            this.isPublished = _data["isPublished"] !== undefined ? _data["isPublished"] : <any>null;
            this.eventRuleGroupId = _data["eventRuleGroupId"] !== undefined ? _data["eventRuleGroupId"] : <any>null;
            this.reorderEventLevel = _data["reorderEventLevel"] !== undefined ? _data["reorderEventLevel"] : <any>null;
            this.criticalEventLevel = _data["criticalEventLevel"] !== undefined ? _data["criticalEventLevel"] : <any>null;
            this.dataAggregationMode = _data["dataAggregationMode"] !== undefined ? _data["dataAggregationMode"] : <any>null;
            this.dataAggregationPeriod = _data["dataAggregationPeriod"] !== undefined ? _data["dataAggregationPeriod"] : <any>null;
            this.maxDeliverQuantity = _data["maxDeliverQuantity"] !== undefined ? _data["maxDeliverQuantity"] : <any>null;
            this.maxProductHeightInDisplayUnits = _data["maxProductHeightInDisplayUnits"] !== undefined ? _data["maxProductHeightInDisplayUnits"] : <any>null;
            this.usePrescaling = _data["usePrescaling"] !== undefined ? _data["usePrescaling"] : <any>null;
            this.useLimits = _data["useLimits"] !== undefined ? _data["useLimits"] : <any>null;
            this.uniqueId = _data["uniqueId"] !== undefined ? _data["uniqueId"] : <any>null;
            if (Array.isArray(_data["componentDataChannelIdList"])) {
                this.componentDataChannelIdList = [] as any;
                for (let item of _data["componentDataChannelIdList"])
                    this.componentDataChannelIdList!.push(item);
            }
            else {
                this.componentDataChannelIdList = <any>null;
            }
            if (Array.isArray(_data["strappingChartInfo"])) {
                this.strappingChartInfo = [] as any;
                for (let item of _data["strappingChartInfo"])
                    this.strappingChartInfo!.push(StrappingChartInfo.fromJS(item));
            }
            else {
                this.strappingChartInfo = <any>null;
            }
            if (Array.isArray(_data["formulaParts"])) {
                this.formulaParts = [] as any;
                for (let item of _data["formulaParts"])
                    this.formulaParts!.push(EditAssetVirtualChannelFormulaPart.fromJS(item));
            }
            else {
                this.formulaParts = <any>null;
            }
            this.virtualChannelFormulaExpression = _data["virtualChannelFormulaExpression"] !== undefined ? _data["virtualChannelFormulaExpression"] : <any>null;
            this.isDeliveryForecasted = _data["isDeliveryForecasted"] !== undefined ? _data["isDeliveryForecasted"] : <any>null;
            this.rateOfChangeSourceDataChannelId = _data["rateOfChangeSourceDataChannelId"] !== undefined ? _data["rateOfChangeSourceDataChannelId"] : <any>null;
            this.apciTankFunction = _data["apciTankFunction"] !== undefined ? _data["apciTankFunction"] : <any>null;
            this.isAPCISendToLBShell = _data["isAPCISendToLBShell"] !== undefined ? _data["isAPCISendToLBShell"] : <any>null;
            this.apciUnits = _data["apciUnits"] !== undefined ? _data["apciUnits"] : <any>null;
        }
    }

    static fromJS(data: any): EditAssetDataChannel {
        data = typeof data === 'object' ? data : {};
        let result = new EditAssetDataChannel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["gasMixerDataChannelType"] = this.gasMixerDataChannelType !== undefined ? this.gasMixerDataChannelType : <any>null;
        data["dataChannelTemplateId"] = this.dataChannelTemplateId !== undefined ? this.dataChannelTemplateId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["siteId"] = this.siteId !== undefined ? this.siteId : <any>null;
        data["siteNumber"] = this.siteNumber !== undefined ? this.siteNumber : <any>null;
        data["siteCustomerName"] = this.siteCustomerName !== undefined ? this.siteCustomerName : <any>null;
        data["siteCity"] = this.siteCity !== undefined ? this.siteCity : <any>null;
        data["siteState"] = this.siteState !== undefined ? this.siteState : <any>null;
        data["assetType"] = this.assetType !== undefined ? this.assetType : <any>null;
        data["assetTimeZoneId"] = this.assetTimeZoneId !== undefined ? this.assetTimeZoneId : <any>null;
        data["dataSource"] = this.dataSource !== undefined ? this.dataSource : <any>null;
        data["sourceDataChannelId"] = this.sourceDataChannelId !== undefined ? this.sourceDataChannelId : <any>null;
        data["rtuId"] = this.rtuId !== undefined ? this.rtuId : <any>null;
        data["rtuCategory"] = this.rtuCategory !== undefined ? this.rtuCategory : <any>null;
        data["rtuType"] = this.rtuType !== undefined ? this.rtuType : <any>null;
        data["rtuDeviceId"] = this.rtuDeviceId !== undefined ? this.rtuDeviceId : <any>null;
        data["rtuChannelId"] = this.rtuChannelId !== undefined ? this.rtuChannelId : <any>null;
        data["rtuChannelNumber"] = this.rtuChannelNumber !== undefined ? this.rtuChannelNumber : <any>null;
        data["isRTUChannelMaster"] = this.isRTUChannelMaster !== undefined ? this.isRTUChannelMaster : <any>null;
        data["isVolumetric"] = this.isVolumetric !== undefined ? this.isVolumetric : <any>null;
        data["rawUnits"] = this.rawUnits !== undefined ? this.rawUnits : <any>null;
        data["scalingMode"] = this.scalingMode !== undefined ? this.scalingMode : <any>null;
        data["rawUnitsText"] = this.rawUnitsText !== undefined ? this.rawUnitsText : <any>null;
        data["rawUnitsAtZero"] = this.rawUnitsAtZero !== undefined ? this.rawUnitsAtZero : <any>null;
        data["rawUnitsAtFullScale"] = this.rawUnitsAtFullScale !== undefined ? this.rawUnitsAtFullScale : <any>null;
        data["rawUnitsAtOverRange"] = this.rawUnitsAtOverRange !== undefined ? this.rawUnitsAtOverRange : <any>null;
        data["rawUnitsAtScaledMax"] = this.rawUnitsAtScaledMax !== undefined ? this.rawUnitsAtScaledMax : <any>null;
        data["rawUnitsAtScaledMin"] = this.rawUnitsAtScaledMin !== undefined ? this.rawUnitsAtScaledMin : <any>null;
        data["rawUnitsAtUnderRange"] = this.rawUnitsAtUnderRange !== undefined ? this.rawUnitsAtUnderRange : <any>null;
        data["sensorPosition"] = this.sensorPosition !== undefined ? this.sensorPosition : <any>null;
        data["sensorPositionUnits"] = this.sensorPositionUnits !== undefined ? this.sensorPositionUnits : <any>null;
        data["scaledUnits"] = this.scaledUnits !== undefined ? this.scaledUnits : <any>null;
        data["scaledUnitsAsText"] = this.scaledUnitsAsText !== undefined ? this.scaledUnitsAsText : <any>null;
        data["displayUnits"] = this.displayUnits !== undefined ? this.displayUnits : <any>null;
        data["displayUnitsAsText"] = this.displayUnitsAsText !== undefined ? this.displayUnitsAsText : <any>null;
        data["scaledMin"] = this.scaledMin !== undefined ? this.scaledMin : <any>null;
        data["scaledMax"] = this.scaledMax !== undefined ? this.scaledMax : <any>null;
        data["graphMin"] = this.graphMin !== undefined ? this.graphMin : <any>null;
        data["graphMax"] = this.graphMax !== undefined ? this.graphMax : <any>null;
        data["maxProductHeight"] = this.maxProductHeight !== undefined ? this.maxProductHeight : <any>null;
        data["forecastMode"] = this.forecastMode !== undefined ? this.forecastMode : <any>null;
        data["highLowForecastEnabled"] = this.highLowForecastEnabled !== undefined ? this.highLowForecastEnabled : <any>null;
        data["productId"] = this.productId !== undefined ? this.productId : <any>null;
        data["productName"] = this.productName !== undefined ? this.productName : <any>null;
        data["productDescription"] = this.productDescription !== undefined ? this.productDescription : <any>null;
        data["productSpecificGravity"] = this.productSpecificGravity !== undefined ? this.productSpecificGravity : <any>null;
        data["standardVolumePerCubicMeter"] = this.standardVolumePerCubicMeter !== undefined ? this.standardVolumePerCubicMeter : <any>null;
        data["tankDimensionId"] = this.tankDimensionId !== undefined ? this.tankDimensionId : <any>null;
        data["tankDimensionDescription"] = this.tankDimensionDescription !== undefined ? this.tankDimensionDescription : <any>null;
        data["tankType"] = this.tankType !== undefined ? this.tankType : <any>null;
        data["useStrappingChartForConversion"] = this.useStrappingChartForConversion !== undefined ? this.useStrappingChartForConversion : <any>null;
        data["strappingLevelUnits"] = this.strappingLevelUnits !== undefined ? this.strappingLevelUnits : <any>null;
        data["strappingVolumeUnits"] = this.strappingVolumeUnits !== undefined ? this.strappingVolumeUnits : <any>null;
        data["tankDiameterInMeters"] = this.tankDiameterInMeters !== undefined ? this.tankDiameterInMeters : <any>null;
        data["tankLengthInMeters"] = this.tankLengthInMeters !== undefined ? this.tankLengthInMeters : <any>null;
        data["tankDishHeightInMeters"] = this.tankDishHeightInMeters !== undefined ? this.tankDishHeightInMeters : <any>null;
        data["tankHeightInMeters"] = this.tankHeightInMeters !== undefined ? this.tankHeightInMeters : <any>null;
        data["tankWidthInMeters"] = this.tankWidthInMeters !== undefined ? this.tankWidthInMeters : <any>null;
        data["digitalState0Limit"] = this.digitalState0Limit !== undefined ? this.digitalState0Limit : <any>null;
        data["digitalState0Text"] = this.digitalState0Text !== undefined ? this.digitalState0Text : <any>null;
        data["digitalState1Limit"] = this.digitalState1Limit !== undefined ? this.digitalState1Limit : <any>null;
        data["digitalState1Text"] = this.digitalState1Text !== undefined ? this.digitalState1Text : <any>null;
        data["displayPriority"] = this.displayPriority !== undefined ? this.displayPriority : <any>null;
        data["publishedComments"] = this.publishedComments !== undefined ? this.publishedComments : <any>null;
        data["isPublished"] = this.isPublished !== undefined ? this.isPublished : <any>null;
        data["eventRuleGroupId"] = this.eventRuleGroupId !== undefined ? this.eventRuleGroupId : <any>null;
        data["reorderEventLevel"] = this.reorderEventLevel !== undefined ? this.reorderEventLevel : <any>null;
        data["criticalEventLevel"] = this.criticalEventLevel !== undefined ? this.criticalEventLevel : <any>null;
        data["dataAggregationMode"] = this.dataAggregationMode !== undefined ? this.dataAggregationMode : <any>null;
        data["dataAggregationPeriod"] = this.dataAggregationPeriod !== undefined ? this.dataAggregationPeriod : <any>null;
        data["maxDeliverQuantity"] = this.maxDeliverQuantity !== undefined ? this.maxDeliverQuantity : <any>null;
        data["maxProductHeightInDisplayUnits"] = this.maxProductHeightInDisplayUnits !== undefined ? this.maxProductHeightInDisplayUnits : <any>null;
        data["usePrescaling"] = this.usePrescaling !== undefined ? this.usePrescaling : <any>null;
        data["useLimits"] = this.useLimits !== undefined ? this.useLimits : <any>null;
        data["uniqueId"] = this.uniqueId !== undefined ? this.uniqueId : <any>null;
        if (Array.isArray(this.componentDataChannelIdList)) {
            data["componentDataChannelIdList"] = [];
            for (let item of this.componentDataChannelIdList)
                data["componentDataChannelIdList"].push(item);
        }
        if (Array.isArray(this.strappingChartInfo)) {
            data["strappingChartInfo"] = [];
            for (let item of this.strappingChartInfo)
                data["strappingChartInfo"].push(item.toJSON());
        }
        if (Array.isArray(this.formulaParts)) {
            data["formulaParts"] = [];
            for (let item of this.formulaParts)
                data["formulaParts"].push(item.toJSON());
        }
        data["virtualChannelFormulaExpression"] = this.virtualChannelFormulaExpression !== undefined ? this.virtualChannelFormulaExpression : <any>null;
        data["isDeliveryForecasted"] = this.isDeliveryForecasted !== undefined ? this.isDeliveryForecasted : <any>null;
        data["rateOfChangeSourceDataChannelId"] = this.rateOfChangeSourceDataChannelId !== undefined ? this.rateOfChangeSourceDataChannelId : <any>null;
        data["apciTankFunction"] = this.apciTankFunction !== undefined ? this.apciTankFunction : <any>null;
        data["isAPCISendToLBShell"] = this.isAPCISendToLBShell !== undefined ? this.isAPCISendToLBShell : <any>null;
        data["apciUnits"] = this.apciUnits !== undefined ? this.apciUnits : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EditAssetVirtualChannelFormulaPart extends EditBase {
    virtualChannelFormulaPartId?: number;
    isEnabled?: boolean;
    expressionDataChannelId?: string | null;
    expression?: string | null;
    constant?: number | null;
    operator?: VirtualChannelOperatorType;
    sortIndex?: number;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.virtualChannelFormulaPartId = _data["virtualChannelFormulaPartId"] !== undefined ? _data["virtualChannelFormulaPartId"] : <any>null;
            this.isEnabled = _data["isEnabled"] !== undefined ? _data["isEnabled"] : <any>null;
            this.expressionDataChannelId = _data["expressionDataChannelId"] !== undefined ? _data["expressionDataChannelId"] : <any>null;
            this.expression = _data["expression"] !== undefined ? _data["expression"] : <any>null;
            this.constant = _data["constant"] !== undefined ? _data["constant"] : <any>null;
            this.operator = _data["operator"] !== undefined ? _data["operator"] : <any>null;
            this.sortIndex = _data["sortIndex"] !== undefined ? _data["sortIndex"] : <any>null;
        }
    }

    static fromJS(data: any): EditAssetVirtualChannelFormulaPart {
        data = typeof data === 'object' ? data : {};
        let result = new EditAssetVirtualChannelFormulaPart();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["virtualChannelFormulaPartId"] = this.virtualChannelFormulaPartId !== undefined ? this.virtualChannelFormulaPartId : <any>null;
        data["isEnabled"] = this.isEnabled !== undefined ? this.isEnabled : <any>null;
        data["expressionDataChannelId"] = this.expressionDataChannelId !== undefined ? this.expressionDataChannelId : <any>null;
        data["expression"] = this.expression !== undefined ? this.expression : <any>null;
        data["constant"] = this.constant !== undefined ? this.constant : <any>null;
        data["operator"] = this.operator !== undefined ? this.operator : <any>null;
        data["sortIndex"] = this.sortIndex !== undefined ? this.sortIndex : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class TubeConfigurationInfo {
    tubeConfigurationId?: number;
    numberOfTubes?: number;
    configuration?: string | null;

    init(_data?: any) {
        if (_data) {
            this.tubeConfigurationId = _data["tubeConfigurationId"] !== undefined ? _data["tubeConfigurationId"] : <any>null;
            this.numberOfTubes = _data["numberOfTubes"] !== undefined ? _data["numberOfTubes"] : <any>null;
            this.configuration = _data["configuration"] !== undefined ? _data["configuration"] : <any>null;
        }
    }

    static fromJS(data: any): TubeConfigurationInfo {
        data = typeof data === 'object' ? data : {};
        let result = new TubeConfigurationInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tubeConfigurationId"] = this.tubeConfigurationId !== undefined ? this.tubeConfigurationId : <any>null;
        data["numberOfTubes"] = this.numberOfTubes !== undefined ? this.numberOfTubes : <any>null;
        data["configuration"] = this.configuration !== undefined ? this.configuration : <any>null;
        return data;
    }
}

export class GeoAreaGroupInfo {
    geoAreaGroupId?: number;
    domainId?: string;
    description?: string | null;

    init(_data?: any) {
        if (_data) {
            this.geoAreaGroupId = _data["geoAreaGroupId"] !== undefined ? _data["geoAreaGroupId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
        }
    }

    static fromJS(data: any): GeoAreaGroupInfo {
        data = typeof data === 'object' ? data : {};
        let result = new GeoAreaGroupInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["geoAreaGroupId"] = this.geoAreaGroupId !== undefined ? this.geoAreaGroupId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        return data;
    }
}

export class EditAsset extends EditBase {
    assetId?: string;
    domainId?: string;
    assetType?: AssetType;
    description?: string | null;
    integrationName?: string | null;
    siteId?: string;
    siteInfo?: string | null;
    eventRuleGroupId?: number | null;
    installedTechName?: string | null;
    notes?: string | null;
    assetTimeZoneId?: number | null;
    domainDefaults?: DataChannelDomainDefaults | null;
    referenceDocumentUrl?: string | null;
    backupTankSiteId?: string | null;
    backupTankSiteInfo?: string | null;
    dataChannels?: EditAssetDataChannel[] | null;
    customProperties?: EditAssetCustomPropertyItem[] | null;
    designCurveType?: DesignCurveType;
    tubeTrailerInfo?: EditAssetTubeTrailer | null;
    isMobile?: boolean;
    geoAreaGroupId?: number | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.assetType = _data["assetType"] !== undefined ? _data["assetType"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.integrationName = _data["integrationName"] !== undefined ? _data["integrationName"] : <any>null;
            this.siteId = _data["siteId"] !== undefined ? _data["siteId"] : <any>null;
            this.siteInfo = _data["siteInfo"] !== undefined ? _data["siteInfo"] : <any>null;
            this.eventRuleGroupId = _data["eventRuleGroupId"] !== undefined ? _data["eventRuleGroupId"] : <any>null;
            this.installedTechName = _data["installedTechName"] !== undefined ? _data["installedTechName"] : <any>null;
            this.notes = _data["notes"] !== undefined ? _data["notes"] : <any>null;
            this.assetTimeZoneId = _data["assetTimeZoneId"] !== undefined ? _data["assetTimeZoneId"] : <any>null;
            this.domainDefaults = _data["domainDefaults"] ? DataChannelDomainDefaults.fromJS(_data["domainDefaults"]) : <any>null;
            this.referenceDocumentUrl = _data["referenceDocumentUrl"] !== undefined ? _data["referenceDocumentUrl"] : <any>null;
            this.backupTankSiteId = _data["backupTankSiteId"] !== undefined ? _data["backupTankSiteId"] : <any>null;
            this.backupTankSiteInfo = _data["backupTankSiteInfo"] !== undefined ? _data["backupTankSiteInfo"] : <any>null;
            if (Array.isArray(_data["dataChannels"])) {
                this.dataChannels = [] as any;
                for (let item of _data["dataChannels"])
                    this.dataChannels!.push(EditAssetDataChannel.fromJS(item));
            }
            else {
                this.dataChannels = <any>null;
            }
            if (Array.isArray(_data["customProperties"])) {
                this.customProperties = [] as any;
                for (let item of _data["customProperties"])
                    this.customProperties!.push(EditAssetCustomPropertyItem.fromJS(item));
            }
            else {
                this.customProperties = <any>null;
            }
            this.designCurveType = _data["designCurveType"] !== undefined ? _data["designCurveType"] : <any>null;
            this.tubeTrailerInfo = _data["tubeTrailerInfo"] ? EditAssetTubeTrailer.fromJS(_data["tubeTrailerInfo"]) : <any>null;
            this.isMobile = _data["isMobile"] !== undefined ? _data["isMobile"] : <any>null;
            this.geoAreaGroupId = _data["geoAreaGroupId"] !== undefined ? _data["geoAreaGroupId"] : <any>null;
        }
    }

    static fromJS(data: any): EditAsset {
        data = typeof data === 'object' ? data : {};
        let result = new EditAsset();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["assetType"] = this.assetType !== undefined ? this.assetType : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["integrationName"] = this.integrationName !== undefined ? this.integrationName : <any>null;
        data["siteId"] = this.siteId !== undefined ? this.siteId : <any>null;
        data["siteInfo"] = this.siteInfo !== undefined ? this.siteInfo : <any>null;
        data["eventRuleGroupId"] = this.eventRuleGroupId !== undefined ? this.eventRuleGroupId : <any>null;
        data["installedTechName"] = this.installedTechName !== undefined ? this.installedTechName : <any>null;
        data["notes"] = this.notes !== undefined ? this.notes : <any>null;
        data["assetTimeZoneId"] = this.assetTimeZoneId !== undefined ? this.assetTimeZoneId : <any>null;
        data["domainDefaults"] = this.domainDefaults ? this.domainDefaults.toJSON() : <any>null;
        data["referenceDocumentUrl"] = this.referenceDocumentUrl !== undefined ? this.referenceDocumentUrl : <any>null;
        data["backupTankSiteId"] = this.backupTankSiteId !== undefined ? this.backupTankSiteId : <any>null;
        data["backupTankSiteInfo"] = this.backupTankSiteInfo !== undefined ? this.backupTankSiteInfo : <any>null;
        if (Array.isArray(this.dataChannels)) {
            data["dataChannels"] = [];
            for (let item of this.dataChannels)
                data["dataChannels"].push(item.toJSON());
        }
        if (Array.isArray(this.customProperties)) {
            data["customProperties"] = [];
            for (let item of this.customProperties)
                data["customProperties"].push(item.toJSON());
        }
        data["designCurveType"] = this.designCurveType !== undefined ? this.designCurveType : <any>null;
        data["tubeTrailerInfo"] = this.tubeTrailerInfo ? this.tubeTrailerInfo.toJSON() : <any>null;
        data["isMobile"] = this.isMobile !== undefined ? this.isMobile : <any>null;
        data["geoAreaGroupId"] = this.geoAreaGroupId !== undefined ? this.geoAreaGroupId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class DataChannelDomainDefaults {
    showHighLowForecast?: boolean | null;
    defaultForecastMode?: ForecastModeType;

    init(_data?: any) {
        if (_data) {
            this.showHighLowForecast = _data["showHighLowForecast"] !== undefined ? _data["showHighLowForecast"] : <any>null;
            this.defaultForecastMode = _data["defaultForecastMode"] !== undefined ? _data["defaultForecastMode"] : <any>null;
        }
    }

    static fromJS(data: any): DataChannelDomainDefaults {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelDomainDefaults();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["showHighLowForecast"] = this.showHighLowForecast !== undefined ? this.showHighLowForecast : <any>null;
        data["defaultForecastMode"] = this.defaultForecastMode !== undefined ? this.defaultForecastMode : <any>null;
        return data;
    }
}

export class EditAssetTubeTrailer extends EditBase {
    unitNumber?: string | null;
    requalifierIdNumber?: string | null;
    lastTestDate?: Date | null;
    testDueDate?: Date | null;
    visualInspectionDueDate?: Date | null;
    lastExternalNeckInspection?: Date | null;
    dotStampedPressure?: number | null;
    dotSpecialFillingLimit?: number | null;
    dotTestPressure?: number | null;
    dotWaterVolume?: number | null;
    imdgMaxWorkingPressure?: number | null;
    imdgTestPressure?: number | null;
    imdgWaterVolume?: number | null;
    numberOfTubes?: number;
    tubeConfigurationId?: number;
    fillCountAtInstallationTime?: number;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.unitNumber = _data["unitNumber"] !== undefined ? _data["unitNumber"] : <any>null;
            this.requalifierIdNumber = _data["requalifierIdNumber"] !== undefined ? _data["requalifierIdNumber"] : <any>null;
            this.lastTestDate = _data["lastTestDate"] ? new Date(_data["lastTestDate"].toString()) : <any>null;
            this.testDueDate = _data["testDueDate"] ? new Date(_data["testDueDate"].toString()) : <any>null;
            this.visualInspectionDueDate = _data["visualInspectionDueDate"] ? new Date(_data["visualInspectionDueDate"].toString()) : <any>null;
            this.lastExternalNeckInspection = _data["lastExternalNeckInspection"] ? new Date(_data["lastExternalNeckInspection"].toString()) : <any>null;
            this.dotStampedPressure = _data["dotStampedPressure"] !== undefined ? _data["dotStampedPressure"] : <any>null;
            this.dotSpecialFillingLimit = _data["dotSpecialFillingLimit"] !== undefined ? _data["dotSpecialFillingLimit"] : <any>null;
            this.dotTestPressure = _data["dotTestPressure"] !== undefined ? _data["dotTestPressure"] : <any>null;
            this.dotWaterVolume = _data["dotWaterVolume"] !== undefined ? _data["dotWaterVolume"] : <any>null;
            this.imdgMaxWorkingPressure = _data["imdgMaxWorkingPressure"] !== undefined ? _data["imdgMaxWorkingPressure"] : <any>null;
            this.imdgTestPressure = _data["imdgTestPressure"] !== undefined ? _data["imdgTestPressure"] : <any>null;
            this.imdgWaterVolume = _data["imdgWaterVolume"] !== undefined ? _data["imdgWaterVolume"] : <any>null;
            this.numberOfTubes = _data["numberOfTubes"] !== undefined ? _data["numberOfTubes"] : <any>null;
            this.tubeConfigurationId = _data["tubeConfigurationId"] !== undefined ? _data["tubeConfigurationId"] : <any>null;
            this.fillCountAtInstallationTime = _data["fillCountAtInstallationTime"] !== undefined ? _data["fillCountAtInstallationTime"] : <any>null;
        }
    }

    static fromJS(data: any): EditAssetTubeTrailer {
        data = typeof data === 'object' ? data : {};
        let result = new EditAssetTubeTrailer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["unitNumber"] = this.unitNumber !== undefined ? this.unitNumber : <any>null;
        data["requalifierIdNumber"] = this.requalifierIdNumber !== undefined ? this.requalifierIdNumber : <any>null;
        data["lastTestDate"] = this.lastTestDate ? this.lastTestDate.toISOString() : <any>null;
        data["testDueDate"] = this.testDueDate ? this.testDueDate.toISOString() : <any>null;
        data["visualInspectionDueDate"] = this.visualInspectionDueDate ? this.visualInspectionDueDate.toISOString() : <any>null;
        data["lastExternalNeckInspection"] = this.lastExternalNeckInspection ? this.lastExternalNeckInspection.toISOString() : <any>null;
        data["dotStampedPressure"] = this.dotStampedPressure !== undefined ? this.dotStampedPressure : <any>null;
        data["dotSpecialFillingLimit"] = this.dotSpecialFillingLimit !== undefined ? this.dotSpecialFillingLimit : <any>null;
        data["dotTestPressure"] = this.dotTestPressure !== undefined ? this.dotTestPressure : <any>null;
        data["dotWaterVolume"] = this.dotWaterVolume !== undefined ? this.dotWaterVolume : <any>null;
        data["imdgMaxWorkingPressure"] = this.imdgMaxWorkingPressure !== undefined ? this.imdgMaxWorkingPressure : <any>null;
        data["imdgTestPressure"] = this.imdgTestPressure !== undefined ? this.imdgTestPressure : <any>null;
        data["imdgWaterVolume"] = this.imdgWaterVolume !== undefined ? this.imdgWaterVolume : <any>null;
        data["numberOfTubes"] = this.numberOfTubes !== undefined ? this.numberOfTubes : <any>null;
        data["tubeConfigurationId"] = this.tubeConfigurationId !== undefined ? this.tubeConfigurationId : <any>null;
        data["fillCountAtInstallationTime"] = this.fillCountAtInstallationTime !== undefined ? this.fillCountAtInstallationTime : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class RetrieveAssetEditComponentsByIdRequest extends WcfProxyUserDetails {
    assetId?: string;
    loadEditComponents?: boolean;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.loadEditComponents = _data["loadEditComponents"] !== undefined ? _data["loadEditComponents"] : <any>null;
        }
    }

    static fromJS(data: any): RetrieveAssetEditComponentsByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveAssetEditComponentsByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["loadEditComponents"] = this.loadEditComponents !== undefined ? this.loadEditComponents : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveAssetEditComponentsByIdRequest extends RetrieveAssetEditComponentsByIdRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveAssetEditComponentsByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveAssetEditComponentsByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveAssetGroupCriteriaAutoCompleteFilterItemsByOptionsResponse {
    retrieveAssetGroupCriteriaAutoCompleteFilterItemsByOptionsResult?: AssetGroupCriteriaFilterItem[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["retrieveAssetGroupCriteriaAutoCompleteFilterItemsByOptionsResult"])) {
                this.retrieveAssetGroupCriteriaAutoCompleteFilterItemsByOptionsResult = [] as any;
                for (let item of _data["retrieveAssetGroupCriteriaAutoCompleteFilterItemsByOptionsResult"])
                    this.retrieveAssetGroupCriteriaAutoCompleteFilterItemsByOptionsResult!.push(AssetGroupCriteriaFilterItem.fromJS(item));
            }
            else {
                this.retrieveAssetGroupCriteriaAutoCompleteFilterItemsByOptionsResult = <any>null;
            }
        }
    }

    static fromJS(data: any): RetrieveAssetGroupCriteriaAutoCompleteFilterItemsByOptionsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveAssetGroupCriteriaAutoCompleteFilterItemsByOptionsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.retrieveAssetGroupCriteriaAutoCompleteFilterItemsByOptionsResult)) {
            data["retrieveAssetGroupCriteriaAutoCompleteFilterItemsByOptionsResult"] = [];
            for (let item of this.retrieveAssetGroupCriteriaAutoCompleteFilterItemsByOptionsResult)
                data["retrieveAssetGroupCriteriaAutoCompleteFilterItemsByOptionsResult"].push(item.toJSON());
        }
        return data;
    }
}

export class EvolveRetrieveAssetGroupCriteriaAutoCompleteFilterItemsByOptionsResponse extends RetrieveAssetGroupCriteriaAutoCompleteFilterItemsByOptionsResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveAssetGroupCriteriaAutoCompleteFilterItemsByOptionsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveAssetGroupCriteriaAutoCompleteFilterItemsByOptionsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class AssetGroupCriteriaFilterItem {
    text?: string | null;

    init(_data?: any) {
        if (_data) {
            this.text = _data["text"] !== undefined ? _data["text"] : <any>null;
        }
    }

    static fromJS(data: any): AssetGroupCriteriaFilterItem {
        data = typeof data === 'object' ? data : {};
        let result = new AssetGroupCriteriaFilterItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["text"] = this.text !== undefined ? this.text : <any>null;
        return data;
    }
}

export class RetrieveAssetGroupCriteriaAutoCompleteFilterItemsByOptionsRequest extends WcfProxyUserDetails {
    options?: AssetGroupCriteriaFilterAutoCompleteOptions | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.options = _data["options"] ? AssetGroupCriteriaFilterAutoCompleteOptions.fromJS(_data["options"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveAssetGroupCriteriaAutoCompleteFilterItemsByOptionsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveAssetGroupCriteriaAutoCompleteFilterItemsByOptionsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["options"] = this.options ? this.options.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveAssetGroupCriteriaAutoCompleteFilterItemsByOptionsRequest extends RetrieveAssetGroupCriteriaAutoCompleteFilterItemsByOptionsRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveAssetGroupCriteriaAutoCompleteFilterItemsByOptionsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveAssetGroupCriteriaAutoCompleteFilterItemsByOptionsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class AssetGroupCriteriaFilterAutoCompleteOptions {
    searchType?: AssetGroupFilterSearchType;
    fieldName?: string | null;
    prefixText?: string | null;

    init(_data?: any) {
        if (_data) {
            this.searchType = _data["searchType"] !== undefined ? _data["searchType"] : <any>null;
            this.fieldName = _data["fieldName"] !== undefined ? _data["fieldName"] : <any>null;
            this.prefixText = _data["prefixText"] !== undefined ? _data["prefixText"] : <any>null;
        }
    }

    static fromJS(data: any): AssetGroupCriteriaFilterAutoCompleteOptions {
        data = typeof data === 'object' ? data : {};
        let result = new AssetGroupCriteriaFilterAutoCompleteOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["searchType"] = this.searchType !== undefined ? this.searchType : <any>null;
        data["fieldName"] = this.fieldName !== undefined ? this.fieldName : <any>null;
        data["prefixText"] = this.prefixText !== undefined ? this.prefixText : <any>null;
        return data;
    }
}

export enum AssetGroupFilterSearchType {
    AssetDescription = 0,
    ProductName = 1,
    CustomerName = 2,
    Country = 3,
    State = 4,
    City = 5,
    PostalCode = 6,
    DataChannelTypeName = 7,
    RTUDeviceID = 8,
    ChannelNumber = 9,
    CarrierName = 10,
    FTPEnabled = 11,
    FTPDomain = 12,
    CustomerContactName = 13,
    InstallationTechName = 14,
    CustomProperties = 15,
    ProductGroup = 16,
    None = 99,
}

export class RetrieveAssetGroupEditComponentsByIdResponse {
    retrieveAssetGroupEditComponentsByIdResult?: RetrieveAssetGroupEditComponentsResult | null;

    init(_data?: any) {
        if (_data) {
            this.retrieveAssetGroupEditComponentsByIdResult = _data["retrieveAssetGroupEditComponentsByIdResult"] ? RetrieveAssetGroupEditComponentsResult.fromJS(_data["retrieveAssetGroupEditComponentsByIdResult"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveAssetGroupEditComponentsByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveAssetGroupEditComponentsByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["retrieveAssetGroupEditComponentsByIdResult"] = this.retrieveAssetGroupEditComponentsByIdResult ? this.retrieveAssetGroupEditComponentsByIdResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveRetrieveAssetGroupEditComponentsByIdResponse extends RetrieveAssetGroupEditComponentsByIdResponse {
    assetGroupSearchCriteria?: AssetGroupSearchCriteria | null;
    /** Replaces AssetGroupCriteriaOptions inside the RetrieveAssetGroupEditComponentsResult object.
             */
    assetGroupCriteriaOptions?: EvolveAssetGroupCriteriaOptionInfo[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.assetGroupSearchCriteria = _data["assetGroupSearchCriteria"] ? AssetGroupSearchCriteria.fromJS(_data["assetGroupSearchCriteria"]) : <any>null;
            if (Array.isArray(_data["assetGroupCriteriaOptions"])) {
                this.assetGroupCriteriaOptions = [] as any;
                for (let item of _data["assetGroupCriteriaOptions"])
                    this.assetGroupCriteriaOptions!.push(EvolveAssetGroupCriteriaOptionInfo.fromJS(item));
            }
            else {
                this.assetGroupCriteriaOptions = <any>null;
            }
        }
    }

    static fromJS(data: any): EvolveRetrieveAssetGroupEditComponentsByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveAssetGroupEditComponentsByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetGroupSearchCriteria"] = this.assetGroupSearchCriteria ? this.assetGroupSearchCriteria.toJSON() : <any>null;
        if (Array.isArray(this.assetGroupCriteriaOptions)) {
            data["assetGroupCriteriaOptions"] = [];
            for (let item of this.assetGroupCriteriaOptions)
                data["assetGroupCriteriaOptions"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

/** Data transfer object for the asset group search criteria representing the XML string stored in the database on DOLv3. */
export class AssetGroupSearchCriteria {
    filter1?: string | null;
    comparator1?: string | null;
    value1?: string | null;
    operator1?: string | null;
    filter2?: string | null;
    comparator2?: string | null;
    value2?: string | null;
    operator2?: string | null;
    filter3?: string | null;
    comparator3?: string | null;
    value3?: string | null;
    operator3?: string | null;
    filter4?: string | null;
    comparator4?: string | null;
    value4?: string | null;

    init(_data?: any) {
        if (_data) {
            this.filter1 = _data["filter1"] !== undefined ? _data["filter1"] : <any>null;
            this.comparator1 = _data["comparator1"] !== undefined ? _data["comparator1"] : <any>null;
            this.value1 = _data["value1"] !== undefined ? _data["value1"] : <any>null;
            this.operator1 = _data["operator1"] !== undefined ? _data["operator1"] : <any>null;
            this.filter2 = _data["filter2"] !== undefined ? _data["filter2"] : <any>null;
            this.comparator2 = _data["comparator2"] !== undefined ? _data["comparator2"] : <any>null;
            this.value2 = _data["value2"] !== undefined ? _data["value2"] : <any>null;
            this.operator2 = _data["operator2"] !== undefined ? _data["operator2"] : <any>null;
            this.filter3 = _data["filter3"] !== undefined ? _data["filter3"] : <any>null;
            this.comparator3 = _data["comparator3"] !== undefined ? _data["comparator3"] : <any>null;
            this.value3 = _data["value3"] !== undefined ? _data["value3"] : <any>null;
            this.operator3 = _data["operator3"] !== undefined ? _data["operator3"] : <any>null;
            this.filter4 = _data["filter4"] !== undefined ? _data["filter4"] : <any>null;
            this.comparator4 = _data["comparator4"] !== undefined ? _data["comparator4"] : <any>null;
            this.value4 = _data["value4"] !== undefined ? _data["value4"] : <any>null;
        }
    }

    static fromJS(data: any): AssetGroupSearchCriteria {
        data = typeof data === 'object' ? data : {};
        let result = new AssetGroupSearchCriteria();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["filter1"] = this.filter1 !== undefined ? this.filter1 : <any>null;
        data["comparator1"] = this.comparator1 !== undefined ? this.comparator1 : <any>null;
        data["value1"] = this.value1 !== undefined ? this.value1 : <any>null;
        data["operator1"] = this.operator1 !== undefined ? this.operator1 : <any>null;
        data["filter2"] = this.filter2 !== undefined ? this.filter2 : <any>null;
        data["comparator2"] = this.comparator2 !== undefined ? this.comparator2 : <any>null;
        data["value2"] = this.value2 !== undefined ? this.value2 : <any>null;
        data["operator2"] = this.operator2 !== undefined ? this.operator2 : <any>null;
        data["filter3"] = this.filter3 !== undefined ? this.filter3 : <any>null;
        data["comparator3"] = this.comparator3 !== undefined ? this.comparator3 : <any>null;
        data["value3"] = this.value3 !== undefined ? this.value3 : <any>null;
        data["operator3"] = this.operator3 !== undefined ? this.operator3 : <any>null;
        data["filter4"] = this.filter4 !== undefined ? this.filter4 : <any>null;
        data["comparator4"] = this.comparator4 !== undefined ? this.comparator4 : <any>null;
        data["value4"] = this.value4 !== undefined ? this.value4 : <any>null;
        return data;
    }
}

export class AssetGroupCriteriaOptionInfo {
    fieldName?: string | null;
    displayName?: string | null;
    isCustomField?: boolean;
    customFieldMetadata?: string | null;

    init(_data?: any) {
        if (_data) {
            this.fieldName = _data["fieldName"] !== undefined ? _data["fieldName"] : <any>null;
            this.displayName = _data["displayName"] !== undefined ? _data["displayName"] : <any>null;
            this.isCustomField = _data["isCustomField"] !== undefined ? _data["isCustomField"] : <any>null;
            this.customFieldMetadata = _data["customFieldMetadata"] !== undefined ? _data["customFieldMetadata"] : <any>null;
        }
    }

    static fromJS(data: any): AssetGroupCriteriaOptionInfo {
        data = typeof data === 'object' ? data : {};
        let result = new AssetGroupCriteriaOptionInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fieldName"] = this.fieldName !== undefined ? this.fieldName : <any>null;
        data["displayName"] = this.displayName !== undefined ? this.displayName : <any>null;
        data["isCustomField"] = this.isCustomField !== undefined ? this.isCustomField : <any>null;
        data["customFieldMetadata"] = this.customFieldMetadata !== undefined ? this.customFieldMetadata : <any>null;
        return data;
    }
}

export class EvolveAssetGroupCriteriaOptionInfo extends AssetGroupCriteriaOptionInfo {
    customFieldMetaDataJson?: AssetGroupCriteriaOption | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.customFieldMetaDataJson = _data["customFieldMetaDataJson"] ? AssetGroupCriteriaOption.fromJS(_data["customFieldMetaDataJson"]) : <any>null;
        }
    }

    static fromJS(data: any): EvolveAssetGroupCriteriaOptionInfo {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveAssetGroupCriteriaOptionInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customFieldMetaDataJson"] = this.customFieldMetaDataJson ? this.customFieldMetaDataJson.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class AssetGroupCriteriaOption {
    dataType?: CustomPropertyDataType;
    maximum?: number | null;
    minimum?: number | null;
    precision?: number | null;
    listValues?: string[] | null;

    init(_data?: any) {
        if (_data) {
            this.dataType = _data["dataType"] !== undefined ? _data["dataType"] : <any>null;
            this.maximum = _data["maximum"] !== undefined ? _data["maximum"] : <any>null;
            this.minimum = _data["minimum"] !== undefined ? _data["minimum"] : <any>null;
            this.precision = _data["precision"] !== undefined ? _data["precision"] : <any>null;
            if (Array.isArray(_data["listValues"])) {
                this.listValues = [] as any;
                for (let item of _data["listValues"])
                    this.listValues!.push(item);
            }
            else {
                this.listValues = <any>null;
            }
        }
    }

    static fromJS(data: any): AssetGroupCriteriaOption {
        data = typeof data === 'object' ? data : {};
        let result = new AssetGroupCriteriaOption();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataType"] = this.dataType !== undefined ? this.dataType : <any>null;
        data["maximum"] = this.maximum !== undefined ? this.maximum : <any>null;
        data["minimum"] = this.minimum !== undefined ? this.minimum : <any>null;
        data["precision"] = this.precision !== undefined ? this.precision : <any>null;
        if (Array.isArray(this.listValues)) {
            data["listValues"] = [];
            for (let item of this.listValues)
                data["listValues"].push(item);
        }
        return data;
    }
}

export class BaseEditComponentsResultOfEditAssetGroup {
    editObject?: EditAssetGroup | null;
    areEditComponentsLoaded?: boolean;

    init(_data?: any) {
        if (_data) {
            this.editObject = _data["editObject"] ? EditAssetGroup.fromJS(_data["editObject"]) : <any>null;
            this.areEditComponentsLoaded = _data["areEditComponentsLoaded"] !== undefined ? _data["areEditComponentsLoaded"] : <any>null;
        }
    }

    static fromJS(data: any): BaseEditComponentsResultOfEditAssetGroup {
        data = typeof data === 'object' ? data : {};
        let result = new BaseEditComponentsResultOfEditAssetGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["editObject"] = this.editObject ? this.editObject.toJSON() : <any>null;
        data["areEditComponentsLoaded"] = this.areEditComponentsLoaded !== undefined ? this.areEditComponentsLoaded : <any>null;
        return data;
    }
}

export class RetrieveAssetGroupEditComponentsResult extends BaseEditComponentsResultOfEditAssetGroup {
    unassignedUsers?: EditUserAssetGroup[] | null;
    unassignedDomains?: EditAssetGroupPublishedDomain[] | null;
    assetGroupCriteriaOptions?: AssetGroupCriteriaOptionInfo[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["unassignedUsers"])) {
                this.unassignedUsers = [] as any;
                for (let item of _data["unassignedUsers"])
                    this.unassignedUsers!.push(EditUserAssetGroup.fromJS(item));
            }
            else {
                this.unassignedUsers = <any>null;
            }
            if (Array.isArray(_data["unassignedDomains"])) {
                this.unassignedDomains = [] as any;
                for (let item of _data["unassignedDomains"])
                    this.unassignedDomains!.push(EditAssetGroupPublishedDomain.fromJS(item));
            }
            else {
                this.unassignedDomains = <any>null;
            }
            if (Array.isArray(_data["assetGroupCriteriaOptions"])) {
                this.assetGroupCriteriaOptions = [] as any;
                for (let item of _data["assetGroupCriteriaOptions"])
                    this.assetGroupCriteriaOptions!.push(AssetGroupCriteriaOptionInfo.fromJS(item));
            }
            else {
                this.assetGroupCriteriaOptions = <any>null;
            }
        }
    }

    static fromJS(data: any): RetrieveAssetGroupEditComponentsResult {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveAssetGroupEditComponentsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.unassignedUsers)) {
            data["unassignedUsers"] = [];
            for (let item of this.unassignedUsers)
                data["unassignedUsers"].push(item.toJSON());
        }
        if (Array.isArray(this.unassignedDomains)) {
            data["unassignedDomains"] = [];
            for (let item of this.unassignedDomains)
                data["unassignedDomains"].push(item.toJSON());
        }
        if (Array.isArray(this.assetGroupCriteriaOptions)) {
            data["assetGroupCriteriaOptions"] = [];
            for (let item of this.assetGroupCriteriaOptions)
                data["assetGroupCriteriaOptions"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export class EditUserAssetGroup {
    validationErrors?: ValidationErrorInfo[] | null;
    userAssetGroupId?: number;
    userId?: string;
    username?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    domainId?: string;
    userDomainRoleId?: number;
    applicationUserRoleId?: number;
    roleName?: string | null;
    roleType?: ApplicationUserRoleType;
    assetGroupPublishedDomainId?: number;
    permissions?: EditUserAssetGroupRoleItem[] | null;
    isDefault?: boolean;
    isModifiedFromDefaultPermissions?: boolean;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["validationErrors"])) {
                this.validationErrors = [] as any;
                for (let item of _data["validationErrors"])
                    this.validationErrors!.push(ValidationErrorInfo.fromJS(item));
            }
            else {
                this.validationErrors = <any>null;
            }
            this.userAssetGroupId = _data["userAssetGroupId"] !== undefined ? _data["userAssetGroupId"] : <any>null;
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.username = _data["username"] !== undefined ? _data["username"] : <any>null;
            this.firstName = _data["firstName"] !== undefined ? _data["firstName"] : <any>null;
            this.lastName = _data["lastName"] !== undefined ? _data["lastName"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.userDomainRoleId = _data["userDomainRoleId"] !== undefined ? _data["userDomainRoleId"] : <any>null;
            this.applicationUserRoleId = _data["applicationUserRoleId"] !== undefined ? _data["applicationUserRoleId"] : <any>null;
            this.roleName = _data["roleName"] !== undefined ? _data["roleName"] : <any>null;
            this.roleType = _data["roleType"] !== undefined ? _data["roleType"] : <any>null;
            this.assetGroupPublishedDomainId = _data["assetGroupPublishedDomainId"] !== undefined ? _data["assetGroupPublishedDomainId"] : <any>null;
            if (Array.isArray(_data["permissions"])) {
                this.permissions = [] as any;
                for (let item of _data["permissions"])
                    this.permissions!.push(EditUserAssetGroupRoleItem.fromJS(item));
            }
            else {
                this.permissions = <any>null;
            }
            this.isDefault = _data["isDefault"] !== undefined ? _data["isDefault"] : <any>null;
            this.isModifiedFromDefaultPermissions = _data["isModifiedFromDefaultPermissions"] !== undefined ? _data["isModifiedFromDefaultPermissions"] : <any>null;
        }
    }

    static fromJS(data: any): EditUserAssetGroup {
        data = typeof data === 'object' ? data : {};
        let result = new EditUserAssetGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.validationErrors)) {
            data["validationErrors"] = [];
            for (let item of this.validationErrors)
                data["validationErrors"].push(item.toJSON());
        }
        data["userAssetGroupId"] = this.userAssetGroupId !== undefined ? this.userAssetGroupId : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["username"] = this.username !== undefined ? this.username : <any>null;
        data["firstName"] = this.firstName !== undefined ? this.firstName : <any>null;
        data["lastName"] = this.lastName !== undefined ? this.lastName : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["userDomainRoleId"] = this.userDomainRoleId !== undefined ? this.userDomainRoleId : <any>null;
        data["applicationUserRoleId"] = this.applicationUserRoleId !== undefined ? this.applicationUserRoleId : <any>null;
        data["roleName"] = this.roleName !== undefined ? this.roleName : <any>null;
        data["roleType"] = this.roleType !== undefined ? this.roleType : <any>null;
        data["assetGroupPublishedDomainId"] = this.assetGroupPublishedDomainId !== undefined ? this.assetGroupPublishedDomainId : <any>null;
        if (Array.isArray(this.permissions)) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item.toJSON());
        }
        data["isDefault"] = this.isDefault !== undefined ? this.isDefault : <any>null;
        data["isModifiedFromDefaultPermissions"] = this.isModifiedFromDefaultPermissions !== undefined ? this.isModifiedFromDefaultPermissions : <any>null;
        return data;
    }
}

export class EditUserAssetGroupRoleItem {
    validationErrors?: ValidationErrorInfo[] | null;
    applicationUserRoleGroupItemId?: number;
    permissionType?: UserPermissionType;
    description?: string | null;
    groupType?: ApplicationUserRoleGroupType;
    isForRootDomain?: boolean;
    parentId?: number | null;
    isAvailableForSystemUser?: boolean;
    isAvailableForDomainUser?: boolean;
    hasEnableControl?: boolean;
    hasCreateControl?: boolean;
    hasReadControl?: boolean;
    hasUpdateControl?: boolean;
    hasDeleteControl?: boolean;
    sortIndex?: number;
    groupItems?: EditUserAssetGroupRoleItem[] | null;
    userAssetGroupRoleItemAccessId?: number;
    isEnabled?: boolean;
    isCreateEnabled?: boolean;
    isReadEnabled?: boolean;
    isUpdateEnabled?: boolean;
    isDeleteEnabled?: boolean;
    isEnabledLocked?: boolean;
    isCreateEnabledLocked?: boolean;
    isReadEnabledLocked?: boolean;
    isUpdateEnabledLocked?: boolean;
    isDeleteEnabledLocked?: boolean;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["validationErrors"])) {
                this.validationErrors = [] as any;
                for (let item of _data["validationErrors"])
                    this.validationErrors!.push(ValidationErrorInfo.fromJS(item));
            }
            else {
                this.validationErrors = <any>null;
            }
            this.applicationUserRoleGroupItemId = _data["applicationUserRoleGroupItemId"] !== undefined ? _data["applicationUserRoleGroupItemId"] : <any>null;
            this.permissionType = _data["permissionType"] !== undefined ? _data["permissionType"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.groupType = _data["groupType"] !== undefined ? _data["groupType"] : <any>null;
            this.isForRootDomain = _data["isForRootDomain"] !== undefined ? _data["isForRootDomain"] : <any>null;
            this.parentId = _data["parentId"] !== undefined ? _data["parentId"] : <any>null;
            this.isAvailableForSystemUser = _data["isAvailableForSystemUser"] !== undefined ? _data["isAvailableForSystemUser"] : <any>null;
            this.isAvailableForDomainUser = _data["isAvailableForDomainUser"] !== undefined ? _data["isAvailableForDomainUser"] : <any>null;
            this.hasEnableControl = _data["hasEnableControl"] !== undefined ? _data["hasEnableControl"] : <any>null;
            this.hasCreateControl = _data["hasCreateControl"] !== undefined ? _data["hasCreateControl"] : <any>null;
            this.hasReadControl = _data["hasReadControl"] !== undefined ? _data["hasReadControl"] : <any>null;
            this.hasUpdateControl = _data["hasUpdateControl"] !== undefined ? _data["hasUpdateControl"] : <any>null;
            this.hasDeleteControl = _data["hasDeleteControl"] !== undefined ? _data["hasDeleteControl"] : <any>null;
            this.sortIndex = _data["sortIndex"] !== undefined ? _data["sortIndex"] : <any>null;
            if (Array.isArray(_data["groupItems"])) {
                this.groupItems = [] as any;
                for (let item of _data["groupItems"])
                    this.groupItems!.push(EditUserAssetGroupRoleItem.fromJS(item));
            }
            else {
                this.groupItems = <any>null;
            }
            this.userAssetGroupRoleItemAccessId = _data["userAssetGroupRoleItemAccessId"] !== undefined ? _data["userAssetGroupRoleItemAccessId"] : <any>null;
            this.isEnabled = _data["isEnabled"] !== undefined ? _data["isEnabled"] : <any>null;
            this.isCreateEnabled = _data["isCreateEnabled"] !== undefined ? _data["isCreateEnabled"] : <any>null;
            this.isReadEnabled = _data["isReadEnabled"] !== undefined ? _data["isReadEnabled"] : <any>null;
            this.isUpdateEnabled = _data["isUpdateEnabled"] !== undefined ? _data["isUpdateEnabled"] : <any>null;
            this.isDeleteEnabled = _data["isDeleteEnabled"] !== undefined ? _data["isDeleteEnabled"] : <any>null;
            this.isEnabledLocked = _data["isEnabledLocked"] !== undefined ? _data["isEnabledLocked"] : <any>null;
            this.isCreateEnabledLocked = _data["isCreateEnabledLocked"] !== undefined ? _data["isCreateEnabledLocked"] : <any>null;
            this.isReadEnabledLocked = _data["isReadEnabledLocked"] !== undefined ? _data["isReadEnabledLocked"] : <any>null;
            this.isUpdateEnabledLocked = _data["isUpdateEnabledLocked"] !== undefined ? _data["isUpdateEnabledLocked"] : <any>null;
            this.isDeleteEnabledLocked = _data["isDeleteEnabledLocked"] !== undefined ? _data["isDeleteEnabledLocked"] : <any>null;
        }
    }

    static fromJS(data: any): EditUserAssetGroupRoleItem {
        data = typeof data === 'object' ? data : {};
        let result = new EditUserAssetGroupRoleItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.validationErrors)) {
            data["validationErrors"] = [];
            for (let item of this.validationErrors)
                data["validationErrors"].push(item.toJSON());
        }
        data["applicationUserRoleGroupItemId"] = this.applicationUserRoleGroupItemId !== undefined ? this.applicationUserRoleGroupItemId : <any>null;
        data["permissionType"] = this.permissionType !== undefined ? this.permissionType : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["groupType"] = this.groupType !== undefined ? this.groupType : <any>null;
        data["isForRootDomain"] = this.isForRootDomain !== undefined ? this.isForRootDomain : <any>null;
        data["parentId"] = this.parentId !== undefined ? this.parentId : <any>null;
        data["isAvailableForSystemUser"] = this.isAvailableForSystemUser !== undefined ? this.isAvailableForSystemUser : <any>null;
        data["isAvailableForDomainUser"] = this.isAvailableForDomainUser !== undefined ? this.isAvailableForDomainUser : <any>null;
        data["hasEnableControl"] = this.hasEnableControl !== undefined ? this.hasEnableControl : <any>null;
        data["hasCreateControl"] = this.hasCreateControl !== undefined ? this.hasCreateControl : <any>null;
        data["hasReadControl"] = this.hasReadControl !== undefined ? this.hasReadControl : <any>null;
        data["hasUpdateControl"] = this.hasUpdateControl !== undefined ? this.hasUpdateControl : <any>null;
        data["hasDeleteControl"] = this.hasDeleteControl !== undefined ? this.hasDeleteControl : <any>null;
        data["sortIndex"] = this.sortIndex !== undefined ? this.sortIndex : <any>null;
        if (Array.isArray(this.groupItems)) {
            data["groupItems"] = [];
            for (let item of this.groupItems)
                data["groupItems"].push(item.toJSON());
        }
        data["userAssetGroupRoleItemAccessId"] = this.userAssetGroupRoleItemAccessId !== undefined ? this.userAssetGroupRoleItemAccessId : <any>null;
        data["isEnabled"] = this.isEnabled !== undefined ? this.isEnabled : <any>null;
        data["isCreateEnabled"] = this.isCreateEnabled !== undefined ? this.isCreateEnabled : <any>null;
        data["isReadEnabled"] = this.isReadEnabled !== undefined ? this.isReadEnabled : <any>null;
        data["isUpdateEnabled"] = this.isUpdateEnabled !== undefined ? this.isUpdateEnabled : <any>null;
        data["isDeleteEnabled"] = this.isDeleteEnabled !== undefined ? this.isDeleteEnabled : <any>null;
        data["isEnabledLocked"] = this.isEnabledLocked !== undefined ? this.isEnabledLocked : <any>null;
        data["isCreateEnabledLocked"] = this.isCreateEnabledLocked !== undefined ? this.isCreateEnabledLocked : <any>null;
        data["isReadEnabledLocked"] = this.isReadEnabledLocked !== undefined ? this.isReadEnabledLocked : <any>null;
        data["isUpdateEnabledLocked"] = this.isUpdateEnabledLocked !== undefined ? this.isUpdateEnabledLocked : <any>null;
        data["isDeleteEnabledLocked"] = this.isDeleteEnabledLocked !== undefined ? this.isDeleteEnabledLocked : <any>null;
        return data;
    }
}

export enum ApplicationUserRoleGroupType {
    ApplicationAccess = 0,
    DomainSecurity = 1,
    AssetSecurityTemplate = 2,
}

export class EditAssetGroupPublishedDomain {
    validationErrors?: ValidationErrorInfo[] | null;
    assetGroupPublishedDomainId?: number;
    domainId?: string;
    domainName?: string | null;
    permissions?: EditAssetGroupPublishedItem[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["validationErrors"])) {
                this.validationErrors = [] as any;
                for (let item of _data["validationErrors"])
                    this.validationErrors!.push(ValidationErrorInfo.fromJS(item));
            }
            else {
                this.validationErrors = <any>null;
            }
            this.assetGroupPublishedDomainId = _data["assetGroupPublishedDomainId"] !== undefined ? _data["assetGroupPublishedDomainId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.domainName = _data["domainName"] !== undefined ? _data["domainName"] : <any>null;
            if (Array.isArray(_data["permissions"])) {
                this.permissions = [] as any;
                for (let item of _data["permissions"])
                    this.permissions!.push(EditAssetGroupPublishedItem.fromJS(item));
            }
            else {
                this.permissions = <any>null;
            }
        }
    }

    static fromJS(data: any): EditAssetGroupPublishedDomain {
        data = typeof data === 'object' ? data : {};
        let result = new EditAssetGroupPublishedDomain();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.validationErrors)) {
            data["validationErrors"] = [];
            for (let item of this.validationErrors)
                data["validationErrors"].push(item.toJSON());
        }
        data["assetGroupPublishedDomainId"] = this.assetGroupPublishedDomainId !== undefined ? this.assetGroupPublishedDomainId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["domainName"] = this.domainName !== undefined ? this.domainName : <any>null;
        if (Array.isArray(this.permissions)) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item.toJSON());
        }
        return data;
    }
}

export class EditAssetGroupPublishedItem {
    validationErrors?: ValidationErrorInfo[] | null;
    applicationUserRoleGroupItemId?: number;
    permissionType?: UserPermissionType;
    description?: string | null;
    groupType?: ApplicationUserRoleGroupType;
    parentId?: number | null;
    isAvailableForSystemUser?: boolean;
    isAvailableForDomainUser?: boolean;
    hasEnableControl?: boolean;
    hasCreateControl?: boolean;
    hasReadControl?: boolean;
    hasUpdateControl?: boolean;
    hasDeleteControl?: boolean;
    sortIndex?: number;
    groupItems?: EditAssetGroupPublishedItem[] | null;
    assetGroupPublishedItemAccessId?: number;
    isEnabled?: boolean;
    isCreateEnabled?: boolean;
    isReadEnabled?: boolean;
    isUpdateEnabled?: boolean;
    isDeleteEnabled?: boolean;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["validationErrors"])) {
                this.validationErrors = [] as any;
                for (let item of _data["validationErrors"])
                    this.validationErrors!.push(ValidationErrorInfo.fromJS(item));
            }
            else {
                this.validationErrors = <any>null;
            }
            this.applicationUserRoleGroupItemId = _data["applicationUserRoleGroupItemId"] !== undefined ? _data["applicationUserRoleGroupItemId"] : <any>null;
            this.permissionType = _data["permissionType"] !== undefined ? _data["permissionType"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.groupType = _data["groupType"] !== undefined ? _data["groupType"] : <any>null;
            this.parentId = _data["parentId"] !== undefined ? _data["parentId"] : <any>null;
            this.isAvailableForSystemUser = _data["isAvailableForSystemUser"] !== undefined ? _data["isAvailableForSystemUser"] : <any>null;
            this.isAvailableForDomainUser = _data["isAvailableForDomainUser"] !== undefined ? _data["isAvailableForDomainUser"] : <any>null;
            this.hasEnableControl = _data["hasEnableControl"] !== undefined ? _data["hasEnableControl"] : <any>null;
            this.hasCreateControl = _data["hasCreateControl"] !== undefined ? _data["hasCreateControl"] : <any>null;
            this.hasReadControl = _data["hasReadControl"] !== undefined ? _data["hasReadControl"] : <any>null;
            this.hasUpdateControl = _data["hasUpdateControl"] !== undefined ? _data["hasUpdateControl"] : <any>null;
            this.hasDeleteControl = _data["hasDeleteControl"] !== undefined ? _data["hasDeleteControl"] : <any>null;
            this.sortIndex = _data["sortIndex"] !== undefined ? _data["sortIndex"] : <any>null;
            if (Array.isArray(_data["groupItems"])) {
                this.groupItems = [] as any;
                for (let item of _data["groupItems"])
                    this.groupItems!.push(EditAssetGroupPublishedItem.fromJS(item));
            }
            else {
                this.groupItems = <any>null;
            }
            this.assetGroupPublishedItemAccessId = _data["assetGroupPublishedItemAccessId"] !== undefined ? _data["assetGroupPublishedItemAccessId"] : <any>null;
            this.isEnabled = _data["isEnabled"] !== undefined ? _data["isEnabled"] : <any>null;
            this.isCreateEnabled = _data["isCreateEnabled"] !== undefined ? _data["isCreateEnabled"] : <any>null;
            this.isReadEnabled = _data["isReadEnabled"] !== undefined ? _data["isReadEnabled"] : <any>null;
            this.isUpdateEnabled = _data["isUpdateEnabled"] !== undefined ? _data["isUpdateEnabled"] : <any>null;
            this.isDeleteEnabled = _data["isDeleteEnabled"] !== undefined ? _data["isDeleteEnabled"] : <any>null;
        }
    }

    static fromJS(data: any): EditAssetGroupPublishedItem {
        data = typeof data === 'object' ? data : {};
        let result = new EditAssetGroupPublishedItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.validationErrors)) {
            data["validationErrors"] = [];
            for (let item of this.validationErrors)
                data["validationErrors"].push(item.toJSON());
        }
        data["applicationUserRoleGroupItemId"] = this.applicationUserRoleGroupItemId !== undefined ? this.applicationUserRoleGroupItemId : <any>null;
        data["permissionType"] = this.permissionType !== undefined ? this.permissionType : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["groupType"] = this.groupType !== undefined ? this.groupType : <any>null;
        data["parentId"] = this.parentId !== undefined ? this.parentId : <any>null;
        data["isAvailableForSystemUser"] = this.isAvailableForSystemUser !== undefined ? this.isAvailableForSystemUser : <any>null;
        data["isAvailableForDomainUser"] = this.isAvailableForDomainUser !== undefined ? this.isAvailableForDomainUser : <any>null;
        data["hasEnableControl"] = this.hasEnableControl !== undefined ? this.hasEnableControl : <any>null;
        data["hasCreateControl"] = this.hasCreateControl !== undefined ? this.hasCreateControl : <any>null;
        data["hasReadControl"] = this.hasReadControl !== undefined ? this.hasReadControl : <any>null;
        data["hasUpdateControl"] = this.hasUpdateControl !== undefined ? this.hasUpdateControl : <any>null;
        data["hasDeleteControl"] = this.hasDeleteControl !== undefined ? this.hasDeleteControl : <any>null;
        data["sortIndex"] = this.sortIndex !== undefined ? this.sortIndex : <any>null;
        if (Array.isArray(this.groupItems)) {
            data["groupItems"] = [];
            for (let item of this.groupItems)
                data["groupItems"].push(item.toJSON());
        }
        data["assetGroupPublishedItemAccessId"] = this.assetGroupPublishedItemAccessId !== undefined ? this.assetGroupPublishedItemAccessId : <any>null;
        data["isEnabled"] = this.isEnabled !== undefined ? this.isEnabled : <any>null;
        data["isCreateEnabled"] = this.isCreateEnabled !== undefined ? this.isCreateEnabled : <any>null;
        data["isReadEnabled"] = this.isReadEnabled !== undefined ? this.isReadEnabled : <any>null;
        data["isUpdateEnabled"] = this.isUpdateEnabled !== undefined ? this.isUpdateEnabled : <any>null;
        data["isDeleteEnabled"] = this.isDeleteEnabled !== undefined ? this.isDeleteEnabled : <any>null;
        return data;
    }
}

export class EditAssetGroup extends EditBase {
    assetGroupId?: string;
    domainId?: string;
    name?: string | null;
    criteria?: string | null;
    isDisplay?: boolean | null;
    assignedUsers?: EditUserAssetGroup[] | null;
    publishedDomains?: EditAssetGroupPublishedDomain[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.assetGroupId = _data["assetGroupId"] !== undefined ? _data["assetGroupId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.criteria = _data["criteria"] !== undefined ? _data["criteria"] : <any>null;
            this.isDisplay = _data["isDisplay"] !== undefined ? _data["isDisplay"] : <any>null;
            if (Array.isArray(_data["assignedUsers"])) {
                this.assignedUsers = [] as any;
                for (let item of _data["assignedUsers"])
                    this.assignedUsers!.push(EditUserAssetGroup.fromJS(item));
            }
            else {
                this.assignedUsers = <any>null;
            }
            if (Array.isArray(_data["publishedDomains"])) {
                this.publishedDomains = [] as any;
                for (let item of _data["publishedDomains"])
                    this.publishedDomains!.push(EditAssetGroupPublishedDomain.fromJS(item));
            }
            else {
                this.publishedDomains = <any>null;
            }
        }
    }

    static fromJS(data: any): EditAssetGroup {
        data = typeof data === 'object' ? data : {};
        let result = new EditAssetGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetGroupId"] = this.assetGroupId !== undefined ? this.assetGroupId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["criteria"] = this.criteria !== undefined ? this.criteria : <any>null;
        data["isDisplay"] = this.isDisplay !== undefined ? this.isDisplay : <any>null;
        if (Array.isArray(this.assignedUsers)) {
            data["assignedUsers"] = [];
            for (let item of this.assignedUsers)
                data["assignedUsers"].push(item.toJSON());
        }
        if (Array.isArray(this.publishedDomains)) {
            data["publishedDomains"] = [];
            for (let item of this.publishedDomains)
                data["publishedDomains"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export class RetrieveAssetGroupEditComponentsByIdRequest extends WcfProxyUserDetails {
    assetGroupId?: string;
    loadEditComponents?: boolean;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.assetGroupId = _data["assetGroupId"] !== undefined ? _data["assetGroupId"] : <any>null;
            this.loadEditComponents = _data["loadEditComponents"] !== undefined ? _data["loadEditComponents"] : <any>null;
        }
    }

    static fromJS(data: any): RetrieveAssetGroupEditComponentsByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveAssetGroupEditComponentsByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetGroupId"] = this.assetGroupId !== undefined ? this.assetGroupId : <any>null;
        data["loadEditComponents"] = this.loadEditComponents !== undefined ? this.loadEditComponents : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveAssetGroupEditComponentsByIdRequest extends RetrieveAssetGroupEditComponentsByIdRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveAssetGroupEditComponentsByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveAssetGroupEditComponentsByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveAssetGroupInfoRecordsByDomainResponse {
    retrieveAssetGroupInfoRecordsByDomainResult?: AssetGroupInfoRecord[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["retrieveAssetGroupInfoRecordsByDomainResult"])) {
                this.retrieveAssetGroupInfoRecordsByDomainResult = [] as any;
                for (let item of _data["retrieveAssetGroupInfoRecordsByDomainResult"])
                    this.retrieveAssetGroupInfoRecordsByDomainResult!.push(AssetGroupInfoRecord.fromJS(item));
            }
            else {
                this.retrieveAssetGroupInfoRecordsByDomainResult = <any>null;
            }
        }
    }

    static fromJS(data: any): RetrieveAssetGroupInfoRecordsByDomainResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveAssetGroupInfoRecordsByDomainResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.retrieveAssetGroupInfoRecordsByDomainResult)) {
            data["retrieveAssetGroupInfoRecordsByDomainResult"] = [];
            for (let item of this.retrieveAssetGroupInfoRecordsByDomainResult)
                data["retrieveAssetGroupInfoRecordsByDomainResult"].push(item.toJSON());
        }
        return data;
    }
}

export class EvolveRetrieveAssetGroupInfoRecordsByDomainResponse extends RetrieveAssetGroupInfoRecordsByDomainResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveAssetGroupInfoRecordsByDomainResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveAssetGroupInfoRecordsByDomainResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class AssetGroupInfoRecord {
    assetGroupId?: string;
    domainId?: string;
    domainName?: string | null;
    name?: string | null;
    criteria?: string | null;
    userCount?: number;
    isDisplay?: boolean | null;

    init(_data?: any) {
        if (_data) {
            this.assetGroupId = _data["assetGroupId"] !== undefined ? _data["assetGroupId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.domainName = _data["domainName"] !== undefined ? _data["domainName"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.criteria = _data["criteria"] !== undefined ? _data["criteria"] : <any>null;
            this.userCount = _data["userCount"] !== undefined ? _data["userCount"] : <any>null;
            this.isDisplay = _data["isDisplay"] !== undefined ? _data["isDisplay"] : <any>null;
        }
    }

    static fromJS(data: any): AssetGroupInfoRecord {
        data = typeof data === 'object' ? data : {};
        let result = new AssetGroupInfoRecord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetGroupId"] = this.assetGroupId !== undefined ? this.assetGroupId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["domainName"] = this.domainName !== undefined ? this.domainName : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["criteria"] = this.criteria !== undefined ? this.criteria : <any>null;
        data["userCount"] = this.userCount !== undefined ? this.userCount : <any>null;
        data["isDisplay"] = this.isDisplay !== undefined ? this.isDisplay : <any>null;
        return data;
    }
}

export class RetrieveAssetGroupInfoRecordsByDomainRequest extends WcfProxyUserDetails {
    domainId?: string;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
        }
    }

    static fromJS(data: any): RetrieveAssetGroupInfoRecordsByDomainRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveAssetGroupInfoRecordsByDomainRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveAssetGroupInfoRecordsByDomainRequest extends RetrieveAssetGroupInfoRecordsByDomainRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveAssetGroupInfoRecordsByDomainRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveAssetGroupInfoRecordsByDomainRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveAssetInfoRecordsByOptionsResponse {
    retrieveAssetInfoRecordsByOptionsResult?: RetrieveAssetInfoListResult | null;

    init(_data?: any) {
        if (_data) {
            this.retrieveAssetInfoRecordsByOptionsResult = _data["retrieveAssetInfoRecordsByOptionsResult"] ? RetrieveAssetInfoListResult.fromJS(_data["retrieveAssetInfoRecordsByOptionsResult"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveAssetInfoRecordsByOptionsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveAssetInfoRecordsByOptionsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["retrieveAssetInfoRecordsByOptionsResult"] = this.retrieveAssetInfoRecordsByOptionsResult ? this.retrieveAssetInfoRecordsByOptionsResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveRetrieveAssetInfoRecordsByOptionsResponse extends RetrieveAssetInfoRecordsByOptionsResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveAssetInfoRecordsByOptionsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveAssetInfoRecordsByOptionsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class BaseListResultOfAssetInfoRecord {
    records?: AssetInfoRecord[] | null;
    totalRecords?: number | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["records"])) {
                this.records = [] as any;
                for (let item of _data["records"])
                    this.records!.push(AssetInfoRecord.fromJS(item));
            }
            else {
                this.records = <any>null;
            }
            this.totalRecords = _data["totalRecords"] !== undefined ? _data["totalRecords"] : <any>null;
        }
    }

    static fromJS(data: any): BaseListResultOfAssetInfoRecord {
        data = typeof data === 'object' ? data : {};
        let result = new BaseListResultOfAssetInfoRecord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.records)) {
            data["records"] = [];
            for (let item of this.records)
                data["records"].push(item.toJSON());
        }
        data["totalRecords"] = this.totalRecords !== undefined ? this.totalRecords : <any>null;
        return data;
    }
}

export class RetrieveAssetInfoListResult extends BaseListResultOfAssetInfoRecord {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): RetrieveAssetInfoListResult {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveAssetInfoListResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class AssetInfoRecord {
    assetId?: string;
    domainId?: string;
    assetDescription?: string | null;
    assetTitle?: string | null;
    customerName?: string | null;
    siteId?: string;
    address1?: string | null;
    address2?: string | null;
    address3?: string | null;
    city?: string | null;
    state?: string | null;
    country?: string | null;
    deviceId?: string | null;
    productName?: string | null;
    dataChannelCount?: number;

    init(_data?: any) {
        if (_data) {
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.assetDescription = _data["assetDescription"] !== undefined ? _data["assetDescription"] : <any>null;
            this.assetTitle = _data["assetTitle"] !== undefined ? _data["assetTitle"] : <any>null;
            this.customerName = _data["customerName"] !== undefined ? _data["customerName"] : <any>null;
            this.siteId = _data["siteId"] !== undefined ? _data["siteId"] : <any>null;
            this.address1 = _data["address1"] !== undefined ? _data["address1"] : <any>null;
            this.address2 = _data["address2"] !== undefined ? _data["address2"] : <any>null;
            this.address3 = _data["address3"] !== undefined ? _data["address3"] : <any>null;
            this.city = _data["city"] !== undefined ? _data["city"] : <any>null;
            this.state = _data["state"] !== undefined ? _data["state"] : <any>null;
            this.country = _data["country"] !== undefined ? _data["country"] : <any>null;
            this.deviceId = _data["deviceId"] !== undefined ? _data["deviceId"] : <any>null;
            this.productName = _data["productName"] !== undefined ? _data["productName"] : <any>null;
            this.dataChannelCount = _data["dataChannelCount"] !== undefined ? _data["dataChannelCount"] : <any>null;
        }
    }

    static fromJS(data: any): AssetInfoRecord {
        data = typeof data === 'object' ? data : {};
        let result = new AssetInfoRecord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["assetDescription"] = this.assetDescription !== undefined ? this.assetDescription : <any>null;
        data["assetTitle"] = this.assetTitle !== undefined ? this.assetTitle : <any>null;
        data["customerName"] = this.customerName !== undefined ? this.customerName : <any>null;
        data["siteId"] = this.siteId !== undefined ? this.siteId : <any>null;
        data["address1"] = this.address1 !== undefined ? this.address1 : <any>null;
        data["address2"] = this.address2 !== undefined ? this.address2 : <any>null;
        data["address3"] = this.address3 !== undefined ? this.address3 : <any>null;
        data["city"] = this.city !== undefined ? this.city : <any>null;
        data["state"] = this.state !== undefined ? this.state : <any>null;
        data["country"] = this.country !== undefined ? this.country : <any>null;
        data["deviceId"] = this.deviceId !== undefined ? this.deviceId : <any>null;
        data["productName"] = this.productName !== undefined ? this.productName : <any>null;
        data["dataChannelCount"] = this.dataChannelCount !== undefined ? this.dataChannelCount : <any>null;
        return data;
    }
}

export class RetrieveAssetInfoRecordsByOptionsRequest extends WcfProxyUserDetails {
    options?: AssetInfoRetrievalOptions | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.options = _data["options"] ? AssetInfoRetrievalOptions.fromJS(_data["options"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveAssetInfoRecordsByOptionsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveAssetInfoRecordsByOptionsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["options"] = this.options ? this.options.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveAssetInfoRecordsByOptionsRequest extends RetrieveAssetInfoRecordsByOptionsRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveAssetInfoRecordsByOptionsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveAssetInfoRecordsByOptionsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class AssetInfoRetrievalOptions extends BaseRetrievalOptions {
    filterBy?: AssetListFilterOptions;
    groupBy?: AssetListGroupingOptions;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.filterBy = _data["filterBy"] !== undefined ? _data["filterBy"] : <any>null;
            this.groupBy = _data["groupBy"] !== undefined ? _data["groupBy"] : <any>null;
        }
    }

    static fromJS(data: any): AssetInfoRetrievalOptions {
        data = typeof data === 'object' ? data : {};
        let result = new AssetInfoRetrievalOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["filterBy"] = this.filterBy !== undefined ? this.filterBy : <any>null;
        data["groupBy"] = this.groupBy !== undefined ? this.groupBy : <any>null;
        super.toJSON(data);
        return data;
    }
}

export enum AssetListGroupingOptions {
    Asset = 0,
    CustomerName = 1,
    None = 2,
}

export class RetrieveAssetSummaryFromAssetGroupLoadByOptionsResponse {
    retrieveAssetSummaryFromAssetGroupLoadByOptionsResult?: RetrieveAssetSummaryListResult | null;

    init(_data?: any) {
        if (_data) {
            this.retrieveAssetSummaryFromAssetGroupLoadByOptionsResult = _data["retrieveAssetSummaryFromAssetGroupLoadByOptionsResult"] ? RetrieveAssetSummaryListResult.fromJS(_data["retrieveAssetSummaryFromAssetGroupLoadByOptionsResult"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveAssetSummaryFromAssetGroupLoadByOptionsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveAssetSummaryFromAssetGroupLoadByOptionsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["retrieveAssetSummaryFromAssetGroupLoadByOptionsResult"] = this.retrieveAssetSummaryFromAssetGroupLoadByOptionsResult ? this.retrieveAssetSummaryFromAssetGroupLoadByOptionsResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveRetrieveAssetSummaryFromAssetGroupLoadByOptionsResponse extends RetrieveAssetSummaryFromAssetGroupLoadByOptionsResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveAssetSummaryFromAssetGroupLoadByOptionsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveAssetSummaryFromAssetGroupLoadByOptionsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class BaseListResultOfAssetSummaryRecord {
    records?: AssetSummaryRecord[] | null;
    totalRecords?: number | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["records"])) {
                this.records = [] as any;
                for (let item of _data["records"])
                    this.records!.push(AssetSummaryRecord.fromJS(item));
            }
            else {
                this.records = <any>null;
            }
            this.totalRecords = _data["totalRecords"] !== undefined ? _data["totalRecords"] : <any>null;
        }
    }

    static fromJS(data: any): BaseListResultOfAssetSummaryRecord {
        data = typeof data === 'object' ? data : {};
        let result = new BaseListResultOfAssetSummaryRecord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.records)) {
            data["records"] = [];
            for (let item of this.records)
                data["records"].push(item.toJSON());
        }
        data["totalRecords"] = this.totalRecords !== undefined ? this.totalRecords : <any>null;
        return data;
    }
}

export class RetrieveAssetSummaryListResult extends BaseListResultOfAssetSummaryRecord {
    dataChannelTypes?: DataChannelType[] | null;
    inventoryStates?: string[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["dataChannelTypes"])) {
                this.dataChannelTypes = [] as any;
                for (let item of _data["dataChannelTypes"])
                    this.dataChannelTypes!.push(item);
            }
            else {
                this.dataChannelTypes = <any>null;
            }
            if (Array.isArray(_data["inventoryStates"])) {
                this.inventoryStates = [] as any;
                for (let item of _data["inventoryStates"])
                    this.inventoryStates!.push(item);
            }
            else {
                this.inventoryStates = <any>null;
            }
        }
    }

    static fromJS(data: any): RetrieveAssetSummaryListResult {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveAssetSummaryListResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dataChannelTypes)) {
            data["dataChannelTypes"] = [];
            for (let item of this.dataChannelTypes)
                data["dataChannelTypes"].push(item);
        }
        if (Array.isArray(this.inventoryStates)) {
            data["inventoryStates"] = [];
            for (let item of this.inventoryStates)
                data["inventoryStates"].push(item);
        }
        super.toJSON(data);
        return data;
    }
}

export class AssetSummaryRecord {
    groupBy?: any | null;
    assetId?: string;
    assetDescription?: string | null;
    assetTitle?: string | null;
    assetType?: AssetType;
    customerName?: string | null;
    assetShipTo?: string | null;
    streetAddress?: string | null;
    city?: string | null;
    state?: string | null;
    country?: string | null;
    dataChannelId?: string;
    dataChannelDescription?: string | null;
    dataChannelType?: DataChannelType;
    dataChannelShipTo?: string | null;
    displayPriority?: number;
    siteTimeZoneId?: number | null;
    readingTime?: Date | null;
    displayUnits?: UnitType | null;
    displayUnitsAsText?: string | null;
    readingValue?: number | null;
    readingValue2?: number | null;
    digitalDisplayValue?: string | null;
    productId?: string | null;
    productName?: string | null;
    productDescription?: string | null;
    eventStatus?: string | null;
    hasMissingData?: boolean;
    eventInventoryStatus?: EventInventoryStatusType | null;
    inventoryState?: string | null;
    eventImportanceLevel?: EventImportanceLevelType | null;
    eventImportanceLevelReverse?: number | null;
    reorderLevel?: number | null;
    criticalLevel?: number | null;
    emptyLevel?: number | null;
    eventLevels?: AssetSummaryEventLevelInfo[] | null;
    scheduledRefill?: Date | null;
    ftpEnabled?: boolean | null;
    ftpDomain1?: string | null;
    ftpDomain2?: string | null;
    ftpId1?: string | null;
    ftpId2?: string | null;
    rtuDeviceId?: string | null;
    channelNumber?: string | null;
    rtuType?: RTUType | null;
    field1?: string | null;
    field2?: string | null;
    field3?: string | null;
    field4?: string | null;
    field5?: string | null;
    field6?: string | null;
    field7?: string | null;
    field8?: string | null;
    field9?: string | null;
    field10?: string | null;
    installedTechName?: string | null;
    scaledUnits?: UnitType | null;
    scaledUnitsAsText?: string | null;
    isVolumetric?: boolean;
    scaledMin?: number;
    scaledMax?: number;
    scaledMaxProductHeight?: number;
    maxProductHeight?: number | null;
    productSpecificGravity?: number | null;
    standardVolumePerCubicMeter?: number | null;
    tankType?: TankType | null;
    useStrappingChartForConversion?: boolean;
    strappingLevelUnits?: UnitType | null;
    strappingVolumeUnits?: UnitType | null;
    tankDiameterInMeters?: number | null;
    tankLengthInMeters?: number | null;
    tankDishHeightInMeters?: number | null;
    tankHeightInMeters?: number | null;
    tankWidthInMeters?: number | null;
    strappingChartInfo?: StrappingChartInfo[] | null;
    domainId?: string;
    domainName?: string | null;
    timeZoneDisplayName?: string | null;
    levelEventSortOrderIndex?: number | null;
    percentFull?: number | null;
    forecastData?: string | null;
    forecastEstimate?: number;
    maxProductHeightInDisplayUnits?: number | null;

    init(_data?: any) {
        if (_data) {
            this.groupBy = _data["groupBy"] !== undefined ? _data["groupBy"] : <any>null;
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.assetDescription = _data["assetDescription"] !== undefined ? _data["assetDescription"] : <any>null;
            this.assetTitle = _data["assetTitle"] !== undefined ? _data["assetTitle"] : <any>null;
            this.assetType = _data["assetType"] !== undefined ? _data["assetType"] : <any>null;
            this.customerName = _data["customerName"] !== undefined ? _data["customerName"] : <any>null;
            this.assetShipTo = _data["assetShipTo"] !== undefined ? _data["assetShipTo"] : <any>null;
            this.streetAddress = _data["streetAddress"] !== undefined ? _data["streetAddress"] : <any>null;
            this.city = _data["city"] !== undefined ? _data["city"] : <any>null;
            this.state = _data["state"] !== undefined ? _data["state"] : <any>null;
            this.country = _data["country"] !== undefined ? _data["country"] : <any>null;
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.dataChannelDescription = _data["dataChannelDescription"] !== undefined ? _data["dataChannelDescription"] : <any>null;
            this.dataChannelType = _data["dataChannelType"] !== undefined ? _data["dataChannelType"] : <any>null;
            this.dataChannelShipTo = _data["dataChannelShipTo"] !== undefined ? _data["dataChannelShipTo"] : <any>null;
            this.displayPriority = _data["displayPriority"] !== undefined ? _data["displayPriority"] : <any>null;
            this.siteTimeZoneId = _data["siteTimeZoneId"] !== undefined ? _data["siteTimeZoneId"] : <any>null;
            this.readingTime = _data["readingTime"] ? new Date(_data["readingTime"].toString()) : <any>null;
            this.displayUnits = _data["displayUnits"] !== undefined ? _data["displayUnits"] : <any>null;
            this.displayUnitsAsText = _data["displayUnitsAsText"] !== undefined ? _data["displayUnitsAsText"] : <any>null;
            this.readingValue = _data["readingValue"] !== undefined ? _data["readingValue"] : <any>null;
            this.readingValue2 = _data["readingValue2"] !== undefined ? _data["readingValue2"] : <any>null;
            this.digitalDisplayValue = _data["digitalDisplayValue"] !== undefined ? _data["digitalDisplayValue"] : <any>null;
            this.productId = _data["productId"] !== undefined ? _data["productId"] : <any>null;
            this.productName = _data["productName"] !== undefined ? _data["productName"] : <any>null;
            this.productDescription = _data["productDescription"] !== undefined ? _data["productDescription"] : <any>null;
            this.eventStatus = _data["eventStatus"] !== undefined ? _data["eventStatus"] : <any>null;
            this.hasMissingData = _data["hasMissingData"] !== undefined ? _data["hasMissingData"] : <any>null;
            this.eventInventoryStatus = _data["eventInventoryStatus"] !== undefined ? _data["eventInventoryStatus"] : <any>null;
            this.inventoryState = _data["inventoryState"] !== undefined ? _data["inventoryState"] : <any>null;
            this.eventImportanceLevel = _data["eventImportanceLevel"] !== undefined ? _data["eventImportanceLevel"] : <any>null;
            this.eventImportanceLevelReverse = _data["eventImportanceLevelReverse"] !== undefined ? _data["eventImportanceLevelReverse"] : <any>null;
            this.reorderLevel = _data["reorderLevel"] !== undefined ? _data["reorderLevel"] : <any>null;
            this.criticalLevel = _data["criticalLevel"] !== undefined ? _data["criticalLevel"] : <any>null;
            this.emptyLevel = _data["emptyLevel"] !== undefined ? _data["emptyLevel"] : <any>null;
            if (Array.isArray(_data["eventLevels"])) {
                this.eventLevels = [] as any;
                for (let item of _data["eventLevels"])
                    this.eventLevels!.push(AssetSummaryEventLevelInfo.fromJS(item));
            }
            else {
                this.eventLevels = <any>null;
            }
            this.scheduledRefill = _data["scheduledRefill"] ? new Date(_data["scheduledRefill"].toString()) : <any>null;
            this.ftpEnabled = _data["ftpEnabled"] !== undefined ? _data["ftpEnabled"] : <any>null;
            this.ftpDomain1 = _data["ftpDomain1"] !== undefined ? _data["ftpDomain1"] : <any>null;
            this.ftpDomain2 = _data["ftpDomain2"] !== undefined ? _data["ftpDomain2"] : <any>null;
            this.ftpId1 = _data["ftpId1"] !== undefined ? _data["ftpId1"] : <any>null;
            this.ftpId2 = _data["ftpId2"] !== undefined ? _data["ftpId2"] : <any>null;
            this.rtuDeviceId = _data["rtuDeviceId"] !== undefined ? _data["rtuDeviceId"] : <any>null;
            this.channelNumber = _data["channelNumber"] !== undefined ? _data["channelNumber"] : <any>null;
            this.rtuType = _data["rtuType"] !== undefined ? _data["rtuType"] : <any>null;
            this.field1 = _data["field1"] !== undefined ? _data["field1"] : <any>null;
            this.field2 = _data["field2"] !== undefined ? _data["field2"] : <any>null;
            this.field3 = _data["field3"] !== undefined ? _data["field3"] : <any>null;
            this.field4 = _data["field4"] !== undefined ? _data["field4"] : <any>null;
            this.field5 = _data["field5"] !== undefined ? _data["field5"] : <any>null;
            this.field6 = _data["field6"] !== undefined ? _data["field6"] : <any>null;
            this.field7 = _data["field7"] !== undefined ? _data["field7"] : <any>null;
            this.field8 = _data["field8"] !== undefined ? _data["field8"] : <any>null;
            this.field9 = _data["field9"] !== undefined ? _data["field9"] : <any>null;
            this.field10 = _data["field10"] !== undefined ? _data["field10"] : <any>null;
            this.installedTechName = _data["installedTechName"] !== undefined ? _data["installedTechName"] : <any>null;
            this.scaledUnits = _data["scaledUnits"] !== undefined ? _data["scaledUnits"] : <any>null;
            this.scaledUnitsAsText = _data["scaledUnitsAsText"] !== undefined ? _data["scaledUnitsAsText"] : <any>null;
            this.isVolumetric = _data["isVolumetric"] !== undefined ? _data["isVolumetric"] : <any>null;
            this.scaledMin = _data["scaledMin"] !== undefined ? _data["scaledMin"] : <any>null;
            this.scaledMax = _data["scaledMax"] !== undefined ? _data["scaledMax"] : <any>null;
            this.scaledMaxProductHeight = _data["scaledMaxProductHeight"] !== undefined ? _data["scaledMaxProductHeight"] : <any>null;
            this.maxProductHeight = _data["maxProductHeight"] !== undefined ? _data["maxProductHeight"] : <any>null;
            this.productSpecificGravity = _data["productSpecificGravity"] !== undefined ? _data["productSpecificGravity"] : <any>null;
            this.standardVolumePerCubicMeter = _data["standardVolumePerCubicMeter"] !== undefined ? _data["standardVolumePerCubicMeter"] : <any>null;
            this.tankType = _data["tankType"] !== undefined ? _data["tankType"] : <any>null;
            this.useStrappingChartForConversion = _data["useStrappingChartForConversion"] !== undefined ? _data["useStrappingChartForConversion"] : <any>null;
            this.strappingLevelUnits = _data["strappingLevelUnits"] !== undefined ? _data["strappingLevelUnits"] : <any>null;
            this.strappingVolumeUnits = _data["strappingVolumeUnits"] !== undefined ? _data["strappingVolumeUnits"] : <any>null;
            this.tankDiameterInMeters = _data["tankDiameterInMeters"] !== undefined ? _data["tankDiameterInMeters"] : <any>null;
            this.tankLengthInMeters = _data["tankLengthInMeters"] !== undefined ? _data["tankLengthInMeters"] : <any>null;
            this.tankDishHeightInMeters = _data["tankDishHeightInMeters"] !== undefined ? _data["tankDishHeightInMeters"] : <any>null;
            this.tankHeightInMeters = _data["tankHeightInMeters"] !== undefined ? _data["tankHeightInMeters"] : <any>null;
            this.tankWidthInMeters = _data["tankWidthInMeters"] !== undefined ? _data["tankWidthInMeters"] : <any>null;
            if (Array.isArray(_data["strappingChartInfo"])) {
                this.strappingChartInfo = [] as any;
                for (let item of _data["strappingChartInfo"])
                    this.strappingChartInfo!.push(StrappingChartInfo.fromJS(item));
            }
            else {
                this.strappingChartInfo = <any>null;
            }
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.domainName = _data["domainName"] !== undefined ? _data["domainName"] : <any>null;
            this.timeZoneDisplayName = _data["timeZoneDisplayName"] !== undefined ? _data["timeZoneDisplayName"] : <any>null;
            this.levelEventSortOrderIndex = _data["levelEventSortOrderIndex"] !== undefined ? _data["levelEventSortOrderIndex"] : <any>null;
            this.percentFull = _data["percentFull"] !== undefined ? _data["percentFull"] : <any>null;
            this.forecastData = _data["forecastData"] !== undefined ? _data["forecastData"] : <any>null;
            this.forecastEstimate = _data["forecastEstimate"] !== undefined ? _data["forecastEstimate"] : <any>null;
            this.maxProductHeightInDisplayUnits = _data["maxProductHeightInDisplayUnits"] !== undefined ? _data["maxProductHeightInDisplayUnits"] : <any>null;
        }
    }

    static fromJS(data: any): AssetSummaryRecord {
        data = typeof data === 'object' ? data : {};
        let result = new AssetSummaryRecord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["groupBy"] = this.groupBy !== undefined ? this.groupBy : <any>null;
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["assetDescription"] = this.assetDescription !== undefined ? this.assetDescription : <any>null;
        data["assetTitle"] = this.assetTitle !== undefined ? this.assetTitle : <any>null;
        data["assetType"] = this.assetType !== undefined ? this.assetType : <any>null;
        data["customerName"] = this.customerName !== undefined ? this.customerName : <any>null;
        data["assetShipTo"] = this.assetShipTo !== undefined ? this.assetShipTo : <any>null;
        data["streetAddress"] = this.streetAddress !== undefined ? this.streetAddress : <any>null;
        data["city"] = this.city !== undefined ? this.city : <any>null;
        data["state"] = this.state !== undefined ? this.state : <any>null;
        data["country"] = this.country !== undefined ? this.country : <any>null;
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["dataChannelDescription"] = this.dataChannelDescription !== undefined ? this.dataChannelDescription : <any>null;
        data["dataChannelType"] = this.dataChannelType !== undefined ? this.dataChannelType : <any>null;
        data["dataChannelShipTo"] = this.dataChannelShipTo !== undefined ? this.dataChannelShipTo : <any>null;
        data["displayPriority"] = this.displayPriority !== undefined ? this.displayPriority : <any>null;
        data["siteTimeZoneId"] = this.siteTimeZoneId !== undefined ? this.siteTimeZoneId : <any>null;
        data["readingTime"] = this.readingTime ? this.readingTime.toISOString() : <any>null;
        data["displayUnits"] = this.displayUnits !== undefined ? this.displayUnits : <any>null;
        data["displayUnitsAsText"] = this.displayUnitsAsText !== undefined ? this.displayUnitsAsText : <any>null;
        data["readingValue"] = this.readingValue !== undefined ? this.readingValue : <any>null;
        data["readingValue2"] = this.readingValue2 !== undefined ? this.readingValue2 : <any>null;
        data["digitalDisplayValue"] = this.digitalDisplayValue !== undefined ? this.digitalDisplayValue : <any>null;
        data["productId"] = this.productId !== undefined ? this.productId : <any>null;
        data["productName"] = this.productName !== undefined ? this.productName : <any>null;
        data["productDescription"] = this.productDescription !== undefined ? this.productDescription : <any>null;
        data["eventStatus"] = this.eventStatus !== undefined ? this.eventStatus : <any>null;
        data["hasMissingData"] = this.hasMissingData !== undefined ? this.hasMissingData : <any>null;
        data["eventInventoryStatus"] = this.eventInventoryStatus !== undefined ? this.eventInventoryStatus : <any>null;
        data["inventoryState"] = this.inventoryState !== undefined ? this.inventoryState : <any>null;
        data["eventImportanceLevel"] = this.eventImportanceLevel !== undefined ? this.eventImportanceLevel : <any>null;
        data["eventImportanceLevelReverse"] = this.eventImportanceLevelReverse !== undefined ? this.eventImportanceLevelReverse : <any>null;
        data["reorderLevel"] = this.reorderLevel !== undefined ? this.reorderLevel : <any>null;
        data["criticalLevel"] = this.criticalLevel !== undefined ? this.criticalLevel : <any>null;
        data["emptyLevel"] = this.emptyLevel !== undefined ? this.emptyLevel : <any>null;
        if (Array.isArray(this.eventLevels)) {
            data["eventLevels"] = [];
            for (let item of this.eventLevels)
                data["eventLevels"].push(item.toJSON());
        }
        data["scheduledRefill"] = this.scheduledRefill ? this.scheduledRefill.toISOString() : <any>null;
        data["ftpEnabled"] = this.ftpEnabled !== undefined ? this.ftpEnabled : <any>null;
        data["ftpDomain1"] = this.ftpDomain1 !== undefined ? this.ftpDomain1 : <any>null;
        data["ftpDomain2"] = this.ftpDomain2 !== undefined ? this.ftpDomain2 : <any>null;
        data["ftpId1"] = this.ftpId1 !== undefined ? this.ftpId1 : <any>null;
        data["ftpId2"] = this.ftpId2 !== undefined ? this.ftpId2 : <any>null;
        data["rtuDeviceId"] = this.rtuDeviceId !== undefined ? this.rtuDeviceId : <any>null;
        data["channelNumber"] = this.channelNumber !== undefined ? this.channelNumber : <any>null;
        data["rtuType"] = this.rtuType !== undefined ? this.rtuType : <any>null;
        data["field1"] = this.field1 !== undefined ? this.field1 : <any>null;
        data["field2"] = this.field2 !== undefined ? this.field2 : <any>null;
        data["field3"] = this.field3 !== undefined ? this.field3 : <any>null;
        data["field4"] = this.field4 !== undefined ? this.field4 : <any>null;
        data["field5"] = this.field5 !== undefined ? this.field5 : <any>null;
        data["field6"] = this.field6 !== undefined ? this.field6 : <any>null;
        data["field7"] = this.field7 !== undefined ? this.field7 : <any>null;
        data["field8"] = this.field8 !== undefined ? this.field8 : <any>null;
        data["field9"] = this.field9 !== undefined ? this.field9 : <any>null;
        data["field10"] = this.field10 !== undefined ? this.field10 : <any>null;
        data["installedTechName"] = this.installedTechName !== undefined ? this.installedTechName : <any>null;
        data["scaledUnits"] = this.scaledUnits !== undefined ? this.scaledUnits : <any>null;
        data["scaledUnitsAsText"] = this.scaledUnitsAsText !== undefined ? this.scaledUnitsAsText : <any>null;
        data["isVolumetric"] = this.isVolumetric !== undefined ? this.isVolumetric : <any>null;
        data["scaledMin"] = this.scaledMin !== undefined ? this.scaledMin : <any>null;
        data["scaledMax"] = this.scaledMax !== undefined ? this.scaledMax : <any>null;
        data["scaledMaxProductHeight"] = this.scaledMaxProductHeight !== undefined ? this.scaledMaxProductHeight : <any>null;
        data["maxProductHeight"] = this.maxProductHeight !== undefined ? this.maxProductHeight : <any>null;
        data["productSpecificGravity"] = this.productSpecificGravity !== undefined ? this.productSpecificGravity : <any>null;
        data["standardVolumePerCubicMeter"] = this.standardVolumePerCubicMeter !== undefined ? this.standardVolumePerCubicMeter : <any>null;
        data["tankType"] = this.tankType !== undefined ? this.tankType : <any>null;
        data["useStrappingChartForConversion"] = this.useStrappingChartForConversion !== undefined ? this.useStrappingChartForConversion : <any>null;
        data["strappingLevelUnits"] = this.strappingLevelUnits !== undefined ? this.strappingLevelUnits : <any>null;
        data["strappingVolumeUnits"] = this.strappingVolumeUnits !== undefined ? this.strappingVolumeUnits : <any>null;
        data["tankDiameterInMeters"] = this.tankDiameterInMeters !== undefined ? this.tankDiameterInMeters : <any>null;
        data["tankLengthInMeters"] = this.tankLengthInMeters !== undefined ? this.tankLengthInMeters : <any>null;
        data["tankDishHeightInMeters"] = this.tankDishHeightInMeters !== undefined ? this.tankDishHeightInMeters : <any>null;
        data["tankHeightInMeters"] = this.tankHeightInMeters !== undefined ? this.tankHeightInMeters : <any>null;
        data["tankWidthInMeters"] = this.tankWidthInMeters !== undefined ? this.tankWidthInMeters : <any>null;
        if (Array.isArray(this.strappingChartInfo)) {
            data["strappingChartInfo"] = [];
            for (let item of this.strappingChartInfo)
                data["strappingChartInfo"].push(item.toJSON());
        }
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["domainName"] = this.domainName !== undefined ? this.domainName : <any>null;
        data["timeZoneDisplayName"] = this.timeZoneDisplayName !== undefined ? this.timeZoneDisplayName : <any>null;
        data["levelEventSortOrderIndex"] = this.levelEventSortOrderIndex !== undefined ? this.levelEventSortOrderIndex : <any>null;
        data["percentFull"] = this.percentFull !== undefined ? this.percentFull : <any>null;
        data["forecastData"] = this.forecastData !== undefined ? this.forecastData : <any>null;
        data["forecastEstimate"] = this.forecastEstimate !== undefined ? this.forecastEstimate : <any>null;
        data["maxProductHeightInDisplayUnits"] = this.maxProductHeightInDisplayUnits !== undefined ? this.maxProductHeightInDisplayUnits : <any>null;
        return data;
    }
}

export class AssetSummaryEventLevelInfo {
    dataChannelId?: string;
    abbreviation?: string | null;
    levelValue?: number | null;

    init(_data?: any) {
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.abbreviation = _data["abbreviation"] !== undefined ? _data["abbreviation"] : <any>null;
            this.levelValue = _data["levelValue"] !== undefined ? _data["levelValue"] : <any>null;
        }
    }

    static fromJS(data: any): AssetSummaryEventLevelInfo {
        data = typeof data === 'object' ? data : {};
        let result = new AssetSummaryEventLevelInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["abbreviation"] = this.abbreviation !== undefined ? this.abbreviation : <any>null;
        data["levelValue"] = this.levelValue !== undefined ? this.levelValue : <any>null;
        return data;
    }
}

export class RetrieveAssetSummaryFromAssetGroupLoadByOptionsRequest extends WcfProxyUserDetails {
    options?: AssetGroupLoadAssetSummaryOptions | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.options = _data["options"] ? AssetGroupLoadAssetSummaryOptions.fromJS(_data["options"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveAssetSummaryFromAssetGroupLoadByOptionsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveAssetSummaryFromAssetGroupLoadByOptionsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["options"] = this.options ? this.options.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveAssetSummaryFromAssetGroupLoadByOptionsRequest extends RetrieveAssetSummaryFromAssetGroupLoadByOptionsRequest {
    assetGroupSearchCriteria?: AssetGroupSearchCriteria | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.assetGroupSearchCriteria = _data["assetGroupSearchCriteria"] ? AssetGroupSearchCriteria.fromJS(_data["assetGroupSearchCriteria"]) : <any>null;
        }
    }

    static fromJS(data: any): EvolveRetrieveAssetSummaryFromAssetGroupLoadByOptionsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveAssetSummaryFromAssetGroupLoadByOptionsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetGroupSearchCriteria"] = this.assetGroupSearchCriteria ? this.assetGroupSearchCriteria.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class AssetGroupLoadAssetSummaryOptions extends BaseRetrievalOptions {
    filterBy?: AssetListFilterOptions;
    groupBy?: AssetSummaryGroupingOptions;
    areDataChannelTypesRequired?: boolean;
    showDataChannelTypes?: DataChannelType[] | null;
    assetSearchExpression?: string | null;
    groupBySortDirection?: ListSortDirection;
    groupBySortDirectionAsText?: string | null;
    searchCriteria?: string | null;
    assetGroupDomainId?: string;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.filterBy = _data["filterBy"] !== undefined ? _data["filterBy"] : <any>null;
            this.groupBy = _data["groupBy"] !== undefined ? _data["groupBy"] : <any>null;
            this.areDataChannelTypesRequired = _data["areDataChannelTypesRequired"] !== undefined ? _data["areDataChannelTypesRequired"] : <any>null;
            if (Array.isArray(_data["showDataChannelTypes"])) {
                this.showDataChannelTypes = [] as any;
                for (let item of _data["showDataChannelTypes"])
                    this.showDataChannelTypes!.push(item);
            }
            else {
                this.showDataChannelTypes = <any>null;
            }
            this.assetSearchExpression = _data["assetSearchExpression"] !== undefined ? _data["assetSearchExpression"] : <any>null;
            this.groupBySortDirection = _data["groupBySortDirection"] !== undefined ? _data["groupBySortDirection"] : <any>null;
            this.groupBySortDirectionAsText = _data["groupBySortDirectionAsText"] !== undefined ? _data["groupBySortDirectionAsText"] : <any>null;
            this.searchCriteria = _data["searchCriteria"] !== undefined ? _data["searchCriteria"] : <any>null;
            this.assetGroupDomainId = _data["assetGroupDomainId"] !== undefined ? _data["assetGroupDomainId"] : <any>null;
        }
    }

    static fromJS(data: any): AssetGroupLoadAssetSummaryOptions {
        data = typeof data === 'object' ? data : {};
        let result = new AssetGroupLoadAssetSummaryOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["filterBy"] = this.filterBy !== undefined ? this.filterBy : <any>null;
        data["groupBy"] = this.groupBy !== undefined ? this.groupBy : <any>null;
        data["areDataChannelTypesRequired"] = this.areDataChannelTypesRequired !== undefined ? this.areDataChannelTypesRequired : <any>null;
        if (Array.isArray(this.showDataChannelTypes)) {
            data["showDataChannelTypes"] = [];
            for (let item of this.showDataChannelTypes)
                data["showDataChannelTypes"].push(item);
        }
        data["assetSearchExpression"] = this.assetSearchExpression !== undefined ? this.assetSearchExpression : <any>null;
        data["groupBySortDirection"] = this.groupBySortDirection !== undefined ? this.groupBySortDirection : <any>null;
        data["groupBySortDirectionAsText"] = this.groupBySortDirectionAsText !== undefined ? this.groupBySortDirectionAsText : <any>null;
        data["searchCriteria"] = this.searchCriteria !== undefined ? this.searchCriteria : <any>null;
        data["assetGroupDomainId"] = this.assetGroupDomainId !== undefined ? this.assetGroupDomainId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class RetrieveAssetTreeInfoRecordsByDomainResponse {
    retrieveAssetTreeInfoRecordsByDomainResult?: AssetTreeInfoRecord[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["retrieveAssetTreeInfoRecordsByDomainResult"])) {
                this.retrieveAssetTreeInfoRecordsByDomainResult = [] as any;
                for (let item of _data["retrieveAssetTreeInfoRecordsByDomainResult"])
                    this.retrieveAssetTreeInfoRecordsByDomainResult!.push(AssetTreeInfoRecord.fromJS(item));
            }
            else {
                this.retrieveAssetTreeInfoRecordsByDomainResult = <any>null;
            }
        }
    }

    static fromJS(data: any): RetrieveAssetTreeInfoRecordsByDomainResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveAssetTreeInfoRecordsByDomainResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.retrieveAssetTreeInfoRecordsByDomainResult)) {
            data["retrieveAssetTreeInfoRecordsByDomainResult"] = [];
            for (let item of this.retrieveAssetTreeInfoRecordsByDomainResult)
                data["retrieveAssetTreeInfoRecordsByDomainResult"].push(item.toJSON());
        }
        return data;
    }
}

export class EvolveRetrieveAssetTreeInfoRecordsByDomainResponse extends RetrieveAssetTreeInfoRecordsByDomainResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveAssetTreeInfoRecordsByDomainResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveAssetTreeInfoRecordsByDomainResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class AssetTreeInfoRecord {
    assetTreeId?: string;
    name?: string | null;
    expression?: string | null;

    init(_data?: any) {
        if (_data) {
            this.assetTreeId = _data["assetTreeId"] !== undefined ? _data["assetTreeId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.expression = _data["expression"] !== undefined ? _data["expression"] : <any>null;
        }
    }

    static fromJS(data: any): AssetTreeInfoRecord {
        data = typeof data === 'object' ? data : {};
        let result = new AssetTreeInfoRecord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetTreeId"] = this.assetTreeId !== undefined ? this.assetTreeId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["expression"] = this.expression !== undefined ? this.expression : <any>null;
        return data;
    }
}

export class RetrieveAssetTreeInfoRecordsByDomainRequest extends WcfProxyUserDetails {
    domainId?: string;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
        }
    }

    static fromJS(data: any): RetrieveAssetTreeInfoRecordsByDomainRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveAssetTreeInfoRecordsByDomainRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveAssetTreeInfoRecordsByDomainRequest extends RetrieveAssetTreeInfoRecordsByDomainRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveAssetTreeInfoRecordsByDomainRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveAssetTreeInfoRecordsByDomainRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveTransferAssetProcessInfoByOptionsResponse {
    retrieveTransferAssetProcessInfoByOptionsResult?: RetrieveTransferAssetComponentsResult | null;

    init(_data?: any) {
        if (_data) {
            this.retrieveTransferAssetProcessInfoByOptionsResult = _data["retrieveTransferAssetProcessInfoByOptionsResult"] ? RetrieveTransferAssetComponentsResult.fromJS(_data["retrieveTransferAssetProcessInfoByOptionsResult"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveTransferAssetProcessInfoByOptionsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveTransferAssetProcessInfoByOptionsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["retrieveTransferAssetProcessInfoByOptionsResult"] = this.retrieveTransferAssetProcessInfoByOptionsResult ? this.retrieveTransferAssetProcessInfoByOptionsResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveRetrieveTransferAssetProcessInfoByOptionsResponse extends RetrieveTransferAssetProcessInfoByOptionsResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveTransferAssetProcessInfoByOptionsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveTransferAssetProcessInfoByOptionsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class BaseEditComponentsResultOfTransferAssetProcessInfo {
    editObject?: TransferAssetProcessInfo | null;
    areEditComponentsLoaded?: boolean;

    init(_data?: any) {
        if (_data) {
            this.editObject = _data["editObject"] ? TransferAssetProcessInfo.fromJS(_data["editObject"]) : <any>null;
            this.areEditComponentsLoaded = _data["areEditComponentsLoaded"] !== undefined ? _data["areEditComponentsLoaded"] : <any>null;
        }
    }

    static fromJS(data: any): BaseEditComponentsResultOfTransferAssetProcessInfo {
        data = typeof data === 'object' ? data : {};
        let result = new BaseEditComponentsResultOfTransferAssetProcessInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["editObject"] = this.editObject ? this.editObject.toJSON() : <any>null;
        data["areEditComponentsLoaded"] = this.areEditComponentsLoaded !== undefined ? this.areEditComponentsLoaded : <any>null;
        return data;
    }
}

export class RetrieveTransferAssetComponentsResult extends BaseEditComponentsResultOfTransferAssetProcessInfo {
    hasComplexNestedAssets?: boolean;
    assets?: TransferAssetInfo[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.hasComplexNestedAssets = _data["hasComplexNestedAssets"] !== undefined ? _data["hasComplexNestedAssets"] : <any>null;
            if (Array.isArray(_data["assets"])) {
                this.assets = [] as any;
                for (let item of _data["assets"])
                    this.assets!.push(TransferAssetInfo.fromJS(item));
            }
            else {
                this.assets = <any>null;
            }
        }
    }

    static fromJS(data: any): RetrieveTransferAssetComponentsResult {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveTransferAssetComponentsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hasComplexNestedAssets"] = this.hasComplexNestedAssets !== undefined ? this.hasComplexNestedAssets : <any>null;
        if (Array.isArray(this.assets)) {
            data["assets"] = [];
            for (let item of this.assets)
                data["assets"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export class TransferAssetInfo {
    isOriginalSelected?: boolean;
    assetId?: string;
    assetTitle?: string | null;
    dataChannels?: TransferAssetDataChannelInfo[] | null;
    siteId?: string;
    siteName?: string | null;
    siteAddress?: string | null;
    eventRuleGroupId?: number | null;
    eventRuleGroupName?: string | null;

    init(_data?: any) {
        if (_data) {
            this.isOriginalSelected = _data["isOriginalSelected"] !== undefined ? _data["isOriginalSelected"] : <any>null;
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.assetTitle = _data["assetTitle"] !== undefined ? _data["assetTitle"] : <any>null;
            if (Array.isArray(_data["dataChannels"])) {
                this.dataChannels = [] as any;
                for (let item of _data["dataChannels"])
                    this.dataChannels!.push(TransferAssetDataChannelInfo.fromJS(item));
            }
            else {
                this.dataChannels = <any>null;
            }
            this.siteId = _data["siteId"] !== undefined ? _data["siteId"] : <any>null;
            this.siteName = _data["siteName"] !== undefined ? _data["siteName"] : <any>null;
            this.siteAddress = _data["siteAddress"] !== undefined ? _data["siteAddress"] : <any>null;
            this.eventRuleGroupId = _data["eventRuleGroupId"] !== undefined ? _data["eventRuleGroupId"] : <any>null;
            this.eventRuleGroupName = _data["eventRuleGroupName"] !== undefined ? _data["eventRuleGroupName"] : <any>null;
        }
    }

    static fromJS(data: any): TransferAssetInfo {
        data = typeof data === 'object' ? data : {};
        let result = new TransferAssetInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isOriginalSelected"] = this.isOriginalSelected !== undefined ? this.isOriginalSelected : <any>null;
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["assetTitle"] = this.assetTitle !== undefined ? this.assetTitle : <any>null;
        if (Array.isArray(this.dataChannels)) {
            data["dataChannels"] = [];
            for (let item of this.dataChannels)
                data["dataChannels"].push(item.toJSON());
        }
        data["siteId"] = this.siteId !== undefined ? this.siteId : <any>null;
        data["siteName"] = this.siteName !== undefined ? this.siteName : <any>null;
        data["siteAddress"] = this.siteAddress !== undefined ? this.siteAddress : <any>null;
        data["eventRuleGroupId"] = this.eventRuleGroupId !== undefined ? this.eventRuleGroupId : <any>null;
        data["eventRuleGroupName"] = this.eventRuleGroupName !== undefined ? this.eventRuleGroupName : <any>null;
        return data;
    }
}

export class TransferAssetDataChannelInfo {
    dataChannelId?: string;
    rtuId?: string | null;
    rtuChannelId?: string | null;
    deviceId?: string | null;
    tankDimensionId?: string | null;
    tankDimensionName?: string | null;
    tankDimensionType?: TankType | null;
    tankDimensionHash?: string | null;
    productId?: string | null;
    productName?: string | null;
    eventRuleGroupId?: number | null;
    eventRuleGroupName?: string | null;
    eventRules?: TransferAssetDataChannelEventRuleInfo[] | null;

    init(_data?: any) {
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.rtuId = _data["rtuId"] !== undefined ? _data["rtuId"] : <any>null;
            this.rtuChannelId = _data["rtuChannelId"] !== undefined ? _data["rtuChannelId"] : <any>null;
            this.deviceId = _data["deviceId"] !== undefined ? _data["deviceId"] : <any>null;
            this.tankDimensionId = _data["tankDimensionId"] !== undefined ? _data["tankDimensionId"] : <any>null;
            this.tankDimensionName = _data["tankDimensionName"] !== undefined ? _data["tankDimensionName"] : <any>null;
            this.tankDimensionType = _data["tankDimensionType"] !== undefined ? _data["tankDimensionType"] : <any>null;
            this.tankDimensionHash = _data["tankDimensionHash"] !== undefined ? _data["tankDimensionHash"] : <any>null;
            this.productId = _data["productId"] !== undefined ? _data["productId"] : <any>null;
            this.productName = _data["productName"] !== undefined ? _data["productName"] : <any>null;
            this.eventRuleGroupId = _data["eventRuleGroupId"] !== undefined ? _data["eventRuleGroupId"] : <any>null;
            this.eventRuleGroupName = _data["eventRuleGroupName"] !== undefined ? _data["eventRuleGroupName"] : <any>null;
            if (Array.isArray(_data["eventRules"])) {
                this.eventRules = [] as any;
                for (let item of _data["eventRules"])
                    this.eventRules!.push(TransferAssetDataChannelEventRuleInfo.fromJS(item));
            }
            else {
                this.eventRules = <any>null;
            }
        }
    }

    static fromJS(data: any): TransferAssetDataChannelInfo {
        data = typeof data === 'object' ? data : {};
        let result = new TransferAssetDataChannelInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["rtuId"] = this.rtuId !== undefined ? this.rtuId : <any>null;
        data["rtuChannelId"] = this.rtuChannelId !== undefined ? this.rtuChannelId : <any>null;
        data["deviceId"] = this.deviceId !== undefined ? this.deviceId : <any>null;
        data["tankDimensionId"] = this.tankDimensionId !== undefined ? this.tankDimensionId : <any>null;
        data["tankDimensionName"] = this.tankDimensionName !== undefined ? this.tankDimensionName : <any>null;
        data["tankDimensionType"] = this.tankDimensionType !== undefined ? this.tankDimensionType : <any>null;
        data["tankDimensionHash"] = this.tankDimensionHash !== undefined ? this.tankDimensionHash : <any>null;
        data["productId"] = this.productId !== undefined ? this.productId : <any>null;
        data["productName"] = this.productName !== undefined ? this.productName : <any>null;
        data["eventRuleGroupId"] = this.eventRuleGroupId !== undefined ? this.eventRuleGroupId : <any>null;
        data["eventRuleGroupName"] = this.eventRuleGroupName !== undefined ? this.eventRuleGroupName : <any>null;
        if (Array.isArray(this.eventRules)) {
            data["eventRules"] = [];
            for (let item of this.eventRules)
                data["eventRules"].push(item.toJSON());
        }
        return data;
    }
}

export class TransferAssetDataChannelEventRuleInfo {
    dataChannelEventRuleId?: number;
    eventRuleId?: number;
    description?: string | null;
    dataChannelType?: DataChannelType;
    eventRuleType?: EventRuleType;
    rosters?: TransferAssetEventRuleRosterInfo[] | null;

    init(_data?: any) {
        if (_data) {
            this.dataChannelEventRuleId = _data["dataChannelEventRuleId"] !== undefined ? _data["dataChannelEventRuleId"] : <any>null;
            this.eventRuleId = _data["eventRuleId"] !== undefined ? _data["eventRuleId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.dataChannelType = _data["dataChannelType"] !== undefined ? _data["dataChannelType"] : <any>null;
            this.eventRuleType = _data["eventRuleType"] !== undefined ? _data["eventRuleType"] : <any>null;
            if (Array.isArray(_data["rosters"])) {
                this.rosters = [] as any;
                for (let item of _data["rosters"])
                    this.rosters!.push(TransferAssetEventRuleRosterInfo.fromJS(item));
            }
            else {
                this.rosters = <any>null;
            }
        }
    }

    static fromJS(data: any): TransferAssetDataChannelEventRuleInfo {
        data = typeof data === 'object' ? data : {};
        let result = new TransferAssetDataChannelEventRuleInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelEventRuleId"] = this.dataChannelEventRuleId !== undefined ? this.dataChannelEventRuleId : <any>null;
        data["eventRuleId"] = this.eventRuleId !== undefined ? this.eventRuleId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["dataChannelType"] = this.dataChannelType !== undefined ? this.dataChannelType : <any>null;
        data["eventRuleType"] = this.eventRuleType !== undefined ? this.eventRuleType : <any>null;
        if (Array.isArray(this.rosters)) {
            data["rosters"] = [];
            for (let item of this.rosters)
                data["rosters"].push(item.toJSON());
        }
        return data;
    }
}

export class TransferAssetEventRuleRosterInfo {
    rosterId?: number;
    description?: string | null;

    init(_data?: any) {
        if (_data) {
            this.rosterId = _data["rosterId"] !== undefined ? _data["rosterId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
        }
    }

    static fromJS(data: any): TransferAssetEventRuleRosterInfo {
        data = typeof data === 'object' ? data : {};
        let result = new TransferAssetEventRuleRosterInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rosterId"] = this.rosterId !== undefined ? this.rosterId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        return data;
    }
}

export class TransferAssetProcessInfo extends EditBase {
    sourceDomainId?: string;
    targetDomainId?: string | null;
    transferRTUIds?: string[] | null;
    assetIds?: string[] | null;
    mappedFtpDomainIds?: string[] | null;
    eventRuleGroupMappings?: { [key: string]: number; } | null;
    eventRuleMappings?: { [key: string]: number; } | null;
    productMappings?: { [key: string]: string; } | null;
    tankDimensionMappings?: { [key: string]: string; } | null;
    rosterMappings?: { [key: string]: number; } | null;
    siteMappings?: { [key: string]: string; } | null;
    assetIdMappings?: { [key: string]: string; } | null;
    dataChannelMappings?: { [key: string]: string; } | null;
    dataChannelTemplateMappings?: { [key: string]: string; } | null;
    transferDataChannelReadings?: boolean;
    transferAssetNotes?: boolean;
    transferSiteNotes?: boolean;
    transferCustomPropertyValues?: boolean;
    deleteSourceSiteIfNotUsed?: boolean;
    deleteSourceTankDimensionIfNotUsed?: boolean;
    deleteSourceProductIfNotUsed?: boolean;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.sourceDomainId = _data["sourceDomainId"] !== undefined ? _data["sourceDomainId"] : <any>null;
            this.targetDomainId = _data["targetDomainId"] !== undefined ? _data["targetDomainId"] : <any>null;
            if (Array.isArray(_data["transferRTUIds"])) {
                this.transferRTUIds = [] as any;
                for (let item of _data["transferRTUIds"])
                    this.transferRTUIds!.push(item);
            }
            else {
                this.transferRTUIds = <any>null;
            }
            if (Array.isArray(_data["assetIds"])) {
                this.assetIds = [] as any;
                for (let item of _data["assetIds"])
                    this.assetIds!.push(item);
            }
            else {
                this.assetIds = <any>null;
            }
            if (Array.isArray(_data["mappedFtpDomainIds"])) {
                this.mappedFtpDomainIds = [] as any;
                for (let item of _data["mappedFtpDomainIds"])
                    this.mappedFtpDomainIds!.push(item);
            }
            else {
                this.mappedFtpDomainIds = <any>null;
            }
            if (_data["eventRuleGroupMappings"]) {
                this.eventRuleGroupMappings = {} as any;
                for (let key in _data["eventRuleGroupMappings"]) {
                    if (_data["eventRuleGroupMappings"].hasOwnProperty(key))
                        (<any>this.eventRuleGroupMappings)![key] = _data["eventRuleGroupMappings"][key] !== undefined ? _data["eventRuleGroupMappings"][key] : <any>null;
                }
            }
            else {
                this.eventRuleGroupMappings = <any>null;
            }
            if (_data["eventRuleMappings"]) {
                this.eventRuleMappings = {} as any;
                for (let key in _data["eventRuleMappings"]) {
                    if (_data["eventRuleMappings"].hasOwnProperty(key))
                        (<any>this.eventRuleMappings)![key] = _data["eventRuleMappings"][key] !== undefined ? _data["eventRuleMappings"][key] : <any>null;
                }
            }
            else {
                this.eventRuleMappings = <any>null;
            }
            if (_data["productMappings"]) {
                this.productMappings = {} as any;
                for (let key in _data["productMappings"]) {
                    if (_data["productMappings"].hasOwnProperty(key))
                        (<any>this.productMappings)![key] = _data["productMappings"][key] !== undefined ? _data["productMappings"][key] : <any>null;
                }
            }
            else {
                this.productMappings = <any>null;
            }
            if (_data["tankDimensionMappings"]) {
                this.tankDimensionMappings = {} as any;
                for (let key in _data["tankDimensionMappings"]) {
                    if (_data["tankDimensionMappings"].hasOwnProperty(key))
                        (<any>this.tankDimensionMappings)![key] = _data["tankDimensionMappings"][key] !== undefined ? _data["tankDimensionMappings"][key] : <any>null;
                }
            }
            else {
                this.tankDimensionMappings = <any>null;
            }
            if (_data["rosterMappings"]) {
                this.rosterMappings = {} as any;
                for (let key in _data["rosterMappings"]) {
                    if (_data["rosterMappings"].hasOwnProperty(key))
                        (<any>this.rosterMappings)![key] = _data["rosterMappings"][key] !== undefined ? _data["rosterMappings"][key] : <any>null;
                }
            }
            else {
                this.rosterMappings = <any>null;
            }
            if (_data["siteMappings"]) {
                this.siteMappings = {} as any;
                for (let key in _data["siteMappings"]) {
                    if (_data["siteMappings"].hasOwnProperty(key))
                        (<any>this.siteMappings)![key] = _data["siteMappings"][key] !== undefined ? _data["siteMappings"][key] : <any>null;
                }
            }
            else {
                this.siteMappings = <any>null;
            }
            if (_data["assetIdMappings"]) {
                this.assetIdMappings = {} as any;
                for (let key in _data["assetIdMappings"]) {
                    if (_data["assetIdMappings"].hasOwnProperty(key))
                        (<any>this.assetIdMappings)![key] = _data["assetIdMappings"][key] !== undefined ? _data["assetIdMappings"][key] : <any>null;
                }
            }
            else {
                this.assetIdMappings = <any>null;
            }
            if (_data["dataChannelMappings"]) {
                this.dataChannelMappings = {} as any;
                for (let key in _data["dataChannelMappings"]) {
                    if (_data["dataChannelMappings"].hasOwnProperty(key))
                        (<any>this.dataChannelMappings)![key] = _data["dataChannelMappings"][key] !== undefined ? _data["dataChannelMappings"][key] : <any>null;
                }
            }
            else {
                this.dataChannelMappings = <any>null;
            }
            if (_data["dataChannelTemplateMappings"]) {
                this.dataChannelTemplateMappings = {} as any;
                for (let key in _data["dataChannelTemplateMappings"]) {
                    if (_data["dataChannelTemplateMappings"].hasOwnProperty(key))
                        (<any>this.dataChannelTemplateMappings)![key] = _data["dataChannelTemplateMappings"][key] !== undefined ? _data["dataChannelTemplateMappings"][key] : <any>null;
                }
            }
            else {
                this.dataChannelTemplateMappings = <any>null;
            }
            this.transferDataChannelReadings = _data["transferDataChannelReadings"] !== undefined ? _data["transferDataChannelReadings"] : <any>null;
            this.transferAssetNotes = _data["transferAssetNotes"] !== undefined ? _data["transferAssetNotes"] : <any>null;
            this.transferSiteNotes = _data["transferSiteNotes"] !== undefined ? _data["transferSiteNotes"] : <any>null;
            this.transferCustomPropertyValues = _data["transferCustomPropertyValues"] !== undefined ? _data["transferCustomPropertyValues"] : <any>null;
            this.deleteSourceSiteIfNotUsed = _data["deleteSourceSiteIfNotUsed"] !== undefined ? _data["deleteSourceSiteIfNotUsed"] : <any>null;
            this.deleteSourceTankDimensionIfNotUsed = _data["deleteSourceTankDimensionIfNotUsed"] !== undefined ? _data["deleteSourceTankDimensionIfNotUsed"] : <any>null;
            this.deleteSourceProductIfNotUsed = _data["deleteSourceProductIfNotUsed"] !== undefined ? _data["deleteSourceProductIfNotUsed"] : <any>null;
        }
    }

    static fromJS(data: any): TransferAssetProcessInfo {
        data = typeof data === 'object' ? data : {};
        let result = new TransferAssetProcessInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sourceDomainId"] = this.sourceDomainId !== undefined ? this.sourceDomainId : <any>null;
        data["targetDomainId"] = this.targetDomainId !== undefined ? this.targetDomainId : <any>null;
        if (Array.isArray(this.transferRTUIds)) {
            data["transferRTUIds"] = [];
            for (let item of this.transferRTUIds)
                data["transferRTUIds"].push(item);
        }
        if (Array.isArray(this.assetIds)) {
            data["assetIds"] = [];
            for (let item of this.assetIds)
                data["assetIds"].push(item);
        }
        if (Array.isArray(this.mappedFtpDomainIds)) {
            data["mappedFtpDomainIds"] = [];
            for (let item of this.mappedFtpDomainIds)
                data["mappedFtpDomainIds"].push(item);
        }
        if (this.eventRuleGroupMappings) {
            data["eventRuleGroupMappings"] = {};
            for (let key in this.eventRuleGroupMappings) {
                if (this.eventRuleGroupMappings.hasOwnProperty(key))
                    (<any>data["eventRuleGroupMappings"])[key] = this.eventRuleGroupMappings[key] !== undefined ? this.eventRuleGroupMappings[key] : <any>null;
            }
        }
        if (this.eventRuleMappings) {
            data["eventRuleMappings"] = {};
            for (let key in this.eventRuleMappings) {
                if (this.eventRuleMappings.hasOwnProperty(key))
                    (<any>data["eventRuleMappings"])[key] = this.eventRuleMappings[key] !== undefined ? this.eventRuleMappings[key] : <any>null;
            }
        }
        if (this.productMappings) {
            data["productMappings"] = {};
            for (let key in this.productMappings) {
                if (this.productMappings.hasOwnProperty(key))
                    (<any>data["productMappings"])[key] = this.productMappings[key] !== undefined ? this.productMappings[key] : <any>null;
            }
        }
        if (this.tankDimensionMappings) {
            data["tankDimensionMappings"] = {};
            for (let key in this.tankDimensionMappings) {
                if (this.tankDimensionMappings.hasOwnProperty(key))
                    (<any>data["tankDimensionMappings"])[key] = this.tankDimensionMappings[key] !== undefined ? this.tankDimensionMappings[key] : <any>null;
            }
        }
        if (this.rosterMappings) {
            data["rosterMappings"] = {};
            for (let key in this.rosterMappings) {
                if (this.rosterMappings.hasOwnProperty(key))
                    (<any>data["rosterMappings"])[key] = this.rosterMappings[key] !== undefined ? this.rosterMappings[key] : <any>null;
            }
        }
        if (this.siteMappings) {
            data["siteMappings"] = {};
            for (let key in this.siteMappings) {
                if (this.siteMappings.hasOwnProperty(key))
                    (<any>data["siteMappings"])[key] = this.siteMappings[key] !== undefined ? this.siteMappings[key] : <any>null;
            }
        }
        if (this.assetIdMappings) {
            data["assetIdMappings"] = {};
            for (let key in this.assetIdMappings) {
                if (this.assetIdMappings.hasOwnProperty(key))
                    (<any>data["assetIdMappings"])[key] = this.assetIdMappings[key] !== undefined ? this.assetIdMappings[key] : <any>null;
            }
        }
        if (this.dataChannelMappings) {
            data["dataChannelMappings"] = {};
            for (let key in this.dataChannelMappings) {
                if (this.dataChannelMappings.hasOwnProperty(key))
                    (<any>data["dataChannelMappings"])[key] = this.dataChannelMappings[key] !== undefined ? this.dataChannelMappings[key] : <any>null;
            }
        }
        if (this.dataChannelTemplateMappings) {
            data["dataChannelTemplateMappings"] = {};
            for (let key in this.dataChannelTemplateMappings) {
                if (this.dataChannelTemplateMappings.hasOwnProperty(key))
                    (<any>data["dataChannelTemplateMappings"])[key] = this.dataChannelTemplateMappings[key] !== undefined ? this.dataChannelTemplateMappings[key] : <any>null;
            }
        }
        data["transferDataChannelReadings"] = this.transferDataChannelReadings !== undefined ? this.transferDataChannelReadings : <any>null;
        data["transferAssetNotes"] = this.transferAssetNotes !== undefined ? this.transferAssetNotes : <any>null;
        data["transferSiteNotes"] = this.transferSiteNotes !== undefined ? this.transferSiteNotes : <any>null;
        data["transferCustomPropertyValues"] = this.transferCustomPropertyValues !== undefined ? this.transferCustomPropertyValues : <any>null;
        data["deleteSourceSiteIfNotUsed"] = this.deleteSourceSiteIfNotUsed !== undefined ? this.deleteSourceSiteIfNotUsed : <any>null;
        data["deleteSourceTankDimensionIfNotUsed"] = this.deleteSourceTankDimensionIfNotUsed !== undefined ? this.deleteSourceTankDimensionIfNotUsed : <any>null;
        data["deleteSourceProductIfNotUsed"] = this.deleteSourceProductIfNotUsed !== undefined ? this.deleteSourceProductIfNotUsed : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class RetrieveTransferAssetProcessInfoByOptionsRequest extends WcfProxyUserDetails {
    options?: TransferAssetProcessInfoRetrievalOptions | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.options = _data["options"] ? TransferAssetProcessInfoRetrievalOptions.fromJS(_data["options"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveTransferAssetProcessInfoByOptionsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveTransferAssetProcessInfoByOptionsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["options"] = this.options ? this.options.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveTransferAssetProcessInfoByOptionsRequest extends RetrieveTransferAssetProcessInfoByOptionsRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveTransferAssetProcessInfoByOptionsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveTransferAssetProcessInfoByOptionsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class TransferAssetProcessInfoRetrievalOptions {
    transferAssetIds?: string[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["transferAssetIds"])) {
                this.transferAssetIds = [] as any;
                for (let item of _data["transferAssetIds"])
                    this.transferAssetIds!.push(item);
            }
            else {
                this.transferAssetIds = <any>null;
            }
        }
    }

    static fromJS(data: any): TransferAssetProcessInfoRetrievalOptions {
        data = typeof data === 'object' ? data : {};
        let result = new TransferAssetProcessInfoRetrievalOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.transferAssetIds)) {
            data["transferAssetIds"] = [];
            for (let item of this.transferAssetIds)
                data["transferAssetIds"].push(item);
        }
        return data;
    }
}

export class RetrieveTransferAssetTargetDomainInfoByIdResponse {
    retrieveTransferAssetTargetDomainInfoByIdResult?: TransferAssetTargetDomainInfo | null;

    init(_data?: any) {
        if (_data) {
            this.retrieveTransferAssetTargetDomainInfoByIdResult = _data["retrieveTransferAssetTargetDomainInfoByIdResult"] ? TransferAssetTargetDomainInfo.fromJS(_data["retrieveTransferAssetTargetDomainInfoByIdResult"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveTransferAssetTargetDomainInfoByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveTransferAssetTargetDomainInfoByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["retrieveTransferAssetTargetDomainInfoByIdResult"] = this.retrieveTransferAssetTargetDomainInfoByIdResult ? this.retrieveTransferAssetTargetDomainInfoByIdResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveRetrieveTransferAssetTargetDomainInfoByIdResponse extends RetrieveTransferAssetTargetDomainInfoByIdResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveTransferAssetTargetDomainInfoByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveTransferAssetTargetDomainInfoByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class TransferAssetTargetDomainInfo {
    eventRuleGroups?: TransferAssetTargetDomainEventRuleGroupInfo[] | null;
    products?: TransferAssetTargetDomainProductInfo[] | null;
    tankDimensions?: TransferAssetTargetDomainTankDimensionInfo[] | null;
    rosters?: TransferAssetTargetDomainRosterInfo[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["eventRuleGroups"])) {
                this.eventRuleGroups = [] as any;
                for (let item of _data["eventRuleGroups"])
                    this.eventRuleGroups!.push(TransferAssetTargetDomainEventRuleGroupInfo.fromJS(item));
            }
            else {
                this.eventRuleGroups = <any>null;
            }
            if (Array.isArray(_data["products"])) {
                this.products = [] as any;
                for (let item of _data["products"])
                    this.products!.push(TransferAssetTargetDomainProductInfo.fromJS(item));
            }
            else {
                this.products = <any>null;
            }
            if (Array.isArray(_data["tankDimensions"])) {
                this.tankDimensions = [] as any;
                for (let item of _data["tankDimensions"])
                    this.tankDimensions!.push(TransferAssetTargetDomainTankDimensionInfo.fromJS(item));
            }
            else {
                this.tankDimensions = <any>null;
            }
            if (Array.isArray(_data["rosters"])) {
                this.rosters = [] as any;
                for (let item of _data["rosters"])
                    this.rosters!.push(TransferAssetTargetDomainRosterInfo.fromJS(item));
            }
            else {
                this.rosters = <any>null;
            }
        }
    }

    static fromJS(data: any): TransferAssetTargetDomainInfo {
        data = typeof data === 'object' ? data : {};
        let result = new TransferAssetTargetDomainInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.eventRuleGroups)) {
            data["eventRuleGroups"] = [];
            for (let item of this.eventRuleGroups)
                data["eventRuleGroups"].push(item.toJSON());
        }
        if (Array.isArray(this.products)) {
            data["products"] = [];
            for (let item of this.products)
                data["products"].push(item.toJSON());
        }
        if (Array.isArray(this.tankDimensions)) {
            data["tankDimensions"] = [];
            for (let item of this.tankDimensions)
                data["tankDimensions"].push(item.toJSON());
        }
        if (Array.isArray(this.rosters)) {
            data["rosters"] = [];
            for (let item of this.rosters)
                data["rosters"].push(item.toJSON());
        }
        return data;
    }
}

export class TransferAssetTargetDomainEventRuleGroupInfo {
    eventRuleGroupId?: number;
    description?: string | null;
    eventRules?: TransferAssetTargetDomainEventRuleInfo[] | null;

    init(_data?: any) {
        if (_data) {
            this.eventRuleGroupId = _data["eventRuleGroupId"] !== undefined ? _data["eventRuleGroupId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            if (Array.isArray(_data["eventRules"])) {
                this.eventRules = [] as any;
                for (let item of _data["eventRules"])
                    this.eventRules!.push(TransferAssetTargetDomainEventRuleInfo.fromJS(item));
            }
            else {
                this.eventRules = <any>null;
            }
        }
    }

    static fromJS(data: any): TransferAssetTargetDomainEventRuleGroupInfo {
        data = typeof data === 'object' ? data : {};
        let result = new TransferAssetTargetDomainEventRuleGroupInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["eventRuleGroupId"] = this.eventRuleGroupId !== undefined ? this.eventRuleGroupId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        if (Array.isArray(this.eventRules)) {
            data["eventRules"] = [];
            for (let item of this.eventRules)
                data["eventRules"].push(item.toJSON());
        }
        return data;
    }
}

export class TransferAssetTargetDomainEventRuleInfo {
    eventRuleId?: number;
    description?: string | null;
    dataChannelType?: DataChannelType;
    eventRuleType?: EventRuleType;

    init(_data?: any) {
        if (_data) {
            this.eventRuleId = _data["eventRuleId"] !== undefined ? _data["eventRuleId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.dataChannelType = _data["dataChannelType"] !== undefined ? _data["dataChannelType"] : <any>null;
            this.eventRuleType = _data["eventRuleType"] !== undefined ? _data["eventRuleType"] : <any>null;
        }
    }

    static fromJS(data: any): TransferAssetTargetDomainEventRuleInfo {
        data = typeof data === 'object' ? data : {};
        let result = new TransferAssetTargetDomainEventRuleInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["eventRuleId"] = this.eventRuleId !== undefined ? this.eventRuleId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["dataChannelType"] = this.dataChannelType !== undefined ? this.dataChannelType : <any>null;
        data["eventRuleType"] = this.eventRuleType !== undefined ? this.eventRuleType : <any>null;
        return data;
    }
}

export class TransferAssetTargetDomainProductInfo {
    productId?: string;
    productName?: string | null;

    init(_data?: any) {
        if (_data) {
            this.productId = _data["productId"] !== undefined ? _data["productId"] : <any>null;
            this.productName = _data["productName"] !== undefined ? _data["productName"] : <any>null;
        }
    }

    static fromJS(data: any): TransferAssetTargetDomainProductInfo {
        data = typeof data === 'object' ? data : {};
        let result = new TransferAssetTargetDomainProductInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId !== undefined ? this.productId : <any>null;
        data["productName"] = this.productName !== undefined ? this.productName : <any>null;
        return data;
    }
}

export class TransferAssetTargetDomainTankDimensionInfo {
    tankDimensionId?: string;
    tankDimensionType?: TankType;
    description?: string | null;
    tankDimensionHash?: string | null;

    init(_data?: any) {
        if (_data) {
            this.tankDimensionId = _data["tankDimensionId"] !== undefined ? _data["tankDimensionId"] : <any>null;
            this.tankDimensionType = _data["tankDimensionType"] !== undefined ? _data["tankDimensionType"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.tankDimensionHash = _data["tankDimensionHash"] !== undefined ? _data["tankDimensionHash"] : <any>null;
        }
    }

    static fromJS(data: any): TransferAssetTargetDomainTankDimensionInfo {
        data = typeof data === 'object' ? data : {};
        let result = new TransferAssetTargetDomainTankDimensionInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tankDimensionId"] = this.tankDimensionId !== undefined ? this.tankDimensionId : <any>null;
        data["tankDimensionType"] = this.tankDimensionType !== undefined ? this.tankDimensionType : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["tankDimensionHash"] = this.tankDimensionHash !== undefined ? this.tankDimensionHash : <any>null;
        return data;
    }
}

export class TransferAssetTargetDomainRosterInfo {
    rosterId?: number;
    rosterName?: string | null;

    init(_data?: any) {
        if (_data) {
            this.rosterId = _data["rosterId"] !== undefined ? _data["rosterId"] : <any>null;
            this.rosterName = _data["rosterName"] !== undefined ? _data["rosterName"] : <any>null;
        }
    }

    static fromJS(data: any): TransferAssetTargetDomainRosterInfo {
        data = typeof data === 'object' ? data : {};
        let result = new TransferAssetTargetDomainRosterInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rosterId"] = this.rosterId !== undefined ? this.rosterId : <any>null;
        data["rosterName"] = this.rosterName !== undefined ? this.rosterName : <any>null;
        return data;
    }
}

export class RetrieveTransferAssetTargetDomainInfoByIdRequest extends WcfProxyUserDetails {
    domainId?: string;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
        }
    }

    static fromJS(data: any): RetrieveTransferAssetTargetDomainInfoByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveTransferAssetTargetDomainInfoByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveTransferAssetTargetDomainInfoByIdRequest extends RetrieveTransferAssetTargetDomainInfoByIdRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveTransferAssetTargetDomainInfoByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveTransferAssetTargetDomainInfoByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class RetrieveTreeEditComponentsResponse {
    retrieveTreeEditComponentsResult?: RetrieveTreeEditComponentsResult | null;

    init(_data?: any) {
        if (_data) {
            this.retrieveTreeEditComponentsResult = _data["retrieveTreeEditComponentsResult"] ? RetrieveTreeEditComponentsResult.fromJS(_data["retrieveTreeEditComponentsResult"]) : <any>null;
        }
    }

    static fromJS(data: any): RetrieveTreeEditComponentsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveTreeEditComponentsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["retrieveTreeEditComponentsResult"] = this.retrieveTreeEditComponentsResult ? this.retrieveTreeEditComponentsResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveRetrieveTreeEditComponentsResponse extends RetrieveTreeEditComponentsResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveTreeEditComponentsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveTreeEditComponentsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class BaseEditComponentsResultOfEditTree {
    editObject?: EditTree | null;
    areEditComponentsLoaded?: boolean;

    init(_data?: any) {
        if (_data) {
            this.editObject = _data["editObject"] ? EditTree.fromJS(_data["editObject"]) : <any>null;
            this.areEditComponentsLoaded = _data["areEditComponentsLoaded"] !== undefined ? _data["areEditComponentsLoaded"] : <any>null;
        }
    }

    static fromJS(data: any): BaseEditComponentsResultOfEditTree {
        data = typeof data === 'object' ? data : {};
        let result = new BaseEditComponentsResultOfEditTree();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["editObject"] = this.editObject ? this.editObject.toJSON() : <any>null;
        data["areEditComponentsLoaded"] = this.areEditComponentsLoaded !== undefined ? this.areEditComponentsLoaded : <any>null;
        return data;
    }
}

export class RetrieveTreeEditComponentsResult extends BaseEditComponentsResultOfEditTree {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): RetrieveTreeEditComponentsResult {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveTreeEditComponentsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class EditTree extends EditBase {
    id?: string;
    name?: string | null;
    domainId?: string;
    expression?: string | null;
    dataChannelTypes?: string | null;
    isDeleted?: boolean | null;
    domainCustomPropertyList?: CustomPropertyTypeInfo[] | null;
    availableDataChannelTypeList?: DataChannelType[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.expression = _data["expression"] !== undefined ? _data["expression"] : <any>null;
            this.dataChannelTypes = _data["dataChannelTypes"] !== undefined ? _data["dataChannelTypes"] : <any>null;
            this.isDeleted = _data["isDeleted"] !== undefined ? _data["isDeleted"] : <any>null;
            if (Array.isArray(_data["domainCustomPropertyList"])) {
                this.domainCustomPropertyList = [] as any;
                for (let item of _data["domainCustomPropertyList"])
                    this.domainCustomPropertyList!.push(CustomPropertyTypeInfo.fromJS(item));
            }
            else {
                this.domainCustomPropertyList = <any>null;
            }
            if (Array.isArray(_data["availableDataChannelTypeList"])) {
                this.availableDataChannelTypeList = [] as any;
                for (let item of _data["availableDataChannelTypeList"])
                    this.availableDataChannelTypeList!.push(item);
            }
            else {
                this.availableDataChannelTypeList = <any>null;
            }
        }
    }

    static fromJS(data: any): EditTree {
        data = typeof data === 'object' ? data : {};
        let result = new EditTree();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["expression"] = this.expression !== undefined ? this.expression : <any>null;
        data["dataChannelTypes"] = this.dataChannelTypes !== undefined ? this.dataChannelTypes : <any>null;
        data["isDeleted"] = this.isDeleted !== undefined ? this.isDeleted : <any>null;
        if (Array.isArray(this.domainCustomPropertyList)) {
            data["domainCustomPropertyList"] = [];
            for (let item of this.domainCustomPropertyList)
                data["domainCustomPropertyList"].push(item.toJSON());
        }
        if (Array.isArray(this.availableDataChannelTypeList)) {
            data["availableDataChannelTypeList"] = [];
            for (let item of this.availableDataChannelTypeList)
                data["availableDataChannelTypeList"].push(item);
        }
        super.toJSON(data);
        return data;
    }
}

export class CustomPropertyTypeInfo {
    customPropertyTypeId?: string;
    name?: string | null;
    alias?: string | null;

    init(_data?: any) {
        if (_data) {
            this.customPropertyTypeId = _data["customPropertyTypeId"] !== undefined ? _data["customPropertyTypeId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.alias = _data["alias"] !== undefined ? _data["alias"] : <any>null;
        }
    }

    static fromJS(data: any): CustomPropertyTypeInfo {
        data = typeof data === 'object' ? data : {};
        let result = new CustomPropertyTypeInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customPropertyTypeId"] = this.customPropertyTypeId !== undefined ? this.customPropertyTypeId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["alias"] = this.alias !== undefined ? this.alias : <any>null;
        return data;
    }
}

export class RetrieveTreeEditComponentsRequest extends WcfProxyUserDetails {
    treeId?: string | null;
    domainId?: string | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.treeId = _data["treeId"] !== undefined ? _data["treeId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
        }
    }

    static fromJS(data: any): RetrieveTreeEditComponentsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RetrieveTreeEditComponentsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["treeId"] = this.treeId !== undefined ? this.treeId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveRetrieveTreeEditComponentsRequest extends RetrieveTreeEditComponentsRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveRetrieveTreeEditComponentsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveTreeEditComponentsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class SaveAssetResponse {
    saveAssetResult?: SaveAssetResult | null;

    init(_data?: any) {
        if (_data) {
            this.saveAssetResult = _data["saveAssetResult"] ? SaveAssetResult.fromJS(_data["saveAssetResult"]) : <any>null;
        }
    }

    static fromJS(data: any): SaveAssetResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SaveAssetResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["saveAssetResult"] = this.saveAssetResult ? this.saveAssetResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveSaveAssetResponse extends SaveAssetResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveSaveAssetResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveAssetResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class BaseSaveResultOfEditAsset extends SaveResult {
    editObject?: EditAsset | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.editObject = _data["editObject"] ? EditAsset.fromJS(_data["editObject"]) : <any>null;
        }
    }

    static fromJS(data: any): BaseSaveResultOfEditAsset {
        data = typeof data === 'object' ? data : {};
        let result = new BaseSaveResultOfEditAsset();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["editObject"] = this.editObject ? this.editObject.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class SaveAssetResult extends BaseSaveResultOfEditAsset {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): SaveAssetResult {
        data = typeof data === 'object' ? data : {};
        let result = new SaveAssetResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class SaveAssetRequest extends WcfProxyUserDetails {
    item?: EditAsset | null;
    options?: SaveAssetOptions | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.item = _data["item"] ? EditAsset.fromJS(_data["item"]) : <any>null;
            this.options = _data["options"] ? SaveAssetOptions.fromJS(_data["options"]) : <any>null;
        }
    }

    static fromJS(data: any): SaveAssetRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SaveAssetRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item"] = this.item ? this.item.toJSON() : <any>null;
        data["options"] = this.options ? this.options.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveSaveAssetRequest extends SaveAssetRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveSaveAssetRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveAssetRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class SaveAssetOptions {
    orphanRemovedChannels?: boolean;
    enforceUniqueRTUChannels?: boolean;
    validateAPCIShipTo?: boolean;
    showVirtualChannelDescriptionInValidationText?: boolean;
    enforceValidTubeTrailerConfiguration?: boolean;

    init(_data?: any) {
        if (_data) {
            this.orphanRemovedChannels = _data["orphanRemovedChannels"] !== undefined ? _data["orphanRemovedChannels"] : <any>null;
            this.enforceUniqueRTUChannels = _data["enforceUniqueRTUChannels"] !== undefined ? _data["enforceUniqueRTUChannels"] : <any>null;
            this.validateAPCIShipTo = _data["validateAPCIShipTo"] !== undefined ? _data["validateAPCIShipTo"] : <any>null;
            this.showVirtualChannelDescriptionInValidationText = _data["showVirtualChannelDescriptionInValidationText"] !== undefined ? _data["showVirtualChannelDescriptionInValidationText"] : <any>null;
            this.enforceValidTubeTrailerConfiguration = _data["enforceValidTubeTrailerConfiguration"] !== undefined ? _data["enforceValidTubeTrailerConfiguration"] : <any>null;
        }
    }

    static fromJS(data: any): SaveAssetOptions {
        data = typeof data === 'object' ? data : {};
        let result = new SaveAssetOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orphanRemovedChannels"] = this.orphanRemovedChannels !== undefined ? this.orphanRemovedChannels : <any>null;
        data["enforceUniqueRTUChannels"] = this.enforceUniqueRTUChannels !== undefined ? this.enforceUniqueRTUChannels : <any>null;
        data["validateAPCIShipTo"] = this.validateAPCIShipTo !== undefined ? this.validateAPCIShipTo : <any>null;
        data["showVirtualChannelDescriptionInValidationText"] = this.showVirtualChannelDescriptionInValidationText !== undefined ? this.showVirtualChannelDescriptionInValidationText : <any>null;
        data["enforceValidTubeTrailerConfiguration"] = this.enforceValidTubeTrailerConfiguration !== undefined ? this.enforceValidTubeTrailerConfiguration : <any>null;
        return data;
    }
}

export class SaveAssetCopyResponse {
    saveAssetCopyResult?: SaveAssetCopyResult | null;

    init(_data?: any) {
        if (_data) {
            this.saveAssetCopyResult = _data["saveAssetCopyResult"] ? SaveAssetCopyResult.fromJS(_data["saveAssetCopyResult"]) : <any>null;
        }
    }

    static fromJS(data: any): SaveAssetCopyResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SaveAssetCopyResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["saveAssetCopyResult"] = this.saveAssetCopyResult ? this.saveAssetCopyResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveSaveAssetCopyResponse extends SaveAssetCopyResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveSaveAssetCopyResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveAssetCopyResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class BaseSaveResultOfEditAssetCopy extends SaveResult {
    editObject?: EditAssetCopy | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.editObject = _data["editObject"] ? EditAssetCopy.fromJS(_data["editObject"]) : <any>null;
        }
    }

    static fromJS(data: any): BaseSaveResultOfEditAssetCopy {
        data = typeof data === 'object' ? data : {};
        let result = new BaseSaveResultOfEditAssetCopy();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["editObject"] = this.editObject ? this.editObject.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class SaveAssetCopyResult extends BaseSaveResultOfEditAssetCopy {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): SaveAssetCopyResult {
        data = typeof data === 'object' ? data : {};
        let result = new SaveAssetCopyResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class SaveAssetCopyRequest extends WcfProxyUserDetails {
    item?: EditAssetCopy | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.item = _data["item"] ? EditAssetCopy.fromJS(_data["item"]) : <any>null;
        }
    }

    static fromJS(data: any): SaveAssetCopyRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SaveAssetCopyRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item"] = this.item ? this.item.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveSaveAssetCopyRequest extends SaveAssetCopyRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveSaveAssetCopyRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveAssetCopyRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class SaveAssetGroupResponse {
    saveAssetGroupResult?: SaveAssetGroupResult | null;

    init(_data?: any) {
        if (_data) {
            this.saveAssetGroupResult = _data["saveAssetGroupResult"] ? SaveAssetGroupResult.fromJS(_data["saveAssetGroupResult"]) : <any>null;
        }
    }

    static fromJS(data: any): SaveAssetGroupResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SaveAssetGroupResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["saveAssetGroupResult"] = this.saveAssetGroupResult ? this.saveAssetGroupResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveSaveAssetGroupResponse extends SaveAssetGroupResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveSaveAssetGroupResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveAssetGroupResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class BaseSaveResultOfEditAssetGroup extends SaveResult {
    editObject?: EditAssetGroup | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.editObject = _data["editObject"] ? EditAssetGroup.fromJS(_data["editObject"]) : <any>null;
        }
    }

    static fromJS(data: any): BaseSaveResultOfEditAssetGroup {
        data = typeof data === 'object' ? data : {};
        let result = new BaseSaveResultOfEditAssetGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["editObject"] = this.editObject ? this.editObject.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class SaveAssetGroupResult extends BaseSaveResultOfEditAssetGroup {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): SaveAssetGroupResult {
        data = typeof data === 'object' ? data : {};
        let result = new SaveAssetGroupResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class SaveAssetGroupRequest extends WcfProxyUserDetails {
    assetGroup?: EditAssetGroup | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.assetGroup = _data["assetGroup"] ? EditAssetGroup.fromJS(_data["assetGroup"]) : <any>null;
        }
    }

    static fromJS(data: any): SaveAssetGroupRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SaveAssetGroupRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetGroup"] = this.assetGroup ? this.assetGroup.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveSaveAssetGroupRequest extends SaveAssetGroupRequest {
    assetGroupSearchCriteria?: AssetGroupSearchCriteria | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.assetGroupSearchCriteria = _data["assetGroupSearchCriteria"] ? AssetGroupSearchCriteria.fromJS(_data["assetGroupSearchCriteria"]) : <any>null;
        }
    }

    static fromJS(data: any): EvolveSaveAssetGroupRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveAssetGroupRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetGroupSearchCriteria"] = this.assetGroupSearchCriteria ? this.assetGroupSearchCriteria.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class SaveTreeResponse {
    saveTreeResult?: SaveTreeResult | null;

    init(_data?: any) {
        if (_data) {
            this.saveTreeResult = _data["saveTreeResult"] ? SaveTreeResult.fromJS(_data["saveTreeResult"]) : <any>null;
        }
    }

    static fromJS(data: any): SaveTreeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SaveTreeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["saveTreeResult"] = this.saveTreeResult ? this.saveTreeResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveSaveTreeResponse extends SaveTreeResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveSaveTreeResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveTreeResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class BaseSaveResultOfEditTree extends SaveResult {
    editObject?: EditTree | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.editObject = _data["editObject"] ? EditTree.fromJS(_data["editObject"]) : <any>null;
        }
    }

    static fromJS(data: any): BaseSaveResultOfEditTree {
        data = typeof data === 'object' ? data : {};
        let result = new BaseSaveResultOfEditTree();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["editObject"] = this.editObject ? this.editObject.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class SaveTreeResult extends BaseSaveResultOfEditTree {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): SaveTreeResult {
        data = typeof data === 'object' ? data : {};
        let result = new SaveTreeResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class SaveTreeRequest extends WcfProxyUserDetails {
    item?: EditTree | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.item = _data["item"] ? EditTree.fromJS(_data["item"]) : <any>null;
        }
    }

    static fromJS(data: any): SaveTreeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SaveTreeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item"] = this.item ? this.item.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveSaveTreeRequest extends SaveTreeRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveSaveTreeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveTreeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class TransferAssetsResponse {
    transferAssetsResult?: TransferAssetProcessResult | null;

    init(_data?: any) {
        if (_data) {
            this.transferAssetsResult = _data["transferAssetsResult"] ? TransferAssetProcessResult.fromJS(_data["transferAssetsResult"]) : <any>null;
        }
    }

    static fromJS(data: any): TransferAssetsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new TransferAssetsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transferAssetsResult"] = this.transferAssetsResult ? this.transferAssetsResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveTransferAssetsResponse extends TransferAssetsResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveTransferAssetsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveTransferAssetsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class BaseSaveResultOfTransferAssetProcessInfo extends SaveResult {
    editObject?: TransferAssetProcessInfo | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.editObject = _data["editObject"] ? TransferAssetProcessInfo.fromJS(_data["editObject"]) : <any>null;
        }
    }

    static fromJS(data: any): BaseSaveResultOfTransferAssetProcessInfo {
        data = typeof data === 'object' ? data : {};
        let result = new BaseSaveResultOfTransferAssetProcessInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["editObject"] = this.editObject ? this.editObject.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class TransferAssetProcessResult extends BaseSaveResultOfTransferAssetProcessInfo {
    transferResults?: TransferAssetResult[] | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["transferResults"])) {
                this.transferResults = [] as any;
                for (let item of _data["transferResults"])
                    this.transferResults!.push(TransferAssetResult.fromJS(item));
            }
            else {
                this.transferResults = <any>null;
            }
        }
    }

    static fromJS(data: any): TransferAssetProcessResult {
        data = typeof data === 'object' ? data : {};
        let result = new TransferAssetProcessResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.transferResults)) {
            data["transferResults"] = [];
            for (let item of this.transferResults)
                data["transferResults"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export class TransferAssetResult {
    assetId?: string;
    status?: TransferAssetResultStatusType;
    errorMessage?: string | null;
    errorDetails?: string | null;

    init(_data?: any) {
        if (_data) {
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
            this.errorMessage = _data["errorMessage"] !== undefined ? _data["errorMessage"] : <any>null;
            this.errorDetails = _data["errorDetails"] !== undefined ? _data["errorDetails"] : <any>null;
        }
    }

    static fromJS(data: any): TransferAssetResult {
        data = typeof data === 'object' ? data : {};
        let result = new TransferAssetResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["errorMessage"] = this.errorMessage !== undefined ? this.errorMessage : <any>null;
        data["errorDetails"] = this.errorDetails !== undefined ? this.errorDetails : <any>null;
        return data;
    }
}

export enum TransferAssetResultStatusType {
    Pending = 0,
    Transferred = 1,
    Error = 2,
    Rollback = 3,
}

export class TransferAssetsRequest extends WcfProxyUserDetails {
    item?: TransferAssetProcessInfo | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.item = _data["item"] ? TransferAssetProcessInfo.fromJS(_data["item"]) : <any>null;
        }
    }

    static fromJS(data: any): TransferAssetsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new TransferAssetsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item"] = this.item ? this.item.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveTransferAssetsRequest extends TransferAssetsRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveTransferAssetsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveTransferAssetsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class ValidateAssetDataChannelResponse {
    validateAssetDataChannelResult?: ValidateAssetDataChannelResult | null;

    init(_data?: any) {
        if (_data) {
            this.validateAssetDataChannelResult = _data["validateAssetDataChannelResult"] ? ValidateAssetDataChannelResult.fromJS(_data["validateAssetDataChannelResult"]) : <any>null;
        }
    }

    static fromJS(data: any): ValidateAssetDataChannelResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ValidateAssetDataChannelResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["validateAssetDataChannelResult"] = this.validateAssetDataChannelResult ? this.validateAssetDataChannelResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveValidateAssetDataChannelResponse extends ValidateAssetDataChannelResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveValidateAssetDataChannelResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveValidateAssetDataChannelResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class ValidateResultOfEditAssetDataChannel {
    isValid?: boolean;
    editObject?: EditAssetDataChannel | null;

    init(_data?: any) {
        if (_data) {
            this.isValid = _data["isValid"] !== undefined ? _data["isValid"] : <any>null;
            this.editObject = _data["editObject"] ? EditAssetDataChannel.fromJS(_data["editObject"]) : <any>null;
        }
    }

    static fromJS(data: any): ValidateResultOfEditAssetDataChannel {
        data = typeof data === 'object' ? data : {};
        let result = new ValidateResultOfEditAssetDataChannel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isValid"] = this.isValid !== undefined ? this.isValid : <any>null;
        data["editObject"] = this.editObject ? this.editObject.toJSON() : <any>null;
        return data;
    }
}

export class ValidateAssetDataChannelResult extends ValidateResultOfEditAssetDataChannel {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): ValidateAssetDataChannelResult {
        data = typeof data === 'object' ? data : {};
        let result = new ValidateAssetDataChannelResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class ValidateAssetDataChannelRequest extends WcfProxyUserDetails {
    asset?: EditAsset | null;
    dataChannel?: EditAssetDataChannel | null;
    options?: SaveAssetOptions | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.asset = _data["asset"] ? EditAsset.fromJS(_data["asset"]) : <any>null;
            this.dataChannel = _data["dataChannel"] ? EditAssetDataChannel.fromJS(_data["dataChannel"]) : <any>null;
            this.options = _data["options"] ? SaveAssetOptions.fromJS(_data["options"]) : <any>null;
        }
    }

    static fromJS(data: any): ValidateAssetDataChannelRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ValidateAssetDataChannelRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["asset"] = this.asset ? this.asset.toJSON() : <any>null;
        data["dataChannel"] = this.dataChannel ? this.dataChannel.toJSON() : <any>null;
        data["options"] = this.options ? this.options.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveValidateAssetDataChannelRequest extends ValidateAssetDataChannelRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveValidateAssetDataChannelRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveValidateAssetDataChannelRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class ValidateAssetVirtualChannelFormulaResponse {
    validateAssetVirtualChannelFormulaResult?: ValidateAssetVirtualChannelFormulaResult | null;

    init(_data?: any) {
        if (_data) {
            this.validateAssetVirtualChannelFormulaResult = _data["validateAssetVirtualChannelFormulaResult"] ? ValidateAssetVirtualChannelFormulaResult.fromJS(_data["validateAssetVirtualChannelFormulaResult"]) : <any>null;
        }
    }

    static fromJS(data: any): ValidateAssetVirtualChannelFormulaResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ValidateAssetVirtualChannelFormulaResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["validateAssetVirtualChannelFormulaResult"] = this.validateAssetVirtualChannelFormulaResult ? this.validateAssetVirtualChannelFormulaResult.toJSON() : <any>null;
        return data;
    }
}

export class EvolveValidateAssetVirtualChannelFormulaResponse extends ValidateAssetVirtualChannelFormulaResponse {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveValidateAssetVirtualChannelFormulaResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveValidateAssetVirtualChannelFormulaResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class ValidateAssetVirtualChannelFormulaResult extends ValidateResultOfEditAssetDataChannel {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): ValidateAssetVirtualChannelFormulaResult {
        data = typeof data === 'object' ? data : {};
        let result = new ValidateAssetVirtualChannelFormulaResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class ValidateAssetVirtualChannelFormulaRequest extends WcfProxyUserDetails {
    asset?: EditAsset | null;
    virtualChannel?: EditAssetDataChannel | null;
    options?: SaveAssetOptions | null;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.asset = _data["asset"] ? EditAsset.fromJS(_data["asset"]) : <any>null;
            this.virtualChannel = _data["virtualChannel"] ? EditAssetDataChannel.fromJS(_data["virtualChannel"]) : <any>null;
            this.options = _data["options"] ? SaveAssetOptions.fromJS(_data["options"]) : <any>null;
        }
    }

    static fromJS(data: any): ValidateAssetVirtualChannelFormulaRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ValidateAssetVirtualChannelFormulaRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["asset"] = this.asset ? this.asset.toJSON() : <any>null;
        data["virtualChannel"] = this.virtualChannel ? this.virtualChannel.toJSON() : <any>null;
        data["options"] = this.options ? this.options.toJSON() : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class EvolveValidateAssetVirtualChannelFormulaRequest extends ValidateAssetVirtualChannelFormulaRequest {

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): EvolveValidateAssetVirtualChannelFormulaRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveValidateAssetVirtualChannelFormulaRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export class EvolveGenerateStrappingChartResponse {
    strappingChart?: TankStrapping[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["strappingChart"])) {
                this.strappingChart = [] as any;
                for (let item of _data["strappingChart"])
                    this.strappingChart!.push(TankStrapping.fromJS(item));
            }
            else {
                this.strappingChart = <any>null;
            }
        }
    }

    static fromJS(data: any): EvolveGenerateStrappingChartResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveGenerateStrappingChartResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.strappingChart)) {
            data["strappingChart"] = [];
            for (let item of this.strappingChart)
                data["strappingChart"].push(item.toJSON());
        }
        return data;
    }
}

export class TankStrapping {
    height?: number | null;
    volume?: number | null;

    init(_data?: any) {
        if (_data) {
            this.height = _data["height"] !== undefined ? _data["height"] : <any>null;
            this.volume = _data["volume"] !== undefined ? _data["volume"] : <any>null;
        }
    }

    static fromJS(data: any): TankStrapping {
        data = typeof data === 'object' ? data : {};
        let result = new TankStrapping();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["height"] = this.height !== undefined ? this.height : <any>null;
        data["volume"] = this.volume !== undefined ? this.volume : <any>null;
        return data;
    }
}

export class EvolveGenerateStrappingChartRequest {
    dishHeight?: number | null;
    height?: number | null;
    width?: number | null;
    strappingLevelUnits?: UnitType;
    strappingVolumeUnits?: UnitType;
    tankType?: TankType;
    unitsOfMeasure?: UnitType;

    init(_data?: any) {
        if (_data) {
            this.dishHeight = _data["dishHeight"] !== undefined ? _data["dishHeight"] : <any>null;
            this.height = _data["height"] !== undefined ? _data["height"] : <any>null;
            this.width = _data["width"] !== undefined ? _data["width"] : <any>null;
            this.strappingLevelUnits = _data["strappingLevelUnits"] !== undefined ? _data["strappingLevelUnits"] : <any>null;
            this.strappingVolumeUnits = _data["strappingVolumeUnits"] !== undefined ? _data["strappingVolumeUnits"] : <any>null;
            this.tankType = _data["tankType"] !== undefined ? _data["tankType"] : <any>null;
            this.unitsOfMeasure = _data["unitsOfMeasure"] !== undefined ? _data["unitsOfMeasure"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveGenerateStrappingChartRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveGenerateStrappingChartRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dishHeight"] = this.dishHeight !== undefined ? this.dishHeight : <any>null;
        data["height"] = this.height !== undefined ? this.height : <any>null;
        data["width"] = this.width !== undefined ? this.width : <any>null;
        data["strappingLevelUnits"] = this.strappingLevelUnits !== undefined ? this.strappingLevelUnits : <any>null;
        data["strappingVolumeUnits"] = this.strappingVolumeUnits !== undefined ? this.strappingVolumeUnits : <any>null;
        data["tankType"] = this.tankType !== undefined ? this.tankType : <any>null;
        data["unitsOfMeasure"] = this.unitsOfMeasure !== undefined ? this.unitsOfMeasure : <any>null;
        return data;
    }
}

export class EvolveGetUnitQuantityTypesResponse {
    unitQuantityType?: EvolveUnitQuantityType[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["unitQuantityType"])) {
                this.unitQuantityType = [] as any;
                for (let item of _data["unitQuantityType"])
                    this.unitQuantityType!.push(EvolveUnitQuantityType.fromJS(item));
            }
            else {
                this.unitQuantityType = <any>null;
            }
        }
    }

    static fromJS(data: any): EvolveGetUnitQuantityTypesResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveGetUnitQuantityTypesResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.unitQuantityType)) {
            data["unitQuantityType"] = [];
            for (let item of this.unitQuantityType)
                data["unitQuantityType"].push(item.toJSON());
        }
        return data;
    }
}

export class EvolveUnitQuantityType {
    unitQuantityTypeId?: number;
    name?: string | null;

    init(_data?: any) {
        if (_data) {
            this.unitQuantityTypeId = _data["unitQuantityTypeId"] !== undefined ? _data["unitQuantityTypeId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveUnitQuantityType {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveUnitQuantityType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["unitQuantityTypeId"] = this.unitQuantityTypeId !== undefined ? this.unitQuantityTypeId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        return data;
    }
}

export class EvolveRetrieveQuickAssetCreateReportResponse {
    quickAssetCreateReport?: QuickAssetCreateReport[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["quickAssetCreateReport"])) {
                this.quickAssetCreateReport = [] as any;
                for (let item of _data["quickAssetCreateReport"])
                    this.quickAssetCreateReport!.push(QuickAssetCreateReport.fromJS(item));
            }
            else {
                this.quickAssetCreateReport = <any>null;
            }
        }
    }

    static fromJS(data: any): EvolveRetrieveQuickAssetCreateReportResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveQuickAssetCreateReportResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.quickAssetCreateReport)) {
            data["quickAssetCreateReport"] = [];
            for (let item of this.quickAssetCreateReport)
                data["quickAssetCreateReport"].push(item.toJSON());
        }
        return data;
    }
}

export class QuickAssetCreateReport {
    createdOn?: Date;
    createdByFirstName?: string | null;
    createdByLastName?: string | null;
    assetId?: string;
    assetTitle?: string | null;
    customerName?: string | null;
    country?: string | null;
    state?: string | null;
    city?: string | null;
    address1?: string | null;
    address2?: string | null;
    address3?: string | null;
    deviceId?: string | null;

    init(_data?: any) {
        if (_data) {
            this.createdOn = _data["createdOn"] ? new Date(_data["createdOn"].toString()) : <any>null;
            this.createdByFirstName = _data["createdByFirstName"] !== undefined ? _data["createdByFirstName"] : <any>null;
            this.createdByLastName = _data["createdByLastName"] !== undefined ? _data["createdByLastName"] : <any>null;
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.assetTitle = _data["assetTitle"] !== undefined ? _data["assetTitle"] : <any>null;
            this.customerName = _data["customerName"] !== undefined ? _data["customerName"] : <any>null;
            this.country = _data["country"] !== undefined ? _data["country"] : <any>null;
            this.state = _data["state"] !== undefined ? _data["state"] : <any>null;
            this.city = _data["city"] !== undefined ? _data["city"] : <any>null;
            this.address1 = _data["address1"] !== undefined ? _data["address1"] : <any>null;
            this.address2 = _data["address2"] !== undefined ? _data["address2"] : <any>null;
            this.address3 = _data["address3"] !== undefined ? _data["address3"] : <any>null;
            this.deviceId = _data["deviceId"] !== undefined ? _data["deviceId"] : <any>null;
        }
    }

    static fromJS(data: any): QuickAssetCreateReport {
        data = typeof data === 'object' ? data : {};
        let result = new QuickAssetCreateReport();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createdOn"] = this.createdOn ? this.createdOn.toISOString() : <any>null;
        data["createdByFirstName"] = this.createdByFirstName !== undefined ? this.createdByFirstName : <any>null;
        data["createdByLastName"] = this.createdByLastName !== undefined ? this.createdByLastName : <any>null;
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["assetTitle"] = this.assetTitle !== undefined ? this.assetTitle : <any>null;
        data["customerName"] = this.customerName !== undefined ? this.customerName : <any>null;
        data["country"] = this.country !== undefined ? this.country : <any>null;
        data["state"] = this.state !== undefined ? this.state : <any>null;
        data["city"] = this.city !== undefined ? this.city : <any>null;
        data["address1"] = this.address1 !== undefined ? this.address1 : <any>null;
        data["address2"] = this.address2 !== undefined ? this.address2 : <any>null;
        data["address3"] = this.address3 !== undefined ? this.address3 : <any>null;
        data["deviceId"] = this.deviceId !== undefined ? this.deviceId : <any>null;
        return data;
    }
}

export class EvolveRetrieveQuickAssetCreateReportRequest {
    startDate?: Date;
    endDate?: Date;
    assetType?: AssetType;
    assetTitle?: string | null;
    deviceId?: string | null;
    userName?: string | null;
    domainId?: string;

    init(_data?: any) {
        if (_data) {
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>null;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>null;
            this.assetType = _data["assetType"] !== undefined ? _data["assetType"] : <any>null;
            this.assetTitle = _data["assetTitle"] !== undefined ? _data["assetTitle"] : <any>null;
            this.deviceId = _data["deviceId"] !== undefined ? _data["deviceId"] : <any>null;
            this.userName = _data["userName"] !== undefined ? _data["userName"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveRetrieveQuickAssetCreateReportRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveQuickAssetCreateReportRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>null;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>null;
        data["assetType"] = this.assetType !== undefined ? this.assetType : <any>null;
        data["assetTitle"] = this.assetTitle !== undefined ? this.assetTitle : <any>null;
        data["deviceId"] = this.deviceId !== undefined ? this.deviceId : <any>null;
        data["userName"] = this.userName !== undefined ? this.userName : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        return data;
    }
}

export class EvolveQuickHeliumISOCreateReportDetailsResponse {
    report?: QuickAssetCreateHeliumISOContainer | null;

    init(_data?: any) {
        if (_data) {
            this.report = _data["report"] ? QuickAssetCreateHeliumISOContainer.fromJS(_data["report"]) : <any>null;
        }
    }

    static fromJS(data: any): EvolveQuickHeliumISOCreateReportDetailsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveQuickHeliumISOCreateReportDetailsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["report"] = this.report ? this.report.toJSON() : <any>null;
        return data;
    }
}

export class QuickAssetCreateHeliumISOContainer {
    assetId?: string;
    description?: string | null;
    domainId?: string;
    siteInfo?: string | null;
    siteId?: string;
    assetType?: AssetType;
    designCurve?: DesignCurveInfo | null;
    customProperties?: EvolveAssetCustomProperty[] | null;
    notes?: string | null;
    assetIntegrationId?: string | null;
    dataChannels?: HeliumISODataChannel[] | null;
    createdByUsername?: string | null;
    createdDate?: Date | null;

    init(_data?: any) {
        if (_data) {
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.siteInfo = _data["siteInfo"] !== undefined ? _data["siteInfo"] : <any>null;
            this.siteId = _data["siteId"] !== undefined ? _data["siteId"] : <any>null;
            this.assetType = _data["assetType"] !== undefined ? _data["assetType"] : <any>null;
            this.designCurve = _data["designCurve"] ? DesignCurveInfo.fromJS(_data["designCurve"]) : <any>null;
            if (Array.isArray(_data["customProperties"])) {
                this.customProperties = [] as any;
                for (let item of _data["customProperties"])
                    this.customProperties!.push(EvolveAssetCustomProperty.fromJS(item));
            }
            else {
                this.customProperties = <any>null;
            }
            this.notes = _data["notes"] !== undefined ? _data["notes"] : <any>null;
            this.assetIntegrationId = _data["assetIntegrationId"] !== undefined ? _data["assetIntegrationId"] : <any>null;
            if (Array.isArray(_data["dataChannels"])) {
                this.dataChannels = [] as any;
                for (let item of _data["dataChannels"])
                    this.dataChannels!.push(HeliumISODataChannel.fromJS(item));
            }
            else {
                this.dataChannels = <any>null;
            }
            this.createdByUsername = _data["createdByUsername"] !== undefined ? _data["createdByUsername"] : <any>null;
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): QuickAssetCreateHeliumISOContainer {
        data = typeof data === 'object' ? data : {};
        let result = new QuickAssetCreateHeliumISOContainer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["siteInfo"] = this.siteInfo !== undefined ? this.siteInfo : <any>null;
        data["siteId"] = this.siteId !== undefined ? this.siteId : <any>null;
        data["assetType"] = this.assetType !== undefined ? this.assetType : <any>null;
        data["designCurve"] = this.designCurve ? this.designCurve.toJSON() : <any>null;
        if (Array.isArray(this.customProperties)) {
            data["customProperties"] = [];
            for (let item of this.customProperties)
                data["customProperties"].push(item.toJSON());
        }
        data["notes"] = this.notes !== undefined ? this.notes : <any>null;
        data["assetIntegrationId"] = this.assetIntegrationId !== undefined ? this.assetIntegrationId : <any>null;
        if (Array.isArray(this.dataChannels)) {
            data["dataChannels"] = [];
            for (let item of this.dataChannels)
                data["dataChannels"].push(item.toJSON());
        }
        data["createdByUsername"] = this.createdByUsername !== undefined ? this.createdByUsername : <any>null;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>null;
        return data;
    }
}

export class DesignCurveInfo {
    designCurveId?: number;
    description?: string | null;

    init(_data?: any) {
        if (_data) {
            this.designCurveId = _data["designCurveId"] !== undefined ? _data["designCurveId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
        }
    }

    static fromJS(data: any): DesignCurveInfo {
        data = typeof data === 'object' ? data : {};
        let result = new DesignCurveInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["designCurveId"] = this.designCurveId !== undefined ? this.designCurveId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        return data;
    }
}

export class HeliumISODataChannel {
    dataChannelId?: string;
    description?: string | null;
    displayPriority?: number | null;
    assetId?: string | null;
    domainId?: string;
    dataChannelTemplateId?: string;
    type?: DataChannelType;
    rtuId?: string | null;
    rtuDeviceId?: string | null;
    rtuChannelId?: string | null;
    rtuChannelNumber?: string | null;
    eventRules?: HeliumISODataChannelEventRules[] | null;
    integrationDetails?: DataChannelIntegrationDetails | null;

    init(_data?: any) {
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.displayPriority = _data["displayPriority"] !== undefined ? _data["displayPriority"] : <any>null;
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.dataChannelTemplateId = _data["dataChannelTemplateId"] !== undefined ? _data["dataChannelTemplateId"] : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.rtuId = _data["rtuId"] !== undefined ? _data["rtuId"] : <any>null;
            this.rtuDeviceId = _data["rtuDeviceId"] !== undefined ? _data["rtuDeviceId"] : <any>null;
            this.rtuChannelId = _data["rtuChannelId"] !== undefined ? _data["rtuChannelId"] : <any>null;
            this.rtuChannelNumber = _data["rtuChannelNumber"] !== undefined ? _data["rtuChannelNumber"] : <any>null;
            if (Array.isArray(_data["eventRules"])) {
                this.eventRules = [] as any;
                for (let item of _data["eventRules"])
                    this.eventRules!.push(HeliumISODataChannelEventRules.fromJS(item));
            }
            else {
                this.eventRules = <any>null;
            }
            this.integrationDetails = _data["integrationDetails"] ? DataChannelIntegrationDetails.fromJS(_data["integrationDetails"]) : <any>null;
        }
    }

    static fromJS(data: any): HeliumISODataChannel {
        data = typeof data === 'object' ? data : {};
        let result = new HeliumISODataChannel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["displayPriority"] = this.displayPriority !== undefined ? this.displayPriority : <any>null;
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["dataChannelTemplateId"] = this.dataChannelTemplateId !== undefined ? this.dataChannelTemplateId : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["rtuId"] = this.rtuId !== undefined ? this.rtuId : <any>null;
        data["rtuDeviceId"] = this.rtuDeviceId !== undefined ? this.rtuDeviceId : <any>null;
        data["rtuChannelId"] = this.rtuChannelId !== undefined ? this.rtuChannelId : <any>null;
        data["rtuChannelNumber"] = this.rtuChannelNumber !== undefined ? this.rtuChannelNumber : <any>null;
        if (Array.isArray(this.eventRules)) {
            data["eventRules"] = [];
            for (let item of this.eventRules)
                data["eventRules"].push(item.toJSON());
        }
        data["integrationDetails"] = this.integrationDetails ? this.integrationDetails.toJSON() : <any>null;
        return data;
    }
}

export class HeliumISODataChannelEventRules {
    dataChannelEventRuleId?: number;
    description?: string | null;
    eventRuleType?: EventRuleType;
    isEnabled?: boolean;
    eventImportanceLevel?: EventImportanceLevelType;
    eventComparator?: EventComparatorType | null;
    eventValue?: number | null;
    rosters?: HeliumISODataChannelEventRoster[] | null;

    init(_data?: any) {
        if (_data) {
            this.dataChannelEventRuleId = _data["dataChannelEventRuleId"] !== undefined ? _data["dataChannelEventRuleId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.eventRuleType = _data["eventRuleType"] !== undefined ? _data["eventRuleType"] : <any>null;
            this.isEnabled = _data["isEnabled"] !== undefined ? _data["isEnabled"] : <any>null;
            this.eventImportanceLevel = _data["eventImportanceLevel"] !== undefined ? _data["eventImportanceLevel"] : <any>null;
            this.eventComparator = _data["eventComparator"] !== undefined ? _data["eventComparator"] : <any>null;
            this.eventValue = _data["eventValue"] !== undefined ? _data["eventValue"] : <any>null;
            if (Array.isArray(_data["rosters"])) {
                this.rosters = [] as any;
                for (let item of _data["rosters"])
                    this.rosters!.push(HeliumISODataChannelEventRoster.fromJS(item));
            }
            else {
                this.rosters = <any>null;
            }
        }
    }

    static fromJS(data: any): HeliumISODataChannelEventRules {
        data = typeof data === 'object' ? data : {};
        let result = new HeliumISODataChannelEventRules();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelEventRuleId"] = this.dataChannelEventRuleId !== undefined ? this.dataChannelEventRuleId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["eventRuleType"] = this.eventRuleType !== undefined ? this.eventRuleType : <any>null;
        data["isEnabled"] = this.isEnabled !== undefined ? this.isEnabled : <any>null;
        data["eventImportanceLevel"] = this.eventImportanceLevel !== undefined ? this.eventImportanceLevel : <any>null;
        data["eventComparator"] = this.eventComparator !== undefined ? this.eventComparator : <any>null;
        data["eventValue"] = this.eventValue !== undefined ? this.eventValue : <any>null;
        if (Array.isArray(this.rosters)) {
            data["rosters"] = [];
            for (let item of this.rosters)
                data["rosters"].push(item.toJSON());
        }
        return data;
    }
}

export class HeliumISODataChannelEventRoster {
    eventRosterId?: number;
    rosterName?: string | null;

    init(_data?: any) {
        if (_data) {
            this.eventRosterId = _data["eventRosterId"] !== undefined ? _data["eventRosterId"] : <any>null;
            this.rosterName = _data["rosterName"] !== undefined ? _data["rosterName"] : <any>null;
        }
    }

    static fromJS(data: any): HeliumISODataChannelEventRoster {
        data = typeof data === 'object' ? data : {};
        let result = new HeliumISODataChannelEventRoster();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["eventRosterId"] = this.eventRosterId !== undefined ? this.eventRosterId : <any>null;
        data["rosterName"] = this.rosterName !== undefined ? this.rosterName : <any>null;
        return data;
    }
}

export class DataChannelIntegrationDetails {
    autoGenerateIntegrationId?: boolean;
    enableIntegration?: boolean;
    integrationDomainId?: string | null;
    integrationId?: string | null;

    init(_data?: any) {
        if (_data) {
            this.autoGenerateIntegrationId = _data["autoGenerateIntegrationId"] !== undefined ? _data["autoGenerateIntegrationId"] : <any>null;
            this.enableIntegration = _data["enableIntegration"] !== undefined ? _data["enableIntegration"] : <any>null;
            this.integrationDomainId = _data["integrationDomainId"] !== undefined ? _data["integrationDomainId"] : <any>null;
            this.integrationId = _data["integrationId"] !== undefined ? _data["integrationId"] : <any>null;
        }
    }

    static fromJS(data: any): DataChannelIntegrationDetails {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelIntegrationDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["autoGenerateIntegrationId"] = this.autoGenerateIntegrationId !== undefined ? this.autoGenerateIntegrationId : <any>null;
        data["enableIntegration"] = this.enableIntegration !== undefined ? this.enableIntegration : <any>null;
        data["integrationDomainId"] = this.integrationDomainId !== undefined ? this.integrationDomainId : <any>null;
        data["integrationId"] = this.integrationId !== undefined ? this.integrationId : <any>null;
        return data;
    }
}

export class EvolveQuickHeliumISOCreateReportDetailsRequest {
    assetId?: string;

    init(_data?: any) {
        if (_data) {
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveQuickHeliumISOCreateReportDetailsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveQuickHeliumISOCreateReportDetailsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        return data;
    }
}

export class EvolveGetDomainAdditionalByIdResponse {
    domainAdditionalInfo?: DomainAdditionalInfoResponseDto | null;
    heliumISOContainerDataChannel?: HeliumISOContainerDataChannelTemplate[] | null;

    init(_data?: any) {
        if (_data) {
            this.domainAdditionalInfo = _data["domainAdditionalInfo"] ? DomainAdditionalInfoResponseDto.fromJS(_data["domainAdditionalInfo"]) : <any>null;
            if (Array.isArray(_data["heliumISOContainerDataChannel"])) {
                this.heliumISOContainerDataChannel = [] as any;
                for (let item of _data["heliumISOContainerDataChannel"])
                    this.heliumISOContainerDataChannel!.push(HeliumISOContainerDataChannelTemplate.fromJS(item));
            }
            else {
                this.heliumISOContainerDataChannel = <any>null;
            }
        }
    }

    static fromJS(data: any): EvolveGetDomainAdditionalByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveGetDomainAdditionalByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["domainAdditionalInfo"] = this.domainAdditionalInfo ? this.domainAdditionalInfo.toJSON() : <any>null;
        if (Array.isArray(this.heliumISOContainerDataChannel)) {
            data["heliumISOContainerDataChannel"] = [];
            for (let item of this.heliumISOContainerDataChannel)
                data["heliumISOContainerDataChannel"].push(item.toJSON());
        }
        return data;
    }
}

export class DomainAdditionalInfo {
    themeColor?: string | null;
    hasIsoContainer?: boolean;
    isoContainerDefaultSiteInfo?: SiteInfoRecord | null;
    isoContainerDefaultHeliumEventGroupId?: number | null;
    isoContainerDefaultHeliumLevelDCTemplateId?: string | null;
    isoContainerDefaultHeliumPressureDCTemplateId?: string | null;
    isoContainerDefaultHeliumPressureRoCDCTemplateId?: string | null;
    isoContainerDefaultNitrogenEventGroupId?: number | null;
    isoContainerDefaultNitrogenLevelDCTemplateId?: string | null;
    isoContainerDefaultNitrogenPressureDCTemplateId?: string | null;
    isoContainerDefaultHeliumProductInfo?: ProductDetail | null;
    isoContainerDefaultNitrogenProductInfo?: ProductDetail | null;
    dataChannelsDisplayPriority?: number[] | null;

    init(_data?: any) {
        if (_data) {
            this.themeColor = _data["themeColor"] !== undefined ? _data["themeColor"] : <any>null;
            this.hasIsoContainer = _data["hasIsoContainer"] !== undefined ? _data["hasIsoContainer"] : <any>null;
            this.isoContainerDefaultSiteInfo = _data["isoContainerDefaultSiteInfo"] ? SiteInfoRecord.fromJS(_data["isoContainerDefaultSiteInfo"]) : <any>null;
            this.isoContainerDefaultHeliumEventGroupId = _data["isoContainerDefaultHeliumEventGroupId"] !== undefined ? _data["isoContainerDefaultHeliumEventGroupId"] : <any>null;
            this.isoContainerDefaultHeliumLevelDCTemplateId = _data["isoContainerDefaultHeliumLevelDCTemplateId"] !== undefined ? _data["isoContainerDefaultHeliumLevelDCTemplateId"] : <any>null;
            this.isoContainerDefaultHeliumPressureDCTemplateId = _data["isoContainerDefaultHeliumPressureDCTemplateId"] !== undefined ? _data["isoContainerDefaultHeliumPressureDCTemplateId"] : <any>null;
            this.isoContainerDefaultHeliumPressureRoCDCTemplateId = _data["isoContainerDefaultHeliumPressureRoCDCTemplateId"] !== undefined ? _data["isoContainerDefaultHeliumPressureRoCDCTemplateId"] : <any>null;
            this.isoContainerDefaultNitrogenEventGroupId = _data["isoContainerDefaultNitrogenEventGroupId"] !== undefined ? _data["isoContainerDefaultNitrogenEventGroupId"] : <any>null;
            this.isoContainerDefaultNitrogenLevelDCTemplateId = _data["isoContainerDefaultNitrogenLevelDCTemplateId"] !== undefined ? _data["isoContainerDefaultNitrogenLevelDCTemplateId"] : <any>null;
            this.isoContainerDefaultNitrogenPressureDCTemplateId = _data["isoContainerDefaultNitrogenPressureDCTemplateId"] !== undefined ? _data["isoContainerDefaultNitrogenPressureDCTemplateId"] : <any>null;
            this.isoContainerDefaultHeliumProductInfo = _data["isoContainerDefaultHeliumProductInfo"] ? ProductDetail.fromJS(_data["isoContainerDefaultHeliumProductInfo"]) : <any>null;
            this.isoContainerDefaultNitrogenProductInfo = _data["isoContainerDefaultNitrogenProductInfo"] ? ProductDetail.fromJS(_data["isoContainerDefaultNitrogenProductInfo"]) : <any>null;
            if (Array.isArray(_data["dataChannelsDisplayPriority"])) {
                this.dataChannelsDisplayPriority = [] as any;
                for (let item of _data["dataChannelsDisplayPriority"])
                    this.dataChannelsDisplayPriority!.push(item);
            }
            else {
                this.dataChannelsDisplayPriority = <any>null;
            }
        }
    }

    static fromJS(data: any): DomainAdditionalInfo {
        data = typeof data === 'object' ? data : {};
        let result = new DomainAdditionalInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["themeColor"] = this.themeColor !== undefined ? this.themeColor : <any>null;
        data["hasIsoContainer"] = this.hasIsoContainer !== undefined ? this.hasIsoContainer : <any>null;
        data["isoContainerDefaultSiteInfo"] = this.isoContainerDefaultSiteInfo ? this.isoContainerDefaultSiteInfo.toJSON() : <any>null;
        data["isoContainerDefaultHeliumEventGroupId"] = this.isoContainerDefaultHeliumEventGroupId !== undefined ? this.isoContainerDefaultHeliumEventGroupId : <any>null;
        data["isoContainerDefaultHeliumLevelDCTemplateId"] = this.isoContainerDefaultHeliumLevelDCTemplateId !== undefined ? this.isoContainerDefaultHeliumLevelDCTemplateId : <any>null;
        data["isoContainerDefaultHeliumPressureDCTemplateId"] = this.isoContainerDefaultHeliumPressureDCTemplateId !== undefined ? this.isoContainerDefaultHeliumPressureDCTemplateId : <any>null;
        data["isoContainerDefaultHeliumPressureRoCDCTemplateId"] = this.isoContainerDefaultHeliumPressureRoCDCTemplateId !== undefined ? this.isoContainerDefaultHeliumPressureRoCDCTemplateId : <any>null;
        data["isoContainerDefaultNitrogenEventGroupId"] = this.isoContainerDefaultNitrogenEventGroupId !== undefined ? this.isoContainerDefaultNitrogenEventGroupId : <any>null;
        data["isoContainerDefaultNitrogenLevelDCTemplateId"] = this.isoContainerDefaultNitrogenLevelDCTemplateId !== undefined ? this.isoContainerDefaultNitrogenLevelDCTemplateId : <any>null;
        data["isoContainerDefaultNitrogenPressureDCTemplateId"] = this.isoContainerDefaultNitrogenPressureDCTemplateId !== undefined ? this.isoContainerDefaultNitrogenPressureDCTemplateId : <any>null;
        data["isoContainerDefaultHeliumProductInfo"] = this.isoContainerDefaultHeliumProductInfo ? this.isoContainerDefaultHeliumProductInfo.toJSON() : <any>null;
        data["isoContainerDefaultNitrogenProductInfo"] = this.isoContainerDefaultNitrogenProductInfo ? this.isoContainerDefaultNitrogenProductInfo.toJSON() : <any>null;
        if (Array.isArray(this.dataChannelsDisplayPriority)) {
            data["dataChannelsDisplayPriority"] = [];
            for (let item of this.dataChannelsDisplayPriority)
                data["dataChannelsDisplayPriority"].push(item);
        }
        return data;
    }
}

export class DomainAdditionalInfoResponseDto extends DomainAdditionalInfo {
    areThereDomainNotes?: boolean;

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.areThereDomainNotes = _data["areThereDomainNotes"] !== undefined ? _data["areThereDomainNotes"] : <any>null;
        }
    }

    static fromJS(data: any): DomainAdditionalInfoResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new DomainAdditionalInfoResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["areThereDomainNotes"] = this.areThereDomainNotes !== undefined ? this.areThereDomainNotes : <any>null;
        super.toJSON(data);
        return data;
    }
}

export class HeliumISOContainerDataChannelTemplate {
    heliumISOContainerDataChannelId?: number;
    description?: string | null;

    init(_data?: any) {
        if (_data) {
            this.heliumISOContainerDataChannelId = _data["heliumISOContainerDataChannelId"] !== undefined ? _data["heliumISOContainerDataChannelId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
        }
    }

    static fromJS(data: any): HeliumISOContainerDataChannelTemplate {
        data = typeof data === 'object' ? data : {};
        let result = new HeliumISOContainerDataChannelTemplate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["heliumISOContainerDataChannelId"] = this.heliumISOContainerDataChannelId !== undefined ? this.heliumISOContainerDataChannelId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        return data;
    }
}

export class EvolveGetDomainAdditionalByIdRequest {
    domainId?: string;

    init(_data?: any) {
        if (_data) {
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveGetDomainAdditionalByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveGetDomainAdditionalByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        return data;
    }
}

export class EvolveSaveDomainAdditionalResponse {
    /** Flag to indicate successful/unsuccessful save operation.
             */
    saved?: boolean;

    init(_data?: any) {
        if (_data) {
            this.saved = _data["saved"] !== undefined ? _data["saved"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveSaveDomainAdditionalResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveDomainAdditionalResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["saved"] = this.saved !== undefined ? this.saved : <any>null;
        return data;
    }
}

export class EvolveSaveDomainAdditionalRequest {
    /** The domain id for the additional info.
             */
    domainId?: string;
    /** The theme color.
             */
    themeColor?: string | null;
    /** Any helium iso container information.
             */
    domainHeliumIsoContainer?: DomainHeliumIsoContainerInfo | null;

    init(_data?: any) {
        if (_data) {
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.themeColor = _data["themeColor"] !== undefined ? _data["themeColor"] : <any>null;
            this.domainHeliumIsoContainer = _data["domainHeliumIsoContainer"] ? DomainHeliumIsoContainerInfo.fromJS(_data["domainHeliumIsoContainer"]) : <any>null;
        }
    }

    static fromJS(data: any): EvolveSaveDomainAdditionalRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveDomainAdditionalRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["themeColor"] = this.themeColor !== undefined ? this.themeColor : <any>null;
        data["domainHeliumIsoContainer"] = this.domainHeliumIsoContainer ? this.domainHeliumIsoContainer.toJSON() : <any>null;
        return data;
    }
}

export class DomainHeliumIsoContainerInfo {
    hasIsoContainer?: boolean;
    isoContainerDefaultSiteId?: string | null;
    isoContainerDefaultHeliumEventGroupId?: number | null;
    isoContainerDefaultHeliumLevelDCTemplateId?: string | null;
    isoContainerDefaultHeliumPressureDCTemplateId?: string | null;
    isoContainerDefaultHeliumPressureRoCDCTemplateId?: string | null;
    isoContainerDefaultNitrogenEventGroupId?: number | null;
    isoContainerDefaultNitrogenLevelDCTemplateId?: string | null;
    isoContainerDefaultNitrogenPressureDCTemplateId?: string | null;
    isoContainerDefaultHeliumProductId?: string | null;
    isoContainerDefaultNitrogenProductId?: string | null;
    dataChannelsDisplayPriority?: number[] | null;

    init(_data?: any) {
        if (_data) {
            this.hasIsoContainer = _data["hasIsoContainer"] !== undefined ? _data["hasIsoContainer"] : <any>null;
            this.isoContainerDefaultSiteId = _data["isoContainerDefaultSiteId"] !== undefined ? _data["isoContainerDefaultSiteId"] : <any>null;
            this.isoContainerDefaultHeliumEventGroupId = _data["isoContainerDefaultHeliumEventGroupId"] !== undefined ? _data["isoContainerDefaultHeliumEventGroupId"] : <any>null;
            this.isoContainerDefaultHeliumLevelDCTemplateId = _data["isoContainerDefaultHeliumLevelDCTemplateId"] !== undefined ? _data["isoContainerDefaultHeliumLevelDCTemplateId"] : <any>null;
            this.isoContainerDefaultHeliumPressureDCTemplateId = _data["isoContainerDefaultHeliumPressureDCTemplateId"] !== undefined ? _data["isoContainerDefaultHeliumPressureDCTemplateId"] : <any>null;
            this.isoContainerDefaultHeliumPressureRoCDCTemplateId = _data["isoContainerDefaultHeliumPressureRoCDCTemplateId"] !== undefined ? _data["isoContainerDefaultHeliumPressureRoCDCTemplateId"] : <any>null;
            this.isoContainerDefaultNitrogenEventGroupId = _data["isoContainerDefaultNitrogenEventGroupId"] !== undefined ? _data["isoContainerDefaultNitrogenEventGroupId"] : <any>null;
            this.isoContainerDefaultNitrogenLevelDCTemplateId = _data["isoContainerDefaultNitrogenLevelDCTemplateId"] !== undefined ? _data["isoContainerDefaultNitrogenLevelDCTemplateId"] : <any>null;
            this.isoContainerDefaultNitrogenPressureDCTemplateId = _data["isoContainerDefaultNitrogenPressureDCTemplateId"] !== undefined ? _data["isoContainerDefaultNitrogenPressureDCTemplateId"] : <any>null;
            this.isoContainerDefaultHeliumProductId = _data["isoContainerDefaultHeliumProductId"] !== undefined ? _data["isoContainerDefaultHeliumProductId"] : <any>null;
            this.isoContainerDefaultNitrogenProductId = _data["isoContainerDefaultNitrogenProductId"] !== undefined ? _data["isoContainerDefaultNitrogenProductId"] : <any>null;
            if (Array.isArray(_data["dataChannelsDisplayPriority"])) {
                this.dataChannelsDisplayPriority = [] as any;
                for (let item of _data["dataChannelsDisplayPriority"])
                    this.dataChannelsDisplayPriority!.push(item);
            }
            else {
                this.dataChannelsDisplayPriority = <any>null;
            }
        }
    }

    static fromJS(data: any): DomainHeliumIsoContainerInfo {
        data = typeof data === 'object' ? data : {};
        let result = new DomainHeliumIsoContainerInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hasIsoContainer"] = this.hasIsoContainer !== undefined ? this.hasIsoContainer : <any>null;
        data["isoContainerDefaultSiteId"] = this.isoContainerDefaultSiteId !== undefined ? this.isoContainerDefaultSiteId : <any>null;
        data["isoContainerDefaultHeliumEventGroupId"] = this.isoContainerDefaultHeliumEventGroupId !== undefined ? this.isoContainerDefaultHeliumEventGroupId : <any>null;
        data["isoContainerDefaultHeliumLevelDCTemplateId"] = this.isoContainerDefaultHeliumLevelDCTemplateId !== undefined ? this.isoContainerDefaultHeliumLevelDCTemplateId : <any>null;
        data["isoContainerDefaultHeliumPressureDCTemplateId"] = this.isoContainerDefaultHeliumPressureDCTemplateId !== undefined ? this.isoContainerDefaultHeliumPressureDCTemplateId : <any>null;
        data["isoContainerDefaultHeliumPressureRoCDCTemplateId"] = this.isoContainerDefaultHeliumPressureRoCDCTemplateId !== undefined ? this.isoContainerDefaultHeliumPressureRoCDCTemplateId : <any>null;
        data["isoContainerDefaultNitrogenEventGroupId"] = this.isoContainerDefaultNitrogenEventGroupId !== undefined ? this.isoContainerDefaultNitrogenEventGroupId : <any>null;
        data["isoContainerDefaultNitrogenLevelDCTemplateId"] = this.isoContainerDefaultNitrogenLevelDCTemplateId !== undefined ? this.isoContainerDefaultNitrogenLevelDCTemplateId : <any>null;
        data["isoContainerDefaultNitrogenPressureDCTemplateId"] = this.isoContainerDefaultNitrogenPressureDCTemplateId !== undefined ? this.isoContainerDefaultNitrogenPressureDCTemplateId : <any>null;
        data["isoContainerDefaultHeliumProductId"] = this.isoContainerDefaultHeliumProductId !== undefined ? this.isoContainerDefaultHeliumProductId : <any>null;
        data["isoContainerDefaultNitrogenProductId"] = this.isoContainerDefaultNitrogenProductId !== undefined ? this.isoContainerDefaultNitrogenProductId : <any>null;
        if (Array.isArray(this.dataChannelsDisplayPriority)) {
            data["dataChannelsDisplayPriority"] = [];
            for (let item of this.dataChannelsDisplayPriority)
                data["dataChannelsDisplayPriority"].push(item);
        }
        return data;
    }
}

export class EvolveRetrieveIntegrationDomainByUserEffectiveDomainResponse {
    integrationDomain?: FtpDomainInfo[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["integrationDomain"])) {
                this.integrationDomain = [] as any;
                for (let item of _data["integrationDomain"])
                    this.integrationDomain!.push(FtpDomainInfo.fromJS(item));
            }
            else {
                this.integrationDomain = <any>null;
            }
        }
    }

    static fromJS(data: any): EvolveRetrieveIntegrationDomainByUserEffectiveDomainResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveIntegrationDomainByUserEffectiveDomainResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.integrationDomain)) {
            data["integrationDomain"] = [];
            for (let item of this.integrationDomain)
                data["integrationDomain"].push(item.toJSON());
        }
        return data;
    }
}

export class EvolveAddAnalogDataChannelResponse {
    dataChannel?: EditAssetDataChannel | null;

    init(_data?: any) {
        if (_data) {
            this.dataChannel = _data["dataChannel"] ? EditAssetDataChannel.fromJS(_data["dataChannel"]) : <any>null;
        }
    }

    static fromJS(data: any): EvolveAddAnalogDataChannelResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveAddAnalogDataChannelResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannel"] = this.dataChannel ? this.dataChannel.toJSON() : <any>null;
        return data;
    }
}

export class EvolveAddAnalogDataChannelRequest {
    /** AssetId.
             */
    assetId?: string;
    /** Analog data channel to add
             */
    analogChannel!: EvolveAnalogDataChannelDetails;

    init(_data?: any) {
        if (_data) {
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.analogChannel = _data["analogChannel"] ? EvolveAnalogDataChannelDetails.fromJS(_data["analogChannel"]) : new EvolveAnalogDataChannelDetails();
        }
    }

    static fromJS(data: any): EvolveAddAnalogDataChannelRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveAddAnalogDataChannelRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["analogChannel"] = this.analogChannel ? this.analogChannel.toJSON() : <any>null;
        return data;
    }
}

export class EvolveAnalogDataChannelDetails {
    /** Data Channel description.
             */
    description?: string | null;
    /** Data Channel data source.
             */
    dataSource?: DataChannelDataSourceType;
    /** Data channel RtuId.
             */
    rtuId?: string | null;
    /** Data channel Rtu channel Id.
             */
    rtuChannelId?: string | null;
    /** Data channels template Id.
             */
    dataChannelTemplateId?: string | null;
    /** A flag that determines whether the TankDimensionId is required or not.
When set to true TankDimensionId becomes required.
             */
    isTankDimensionsSet?: boolean;
    /** Data channel tank type. Required only if IsTankDimensionsSet = false
             */
    tankType?: TankType | null;
    /** Data channel tank dimensions. Required only if IsTankDimensionsSet = true
             */
    tankDimensionId?: string | null;
    /** Data channel ProductId
             */
    productId?: string | null;
    /** Event rule group
             */
    eventRuleGroupId?: number | null;
    /** Source DataChannelId if the channel is created based on another data channel
             */
    sourceDataChannelId?: string | null;
    /** Comments of the published data channel.
             */
    publishedComments?: string | null;

    init(_data?: any) {
        if (_data) {
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.dataSource = _data["dataSource"] !== undefined ? _data["dataSource"] : <any>null;
            this.rtuId = _data["rtuId"] !== undefined ? _data["rtuId"] : <any>null;
            this.rtuChannelId = _data["rtuChannelId"] !== undefined ? _data["rtuChannelId"] : <any>null;
            this.dataChannelTemplateId = _data["dataChannelTemplateId"] !== undefined ? _data["dataChannelTemplateId"] : <any>null;
            this.isTankDimensionsSet = _data["isTankDimensionsSet"] !== undefined ? _data["isTankDimensionsSet"] : <any>null;
            this.tankType = _data["tankType"] !== undefined ? _data["tankType"] : <any>null;
            this.tankDimensionId = _data["tankDimensionId"] !== undefined ? _data["tankDimensionId"] : <any>null;
            this.productId = _data["productId"] !== undefined ? _data["productId"] : <any>null;
            this.eventRuleGroupId = _data["eventRuleGroupId"] !== undefined ? _data["eventRuleGroupId"] : <any>null;
            this.sourceDataChannelId = _data["sourceDataChannelId"] !== undefined ? _data["sourceDataChannelId"] : <any>null;
            this.publishedComments = _data["publishedComments"] !== undefined ? _data["publishedComments"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveAnalogDataChannelDetails {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveAnalogDataChannelDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["dataSource"] = this.dataSource !== undefined ? this.dataSource : <any>null;
        data["rtuId"] = this.rtuId !== undefined ? this.rtuId : <any>null;
        data["rtuChannelId"] = this.rtuChannelId !== undefined ? this.rtuChannelId : <any>null;
        data["dataChannelTemplateId"] = this.dataChannelTemplateId !== undefined ? this.dataChannelTemplateId : <any>null;
        data["isTankDimensionsSet"] = this.isTankDimensionsSet !== undefined ? this.isTankDimensionsSet : <any>null;
        data["tankType"] = this.tankType !== undefined ? this.tankType : <any>null;
        data["tankDimensionId"] = this.tankDimensionId !== undefined ? this.tankDimensionId : <any>null;
        data["productId"] = this.productId !== undefined ? this.productId : <any>null;
        data["eventRuleGroupId"] = this.eventRuleGroupId !== undefined ? this.eventRuleGroupId : <any>null;
        data["sourceDataChannelId"] = this.sourceDataChannelId !== undefined ? this.sourceDataChannelId : <any>null;
        data["publishedComments"] = this.publishedComments !== undefined ? this.publishedComments : <any>null;
        return data;
    }
}

export class EvolveAddDiagnosticDataChannelResponse {
    dataChannels?: EditAssetDataChannel[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["dataChannels"])) {
                this.dataChannels = [] as any;
                for (let item of _data["dataChannels"])
                    this.dataChannels!.push(EditAssetDataChannel.fromJS(item));
            }
            else {
                this.dataChannels = <any>null;
            }
        }
    }

    static fromJS(data: any): EvolveAddDiagnosticDataChannelResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveAddDiagnosticDataChannelResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dataChannels)) {
            data["dataChannels"] = [];
            for (let item of this.dataChannels)
                data["dataChannels"].push(item.toJSON());
        }
        return data;
    }
}

export class EvolveAddDiagnosticDataChannelRequest {
    /** AssetId.
             */
    assetId?: string;
    /** DeviceId.
             */
    deviceId?: string | null;
    /** DiagnosticChannel.
             */
    diagnosticChannel?: DataChannelType[] | null;

    init(_data?: any) {
        if (_data) {
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.deviceId = _data["deviceId"] !== undefined ? _data["deviceId"] : <any>null;
            if (Array.isArray(_data["diagnosticChannel"])) {
                this.diagnosticChannel = [] as any;
                for (let item of _data["diagnosticChannel"])
                    this.diagnosticChannel!.push(item);
            }
            else {
                this.diagnosticChannel = <any>null;
            }
        }
    }

    static fromJS(data: any): EvolveAddDiagnosticDataChannelRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveAddDiagnosticDataChannelRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["deviceId"] = this.deviceId !== undefined ? this.deviceId : <any>null;
        if (Array.isArray(this.diagnosticChannel)) {
            data["diagnosticChannel"] = [];
            for (let item of this.diagnosticChannel)
                data["diagnosticChannel"].push(item);
        }
        return data;
    }
}

export class EvolveAddDigitalDataChannelResponse {
    dataChannel?: EditAssetDataChannel | null;

    init(_data?: any) {
        if (_data) {
            this.dataChannel = _data["dataChannel"] ? EditAssetDataChannel.fromJS(_data["dataChannel"]) : <any>null;
        }
    }

    static fromJS(data: any): EvolveAddDigitalDataChannelResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveAddDigitalDataChannelResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannel"] = this.dataChannel ? this.dataChannel.toJSON() : <any>null;
        return data;
    }
}

export class EvolveAddDigitalDataChannelRequest {
    /** AssetId.
             */
    assetId!: string;
    /** Digital data channel to add
             */
    digitalChannel!: EvolveDigitalDataChannelDetails;

    init(_data?: any) {
        if (_data) {
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.digitalChannel = _data["digitalChannel"] ? EvolveDigitalDataChannelDetails.fromJS(_data["digitalChannel"]) : new EvolveDigitalDataChannelDetails();
        }
    }

    static fromJS(data: any): EvolveAddDigitalDataChannelRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveAddDigitalDataChannelRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["digitalChannel"] = this.digitalChannel ? this.digitalChannel.toJSON() : <any>null;
        return data;
    }
}

export class EvolveDigitalDataChannelDetails {
    /** Data Channel description.
             */
    description?: string | null;
    /** Data channel RtuId.
             */
    rtuId?: string | null;
    /** Data channel Rtu channel Id.
             */
    rtuChannelId?: string | null;
    /** Data channels template Id.
             */
    dataChannelTemplateId?: string;
    /** Event rule group
             */
    eventRuleGroupId?: number | null;
    /** State 0 Value
             */
    state0Value?: number;
    /** State 0 Text
             */
    state0Text?: string | null;
    /** State 1 Value
             */
    state1Value?: number;
    /** State 1 Text
             */
    state1Text?: string | null;

    init(_data?: any) {
        if (_data) {
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.rtuId = _data["rtuId"] !== undefined ? _data["rtuId"] : <any>null;
            this.rtuChannelId = _data["rtuChannelId"] !== undefined ? _data["rtuChannelId"] : <any>null;
            this.dataChannelTemplateId = _data["dataChannelTemplateId"] !== undefined ? _data["dataChannelTemplateId"] : <any>null;
            this.eventRuleGroupId = _data["eventRuleGroupId"] !== undefined ? _data["eventRuleGroupId"] : <any>null;
            this.state0Value = _data["state0Value"] !== undefined ? _data["state0Value"] : <any>null;
            this.state0Text = _data["state0Text"] !== undefined ? _data["state0Text"] : <any>null;
            this.state1Value = _data["state1Value"] !== undefined ? _data["state1Value"] : <any>null;
            this.state1Text = _data["state1Text"] !== undefined ? _data["state1Text"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveDigitalDataChannelDetails {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveDigitalDataChannelDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["rtuId"] = this.rtuId !== undefined ? this.rtuId : <any>null;
        data["rtuChannelId"] = this.rtuChannelId !== undefined ? this.rtuChannelId : <any>null;
        data["dataChannelTemplateId"] = this.dataChannelTemplateId !== undefined ? this.dataChannelTemplateId : <any>null;
        data["eventRuleGroupId"] = this.eventRuleGroupId !== undefined ? this.eventRuleGroupId : <any>null;
        data["state0Value"] = this.state0Value !== undefined ? this.state0Value : <any>null;
        data["state0Text"] = this.state0Text !== undefined ? this.state0Text : <any>null;
        data["state1Value"] = this.state1Value !== undefined ? this.state1Value : <any>null;
        data["state1Text"] = this.state1Text !== undefined ? this.state1Text : <any>null;
        return data;
    }
}

export class EvolveAddTotalizerDataChannelResponse {
    dataChannel?: EditAssetDataChannel | null;

    init(_data?: any) {
        if (_data) {
            this.dataChannel = _data["dataChannel"] ? EditAssetDataChannel.fromJS(_data["dataChannel"]) : <any>null;
        }
    }

    static fromJS(data: any): EvolveAddTotalizerDataChannelResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveAddTotalizerDataChannelResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannel"] = this.dataChannel ? this.dataChannel.toJSON() : <any>null;
        return data;
    }
}

export class EvolveAddTotalizerDataChannelRequest {
    /** Asset Id.
             */
    assetId?: string;
    /** Totalizer data channel that is intended to be added and needs to be validated
             */
    totalizerChannel!: EvolveTotalizerDataChannelDetails;

    init(_data?: any) {
        if (_data) {
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.totalizerChannel = _data["totalizerChannel"] ? EvolveTotalizerDataChannelDetails.fromJS(_data["totalizerChannel"]) : new EvolveTotalizerDataChannelDetails();
        }
    }

    static fromJS(data: any): EvolveAddTotalizerDataChannelRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveAddTotalizerDataChannelRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["totalizerChannel"] = this.totalizerChannel ? this.totalizerChannel.toJSON() : <any>null;
        return data;
    }
}

export class EvolveTotalizerDataChannelDetails {
    /** Data Channel description.
             */
    description?: string | null;
    /** Data channel ProductId
             */
    productId?: string | null;
    /** Data channels template Id.
             */
    dataChannelTemplateId?: string;
    /** Event rule group
             */
    eventRuleGroupId?: number | null;
    /** List of description for level channels to totalize
             */
    levelChannels?: string[] | null;

    init(_data?: any) {
        if (_data) {
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.productId = _data["productId"] !== undefined ? _data["productId"] : <any>null;
            this.dataChannelTemplateId = _data["dataChannelTemplateId"] !== undefined ? _data["dataChannelTemplateId"] : <any>null;
            this.eventRuleGroupId = _data["eventRuleGroupId"] !== undefined ? _data["eventRuleGroupId"] : <any>null;
            if (Array.isArray(_data["levelChannels"])) {
                this.levelChannels = [] as any;
                for (let item of _data["levelChannels"])
                    this.levelChannels!.push(item);
            }
            else {
                this.levelChannels = <any>null;
            }
        }
    }

    static fromJS(data: any): EvolveTotalizerDataChannelDetails {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveTotalizerDataChannelDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["productId"] = this.productId !== undefined ? this.productId : <any>null;
        data["dataChannelTemplateId"] = this.dataChannelTemplateId !== undefined ? this.dataChannelTemplateId : <any>null;
        data["eventRuleGroupId"] = this.eventRuleGroupId !== undefined ? this.eventRuleGroupId : <any>null;
        if (Array.isArray(this.levelChannels)) {
            data["levelChannels"] = [];
            for (let item of this.levelChannels)
                data["levelChannels"].push(item);
        }
        return data;
    }
}

export class EvolveAddVirtualDataChannelResponse {
    dataChannel?: EditAssetDataChannel | null;

    init(_data?: any) {
        if (_data) {
            this.dataChannel = _data["dataChannel"] ? EditAssetDataChannel.fromJS(_data["dataChannel"]) : <any>null;
        }
    }

    static fromJS(data: any): EvolveAddVirtualDataChannelResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveAddVirtualDataChannelResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannel"] = this.dataChannel ? this.dataChannel.toJSON() : <any>null;
        return data;
    }
}

export class EvolveAddVirtualDataChannelRequest {
    /** Asset Id.
             */
    assetId?: string;
    /** Virtual data channel that is intended to be added and needs to be validated
             */
    virtualChannel!: EvolveVirtualDataChannelDetails;

    init(_data?: any) {
        if (_data) {
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.virtualChannel = _data["virtualChannel"] ? EvolveVirtualDataChannelDetails.fromJS(_data["virtualChannel"]) : new EvolveVirtualDataChannelDetails();
        }
    }

    static fromJS(data: any): EvolveAddVirtualDataChannelRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveAddVirtualDataChannelRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["virtualChannel"] = this.virtualChannel ? this.virtualChannel.toJSON() : <any>null;
        return data;
    }
}

export class EvolveVirtualDataChannelDetails {
    /** Data Channel description.
             */
    description?: string | null;
    /** Data channels template Id.
             */
    dataChannelTemplateId?: string;
    /** Event rule group
             */
    eventRuleGroupId?: number | null;
    /** Formula Parts
             */
    formulaParts?: EvolveVirtualChannelFormulaPart[] | null;

    init(_data?: any) {
        if (_data) {
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.dataChannelTemplateId = _data["dataChannelTemplateId"] !== undefined ? _data["dataChannelTemplateId"] : <any>null;
            this.eventRuleGroupId = _data["eventRuleGroupId"] !== undefined ? _data["eventRuleGroupId"] : <any>null;
            if (Array.isArray(_data["formulaParts"])) {
                this.formulaParts = [] as any;
                for (let item of _data["formulaParts"])
                    this.formulaParts!.push(EvolveVirtualChannelFormulaPart.fromJS(item));
            }
            else {
                this.formulaParts = <any>null;
            }
        }
    }

    static fromJS(data: any): EvolveVirtualDataChannelDetails {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveVirtualDataChannelDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["dataChannelTemplateId"] = this.dataChannelTemplateId !== undefined ? this.dataChannelTemplateId : <any>null;
        data["eventRuleGroupId"] = this.eventRuleGroupId !== undefined ? this.eventRuleGroupId : <any>null;
        if (Array.isArray(this.formulaParts)) {
            data["formulaParts"] = [];
            for (let item of this.formulaParts)
                data["formulaParts"].push(item.toJSON());
        }
        return data;
    }
}

export class EvolveVirtualChannelFormulaPart {
    virtualChannelFormulaPartId?: number;
    isEnabled?: boolean;
    expressionDataChannelId?: string | null;
    expression?: string | null;
    constant?: number | null;
    operator?: VirtualChannelOperatorType;
    sortIndex?: number;

    init(_data?: any) {
        if (_data) {
            this.virtualChannelFormulaPartId = _data["virtualChannelFormulaPartId"] !== undefined ? _data["virtualChannelFormulaPartId"] : <any>null;
            this.isEnabled = _data["isEnabled"] !== undefined ? _data["isEnabled"] : <any>null;
            this.expressionDataChannelId = _data["expressionDataChannelId"] !== undefined ? _data["expressionDataChannelId"] : <any>null;
            this.expression = _data["expression"] !== undefined ? _data["expression"] : <any>null;
            this.constant = _data["constant"] !== undefined ? _data["constant"] : <any>null;
            this.operator = _data["operator"] !== undefined ? _data["operator"] : <any>null;
            this.sortIndex = _data["sortIndex"] !== undefined ? _data["sortIndex"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveVirtualChannelFormulaPart {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveVirtualChannelFormulaPart();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["virtualChannelFormulaPartId"] = this.virtualChannelFormulaPartId !== undefined ? this.virtualChannelFormulaPartId : <any>null;
        data["isEnabled"] = this.isEnabled !== undefined ? this.isEnabled : <any>null;
        data["expressionDataChannelId"] = this.expressionDataChannelId !== undefined ? this.expressionDataChannelId : <any>null;
        data["expression"] = this.expression !== undefined ? this.expression : <any>null;
        data["constant"] = this.constant !== undefined ? this.constant : <any>null;
        data["operator"] = this.operator !== undefined ? this.operator : <any>null;
        data["sortIndex"] = this.sortIndex !== undefined ? this.sortIndex : <any>null;
        return data;
    }
}

export class EvolveDeleteDataChannelRequest {
    /** AssetId.
             */
    assetId?: string;
    /** DatachannelId.
             */
    dataChannelId?: string[] | null;

    init(_data?: any) {
        if (_data) {
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            if (Array.isArray(_data["dataChannelId"])) {
                this.dataChannelId = [] as any;
                for (let item of _data["dataChannelId"])
                    this.dataChannelId!.push(item);
            }
            else {
                this.dataChannelId = <any>null;
            }
        }
    }

    static fromJS(data: any): EvolveDeleteDataChannelRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveDeleteDataChannelRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        if (Array.isArray(this.dataChannelId)) {
            data["dataChannelId"] = [];
            for (let item of this.dataChannelId)
                data["dataChannelId"].push(item);
        }
        return data;
    }
}

/** A class to model the response object for the data channel events. */
export class EvolveGetDataChannelEventsInfoResponse {
    /** The data channel events info.
             */
    info?: EvolveDataChannelEventsInfo | null;

    init(_data?: any) {
        if (_data) {
            this.info = _data["info"] ? EvolveDataChannelEventsInfo.fromJS(_data["info"]) : <any>null;
        }
    }

    static fromJS(data: any): EvolveGetDataChannelEventsInfoResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveGetDataChannelEventsInfoResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["info"] = this.info ? this.info.toJSON() : <any>null;
        return data;
    }
}

/** A class modelled for the data channel editor events tab. */
export class EvolveDataChannelEventsInfo {
    /** The level event rules.
             */
    levelEventRules?: EvolveDataChannelEventRule[] | null;
    /** The missing data event rules.
             */
    missingDataEventRules?: EvolveDataChannelEventRule[] | null;
    /** The scheduled delivery event rules.
             */
    scheduledDeliveryEventRules?: EvolveDataChannelEventRule[] | null;
    /** The usage rate event rules.
             */
    usageRateEventRules?: EvolveDataChannelEventRule[] | null;
    /** The level set points. // TODO: the setpoint list should be retrieved in a seperate endpoint */
    levelSetPoints?: EvolveRtuChannelSetPoint[] | null;
    /** The usage rate set points. // TODO: the setpoint list should be retrieved in a seperate endpoint */
    usageRateSetPoints?: EvolveRtuChannelSetPoint[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["levelEventRules"])) {
                this.levelEventRules = [] as any;
                for (let item of _data["levelEventRules"])
                    this.levelEventRules!.push(EvolveDataChannelEventRule.fromJS(item));
            }
            else {
                this.levelEventRules = <any>null;
            }
            if (Array.isArray(_data["missingDataEventRules"])) {
                this.missingDataEventRules = [] as any;
                for (let item of _data["missingDataEventRules"])
                    this.missingDataEventRules!.push(EvolveDataChannelEventRule.fromJS(item));
            }
            else {
                this.missingDataEventRules = <any>null;
            }
            if (Array.isArray(_data["scheduledDeliveryEventRules"])) {
                this.scheduledDeliveryEventRules = [] as any;
                for (let item of _data["scheduledDeliveryEventRules"])
                    this.scheduledDeliveryEventRules!.push(EvolveDataChannelEventRule.fromJS(item));
            }
            else {
                this.scheduledDeliveryEventRules = <any>null;
            }
            if (Array.isArray(_data["usageRateEventRules"])) {
                this.usageRateEventRules = [] as any;
                for (let item of _data["usageRateEventRules"])
                    this.usageRateEventRules!.push(EvolveDataChannelEventRule.fromJS(item));
            }
            else {
                this.usageRateEventRules = <any>null;
            }
            if (Array.isArray(_data["levelSetPoints"])) {
                this.levelSetPoints = [] as any;
                for (let item of _data["levelSetPoints"])
                    this.levelSetPoints!.push(EvolveRtuChannelSetPoint.fromJS(item));
            }
            else {
                this.levelSetPoints = <any>null;
            }
            if (Array.isArray(_data["usageRateSetPoints"])) {
                this.usageRateSetPoints = [] as any;
                for (let item of _data["usageRateSetPoints"])
                    this.usageRateSetPoints!.push(EvolveRtuChannelSetPoint.fromJS(item));
            }
            else {
                this.usageRateSetPoints = <any>null;
            }
        }
    }

    static fromJS(data: any): EvolveDataChannelEventsInfo {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveDataChannelEventsInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.levelEventRules)) {
            data["levelEventRules"] = [];
            for (let item of this.levelEventRules)
                data["levelEventRules"].push(item.toJSON());
        }
        if (Array.isArray(this.missingDataEventRules)) {
            data["missingDataEventRules"] = [];
            for (let item of this.missingDataEventRules)
                data["missingDataEventRules"].push(item.toJSON());
        }
        if (Array.isArray(this.scheduledDeliveryEventRules)) {
            data["scheduledDeliveryEventRules"] = [];
            for (let item of this.scheduledDeliveryEventRules)
                data["scheduledDeliveryEventRules"].push(item.toJSON());
        }
        if (Array.isArray(this.usageRateEventRules)) {
            data["usageRateEventRules"] = [];
            for (let item of this.usageRateEventRules)
                data["usageRateEventRules"].push(item.toJSON());
        }
        if (Array.isArray(this.levelSetPoints)) {
            data["levelSetPoints"] = [];
            for (let item of this.levelSetPoints)
                data["levelSetPoints"].push(item.toJSON());
        }
        if (Array.isArray(this.usageRateSetPoints)) {
            data["usageRateSetPoints"] = [];
            for (let item of this.usageRateSetPoints)
                data["usageRateSetPoints"].push(item.toJSON());
        }
        return data;
    }
}

/** A class that represents a data channel event rule. */
export class EvolveDataChannelEventRule {
    /** The id of the data channel event rule.
             */
    id?: number;
    /** Whether this rule is enabled.
             */
    enabled?: boolean;
    /** The set point index.
             */
    setPoint?: number | null;
    /** The hysteris.
             */
    hysteresis?: number;
    /** If this event is always triggered.
             */
    alwaysTriggered?: boolean;
    /** If this event is graphed.
             */
    graphed?: boolean;
    /** If this event is summarized.
             */
    summarized?: boolean;
    /** If this event can be acknowledged.
             */
    acknowledgment?: boolean;
    /** The integration id.
             */
    integrationId?: string | null;
    /** The sort order index.
             */
    sortOrderIndex?: number;
    /** The name of the event rule.
             */
    description?: string | null;
    /** The inventory status if applicable.
             */
    inventoryStatus?: EventInventoryStatusType | null;
    /** The event comparator if applicable.
             */
    eventComparator?: EventComparatorType | null;
    /** The event value.
             */
    eventValue?: number | null;
    /** The roster information for this event rule.
             */
    rosters?: EvolveDataChannelEventRuleRosterInfo[] | null;
    /** The importance level for this event rule.
             */
    importanceLevel?: EventImportanceLevelType | null;
    /** If a delay is enabled or not.
             */
    delayEnabled?: boolean;
    /** The delay in seconds.
             */
    delay?: number | null;
    /** The event rule type.
             */
    eventRuleType?: EventRuleType;
    /** The usage rate.
             */
    usageRate?: number;
    /** The minimum reading period.
             */
    minimumReadingPeriod?: number | null;
    /** The event rule id this data channel event rule is related to.
             */
    eventRuleId?: number;
    /** Any tags for this rule.
             */
    tags?: string[] | null;
    /** The data channel id. */
    dataChannelId?: string;
    /** If the event rule is enabled. */
    isEventRuleEnabled?: boolean;
    /** If the data channel event rule is linked to the event rule. */
    isLinkedToEventRule?: boolean;
    /** If auto close problem report is on. Airproducts only. */
    isAutoCloseProblemReport?: boolean;
    /** If auto create problem report is on. Air products only. */
    isAutoCreateProblemReport?: boolean;
    /** The importance level for the problem report. Air products only. */
    problemReportImportanceLevel?: number | null;
    /** The abbreviation for the description. */
    descriptionAbbreviation?: string | null;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.enabled = _data["enabled"] !== undefined ? _data["enabled"] : <any>null;
            this.setPoint = _data["setPoint"] !== undefined ? _data["setPoint"] : <any>null;
            this.hysteresis = _data["hysteresis"] !== undefined ? _data["hysteresis"] : <any>null;
            this.alwaysTriggered = _data["alwaysTriggered"] !== undefined ? _data["alwaysTriggered"] : <any>null;
            this.graphed = _data["graphed"] !== undefined ? _data["graphed"] : <any>null;
            this.summarized = _data["summarized"] !== undefined ? _data["summarized"] : <any>null;
            this.acknowledgment = _data["acknowledgment"] !== undefined ? _data["acknowledgment"] : <any>null;
            this.integrationId = _data["integrationId"] !== undefined ? _data["integrationId"] : <any>null;
            this.sortOrderIndex = _data["sortOrderIndex"] !== undefined ? _data["sortOrderIndex"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.inventoryStatus = _data["inventoryStatus"] !== undefined ? _data["inventoryStatus"] : <any>null;
            this.eventComparator = _data["eventComparator"] !== undefined ? _data["eventComparator"] : <any>null;
            this.eventValue = _data["eventValue"] !== undefined ? _data["eventValue"] : <any>null;
            if (Array.isArray(_data["rosters"])) {
                this.rosters = [] as any;
                for (let item of _data["rosters"])
                    this.rosters!.push(EvolveDataChannelEventRuleRosterInfo.fromJS(item));
            }
            else {
                this.rosters = <any>null;
            }
            this.importanceLevel = _data["importanceLevel"] !== undefined ? _data["importanceLevel"] : <any>null;
            this.delayEnabled = _data["delayEnabled"] !== undefined ? _data["delayEnabled"] : <any>null;
            this.delay = _data["delay"] !== undefined ? _data["delay"] : <any>null;
            this.eventRuleType = _data["eventRuleType"] !== undefined ? _data["eventRuleType"] : <any>null;
            this.usageRate = _data["usageRate"] !== undefined ? _data["usageRate"] : <any>null;
            this.minimumReadingPeriod = _data["minimumReadingPeriod"] !== undefined ? _data["minimumReadingPeriod"] : <any>null;
            this.eventRuleId = _data["eventRuleId"] !== undefined ? _data["eventRuleId"] : <any>null;
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags!.push(item);
            }
            else {
                this.tags = <any>null;
            }
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.isEventRuleEnabled = _data["isEventRuleEnabled"] !== undefined ? _data["isEventRuleEnabled"] : <any>null;
            this.isLinkedToEventRule = _data["isLinkedToEventRule"] !== undefined ? _data["isLinkedToEventRule"] : <any>null;
            this.isAutoCloseProblemReport = _data["isAutoCloseProblemReport"] !== undefined ? _data["isAutoCloseProblemReport"] : <any>null;
            this.isAutoCreateProblemReport = _data["isAutoCreateProblemReport"] !== undefined ? _data["isAutoCreateProblemReport"] : <any>null;
            this.problemReportImportanceLevel = _data["problemReportImportanceLevel"] !== undefined ? _data["problemReportImportanceLevel"] : <any>null;
            this.descriptionAbbreviation = _data["descriptionAbbreviation"] !== undefined ? _data["descriptionAbbreviation"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveDataChannelEventRule {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveDataChannelEventRule();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["enabled"] = this.enabled !== undefined ? this.enabled : <any>null;
        data["setPoint"] = this.setPoint !== undefined ? this.setPoint : <any>null;
        data["hysteresis"] = this.hysteresis !== undefined ? this.hysteresis : <any>null;
        data["alwaysTriggered"] = this.alwaysTriggered !== undefined ? this.alwaysTriggered : <any>null;
        data["graphed"] = this.graphed !== undefined ? this.graphed : <any>null;
        data["summarized"] = this.summarized !== undefined ? this.summarized : <any>null;
        data["acknowledgment"] = this.acknowledgment !== undefined ? this.acknowledgment : <any>null;
        data["integrationId"] = this.integrationId !== undefined ? this.integrationId : <any>null;
        data["sortOrderIndex"] = this.sortOrderIndex !== undefined ? this.sortOrderIndex : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["inventoryStatus"] = this.inventoryStatus !== undefined ? this.inventoryStatus : <any>null;
        data["eventComparator"] = this.eventComparator !== undefined ? this.eventComparator : <any>null;
        data["eventValue"] = this.eventValue !== undefined ? this.eventValue : <any>null;
        if (Array.isArray(this.rosters)) {
            data["rosters"] = [];
            for (let item of this.rosters)
                data["rosters"].push(item.toJSON());
        }
        data["importanceLevel"] = this.importanceLevel !== undefined ? this.importanceLevel : <any>null;
        data["delayEnabled"] = this.delayEnabled !== undefined ? this.delayEnabled : <any>null;
        data["delay"] = this.delay !== undefined ? this.delay : <any>null;
        data["eventRuleType"] = this.eventRuleType !== undefined ? this.eventRuleType : <any>null;
        data["usageRate"] = this.usageRate !== undefined ? this.usageRate : <any>null;
        data["minimumReadingPeriod"] = this.minimumReadingPeriod !== undefined ? this.minimumReadingPeriod : <any>null;
        data["eventRuleId"] = this.eventRuleId !== undefined ? this.eventRuleId : <any>null;
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item);
        }
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["isEventRuleEnabled"] = this.isEventRuleEnabled !== undefined ? this.isEventRuleEnabled : <any>null;
        data["isLinkedToEventRule"] = this.isLinkedToEventRule !== undefined ? this.isLinkedToEventRule : <any>null;
        data["isAutoCloseProblemReport"] = this.isAutoCloseProblemReport !== undefined ? this.isAutoCloseProblemReport : <any>null;
        data["isAutoCreateProblemReport"] = this.isAutoCreateProblemReport !== undefined ? this.isAutoCreateProblemReport : <any>null;
        data["problemReportImportanceLevel"] = this.problemReportImportanceLevel !== undefined ? this.problemReportImportanceLevel : <any>null;
        data["descriptionAbbreviation"] = this.descriptionAbbreviation !== undefined ? this.descriptionAbbreviation : <any>null;
        return data;
    }
}

/** A class to model the roster info within a data channel event rule. */
export class EvolveDataChannelEventRuleRosterInfo {
    /** The name of the roster.
             */
    description?: string | null;
    /** The data channel event rule id.
             */
    dataChannelEventRuleId?: number;
    /** The roster id.
             */
    rosterId?: number;
    /** The sort order index.
             */
    sortOrderIndex?: number;

    init(_data?: any) {
        if (_data) {
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.dataChannelEventRuleId = _data["dataChannelEventRuleId"] !== undefined ? _data["dataChannelEventRuleId"] : <any>null;
            this.rosterId = _data["rosterId"] !== undefined ? _data["rosterId"] : <any>null;
            this.sortOrderIndex = _data["sortOrderIndex"] !== undefined ? _data["sortOrderIndex"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveDataChannelEventRuleRosterInfo {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveDataChannelEventRuleRosterInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["dataChannelEventRuleId"] = this.dataChannelEventRuleId !== undefined ? this.dataChannelEventRuleId : <any>null;
        data["rosterId"] = this.rosterId !== undefined ? this.rosterId : <any>null;
        data["sortOrderIndex"] = this.sortOrderIndex !== undefined ? this.sortOrderIndex : <any>null;
        return data;
    }
}

/** A class modelled after the RtuChannelSetPoint table. */
export class EvolveRtuChannelSetPoint {
    /** The set point id. */
    rtuChannelSetPointId?: number;
    /** The rtu category this set point belongs to. */
    rtuCategoryId?: RTUCategoryType;
    /** The type of set point. */
    rtuChannelSetPointConfigTypeId?: RTUChannelSetPointType;
    /** Can be falling. */
    canBeFalling?: boolean;
    /** Can be rising. */
    canBeRising?: boolean;
    /** The set point index. */
    setPointIndex?: number;

    init(_data?: any) {
        if (_data) {
            this.rtuChannelSetPointId = _data["rtuChannelSetPointId"] !== undefined ? _data["rtuChannelSetPointId"] : <any>null;
            this.rtuCategoryId = _data["rtuCategoryId"] !== undefined ? _data["rtuCategoryId"] : <any>null;
            this.rtuChannelSetPointConfigTypeId = _data["rtuChannelSetPointConfigTypeId"] !== undefined ? _data["rtuChannelSetPointConfigTypeId"] : <any>null;
            this.canBeFalling = _data["canBeFalling"] !== undefined ? _data["canBeFalling"] : <any>null;
            this.canBeRising = _data["canBeRising"] !== undefined ? _data["canBeRising"] : <any>null;
            this.setPointIndex = _data["setPointIndex"] !== undefined ? _data["setPointIndex"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveRtuChannelSetPoint {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRtuChannelSetPoint();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rtuChannelSetPointId"] = this.rtuChannelSetPointId !== undefined ? this.rtuChannelSetPointId : <any>null;
        data["rtuCategoryId"] = this.rtuCategoryId !== undefined ? this.rtuCategoryId : <any>null;
        data["rtuChannelSetPointConfigTypeId"] = this.rtuChannelSetPointConfigTypeId !== undefined ? this.rtuChannelSetPointConfigTypeId : <any>null;
        data["canBeFalling"] = this.canBeFalling !== undefined ? this.canBeFalling : <any>null;
        data["canBeRising"] = this.canBeRising !== undefined ? this.canBeRising : <any>null;
        data["setPointIndex"] = this.setPointIndex !== undefined ? this.setPointIndex : <any>null;
        return data;
    }
}

/** A class for retrieving data channel events info. */
export class EvolveGetDataChannelEventsInfoRequest {
    /** The data channel id.
             */
    dataChannelId?: string;
    /** The domain id.
             */
    domainId?: string;

    init(_data?: any) {
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveGetDataChannelEventsInfoRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveGetDataChannelEventsInfoRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        return data;
    }
}

export class EvolveRetrieveDataChannelEditDetailsByIdResponse {
    dataChannel?: EditDataChannel | null;
    dataChannelEditOptions?: DataChannelEditOptions | null;

    init(_data?: any) {
        if (_data) {
            this.dataChannel = _data["dataChannel"] ? EditDataChannel.fromJS(_data["dataChannel"]) : <any>null;
            this.dataChannelEditOptions = _data["dataChannelEditOptions"] ? DataChannelEditOptions.fromJS(_data["dataChannelEditOptions"]) : <any>null;
        }
    }

    static fromJS(data: any): EvolveRetrieveDataChannelEditDetailsByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveDataChannelEditDetailsByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannel"] = this.dataChannel ? this.dataChannel.toJSON() : <any>null;
        data["dataChannelEditOptions"] = this.dataChannelEditOptions ? this.dataChannelEditOptions.toJSON() : <any>null;
        return data;
    }
}

export class DataChannelEditOptions {
    dataChannelTemplates?: EvolveDataChannelTemplateDetail[] | null;
    ftpTargetDomains?: FtpDomainInfo[] | null;
    scaledUnitTextList?: string[] | null;
    rawUnitsTextList?: string[] | null;
    rosters?: DataChannelEventRuleRosterInfo[] | null;
    rtuInfo?: RTUDeviceInfo | null;
    rtuChannels?: RTUChannelUsageInfo[] | null;
    targetDomains?: DomainInfo[] | null;
    eventRuleGroups?: EventRuleGroupInfo[] | null;
    nonVolumetricUnitTypes?: UnitType[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["dataChannelTemplates"])) {
                this.dataChannelTemplates = [] as any;
                for (let item of _data["dataChannelTemplates"])
                    this.dataChannelTemplates!.push(EvolveDataChannelTemplateDetail.fromJS(item));
            }
            else {
                this.dataChannelTemplates = <any>null;
            }
            if (Array.isArray(_data["ftpTargetDomains"])) {
                this.ftpTargetDomains = [] as any;
                for (let item of _data["ftpTargetDomains"])
                    this.ftpTargetDomains!.push(FtpDomainInfo.fromJS(item));
            }
            else {
                this.ftpTargetDomains = <any>null;
            }
            if (Array.isArray(_data["scaledUnitTextList"])) {
                this.scaledUnitTextList = [] as any;
                for (let item of _data["scaledUnitTextList"])
                    this.scaledUnitTextList!.push(item);
            }
            else {
                this.scaledUnitTextList = <any>null;
            }
            if (Array.isArray(_data["rawUnitsTextList"])) {
                this.rawUnitsTextList = [] as any;
                for (let item of _data["rawUnitsTextList"])
                    this.rawUnitsTextList!.push(item);
            }
            else {
                this.rawUnitsTextList = <any>null;
            }
            if (Array.isArray(_data["rosters"])) {
                this.rosters = [] as any;
                for (let item of _data["rosters"])
                    this.rosters!.push(DataChannelEventRuleRosterInfo.fromJS(item));
            }
            else {
                this.rosters = <any>null;
            }
            this.rtuInfo = _data["rtuInfo"] ? RTUDeviceInfo.fromJS(_data["rtuInfo"]) : <any>null;
            if (Array.isArray(_data["rtuChannels"])) {
                this.rtuChannels = [] as any;
                for (let item of _data["rtuChannels"])
                    this.rtuChannels!.push(RTUChannelUsageInfo.fromJS(item));
            }
            else {
                this.rtuChannels = <any>null;
            }
            if (Array.isArray(_data["targetDomains"])) {
                this.targetDomains = [] as any;
                for (let item of _data["targetDomains"])
                    this.targetDomains!.push(DomainInfo.fromJS(item));
            }
            else {
                this.targetDomains = <any>null;
            }
            if (Array.isArray(_data["eventRuleGroups"])) {
                this.eventRuleGroups = [] as any;
                for (let item of _data["eventRuleGroups"])
                    this.eventRuleGroups!.push(EventRuleGroupInfo.fromJS(item));
            }
            else {
                this.eventRuleGroups = <any>null;
            }
            if (Array.isArray(_data["nonVolumetricUnitTypes"])) {
                this.nonVolumetricUnitTypes = [] as any;
                for (let item of _data["nonVolumetricUnitTypes"])
                    this.nonVolumetricUnitTypes!.push(item);
            }
            else {
                this.nonVolumetricUnitTypes = <any>null;
            }
        }
    }

    static fromJS(data: any): DataChannelEditOptions {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelEditOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dataChannelTemplates)) {
            data["dataChannelTemplates"] = [];
            for (let item of this.dataChannelTemplates)
                data["dataChannelTemplates"].push(item.toJSON());
        }
        if (Array.isArray(this.ftpTargetDomains)) {
            data["ftpTargetDomains"] = [];
            for (let item of this.ftpTargetDomains)
                data["ftpTargetDomains"].push(item.toJSON());
        }
        if (Array.isArray(this.scaledUnitTextList)) {
            data["scaledUnitTextList"] = [];
            for (let item of this.scaledUnitTextList)
                data["scaledUnitTextList"].push(item);
        }
        if (Array.isArray(this.rawUnitsTextList)) {
            data["rawUnitsTextList"] = [];
            for (let item of this.rawUnitsTextList)
                data["rawUnitsTextList"].push(item);
        }
        if (Array.isArray(this.rosters)) {
            data["rosters"] = [];
            for (let item of this.rosters)
                data["rosters"].push(item.toJSON());
        }
        data["rtuInfo"] = this.rtuInfo ? this.rtuInfo.toJSON() : <any>null;
        if (Array.isArray(this.rtuChannels)) {
            data["rtuChannels"] = [];
            for (let item of this.rtuChannels)
                data["rtuChannels"].push(item.toJSON());
        }
        if (Array.isArray(this.targetDomains)) {
            data["targetDomains"] = [];
            for (let item of this.targetDomains)
                data["targetDomains"].push(item.toJSON());
        }
        if (Array.isArray(this.eventRuleGroups)) {
            data["eventRuleGroups"] = [];
            for (let item of this.eventRuleGroups)
                data["eventRuleGroups"].push(item.toJSON());
        }
        if (Array.isArray(this.nonVolumetricUnitTypes)) {
            data["nonVolumetricUnitTypes"] = [];
            for (let item of this.nonVolumetricUnitTypes)
                data["nonVolumetricUnitTypes"].push(item);
        }
        return data;
    }
}

export class DomainInfo {
    domainId?: string;
    name?: string | null;
    integrationProfile?: IntegrationProfileType;
    isLoaded?: boolean;

    init(_data?: any) {
        if (_data) {
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.integrationProfile = _data["integrationProfile"] !== undefined ? _data["integrationProfile"] : <any>null;
            this.isLoaded = _data["isLoaded"] !== undefined ? _data["isLoaded"] : <any>null;
        }
    }

    static fromJS(data: any): DomainInfo {
        data = typeof data === 'object' ? data : {};
        let result = new DomainInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["integrationProfile"] = this.integrationProfile !== undefined ? this.integrationProfile : <any>null;
        data["isLoaded"] = this.isLoaded !== undefined ? this.isLoaded : <any>null;
        return data;
    }
}

export class EvolveRetrieveDataChannelEditDetailsByIdRequest {
    dataChannelId?: string;

    init(_data?: any) {
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveRetrieveDataChannelEditDetailsByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveDataChannelEditDetailsByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        return data;
    }
}

export class EvolveValidateAnalogDataChannelRequest {
    /** Asset DomainId.
             */
    domainId?: string;
    /** All other asset data channels description. Needed to validate the uniqueness of the description.
             */
    assetDataChannelsDescription?: string[] | null;
    /** Details for analog data channel.
             */
    analogChannel?: EvolveAnalogDataChannelDetails | null;

    init(_data?: any) {
        if (_data) {
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            if (Array.isArray(_data["assetDataChannelsDescription"])) {
                this.assetDataChannelsDescription = [] as any;
                for (let item of _data["assetDataChannelsDescription"])
                    this.assetDataChannelsDescription!.push(item);
            }
            else {
                this.assetDataChannelsDescription = <any>null;
            }
            this.analogChannel = _data["analogChannel"] ? EvolveAnalogDataChannelDetails.fromJS(_data["analogChannel"]) : <any>null;
        }
    }

    static fromJS(data: any): EvolveValidateAnalogDataChannelRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveValidateAnalogDataChannelRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        if (Array.isArray(this.assetDataChannelsDescription)) {
            data["assetDataChannelsDescription"] = [];
            for (let item of this.assetDataChannelsDescription)
                data["assetDataChannelsDescription"].push(item);
        }
        data["analogChannel"] = this.analogChannel ? this.analogChannel.toJSON() : <any>null;
        return data;
    }
}

export class EvolveValidateDigitalDataChannelRequest {
    /** Asset DomainId.
             */
    domainId?: string;
    /** All other asset data channels description. Needed to validate the uniqueness of the description.
             */
    assetDataChannelsDescription!: string[];
    /** Digital data channel that is intended to be added and needs to be validated
             */
    digitalChannel!: EvolveDigitalDataChannelDetails;

    init(_data?: any) {
        if (_data) {
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            if (Array.isArray(_data["assetDataChannelsDescription"])) {
                this.assetDataChannelsDescription = [] as any;
                for (let item of _data["assetDataChannelsDescription"])
                    this.assetDataChannelsDescription!.push(item);
            }
            else {
                this.assetDataChannelsDescription = <any>null;
            }
            this.digitalChannel = _data["digitalChannel"] ? EvolveDigitalDataChannelDetails.fromJS(_data["digitalChannel"]) : new EvolveDigitalDataChannelDetails();
        }
    }

    static fromJS(data: any): EvolveValidateDigitalDataChannelRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveValidateDigitalDataChannelRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        if (Array.isArray(this.assetDataChannelsDescription)) {
            data["assetDataChannelsDescription"] = [];
            for (let item of this.assetDataChannelsDescription)
                data["assetDataChannelsDescription"].push(item);
        }
        data["digitalChannel"] = this.digitalChannel ? this.digitalChannel.toJSON() : <any>null;
        return data;
    }
}

export class EvolveValidateTotalizerDataChannelRequest {
    /** Asset Id.
             */
    assetId?: string;
    /** Totalizer data channel that is intended to be added and needs to be validated
             */
    totalizerChannel!: EvolveTotalizerDataChannelDetails;

    init(_data?: any) {
        if (_data) {
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.totalizerChannel = _data["totalizerChannel"] ? EvolveTotalizerDataChannelDetails.fromJS(_data["totalizerChannel"]) : new EvolveTotalizerDataChannelDetails();
        }
    }

    static fromJS(data: any): EvolveValidateTotalizerDataChannelRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveValidateTotalizerDataChannelRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["totalizerChannel"] = this.totalizerChannel ? this.totalizerChannel.toJSON() : <any>null;
        return data;
    }
}

export class EvolveValidateVirtualDataChannelRequest {
    /** Asset Id.
             */
    assetId?: string;
    /** Virtual data channel that is intended to be added and needs to be validated
             */
    virtualChannel!: EvolveVirtualDataChannelDetails;

    init(_data?: any) {
        if (_data) {
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.virtualChannel = _data["virtualChannel"] ? EvolveVirtualDataChannelDetails.fromJS(_data["virtualChannel"]) : new EvolveVirtualDataChannelDetails();
        }
    }

    static fromJS(data: any): EvolveValidateVirtualDataChannelRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveValidateVirtualDataChannelRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["virtualChannel"] = this.virtualChannel ? this.virtualChannel.toJSON() : <any>null;
        return data;
    }
}

export class EvolveValidateVirtualChannelFormulaRequest2 {
    /** Asset Id.
             */
    assetId?: string;
    /** Formula Parts
             */
    formulaParts!: EvolveVirtualChannelFormulaPart[];

    init(_data?: any) {
        if (_data) {
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            if (Array.isArray(_data["formulaParts"])) {
                this.formulaParts = [] as any;
                for (let item of _data["formulaParts"])
                    this.formulaParts!.push(EvolveVirtualChannelFormulaPart.fromJS(item));
            }
            else {
                this.formulaParts = <any>null;
            }
        }
    }

    static fromJS(data: any): EvolveValidateVirtualChannelFormulaRequest2 {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveValidateVirtualChannelFormulaRequest2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        if (Array.isArray(this.formulaParts)) {
            data["formulaParts"] = [];
            for (let item of this.formulaParts)
                data["formulaParts"].push(item.toJSON());
        }
        return data;
    }
}

export class EvolveLevelDataChannelLoadDefaultValuesResponse {
    dataChannel?: LevelDataChannelGeneralInfo | null;

    init(_data?: any) {
        if (_data) {
            this.dataChannel = _data["dataChannel"] ? LevelDataChannelGeneralInfo.fromJS(_data["dataChannel"]) : <any>null;
        }
    }

    static fromJS(data: any): EvolveLevelDataChannelLoadDefaultValuesResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveLevelDataChannelLoadDefaultValuesResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannel"] = this.dataChannel ? this.dataChannel.toJSON() : <any>null;
        return data;
    }
}

export class LevelDataChannelGeneralInfo {
    dataChannelId?: string;
    assetDescription?: string | null;
    siteCustomerName?: string | null;
    description?: string | null;
    serialNumber?: string | null;
    dataChannelType?: DataChannelType;
    /** A flag that determines if the data channel need to be marked as volumetric or not
             */
    isTankDimensionsSet?: boolean;
    /** Data channel configured tank type
             */
    tankType?: TankType | null;
    /** Data channel configured tank dimension
             */
    tankDimensionInfo?: DataChannelTankDimension | null;
    /** Data channel configured product
             */
    productInfo?: DataChannelProduct | null;
    /** Data channel configured Data Source
             */
    dataSource?: DataChannelDataSourceType;
    /** Data channel configured rtu
             */
    rtuInfo?: DataChannelRtu | null;
    /** Data channel configured rtu channel
             */
    rtuChannelInfo?: DataChannelRtuChannel | null;
    /** Data channel configured publishedInfo
             */
    publishedChannelInfo?: PublishedDataChannelInfo | null;
    /** Data channel configured template
             */
    dataChannelTemplateInfo?: DataChannelTemplateInfo | null;
    /** Data channel configured scaled units When tank dimension is not set
             */
    scaledUnitsAsText?: string | null;
    /** Data channel configured scaled units When tank dimension is set
             */
    scaledUnits?: UnitType | null;
    /** Data channel configured scaled Decimal Places
             */
    scaledDecimalPlaces?: number;
    /** Data channel configured Max Product Height
             */
    scaledMaxProductHeight?: number | null;
    /** Data channel configured Scaling Mode
             */
    scalingMode?: ScalingModeType;
    /** Data channel configured Display Units
             */
    displayUnits?: UnitType | null;
    /** Data channel Display Max Product Height
             */
    displayMaxProductHeight?: number | null;
    /** Data channel Display Decimal Places
             */
    displayDecimalPlaces?: number;
    graphYAxisScaleId?: number;
    graphMax?: number | null;
    graphMin?: number | null;
    isDisplayGapsInGraph?: boolean;
    forecastMode?: ForecastModeType | null;
    manualUsageRate?: number | null;
    maxDeliverQuantity?: number | null;
    showHighLowForecast?: boolean;
    showScheduledDeliveriesInforecast?: boolean;
    autoGenerateIntegration1Id?: boolean;
    enableIntegration1?: boolean;
    integration1DomainId?: string | null;
    integration1Id?: string | null;
    autoGenerateIntegration2Id?: boolean;
    enableIntegration2?: boolean;
    integration2DomainId?: string | null;
    integration2Id?: string | null;
    rawUnits?: string | null;
    rawUnitsAtZero?: number | null;
    rawUnitsAtFullScale?: number | null;
    rawUnitsAtScaledMin?: number | null;
    rawUnitsAtScaledMax?: number | null;
    rawUnitsAtUnderRange?: number | null;
    rawUnitsAtOverRange?: number | null;
    isDataInverted?: boolean;
    scaledMax?: number | null;
    scaledMin?: number | null;
    lastUpdateUserName?: string | null;
    lastUpdatedDate?: Date | null;

    init(_data?: any) {
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.assetDescription = _data["assetDescription"] !== undefined ? _data["assetDescription"] : <any>null;
            this.siteCustomerName = _data["siteCustomerName"] !== undefined ? _data["siteCustomerName"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.serialNumber = _data["serialNumber"] !== undefined ? _data["serialNumber"] : <any>null;
            this.dataChannelType = _data["dataChannelType"] !== undefined ? _data["dataChannelType"] : <any>null;
            this.isTankDimensionsSet = _data["isTankDimensionsSet"] !== undefined ? _data["isTankDimensionsSet"] : <any>null;
            this.tankType = _data["tankType"] !== undefined ? _data["tankType"] : <any>null;
            this.tankDimensionInfo = _data["tankDimensionInfo"] ? DataChannelTankDimension.fromJS(_data["tankDimensionInfo"]) : <any>null;
            this.productInfo = _data["productInfo"] ? DataChannelProduct.fromJS(_data["productInfo"]) : <any>null;
            this.dataSource = _data["dataSource"] !== undefined ? _data["dataSource"] : <any>null;
            this.rtuInfo = _data["rtuInfo"] ? DataChannelRtu.fromJS(_data["rtuInfo"]) : <any>null;
            this.rtuChannelInfo = _data["rtuChannelInfo"] ? DataChannelRtuChannel.fromJS(_data["rtuChannelInfo"]) : <any>null;
            this.publishedChannelInfo = _data["publishedChannelInfo"] ? PublishedDataChannelInfo.fromJS(_data["publishedChannelInfo"]) : <any>null;
            this.dataChannelTemplateInfo = _data["dataChannelTemplateInfo"] ? DataChannelTemplateInfo.fromJS(_data["dataChannelTemplateInfo"]) : <any>null;
            this.scaledUnitsAsText = _data["scaledUnitsAsText"] !== undefined ? _data["scaledUnitsAsText"] : <any>null;
            this.scaledUnits = _data["scaledUnits"] !== undefined ? _data["scaledUnits"] : <any>null;
            this.scaledDecimalPlaces = _data["scaledDecimalPlaces"] !== undefined ? _data["scaledDecimalPlaces"] : <any>null;
            this.scaledMaxProductHeight = _data["scaledMaxProductHeight"] !== undefined ? _data["scaledMaxProductHeight"] : <any>null;
            this.scalingMode = _data["scalingMode"] !== undefined ? _data["scalingMode"] : <any>null;
            this.displayUnits = _data["displayUnits"] !== undefined ? _data["displayUnits"] : <any>null;
            this.displayMaxProductHeight = _data["displayMaxProductHeight"] !== undefined ? _data["displayMaxProductHeight"] : <any>null;
            this.displayDecimalPlaces = _data["displayDecimalPlaces"] !== undefined ? _data["displayDecimalPlaces"] : <any>null;
            this.graphYAxisScaleId = _data["graphYAxisScaleId"] !== undefined ? _data["graphYAxisScaleId"] : <any>null;
            this.graphMax = _data["graphMax"] !== undefined ? _data["graphMax"] : <any>null;
            this.graphMin = _data["graphMin"] !== undefined ? _data["graphMin"] : <any>null;
            this.isDisplayGapsInGraph = _data["isDisplayGapsInGraph"] !== undefined ? _data["isDisplayGapsInGraph"] : <any>null;
            this.forecastMode = _data["forecastMode"] !== undefined ? _data["forecastMode"] : <any>null;
            this.manualUsageRate = _data["manualUsageRate"] !== undefined ? _data["manualUsageRate"] : <any>null;
            this.maxDeliverQuantity = _data["maxDeliverQuantity"] !== undefined ? _data["maxDeliverQuantity"] : <any>null;
            this.showHighLowForecast = _data["showHighLowForecast"] !== undefined ? _data["showHighLowForecast"] : <any>null;
            this.showScheduledDeliveriesInforecast = _data["showScheduledDeliveriesInforecast"] !== undefined ? _data["showScheduledDeliveriesInforecast"] : <any>null;
            this.autoGenerateIntegration1Id = _data["autoGenerateIntegration1Id"] !== undefined ? _data["autoGenerateIntegration1Id"] : <any>null;
            this.enableIntegration1 = _data["enableIntegration1"] !== undefined ? _data["enableIntegration1"] : <any>null;
            this.integration1DomainId = _data["integration1DomainId"] !== undefined ? _data["integration1DomainId"] : <any>null;
            this.integration1Id = _data["integration1Id"] !== undefined ? _data["integration1Id"] : <any>null;
            this.autoGenerateIntegration2Id = _data["autoGenerateIntegration2Id"] !== undefined ? _data["autoGenerateIntegration2Id"] : <any>null;
            this.enableIntegration2 = _data["enableIntegration2"] !== undefined ? _data["enableIntegration2"] : <any>null;
            this.integration2DomainId = _data["integration2DomainId"] !== undefined ? _data["integration2DomainId"] : <any>null;
            this.integration2Id = _data["integration2Id"] !== undefined ? _data["integration2Id"] : <any>null;
            this.rawUnits = _data["rawUnits"] !== undefined ? _data["rawUnits"] : <any>null;
            this.rawUnitsAtZero = _data["rawUnitsAtZero"] !== undefined ? _data["rawUnitsAtZero"] : <any>null;
            this.rawUnitsAtFullScale = _data["rawUnitsAtFullScale"] !== undefined ? _data["rawUnitsAtFullScale"] : <any>null;
            this.rawUnitsAtScaledMin = _data["rawUnitsAtScaledMin"] !== undefined ? _data["rawUnitsAtScaledMin"] : <any>null;
            this.rawUnitsAtScaledMax = _data["rawUnitsAtScaledMax"] !== undefined ? _data["rawUnitsAtScaledMax"] : <any>null;
            this.rawUnitsAtUnderRange = _data["rawUnitsAtUnderRange"] !== undefined ? _data["rawUnitsAtUnderRange"] : <any>null;
            this.rawUnitsAtOverRange = _data["rawUnitsAtOverRange"] !== undefined ? _data["rawUnitsAtOverRange"] : <any>null;
            this.isDataInverted = _data["isDataInverted"] !== undefined ? _data["isDataInverted"] : <any>null;
            this.scaledMax = _data["scaledMax"] !== undefined ? _data["scaledMax"] : <any>null;
            this.scaledMin = _data["scaledMin"] !== undefined ? _data["scaledMin"] : <any>null;
            this.lastUpdateUserName = _data["lastUpdateUserName"] !== undefined ? _data["lastUpdateUserName"] : <any>null;
            this.lastUpdatedDate = _data["lastUpdatedDate"] ? new Date(_data["lastUpdatedDate"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): LevelDataChannelGeneralInfo {
        data = typeof data === 'object' ? data : {};
        let result = new LevelDataChannelGeneralInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["assetDescription"] = this.assetDescription !== undefined ? this.assetDescription : <any>null;
        data["siteCustomerName"] = this.siteCustomerName !== undefined ? this.siteCustomerName : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["serialNumber"] = this.serialNumber !== undefined ? this.serialNumber : <any>null;
        data["dataChannelType"] = this.dataChannelType !== undefined ? this.dataChannelType : <any>null;
        data["isTankDimensionsSet"] = this.isTankDimensionsSet !== undefined ? this.isTankDimensionsSet : <any>null;
        data["tankType"] = this.tankType !== undefined ? this.tankType : <any>null;
        data["tankDimensionInfo"] = this.tankDimensionInfo ? this.tankDimensionInfo.toJSON() : <any>null;
        data["productInfo"] = this.productInfo ? this.productInfo.toJSON() : <any>null;
        data["dataSource"] = this.dataSource !== undefined ? this.dataSource : <any>null;
        data["rtuInfo"] = this.rtuInfo ? this.rtuInfo.toJSON() : <any>null;
        data["rtuChannelInfo"] = this.rtuChannelInfo ? this.rtuChannelInfo.toJSON() : <any>null;
        data["publishedChannelInfo"] = this.publishedChannelInfo ? this.publishedChannelInfo.toJSON() : <any>null;
        data["dataChannelTemplateInfo"] = this.dataChannelTemplateInfo ? this.dataChannelTemplateInfo.toJSON() : <any>null;
        data["scaledUnitsAsText"] = this.scaledUnitsAsText !== undefined ? this.scaledUnitsAsText : <any>null;
        data["scaledUnits"] = this.scaledUnits !== undefined ? this.scaledUnits : <any>null;
        data["scaledDecimalPlaces"] = this.scaledDecimalPlaces !== undefined ? this.scaledDecimalPlaces : <any>null;
        data["scaledMaxProductHeight"] = this.scaledMaxProductHeight !== undefined ? this.scaledMaxProductHeight : <any>null;
        data["scalingMode"] = this.scalingMode !== undefined ? this.scalingMode : <any>null;
        data["displayUnits"] = this.displayUnits !== undefined ? this.displayUnits : <any>null;
        data["displayMaxProductHeight"] = this.displayMaxProductHeight !== undefined ? this.displayMaxProductHeight : <any>null;
        data["displayDecimalPlaces"] = this.displayDecimalPlaces !== undefined ? this.displayDecimalPlaces : <any>null;
        data["graphYAxisScaleId"] = this.graphYAxisScaleId !== undefined ? this.graphYAxisScaleId : <any>null;
        data["graphMax"] = this.graphMax !== undefined ? this.graphMax : <any>null;
        data["graphMin"] = this.graphMin !== undefined ? this.graphMin : <any>null;
        data["isDisplayGapsInGraph"] = this.isDisplayGapsInGraph !== undefined ? this.isDisplayGapsInGraph : <any>null;
        data["forecastMode"] = this.forecastMode !== undefined ? this.forecastMode : <any>null;
        data["manualUsageRate"] = this.manualUsageRate !== undefined ? this.manualUsageRate : <any>null;
        data["maxDeliverQuantity"] = this.maxDeliverQuantity !== undefined ? this.maxDeliverQuantity : <any>null;
        data["showHighLowForecast"] = this.showHighLowForecast !== undefined ? this.showHighLowForecast : <any>null;
        data["showScheduledDeliveriesInforecast"] = this.showScheduledDeliveriesInforecast !== undefined ? this.showScheduledDeliveriesInforecast : <any>null;
        data["autoGenerateIntegration1Id"] = this.autoGenerateIntegration1Id !== undefined ? this.autoGenerateIntegration1Id : <any>null;
        data["enableIntegration1"] = this.enableIntegration1 !== undefined ? this.enableIntegration1 : <any>null;
        data["integration1DomainId"] = this.integration1DomainId !== undefined ? this.integration1DomainId : <any>null;
        data["integration1Id"] = this.integration1Id !== undefined ? this.integration1Id : <any>null;
        data["autoGenerateIntegration2Id"] = this.autoGenerateIntegration2Id !== undefined ? this.autoGenerateIntegration2Id : <any>null;
        data["enableIntegration2"] = this.enableIntegration2 !== undefined ? this.enableIntegration2 : <any>null;
        data["integration2DomainId"] = this.integration2DomainId !== undefined ? this.integration2DomainId : <any>null;
        data["integration2Id"] = this.integration2Id !== undefined ? this.integration2Id : <any>null;
        data["rawUnits"] = this.rawUnits !== undefined ? this.rawUnits : <any>null;
        data["rawUnitsAtZero"] = this.rawUnitsAtZero !== undefined ? this.rawUnitsAtZero : <any>null;
        data["rawUnitsAtFullScale"] = this.rawUnitsAtFullScale !== undefined ? this.rawUnitsAtFullScale : <any>null;
        data["rawUnitsAtScaledMin"] = this.rawUnitsAtScaledMin !== undefined ? this.rawUnitsAtScaledMin : <any>null;
        data["rawUnitsAtScaledMax"] = this.rawUnitsAtScaledMax !== undefined ? this.rawUnitsAtScaledMax : <any>null;
        data["rawUnitsAtUnderRange"] = this.rawUnitsAtUnderRange !== undefined ? this.rawUnitsAtUnderRange : <any>null;
        data["rawUnitsAtOverRange"] = this.rawUnitsAtOverRange !== undefined ? this.rawUnitsAtOverRange : <any>null;
        data["isDataInverted"] = this.isDataInverted !== undefined ? this.isDataInverted : <any>null;
        data["scaledMax"] = this.scaledMax !== undefined ? this.scaledMax : <any>null;
        data["scaledMin"] = this.scaledMin !== undefined ? this.scaledMin : <any>null;
        data["lastUpdateUserName"] = this.lastUpdateUserName !== undefined ? this.lastUpdateUserName : <any>null;
        data["lastUpdatedDate"] = this.lastUpdatedDate ? this.lastUpdatedDate.toISOString() : <any>null;
        return data;
    }
}

export class DataChannelTankDimension {
    description?: string | null;
    tankDimensionId?: string;

    init(_data?: any) {
        if (_data) {
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.tankDimensionId = _data["tankDimensionId"] !== undefined ? _data["tankDimensionId"] : <any>null;
        }
    }

    static fromJS(data: any): DataChannelTankDimension {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelTankDimension();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["tankDimensionId"] = this.tankDimensionId !== undefined ? this.tankDimensionId : <any>null;
        return data;
    }
}

export class DataChannelProduct {
    description?: string | null;
    productId?: string;

    init(_data?: any) {
        if (_data) {
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.productId = _data["productId"] !== undefined ? _data["productId"] : <any>null;
        }
    }

    static fromJS(data: any): DataChannelProduct {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelProduct();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["productId"] = this.productId !== undefined ? this.productId : <any>null;
        return data;
    }
}

export class DataChannelRtu {
    rtuId?: string;
    deviceId?: string | null;

    init(_data?: any) {
        if (_data) {
            this.rtuId = _data["rtuId"] !== undefined ? _data["rtuId"] : <any>null;
            this.deviceId = _data["deviceId"] !== undefined ? _data["deviceId"] : <any>null;
        }
    }

    static fromJS(data: any): DataChannelRtu {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelRtu();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rtuId"] = this.rtuId !== undefined ? this.rtuId : <any>null;
        data["deviceId"] = this.deviceId !== undefined ? this.deviceId : <any>null;
        return data;
    }
}

export class DataChannelRtuChannel {
    rtuChannelId?: string;
    channelNumber?: string | null;
    isRTUChannelMaster?: boolean | null;

    init(_data?: any) {
        if (_data) {
            this.rtuChannelId = _data["rtuChannelId"] !== undefined ? _data["rtuChannelId"] : <any>null;
            this.channelNumber = _data["channelNumber"] !== undefined ? _data["channelNumber"] : <any>null;
            this.isRTUChannelMaster = _data["isRTUChannelMaster"] !== undefined ? _data["isRTUChannelMaster"] : <any>null;
        }
    }

    static fromJS(data: any): DataChannelRtuChannel {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelRtuChannel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rtuChannelId"] = this.rtuChannelId !== undefined ? this.rtuChannelId : <any>null;
        data["channelNumber"] = this.channelNumber !== undefined ? this.channelNumber : <any>null;
        data["isRTUChannelMaster"] = this.isRTUChannelMaster !== undefined ? this.isRTUChannelMaster : <any>null;
        return data;
    }
}

export class PublishedDataChannelInfo {
    sourceDataChannelId?: string;
    publishedComments?: string | null;
    sourceDomainName?: string | null;
    isPublished?: boolean;
    publishedDate?: Date | null;
    unpublishedDate?: Date | null;

    init(_data?: any) {
        if (_data) {
            this.sourceDataChannelId = _data["sourceDataChannelId"] !== undefined ? _data["sourceDataChannelId"] : <any>null;
            this.publishedComments = _data["publishedComments"] !== undefined ? _data["publishedComments"] : <any>null;
            this.sourceDomainName = _data["sourceDomainName"] !== undefined ? _data["sourceDomainName"] : <any>null;
            this.isPublished = _data["isPublished"] !== undefined ? _data["isPublished"] : <any>null;
            this.publishedDate = _data["publishedDate"] ? new Date(_data["publishedDate"].toString()) : <any>null;
            this.unpublishedDate = _data["unpublishedDate"] ? new Date(_data["unpublishedDate"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): PublishedDataChannelInfo {
        data = typeof data === 'object' ? data : {};
        let result = new PublishedDataChannelInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sourceDataChannelId"] = this.sourceDataChannelId !== undefined ? this.sourceDataChannelId : <any>null;
        data["publishedComments"] = this.publishedComments !== undefined ? this.publishedComments : <any>null;
        data["sourceDomainName"] = this.sourceDomainName !== undefined ? this.sourceDomainName : <any>null;
        data["isPublished"] = this.isPublished !== undefined ? this.isPublished : <any>null;
        data["publishedDate"] = this.publishedDate ? this.publishedDate.toISOString() : <any>null;
        data["unpublishedDate"] = this.unpublishedDate ? this.unpublishedDate.toISOString() : <any>null;
        return data;
    }
}

export class DataChannelTemplateInfo {
    dataChannelTemplateId?: string;
    description?: string | null;
    dataChannelType?: DataChannelType;
    isTankRelevant?: boolean;
    isForecastRelevant?: boolean;
    isProductRelevant?: boolean;

    init(_data?: any) {
        if (_data) {
            this.dataChannelTemplateId = _data["dataChannelTemplateId"] !== undefined ? _data["dataChannelTemplateId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.dataChannelType = _data["dataChannelType"] !== undefined ? _data["dataChannelType"] : <any>null;
            this.isTankRelevant = _data["isTankRelevant"] !== undefined ? _data["isTankRelevant"] : <any>null;
            this.isForecastRelevant = _data["isForecastRelevant"] !== undefined ? _data["isForecastRelevant"] : <any>null;
            this.isProductRelevant = _data["isProductRelevant"] !== undefined ? _data["isProductRelevant"] : <any>null;
        }
    }

    static fromJS(data: any): DataChannelTemplateInfo {
        data = typeof data === 'object' ? data : {};
        let result = new DataChannelTemplateInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelTemplateId"] = this.dataChannelTemplateId !== undefined ? this.dataChannelTemplateId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["dataChannelType"] = this.dataChannelType !== undefined ? this.dataChannelType : <any>null;
        data["isTankRelevant"] = this.isTankRelevant !== undefined ? this.isTankRelevant : <any>null;
        data["isForecastRelevant"] = this.isForecastRelevant !== undefined ? this.isForecastRelevant : <any>null;
        data["isProductRelevant"] = this.isProductRelevant !== undefined ? this.isProductRelevant : <any>null;
        return data;
    }
}

export class EvolveLevelDataChannelLoadDefaultValuesRequest {
    dataChannelId?: string;
    domainId?: string;
    dataChannelTemplateId?: string;

    init(_data?: any) {
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.dataChannelTemplateId = _data["dataChannelTemplateId"] !== undefined ? _data["dataChannelTemplateId"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveLevelDataChannelLoadDefaultValuesRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveLevelDataChannelLoadDefaultValuesRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["dataChannelTemplateId"] = this.dataChannelTemplateId !== undefined ? this.dataChannelTemplateId : <any>null;
        return data;
    }
}

export class EvolveRetrieveEditLevelDataChannelInfoResponse {
    dataChannelGeneralInfo?: LevelDataChannelGeneralInfo | null;
    dataChannelEventInfo?: EvolveDataChannelEventsInfo | null;
    options?: EditDataChannelOptions | null;

    init(_data?: any) {
        if (_data) {
            this.dataChannelGeneralInfo = _data["dataChannelGeneralInfo"] ? LevelDataChannelGeneralInfo.fromJS(_data["dataChannelGeneralInfo"]) : <any>null;
            this.dataChannelEventInfo = _data["dataChannelEventInfo"] ? EvolveDataChannelEventsInfo.fromJS(_data["dataChannelEventInfo"]) : <any>null;
            this.options = _data["options"] ? EditDataChannelOptions.fromJS(_data["options"]) : <any>null;
        }
    }

    static fromJS(data: any): EvolveRetrieveEditLevelDataChannelInfoResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveEditLevelDataChannelInfoResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelGeneralInfo"] = this.dataChannelGeneralInfo ? this.dataChannelGeneralInfo.toJSON() : <any>null;
        data["dataChannelEventInfo"] = this.dataChannelEventInfo ? this.dataChannelEventInfo.toJSON() : <any>null;
        data["options"] = this.options ? this.options.toJSON() : <any>null;
        return data;
    }
}

export class EditDataChannelOptions {
    dataChannelTemplates?: EvolveDataChannelTemplateDetail[] | null;
    nonVolumetricScaledUnitsList?: string[] | null;
    rawUnitsList?: string[] | null;
    yAxisScaleList?: GraphYAxisScaleInfo[] | null;
    isIntegrationFeedEnabled?: boolean;
    domainIntegrationInfo?: FtpDomainInfo[] | null;
    /** The event rule groups.
             */
    eventRuleGroups?: EventRuleGroupInfo[] | null;
    /** The rosters.
             */
    rosters?: EvolveRosterInfo[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["dataChannelTemplates"])) {
                this.dataChannelTemplates = [] as any;
                for (let item of _data["dataChannelTemplates"])
                    this.dataChannelTemplates!.push(EvolveDataChannelTemplateDetail.fromJS(item));
            }
            else {
                this.dataChannelTemplates = <any>null;
            }
            if (Array.isArray(_data["nonVolumetricScaledUnitsList"])) {
                this.nonVolumetricScaledUnitsList = [] as any;
                for (let item of _data["nonVolumetricScaledUnitsList"])
                    this.nonVolumetricScaledUnitsList!.push(item);
            }
            else {
                this.nonVolumetricScaledUnitsList = <any>null;
            }
            if (Array.isArray(_data["rawUnitsList"])) {
                this.rawUnitsList = [] as any;
                for (let item of _data["rawUnitsList"])
                    this.rawUnitsList!.push(item);
            }
            else {
                this.rawUnitsList = <any>null;
            }
            if (Array.isArray(_data["yAxisScaleList"])) {
                this.yAxisScaleList = [] as any;
                for (let item of _data["yAxisScaleList"])
                    this.yAxisScaleList!.push(GraphYAxisScaleInfo.fromJS(item));
            }
            else {
                this.yAxisScaleList = <any>null;
            }
            this.isIntegrationFeedEnabled = _data["isIntegrationFeedEnabled"] !== undefined ? _data["isIntegrationFeedEnabled"] : <any>null;
            if (Array.isArray(_data["domainIntegrationInfo"])) {
                this.domainIntegrationInfo = [] as any;
                for (let item of _data["domainIntegrationInfo"])
                    this.domainIntegrationInfo!.push(FtpDomainInfo.fromJS(item));
            }
            else {
                this.domainIntegrationInfo = <any>null;
            }
            if (Array.isArray(_data["eventRuleGroups"])) {
                this.eventRuleGroups = [] as any;
                for (let item of _data["eventRuleGroups"])
                    this.eventRuleGroups!.push(EventRuleGroupInfo.fromJS(item));
            }
            else {
                this.eventRuleGroups = <any>null;
            }
            if (Array.isArray(_data["rosters"])) {
                this.rosters = [] as any;
                for (let item of _data["rosters"])
                    this.rosters!.push(EvolveRosterInfo.fromJS(item));
            }
            else {
                this.rosters = <any>null;
            }
        }
    }

    static fromJS(data: any): EditDataChannelOptions {
        data = typeof data === 'object' ? data : {};
        let result = new EditDataChannelOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dataChannelTemplates)) {
            data["dataChannelTemplates"] = [];
            for (let item of this.dataChannelTemplates)
                data["dataChannelTemplates"].push(item.toJSON());
        }
        if (Array.isArray(this.nonVolumetricScaledUnitsList)) {
            data["nonVolumetricScaledUnitsList"] = [];
            for (let item of this.nonVolumetricScaledUnitsList)
                data["nonVolumetricScaledUnitsList"].push(item);
        }
        if (Array.isArray(this.rawUnitsList)) {
            data["rawUnitsList"] = [];
            for (let item of this.rawUnitsList)
                data["rawUnitsList"].push(item);
        }
        if (Array.isArray(this.yAxisScaleList)) {
            data["yAxisScaleList"] = [];
            for (let item of this.yAxisScaleList)
                data["yAxisScaleList"].push(item.toJSON());
        }
        data["isIntegrationFeedEnabled"] = this.isIntegrationFeedEnabled !== undefined ? this.isIntegrationFeedEnabled : <any>null;
        if (Array.isArray(this.domainIntegrationInfo)) {
            data["domainIntegrationInfo"] = [];
            for (let item of this.domainIntegrationInfo)
                data["domainIntegrationInfo"].push(item.toJSON());
        }
        if (Array.isArray(this.eventRuleGroups)) {
            data["eventRuleGroups"] = [];
            for (let item of this.eventRuleGroups)
                data["eventRuleGroups"].push(item.toJSON());
        }
        if (Array.isArray(this.rosters)) {
            data["rosters"] = [];
            for (let item of this.rosters)
                data["rosters"].push(item.toJSON());
        }
        return data;
    }
}

export class GraphYAxisScaleInfo {
    graphYAxisScaleId?: number;
    description?: string | null;

    init(_data?: any) {
        if (_data) {
            this.graphYAxisScaleId = _data["graphYAxisScaleId"] !== undefined ? _data["graphYAxisScaleId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
        }
    }

    static fromJS(data: any): GraphYAxisScaleInfo {
        data = typeof data === 'object' ? data : {};
        let result = new GraphYAxisScaleInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["graphYAxisScaleId"] = this.graphYAxisScaleId !== undefined ? this.graphYAxisScaleId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        return data;
    }
}

/** A class to model roster information. */
export class EvolveRosterInfo {
    /** The id of the roster.
             */
    rosterId?: number;
    /** The description of the roster.
             */
    description?: string | null;

    init(_data?: any) {
        if (_data) {
            this.rosterId = _data["rosterId"] !== undefined ? _data["rosterId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveRosterInfo {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRosterInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rosterId"] = this.rosterId !== undefined ? this.rosterId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        return data;
    }
}

export class EvolveRetrieveEditLevelDataChannelInfoRequest {
    dataChannelId?: string;
    domainId?: string;

    init(_data?: any) {
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveRetrieveEditLevelDataChannelInfoRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveEditLevelDataChannelInfoRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        return data;
    }
}

export class EvolveSaveEditLevelDataChannelInfoResponse {
    dataChannelGeneralInfo?: LevelDataChannelGeneralInfo | null;
    dataChannelEventInfo?: EvolveDataChannelEventsInfo | null;

    init(_data?: any) {
        if (_data) {
            this.dataChannelGeneralInfo = _data["dataChannelGeneralInfo"] ? LevelDataChannelGeneralInfo.fromJS(_data["dataChannelGeneralInfo"]) : <any>null;
            this.dataChannelEventInfo = _data["dataChannelEventInfo"] ? EvolveDataChannelEventsInfo.fromJS(_data["dataChannelEventInfo"]) : <any>null;
        }
    }

    static fromJS(data: any): EvolveSaveEditLevelDataChannelInfoResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveEditLevelDataChannelInfoResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelGeneralInfo"] = this.dataChannelGeneralInfo ? this.dataChannelGeneralInfo.toJSON() : <any>null;
        data["dataChannelEventInfo"] = this.dataChannelEventInfo ? this.dataChannelEventInfo.toJSON() : <any>null;
        return data;
    }
}

export class EvolveSaveEditLevelDataChannelInfoRequest {
    dataChannelId?: string;
    domainId?: string;
    description?: string | null;
    serialNumber?: string | null;
    /** A flag that determines if the data channel need to be marked as volumetric or not
             */
    isTankDimensionsSet?: boolean;
    /** Data channel configured tank type
             */
    tankType?: TankType | null;
    /** Data channel configured tank dimension
             */
    tankDimensionId?: string | null;
    /** Data channel configured product
             */
    productId?: string | null;
    /** Data channel configured Data Source
             */
    dataSource?: DataChannelDataSourceType;
    /** Data channel configured rtu
             */
    rtuId?: string | null;
    /** Data channel configured rtu channel
             */
    rtuChannelId?: string | null;
    /** Source DataChannelId based on which another data channel needs to be created.
             */
    sourceDataChannelId?: string | null;
    /** Comments of the published data channel.
             */
    publishedComments?: string | null;
    /** Data channel configured template
             */
    dataChannelTemplateId?: string | null;
    /** Data channel configured scaled units When tank dimension is not set
             */
    scaledUnitsAsText?: string | null;
    /** Data channel configured scaled units When tank dimension is set
             */
    scaledUnits?: UnitType | null;
    /** Data channel configured scaled Decimal Places
             */
    scaledDecimalPlaces?: number;
    /** Data channel configured Max Product Height
             */
    scaledMaxProductHeight?: number | null;
    /** Data channel configured Display Units
             */
    displayUnits?: UnitType | null;
    /** Data channel Display Max Product Height
             */
    displayMaxProductHeight?: number | null;
    /** Data channel Display Decimal Places
             */
    displayDecimalPlaces?: number;
    graphYAxisScaleId?: number;
    graphMax?: number | null;
    graphMin?: number | null;
    isDisplayGapsInGraph?: boolean;
    forecastMode?: ForecastModeType | null;
    manualUsageRate?: number | null;
    maxDeliverQuantity?: number | null;
    showHighLowForecast?: boolean;
    showScheduledDeliveriesInforecast?: boolean;
    autoGenerateIntegration1Id?: boolean;
    enableIntegration1?: boolean;
    integration1DomainId?: string | null;
    integration1Id?: string | null;
    autoGenerateIntegration2Id?: boolean;
    enableIntegration2?: boolean;
    integration2DomainId?: string | null;
    integration2Id?: string | null;
    /** The level event rules.
             */
    levelEventRules?: EvolveDataChannelEventRule[] | null;
    /** The missing data event rules.
             */
    missingDataEventRules?: EvolveDataChannelEventRule[] | null;
    /** The scheduled delivery event rules.
             */
    scheduledDeliveryEventRules?: EvolveDataChannelEventRule[] | null;
    /** The usage rate event rules.
             */
    usageRateEventRules?: EvolveDataChannelEventRule[] | null;

    init(_data?: any) {
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.serialNumber = _data["serialNumber"] !== undefined ? _data["serialNumber"] : <any>null;
            this.isTankDimensionsSet = _data["isTankDimensionsSet"] !== undefined ? _data["isTankDimensionsSet"] : <any>null;
            this.tankType = _data["tankType"] !== undefined ? _data["tankType"] : <any>null;
            this.tankDimensionId = _data["tankDimensionId"] !== undefined ? _data["tankDimensionId"] : <any>null;
            this.productId = _data["productId"] !== undefined ? _data["productId"] : <any>null;
            this.dataSource = _data["dataSource"] !== undefined ? _data["dataSource"] : <any>null;
            this.rtuId = _data["rtuId"] !== undefined ? _data["rtuId"] : <any>null;
            this.rtuChannelId = _data["rtuChannelId"] !== undefined ? _data["rtuChannelId"] : <any>null;
            this.sourceDataChannelId = _data["sourceDataChannelId"] !== undefined ? _data["sourceDataChannelId"] : <any>null;
            this.publishedComments = _data["publishedComments"] !== undefined ? _data["publishedComments"] : <any>null;
            this.dataChannelTemplateId = _data["dataChannelTemplateId"] !== undefined ? _data["dataChannelTemplateId"] : <any>null;
            this.scaledUnitsAsText = _data["scaledUnitsAsText"] !== undefined ? _data["scaledUnitsAsText"] : <any>null;
            this.scaledUnits = _data["scaledUnits"] !== undefined ? _data["scaledUnits"] : <any>null;
            this.scaledDecimalPlaces = _data["scaledDecimalPlaces"] !== undefined ? _data["scaledDecimalPlaces"] : <any>null;
            this.scaledMaxProductHeight = _data["scaledMaxProductHeight"] !== undefined ? _data["scaledMaxProductHeight"] : <any>null;
            this.displayUnits = _data["displayUnits"] !== undefined ? _data["displayUnits"] : <any>null;
            this.displayMaxProductHeight = _data["displayMaxProductHeight"] !== undefined ? _data["displayMaxProductHeight"] : <any>null;
            this.displayDecimalPlaces = _data["displayDecimalPlaces"] !== undefined ? _data["displayDecimalPlaces"] : <any>null;
            this.graphYAxisScaleId = _data["graphYAxisScaleId"] !== undefined ? _data["graphYAxisScaleId"] : <any>null;
            this.graphMax = _data["graphMax"] !== undefined ? _data["graphMax"] : <any>null;
            this.graphMin = _data["graphMin"] !== undefined ? _data["graphMin"] : <any>null;
            this.isDisplayGapsInGraph = _data["isDisplayGapsInGraph"] !== undefined ? _data["isDisplayGapsInGraph"] : <any>null;
            this.forecastMode = _data["forecastMode"] !== undefined ? _data["forecastMode"] : <any>null;
            this.manualUsageRate = _data["manualUsageRate"] !== undefined ? _data["manualUsageRate"] : <any>null;
            this.maxDeliverQuantity = _data["maxDeliverQuantity"] !== undefined ? _data["maxDeliverQuantity"] : <any>null;
            this.showHighLowForecast = _data["showHighLowForecast"] !== undefined ? _data["showHighLowForecast"] : <any>null;
            this.showScheduledDeliveriesInforecast = _data["showScheduledDeliveriesInforecast"] !== undefined ? _data["showScheduledDeliveriesInforecast"] : <any>null;
            this.autoGenerateIntegration1Id = _data["autoGenerateIntegration1Id"] !== undefined ? _data["autoGenerateIntegration1Id"] : <any>null;
            this.enableIntegration1 = _data["enableIntegration1"] !== undefined ? _data["enableIntegration1"] : <any>null;
            this.integration1DomainId = _data["integration1DomainId"] !== undefined ? _data["integration1DomainId"] : <any>null;
            this.integration1Id = _data["integration1Id"] !== undefined ? _data["integration1Id"] : <any>null;
            this.autoGenerateIntegration2Id = _data["autoGenerateIntegration2Id"] !== undefined ? _data["autoGenerateIntegration2Id"] : <any>null;
            this.enableIntegration2 = _data["enableIntegration2"] !== undefined ? _data["enableIntegration2"] : <any>null;
            this.integration2DomainId = _data["integration2DomainId"] !== undefined ? _data["integration2DomainId"] : <any>null;
            this.integration2Id = _data["integration2Id"] !== undefined ? _data["integration2Id"] : <any>null;
            if (Array.isArray(_data["levelEventRules"])) {
                this.levelEventRules = [] as any;
                for (let item of _data["levelEventRules"])
                    this.levelEventRules!.push(EvolveDataChannelEventRule.fromJS(item));
            }
            else {
                this.levelEventRules = <any>null;
            }
            if (Array.isArray(_data["missingDataEventRules"])) {
                this.missingDataEventRules = [] as any;
                for (let item of _data["missingDataEventRules"])
                    this.missingDataEventRules!.push(EvolveDataChannelEventRule.fromJS(item));
            }
            else {
                this.missingDataEventRules = <any>null;
            }
            if (Array.isArray(_data["scheduledDeliveryEventRules"])) {
                this.scheduledDeliveryEventRules = [] as any;
                for (let item of _data["scheduledDeliveryEventRules"])
                    this.scheduledDeliveryEventRules!.push(EvolveDataChannelEventRule.fromJS(item));
            }
            else {
                this.scheduledDeliveryEventRules = <any>null;
            }
            if (Array.isArray(_data["usageRateEventRules"])) {
                this.usageRateEventRules = [] as any;
                for (let item of _data["usageRateEventRules"])
                    this.usageRateEventRules!.push(EvolveDataChannelEventRule.fromJS(item));
            }
            else {
                this.usageRateEventRules = <any>null;
            }
        }
    }

    static fromJS(data: any): EvolveSaveEditLevelDataChannelInfoRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveEditLevelDataChannelInfoRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["serialNumber"] = this.serialNumber !== undefined ? this.serialNumber : <any>null;
        data["isTankDimensionsSet"] = this.isTankDimensionsSet !== undefined ? this.isTankDimensionsSet : <any>null;
        data["tankType"] = this.tankType !== undefined ? this.tankType : <any>null;
        data["tankDimensionId"] = this.tankDimensionId !== undefined ? this.tankDimensionId : <any>null;
        data["productId"] = this.productId !== undefined ? this.productId : <any>null;
        data["dataSource"] = this.dataSource !== undefined ? this.dataSource : <any>null;
        data["rtuId"] = this.rtuId !== undefined ? this.rtuId : <any>null;
        data["rtuChannelId"] = this.rtuChannelId !== undefined ? this.rtuChannelId : <any>null;
        data["sourceDataChannelId"] = this.sourceDataChannelId !== undefined ? this.sourceDataChannelId : <any>null;
        data["publishedComments"] = this.publishedComments !== undefined ? this.publishedComments : <any>null;
        data["dataChannelTemplateId"] = this.dataChannelTemplateId !== undefined ? this.dataChannelTemplateId : <any>null;
        data["scaledUnitsAsText"] = this.scaledUnitsAsText !== undefined ? this.scaledUnitsAsText : <any>null;
        data["scaledUnits"] = this.scaledUnits !== undefined ? this.scaledUnits : <any>null;
        data["scaledDecimalPlaces"] = this.scaledDecimalPlaces !== undefined ? this.scaledDecimalPlaces : <any>null;
        data["scaledMaxProductHeight"] = this.scaledMaxProductHeight !== undefined ? this.scaledMaxProductHeight : <any>null;
        data["displayUnits"] = this.displayUnits !== undefined ? this.displayUnits : <any>null;
        data["displayMaxProductHeight"] = this.displayMaxProductHeight !== undefined ? this.displayMaxProductHeight : <any>null;
        data["displayDecimalPlaces"] = this.displayDecimalPlaces !== undefined ? this.displayDecimalPlaces : <any>null;
        data["graphYAxisScaleId"] = this.graphYAxisScaleId !== undefined ? this.graphYAxisScaleId : <any>null;
        data["graphMax"] = this.graphMax !== undefined ? this.graphMax : <any>null;
        data["graphMin"] = this.graphMin !== undefined ? this.graphMin : <any>null;
        data["isDisplayGapsInGraph"] = this.isDisplayGapsInGraph !== undefined ? this.isDisplayGapsInGraph : <any>null;
        data["forecastMode"] = this.forecastMode !== undefined ? this.forecastMode : <any>null;
        data["manualUsageRate"] = this.manualUsageRate !== undefined ? this.manualUsageRate : <any>null;
        data["maxDeliverQuantity"] = this.maxDeliverQuantity !== undefined ? this.maxDeliverQuantity : <any>null;
        data["showHighLowForecast"] = this.showHighLowForecast !== undefined ? this.showHighLowForecast : <any>null;
        data["showScheduledDeliveriesInforecast"] = this.showScheduledDeliveriesInforecast !== undefined ? this.showScheduledDeliveriesInforecast : <any>null;
        data["autoGenerateIntegration1Id"] = this.autoGenerateIntegration1Id !== undefined ? this.autoGenerateIntegration1Id : <any>null;
        data["enableIntegration1"] = this.enableIntegration1 !== undefined ? this.enableIntegration1 : <any>null;
        data["integration1DomainId"] = this.integration1DomainId !== undefined ? this.integration1DomainId : <any>null;
        data["integration1Id"] = this.integration1Id !== undefined ? this.integration1Id : <any>null;
        data["autoGenerateIntegration2Id"] = this.autoGenerateIntegration2Id !== undefined ? this.autoGenerateIntegration2Id : <any>null;
        data["enableIntegration2"] = this.enableIntegration2 !== undefined ? this.enableIntegration2 : <any>null;
        data["integration2DomainId"] = this.integration2DomainId !== undefined ? this.integration2DomainId : <any>null;
        data["integration2Id"] = this.integration2Id !== undefined ? this.integration2Id : <any>null;
        if (Array.isArray(this.levelEventRules)) {
            data["levelEventRules"] = [];
            for (let item of this.levelEventRules)
                data["levelEventRules"].push(item.toJSON());
        }
        if (Array.isArray(this.missingDataEventRules)) {
            data["missingDataEventRules"] = [];
            for (let item of this.missingDataEventRules)
                data["missingDataEventRules"].push(item.toJSON());
        }
        if (Array.isArray(this.scheduledDeliveryEventRules)) {
            data["scheduledDeliveryEventRules"] = [];
            for (let item of this.scheduledDeliveryEventRules)
                data["scheduledDeliveryEventRules"].push(item.toJSON());
        }
        if (Array.isArray(this.usageRateEventRules)) {
            data["usageRateEventRules"] = [];
            for (let item of this.usageRateEventRules)
                data["usageRateEventRules"].push(item.toJSON());
        }
        return data;
    }
}

export class EvolveSaveLevelDataChannelCalibrationInfoResponse {
    dataChannel?: LevelDataChannelGeneralInfo | null;

    init(_data?: any) {
        if (_data) {
            this.dataChannel = _data["dataChannel"] ? LevelDataChannelGeneralInfo.fromJS(_data["dataChannel"]) : <any>null;
        }
    }

    static fromJS(data: any): EvolveSaveLevelDataChannelCalibrationInfoResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveLevelDataChannelCalibrationInfoResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannel"] = this.dataChannel ? this.dataChannel.toJSON() : <any>null;
        return data;
    }
}

export class EvolveSaveLevelDataChannelCalibrationInfoRequest {
    dataChannelId?: string;
    domainId?: string;
    /** Data channel configured Scaling Mode
             */
    scalingMode?: ScalingModeType;
    rawUnits?: string | null;
    rawUnitsAtZero?: number | null;
    rawUnitsAtFullScale?: number | null;
    rawUnitsAtScaledMin?: number | null;
    rawUnitsAtScaledMax?: number | null;
    rawUnitsAtUnderRange?: number | null;
    rawUnitsAtOverRange?: number | null;
    isDataInverted?: boolean;
    scaledMax?: number | null;
    scaledMin?: number | null;

    init(_data?: any) {
        if (_data) {
            this.dataChannelId = _data["dataChannelId"] !== undefined ? _data["dataChannelId"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.scalingMode = _data["scalingMode"] !== undefined ? _data["scalingMode"] : <any>null;
            this.rawUnits = _data["rawUnits"] !== undefined ? _data["rawUnits"] : <any>null;
            this.rawUnitsAtZero = _data["rawUnitsAtZero"] !== undefined ? _data["rawUnitsAtZero"] : <any>null;
            this.rawUnitsAtFullScale = _data["rawUnitsAtFullScale"] !== undefined ? _data["rawUnitsAtFullScale"] : <any>null;
            this.rawUnitsAtScaledMin = _data["rawUnitsAtScaledMin"] !== undefined ? _data["rawUnitsAtScaledMin"] : <any>null;
            this.rawUnitsAtScaledMax = _data["rawUnitsAtScaledMax"] !== undefined ? _data["rawUnitsAtScaledMax"] : <any>null;
            this.rawUnitsAtUnderRange = _data["rawUnitsAtUnderRange"] !== undefined ? _data["rawUnitsAtUnderRange"] : <any>null;
            this.rawUnitsAtOverRange = _data["rawUnitsAtOverRange"] !== undefined ? _data["rawUnitsAtOverRange"] : <any>null;
            this.isDataInverted = _data["isDataInverted"] !== undefined ? _data["isDataInverted"] : <any>null;
            this.scaledMax = _data["scaledMax"] !== undefined ? _data["scaledMax"] : <any>null;
            this.scaledMin = _data["scaledMin"] !== undefined ? _data["scaledMin"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveSaveLevelDataChannelCalibrationInfoRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveLevelDataChannelCalibrationInfoRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataChannelId"] = this.dataChannelId !== undefined ? this.dataChannelId : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["scalingMode"] = this.scalingMode !== undefined ? this.scalingMode : <any>null;
        data["rawUnits"] = this.rawUnits !== undefined ? this.rawUnits : <any>null;
        data["rawUnitsAtZero"] = this.rawUnitsAtZero !== undefined ? this.rawUnitsAtZero : <any>null;
        data["rawUnitsAtFullScale"] = this.rawUnitsAtFullScale !== undefined ? this.rawUnitsAtFullScale : <any>null;
        data["rawUnitsAtScaledMin"] = this.rawUnitsAtScaledMin !== undefined ? this.rawUnitsAtScaledMin : <any>null;
        data["rawUnitsAtScaledMax"] = this.rawUnitsAtScaledMax !== undefined ? this.rawUnitsAtScaledMax : <any>null;
        data["rawUnitsAtUnderRange"] = this.rawUnitsAtUnderRange !== undefined ? this.rawUnitsAtUnderRange : <any>null;
        data["rawUnitsAtOverRange"] = this.rawUnitsAtOverRange !== undefined ? this.rawUnitsAtOverRange : <any>null;
        data["isDataInverted"] = this.isDataInverted !== undefined ? this.isDataInverted : <any>null;
        data["scaledMax"] = this.scaledMax !== undefined ? this.scaledMax : <any>null;
        data["scaledMin"] = this.scaledMin !== undefined ? this.scaledMin : <any>null;
        return data;
    }
}

export class EvolveRetrieveAssetDiagnosticDataChannelsByRtuResponse {
    supportedDiagnosticChannels?: { [key: string]: DataChannelType[]; } | null;

    init(_data?: any) {
        if (_data) {
            if (_data["supportedDiagnosticChannels"]) {
                this.supportedDiagnosticChannels = {} as any;
                for (let key in _data["supportedDiagnosticChannels"]) {
                    if (_data["supportedDiagnosticChannels"].hasOwnProperty(key))
                        (<any>this.supportedDiagnosticChannels)![key] = _data["supportedDiagnosticChannels"][key] !== undefined ? _data["supportedDiagnosticChannels"][key] : [];
                }
            }
            else {
                this.supportedDiagnosticChannels = <any>null;
            }
        }
    }

    static fromJS(data: any): EvolveRetrieveAssetDiagnosticDataChannelsByRtuResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveAssetDiagnosticDataChannelsByRtuResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.supportedDiagnosticChannels) {
            data["supportedDiagnosticChannels"] = {};
            for (let key in this.supportedDiagnosticChannels) {
                if (this.supportedDiagnosticChannels.hasOwnProperty(key))
                    (<any>data["supportedDiagnosticChannels"])[key] = this.supportedDiagnosticChannels[key] !== undefined ? this.supportedDiagnosticChannels[key] : <any>null;
            }
        }
        return data;
    }
}

export class EvolveRetrieveAssetDiagnosticDataChannelsByRtuRequest {
    assetId?: string;

    init(_data?: any) {
        if (_data) {
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveRetrieveAssetDiagnosticDataChannelsByRtuRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveAssetDiagnosticDataChannelsByRtuRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        return data;
    }
}

export class EvolveRetrieveAssetEditDetailsByIdResponse {
    asset?: EditAsset | null;
    assetEditOptions?: AssetEditOptions | null;

    init(_data?: any) {
        if (_data) {
            this.asset = _data["asset"] ? EditAsset.fromJS(_data["asset"]) : <any>null;
            this.assetEditOptions = _data["assetEditOptions"] ? AssetEditOptions.fromJS(_data["assetEditOptions"]) : <any>null;
        }
    }

    static fromJS(data: any): EvolveRetrieveAssetEditDetailsByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveAssetEditDetailsByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["asset"] = this.asset ? this.asset.toJSON() : <any>null;
        data["assetEditOptions"] = this.assetEditOptions ? this.assetEditOptions.toJSON() : <any>null;
        return data;
    }
}

export class AssetEditOptions {
    eventRuleGroups?: EventRuleGroupInfo[] | null;
    dataChannelTemplates?: EvolveDataChannelTemplateDetail[] | null;
    geoAreaGroups?: GeoAreaGroupInfo[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["eventRuleGroups"])) {
                this.eventRuleGroups = [] as any;
                for (let item of _data["eventRuleGroups"])
                    this.eventRuleGroups!.push(EventRuleGroupInfo.fromJS(item));
            }
            else {
                this.eventRuleGroups = <any>null;
            }
            if (Array.isArray(_data["dataChannelTemplates"])) {
                this.dataChannelTemplates = [] as any;
                for (let item of _data["dataChannelTemplates"])
                    this.dataChannelTemplates!.push(EvolveDataChannelTemplateDetail.fromJS(item));
            }
            else {
                this.dataChannelTemplates = <any>null;
            }
            if (Array.isArray(_data["geoAreaGroups"])) {
                this.geoAreaGroups = [] as any;
                for (let item of _data["geoAreaGroups"])
                    this.geoAreaGroups!.push(GeoAreaGroupInfo.fromJS(item));
            }
            else {
                this.geoAreaGroups = <any>null;
            }
        }
    }

    static fromJS(data: any): AssetEditOptions {
        data = typeof data === 'object' ? data : {};
        let result = new AssetEditOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.eventRuleGroups)) {
            data["eventRuleGroups"] = [];
            for (let item of this.eventRuleGroups)
                data["eventRuleGroups"].push(item.toJSON());
        }
        if (Array.isArray(this.dataChannelTemplates)) {
            data["dataChannelTemplates"] = [];
            for (let item of this.dataChannelTemplates)
                data["dataChannelTemplates"].push(item.toJSON());
        }
        if (Array.isArray(this.geoAreaGroups)) {
            data["geoAreaGroups"] = [];
            for (let item of this.geoAreaGroups)
                data["geoAreaGroups"].push(item.toJSON());
        }
        return data;
    }
}

export class EvolveRetrieveAssetEditDetailsByIdRequest {
    /** Asset Id.
             */
    assetId!: string;

    init(_data?: any) {
        if (_data) {
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveRetrieveAssetEditDetailsByIdRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveAssetEditDetailsByIdRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        return data;
    }
}

export class EvolveSaveAssetEditResponse {
    asset?: EditAsset | null;

    init(_data?: any) {
        if (_data) {
            this.asset = _data["asset"] ? EditAsset.fromJS(_data["asset"]) : <any>null;
        }
    }

    static fromJS(data: any): EvolveSaveAssetEditResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveAssetEditResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["asset"] = this.asset ? this.asset.toJSON() : <any>null;
        return data;
    }
}

export class EvolveSaveAssetEditRequest {
    assetId?: string;
    description?: string | null;
    designCurveType?: DesignCurveType;
    customProperties?: EvolveAssetCustomProperty[] | null;
    dataChannels?: EditAssetDataChannel[] | null;
    notes?: string | null;
    technician?: string | null;
    eventRuleGroupId?: number | null;
    siteId?: string;
    integrationName?: string | null;
    assetType?: AssetType;
    domainId?: string;
    isMobile?: boolean;
    geoAreaGroupId?: number | null;

    init(_data?: any) {
        if (_data) {
            this.assetId = _data["assetId"] !== undefined ? _data["assetId"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.designCurveType = _data["designCurveType"] !== undefined ? _data["designCurveType"] : <any>null;
            if (Array.isArray(_data["customProperties"])) {
                this.customProperties = [] as any;
                for (let item of _data["customProperties"])
                    this.customProperties!.push(EvolveAssetCustomProperty.fromJS(item));
            }
            else {
                this.customProperties = <any>null;
            }
            if (Array.isArray(_data["dataChannels"])) {
                this.dataChannels = [] as any;
                for (let item of _data["dataChannels"])
                    this.dataChannels!.push(EditAssetDataChannel.fromJS(item));
            }
            else {
                this.dataChannels = <any>null;
            }
            this.notes = _data["notes"] !== undefined ? _data["notes"] : <any>null;
            this.technician = _data["technician"] !== undefined ? _data["technician"] : <any>null;
            this.eventRuleGroupId = _data["eventRuleGroupId"] !== undefined ? _data["eventRuleGroupId"] : <any>null;
            this.siteId = _data["siteId"] !== undefined ? _data["siteId"] : <any>null;
            this.integrationName = _data["integrationName"] !== undefined ? _data["integrationName"] : <any>null;
            this.assetType = _data["assetType"] !== undefined ? _data["assetType"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.isMobile = _data["isMobile"] !== undefined ? _data["isMobile"] : <any>null;
            this.geoAreaGroupId = _data["geoAreaGroupId"] !== undefined ? _data["geoAreaGroupId"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveSaveAssetEditRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveAssetEditRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetId"] = this.assetId !== undefined ? this.assetId : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["designCurveType"] = this.designCurveType !== undefined ? this.designCurveType : <any>null;
        if (Array.isArray(this.customProperties)) {
            data["customProperties"] = [];
            for (let item of this.customProperties)
                data["customProperties"].push(item.toJSON());
        }
        if (Array.isArray(this.dataChannels)) {
            data["dataChannels"] = [];
            for (let item of this.dataChannels)
                data["dataChannels"].push(item.toJSON());
        }
        data["notes"] = this.notes !== undefined ? this.notes : <any>null;
        data["technician"] = this.technician !== undefined ? this.technician : <any>null;
        data["eventRuleGroupId"] = this.eventRuleGroupId !== undefined ? this.eventRuleGroupId : <any>null;
        data["siteId"] = this.siteId !== undefined ? this.siteId : <any>null;
        data["integrationName"] = this.integrationName !== undefined ? this.integrationName : <any>null;
        data["assetType"] = this.assetType !== undefined ? this.assetType : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["isMobile"] = this.isMobile !== undefined ? this.isMobile : <any>null;
        data["geoAreaGroupId"] = this.geoAreaGroupId !== undefined ? this.geoAreaGroupId : <any>null;
        return data;
    }
}

export class EvolveRetrieveHeliumISOContainerRtuListByPrefixResponse {
    rtus?: EvolveRtuDeviceInfo[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["rtus"])) {
                this.rtus = [] as any;
                for (let item of _data["rtus"])
                    this.rtus!.push(EvolveRtuDeviceInfo.fromJS(item));
            }
            else {
                this.rtus = <any>null;
            }
        }
    }

    static fromJS(data: any): EvolveRetrieveHeliumISOContainerRtuListByPrefixResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveHeliumISOContainerRtuListByPrefixResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.rtus)) {
            data["rtus"] = [];
            for (let item of this.rtus)
                data["rtus"].push(item.toJSON());
        }
        return data;
    }
}

export class EvolveRtuDeviceInfo {
    rtuId?: string;
    deviceId?: string | null;

    init(_data?: any) {
        if (_data) {
            this.rtuId = _data["rtuId"] !== undefined ? _data["rtuId"] : <any>null;
            this.deviceId = _data["deviceId"] !== undefined ? _data["deviceId"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveRtuDeviceInfo {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRtuDeviceInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rtuId"] = this.rtuId !== undefined ? this.rtuId : <any>null;
        data["deviceId"] = this.deviceId !== undefined ? this.deviceId : <any>null;
        return data;
    }
}

export class EvolveRetrieveHeliumISOContainerRtuListByPrefixRequest {
    options?: RTUPrefixSearchOptions | null;

    init(_data?: any) {
        if (_data) {
            this.options = _data["options"] ? RTUPrefixSearchOptions.fromJS(_data["options"]) : <any>null;
        }
    }

    static fromJS(data: any): EvolveRetrieveHeliumISOContainerRtuListByPrefixRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveHeliumISOContainerRtuListByPrefixRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["options"] = this.options ? this.options.toJSON() : <any>null;
        return data;
    }
}

export class RTUPrefixSearchOptions {
    deviceIdPrefix?: string | null;
    domainId?: string | null;
    maxRecords?: number;

    init(_data?: any) {
        if (_data) {
            this.deviceIdPrefix = _data["deviceIdPrefix"] !== undefined ? _data["deviceIdPrefix"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.maxRecords = _data["maxRecords"] !== undefined ? _data["maxRecords"] : <any>null;
        }
    }

    static fromJS(data: any): RTUPrefixSearchOptions {
        data = typeof data === 'object' ? data : {};
        let result = new RTUPrefixSearchOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deviceIdPrefix"] = this.deviceIdPrefix !== undefined ? this.deviceIdPrefix : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["maxRecords"] = this.maxRecords !== undefined ? this.maxRecords : <any>null;
        return data;
    }
}

export class EvolveRetrieveQuickAssetCreateHeliumISOContainerResponse {
    customProperties?: EvolveDomainCustomPropertyInfo[] | null;
    designCurve?: DesignCurveInfo[] | null;
    domainHeliumISODefaultSite?: SiteInfoRecord | null;
    isIntegrationFeedEnabled?: boolean;
    domainIntegrationInfo?: FtpDomainInfo[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["customProperties"])) {
                this.customProperties = [] as any;
                for (let item of _data["customProperties"])
                    this.customProperties!.push(EvolveDomainCustomPropertyInfo.fromJS(item));
            }
            else {
                this.customProperties = <any>null;
            }
            if (Array.isArray(_data["designCurve"])) {
                this.designCurve = [] as any;
                for (let item of _data["designCurve"])
                    this.designCurve!.push(DesignCurveInfo.fromJS(item));
            }
            else {
                this.designCurve = <any>null;
            }
            this.domainHeliumISODefaultSite = _data["domainHeliumISODefaultSite"] ? SiteInfoRecord.fromJS(_data["domainHeliumISODefaultSite"]) : <any>null;
            this.isIntegrationFeedEnabled = _data["isIntegrationFeedEnabled"] !== undefined ? _data["isIntegrationFeedEnabled"] : <any>null;
            if (Array.isArray(_data["domainIntegrationInfo"])) {
                this.domainIntegrationInfo = [] as any;
                for (let item of _data["domainIntegrationInfo"])
                    this.domainIntegrationInfo!.push(FtpDomainInfo.fromJS(item));
            }
            else {
                this.domainIntegrationInfo = <any>null;
            }
        }
    }

    static fromJS(data: any): EvolveRetrieveQuickAssetCreateHeliumISOContainerResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveQuickAssetCreateHeliumISOContainerResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.customProperties)) {
            data["customProperties"] = [];
            for (let item of this.customProperties)
                data["customProperties"].push(item.toJSON());
        }
        if (Array.isArray(this.designCurve)) {
            data["designCurve"] = [];
            for (let item of this.designCurve)
                data["designCurve"].push(item.toJSON());
        }
        data["domainHeliumISODefaultSite"] = this.domainHeliumISODefaultSite ? this.domainHeliumISODefaultSite.toJSON() : <any>null;
        data["isIntegrationFeedEnabled"] = this.isIntegrationFeedEnabled !== undefined ? this.isIntegrationFeedEnabled : <any>null;
        if (Array.isArray(this.domainIntegrationInfo)) {
            data["domainIntegrationInfo"] = [];
            for (let item of this.domainIntegrationInfo)
                data["domainIntegrationInfo"].push(item.toJSON());
        }
        return data;
    }
}

export class EvolveDomainCustomPropertyInfo {
    propertyTypeId?: string;
    name?: string | null;
    dataType?: CustomPropertyDataType;
    minimum?: number | null;
    maximum?: number | null;
    precision?: number | null;
    listValues?: string | null;

    init(_data?: any) {
        if (_data) {
            this.propertyTypeId = _data["propertyTypeId"] !== undefined ? _data["propertyTypeId"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.dataType = _data["dataType"] !== undefined ? _data["dataType"] : <any>null;
            this.minimum = _data["minimum"] !== undefined ? _data["minimum"] : <any>null;
            this.maximum = _data["maximum"] !== undefined ? _data["maximum"] : <any>null;
            this.precision = _data["precision"] !== undefined ? _data["precision"] : <any>null;
            this.listValues = _data["listValues"] !== undefined ? _data["listValues"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveDomainCustomPropertyInfo {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveDomainCustomPropertyInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["propertyTypeId"] = this.propertyTypeId !== undefined ? this.propertyTypeId : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["dataType"] = this.dataType !== undefined ? this.dataType : <any>null;
        data["minimum"] = this.minimum !== undefined ? this.minimum : <any>null;
        data["maximum"] = this.maximum !== undefined ? this.maximum : <any>null;
        data["precision"] = this.precision !== undefined ? this.precision : <any>null;
        data["listValues"] = this.listValues !== undefined ? this.listValues : <any>null;
        return data;
    }
}

export class EvolveRetrieveHeliumISOContainerRequest {
    domainId?: string;

    init(_data?: any) {
        if (_data) {
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveRetrieveHeliumISOContainerRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveHeliumISOContainerRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        return data;
    }
}

export class EvolveSaveQuickAssetCreateHeliumISOContainerResponse {
    asset?: QuickAssetCreateHeliumISOContainer | null;

    init(_data?: any) {
        if (_data) {
            this.asset = _data["asset"] ? QuickAssetCreateHeliumISOContainer.fromJS(_data["asset"]) : <any>null;
        }
    }

    static fromJS(data: any): EvolveSaveQuickAssetCreateHeliumISOContainerResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveQuickAssetCreateHeliumISOContainerResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["asset"] = this.asset ? this.asset.toJSON() : <any>null;
        return data;
    }
}

export class EvolveSaveQuickAssetCreateHeliumISOContainerRequest {
    /** Asset description.
             */
    description?: string | null;
    /** Asset DomainId.
             */
    domainId?: string;
    /** Asset Design Curve Type.
             */
    designCurveId?: number;
    /** Asset SiteId.
             */
    siteId?: string;
    /** Asset Integration Name.
             */
    assetIntegrationId?: string | null;
    /** Asset Notes.
             */
    notes?: string | null;
    /** Asset Custom Properties.
             */
    customProperties?: EvolveAssetCustomProperty[] | null;
    /** Data channels RtuId.
             */
    rtuId?: string;
    /** A flag to indicate a need to create Helium Pressure Rate Of Change data channel.
             */
    addHeliumPressureRateOfChange?: boolean;
    /** Helium Level integration set up
             */
    heliumLevelIntegrationDetails?: DataChannelIntegrationDetails | null;
    /** Helium  Pressure integration set up
             */
    heliumPressureIntegrationDetails?: DataChannelIntegrationDetails | null;
    /** Helium Level integration set up
             */
    nitrogenLevelIntegrationDetails?: DataChannelIntegrationDetails | null;
    /** Helium  Pressure integration set up
             */
    nitrogenPressureIntegrationDetails?: DataChannelIntegrationDetails | null;
    /** Battery integration set up
             */
    batteryIntegrationDetails?: DataChannelIntegrationDetails | null;
    /** GPS integration set up
             */
    gpsIntegrationDetails?: DataChannelIntegrationDetails | null;

    init(_data?: any) {
        if (_data) {
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.designCurveId = _data["designCurveId"] !== undefined ? _data["designCurveId"] : <any>null;
            this.siteId = _data["siteId"] !== undefined ? _data["siteId"] : <any>null;
            this.assetIntegrationId = _data["assetIntegrationId"] !== undefined ? _data["assetIntegrationId"] : <any>null;
            this.notes = _data["notes"] !== undefined ? _data["notes"] : <any>null;
            if (Array.isArray(_data["customProperties"])) {
                this.customProperties = [] as any;
                for (let item of _data["customProperties"])
                    this.customProperties!.push(EvolveAssetCustomProperty.fromJS(item));
            }
            else {
                this.customProperties = <any>null;
            }
            this.rtuId = _data["rtuId"] !== undefined ? _data["rtuId"] : <any>null;
            this.addHeliumPressureRateOfChange = _data["addHeliumPressureRateOfChange"] !== undefined ? _data["addHeliumPressureRateOfChange"] : <any>null;
            this.heliumLevelIntegrationDetails = _data["heliumLevelIntegrationDetails"] ? DataChannelIntegrationDetails.fromJS(_data["heliumLevelIntegrationDetails"]) : <any>null;
            this.heliumPressureIntegrationDetails = _data["heliumPressureIntegrationDetails"] ? DataChannelIntegrationDetails.fromJS(_data["heliumPressureIntegrationDetails"]) : <any>null;
            this.nitrogenLevelIntegrationDetails = _data["nitrogenLevelIntegrationDetails"] ? DataChannelIntegrationDetails.fromJS(_data["nitrogenLevelIntegrationDetails"]) : <any>null;
            this.nitrogenPressureIntegrationDetails = _data["nitrogenPressureIntegrationDetails"] ? DataChannelIntegrationDetails.fromJS(_data["nitrogenPressureIntegrationDetails"]) : <any>null;
            this.batteryIntegrationDetails = _data["batteryIntegrationDetails"] ? DataChannelIntegrationDetails.fromJS(_data["batteryIntegrationDetails"]) : <any>null;
            this.gpsIntegrationDetails = _data["gpsIntegrationDetails"] ? DataChannelIntegrationDetails.fromJS(_data["gpsIntegrationDetails"]) : <any>null;
        }
    }

    static fromJS(data: any): EvolveSaveQuickAssetCreateHeliumISOContainerRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveSaveQuickAssetCreateHeliumISOContainerRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["designCurveId"] = this.designCurveId !== undefined ? this.designCurveId : <any>null;
        data["siteId"] = this.siteId !== undefined ? this.siteId : <any>null;
        data["assetIntegrationId"] = this.assetIntegrationId !== undefined ? this.assetIntegrationId : <any>null;
        data["notes"] = this.notes !== undefined ? this.notes : <any>null;
        if (Array.isArray(this.customProperties)) {
            data["customProperties"] = [];
            for (let item of this.customProperties)
                data["customProperties"].push(item.toJSON());
        }
        data["rtuId"] = this.rtuId !== undefined ? this.rtuId : <any>null;
        data["addHeliumPressureRateOfChange"] = this.addHeliumPressureRateOfChange !== undefined ? this.addHeliumPressureRateOfChange : <any>null;
        data["heliumLevelIntegrationDetails"] = this.heliumLevelIntegrationDetails ? this.heliumLevelIntegrationDetails.toJSON() : <any>null;
        data["heliumPressureIntegrationDetails"] = this.heliumPressureIntegrationDetails ? this.heliumPressureIntegrationDetails.toJSON() : <any>null;
        data["nitrogenLevelIntegrationDetails"] = this.nitrogenLevelIntegrationDetails ? this.nitrogenLevelIntegrationDetails.toJSON() : <any>null;
        data["nitrogenPressureIntegrationDetails"] = this.nitrogenPressureIntegrationDetails ? this.nitrogenPressureIntegrationDetails.toJSON() : <any>null;
        data["batteryIntegrationDetails"] = this.batteryIntegrationDetails ? this.batteryIntegrationDetails.toJSON() : <any>null;
        data["gpsIntegrationDetails"] = this.gpsIntegrationDetails ? this.gpsIntegrationDetails.toJSON() : <any>null;
        return data;
    }
}

export class EvolveQuickAssetCreateUnitsConverterResponse {
    maxProductHeight?: number;
    reorderEventValue?: number | null;
    criticalEventValue?: number | null;
    unit?: UnitType;
    decimalPlaces?: number;

    init(_data?: any) {
        if (_data) {
            this.maxProductHeight = _data["maxProductHeight"] !== undefined ? _data["maxProductHeight"] : <any>null;
            this.reorderEventValue = _data["reorderEventValue"] !== undefined ? _data["reorderEventValue"] : <any>null;
            this.criticalEventValue = _data["criticalEventValue"] !== undefined ? _data["criticalEventValue"] : <any>null;
            this.unit = _data["unit"] !== undefined ? _data["unit"] : <any>null;
            this.decimalPlaces = _data["decimalPlaces"] !== undefined ? _data["decimalPlaces"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveQuickAssetCreateUnitsConverterResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveQuickAssetCreateUnitsConverterResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maxProductHeight"] = this.maxProductHeight !== undefined ? this.maxProductHeight : <any>null;
        data["reorderEventValue"] = this.reorderEventValue !== undefined ? this.reorderEventValue : <any>null;
        data["criticalEventValue"] = this.criticalEventValue !== undefined ? this.criticalEventValue : <any>null;
        data["unit"] = this.unit !== undefined ? this.unit : <any>null;
        data["decimalPlaces"] = this.decimalPlaces !== undefined ? this.decimalPlaces : <any>null;
        return data;
    }
}

export class EvolveQuickAssetCreateUnitsConverterRequest {
    fromUnit?: UnitType;
    toUnit?: UnitType;
    maxProductHeight?: number;
    reorderEventValue?: number | null;
    criticalEventValues?: number | null;
    tankDimensionId?: string;
    productId?: string;
    scaledMin?: number;
    scaledMax?: number;
    scaledUnit?: UnitType;

    init(_data?: any) {
        if (_data) {
            this.fromUnit = _data["fromUnit"] !== undefined ? _data["fromUnit"] : <any>null;
            this.toUnit = _data["toUnit"] !== undefined ? _data["toUnit"] : <any>null;
            this.maxProductHeight = _data["maxProductHeight"] !== undefined ? _data["maxProductHeight"] : <any>null;
            this.reorderEventValue = _data["reorderEventValue"] !== undefined ? _data["reorderEventValue"] : <any>null;
            this.criticalEventValues = _data["criticalEventValues"] !== undefined ? _data["criticalEventValues"] : <any>null;
            this.tankDimensionId = _data["tankDimensionId"] !== undefined ? _data["tankDimensionId"] : <any>null;
            this.productId = _data["productId"] !== undefined ? _data["productId"] : <any>null;
            this.scaledMin = _data["scaledMin"] !== undefined ? _data["scaledMin"] : <any>null;
            this.scaledMax = _data["scaledMax"] !== undefined ? _data["scaledMax"] : <any>null;
            this.scaledUnit = _data["scaledUnit"] !== undefined ? _data["scaledUnit"] : <any>null;
        }
    }

    static fromJS(data: any): EvolveQuickAssetCreateUnitsConverterRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveQuickAssetCreateUnitsConverterRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fromUnit"] = this.fromUnit !== undefined ? this.fromUnit : <any>null;
        data["toUnit"] = this.toUnit !== undefined ? this.toUnit : <any>null;
        data["maxProductHeight"] = this.maxProductHeight !== undefined ? this.maxProductHeight : <any>null;
        data["reorderEventValue"] = this.reorderEventValue !== undefined ? this.reorderEventValue : <any>null;
        data["criticalEventValues"] = this.criticalEventValues !== undefined ? this.criticalEventValues : <any>null;
        data["tankDimensionId"] = this.tankDimensionId !== undefined ? this.tankDimensionId : <any>null;
        data["productId"] = this.productId !== undefined ? this.productId : <any>null;
        data["scaledMin"] = this.scaledMin !== undefined ? this.scaledMin : <any>null;
        data["scaledMax"] = this.scaledMax !== undefined ? this.scaledMax : <any>null;
        data["scaledUnit"] = this.scaledUnit !== undefined ? this.scaledUnit : <any>null;
        return data;
    }
}

export class EvolveRetrieveQuickAssetCreateBulkTankResponse {
    dataChannelTemplates?: EvolveDataChannelTemplateDetail[] | null;
    eventRuleGroups?: EventRuleGroupInfo[] | null;
    customProperties?: EvolveDomainCustomPropertyInfo[] | null;
    integrationDomain?: FtpDomainInfo[] | null;

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["dataChannelTemplates"])) {
                this.dataChannelTemplates = [] as any;
                for (let item of _data["dataChannelTemplates"])
                    this.dataChannelTemplates!.push(EvolveDataChannelTemplateDetail.fromJS(item));
            }
            else {
                this.dataChannelTemplates = <any>null;
            }
            if (Array.isArray(_data["eventRuleGroups"])) {
                this.eventRuleGroups = [] as any;
                for (let item of _data["eventRuleGroups"])
                    this.eventRuleGroups!.push(EventRuleGroupInfo.fromJS(item));
            }
            else {
                this.eventRuleGroups = <any>null;
            }
            if (Array.isArray(_data["customProperties"])) {
                this.customProperties = [] as any;
                for (let item of _data["customProperties"])
                    this.customProperties!.push(EvolveDomainCustomPropertyInfo.fromJS(item));
            }
            else {
                this.customProperties = <any>null;
            }
            if (Array.isArray(_data["integrationDomain"])) {
                this.integrationDomain = [] as any;
                for (let item of _data["integrationDomain"])
                    this.integrationDomain!.push(FtpDomainInfo.fromJS(item));
            }
            else {
                this.integrationDomain = <any>null;
            }
        }
    }

    static fromJS(data: any): EvolveRetrieveQuickAssetCreateBulkTankResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveRetrieveQuickAssetCreateBulkTankResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.dataChannelTemplates)) {
            data["dataChannelTemplates"] = [];
            for (let item of this.dataChannelTemplates)
                data["dataChannelTemplates"].push(item.toJSON());
        }
        if (Array.isArray(this.eventRuleGroups)) {
            data["eventRuleGroups"] = [];
            for (let item of this.eventRuleGroups)
                data["eventRuleGroups"].push(item.toJSON());
        }
        if (Array.isArray(this.customProperties)) {
            data["customProperties"] = [];
            for (let item of this.customProperties)
                data["customProperties"].push(item.toJSON());
        }
        if (Array.isArray(this.integrationDomain)) {
            data["integrationDomain"] = [];
            for (let item of this.integrationDomain)
                data["integrationDomain"].push(item.toJSON());
        }
        return data;
    }
}

export class EvolveQuickAssetCreateBulkTankResponse {
    asset?: EditAsset | null;

    init(_data?: any) {
        if (_data) {
            this.asset = _data["asset"] ? EditAsset.fromJS(_data["asset"]) : <any>null;
        }
    }

    static fromJS(data: any): EvolveQuickAssetCreateBulkTankResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveQuickAssetCreateBulkTankResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["asset"] = this.asset ? this.asset.toJSON() : <any>null;
        return data;
    }
}

export class EvolveQuickAssetCreateBulkTankRequest {
    /** Asset description.
             */
    description?: string | null;
    /** Asset DomainId.
             */
    domainId?: string;
    /** Asset SiteId.
             */
    siteId?: string;
    /** Asset Integration Name.
             */
    integrationId?: string | null;
    /** Asset Technician.
             */
    technician?: string | null;
    /** Asset Notes.
             */
    notes?: string | null;
    /** Asset Custom Properties.
             */
    customProperties?: EvolveAssetCustomProperty[] | null;
    /** Asset data channels with data source = RTU.
             */
    dataChannelsBasedRtu?: EvolveDataChannelBasedRtu | null;
    /** Asset data channels with data source = Published Channel.
             */
    dataChannelBasedPublishedChannel?: EvolveDataChannelBasedPublishedChannel | null;

    init(_data?: any) {
        if (_data) {
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.domainId = _data["domainId"] !== undefined ? _data["domainId"] : <any>null;
            this.siteId = _data["siteId"] !== undefined ? _data["siteId"] : <any>null;
            this.integrationId = _data["integrationId"] !== undefined ? _data["integrationId"] : <any>null;
            this.technician = _data["technician"] !== undefined ? _data["technician"] : <any>null;
            this.notes = _data["notes"] !== undefined ? _data["notes"] : <any>null;
            if (Array.isArray(_data["customProperties"])) {
                this.customProperties = [] as any;
                for (let item of _data["customProperties"])
                    this.customProperties!.push(EvolveAssetCustomProperty.fromJS(item));
            }
            else {
                this.customProperties = <any>null;
            }
            this.dataChannelsBasedRtu = _data["dataChannelsBasedRtu"] ? EvolveDataChannelBasedRtu.fromJS(_data["dataChannelsBasedRtu"]) : <any>null;
            this.dataChannelBasedPublishedChannel = _data["dataChannelBasedPublishedChannel"] ? EvolveDataChannelBasedPublishedChannel.fromJS(_data["dataChannelBasedPublishedChannel"]) : <any>null;
        }
    }

    static fromJS(data: any): EvolveQuickAssetCreateBulkTankRequest {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveQuickAssetCreateBulkTankRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["domainId"] = this.domainId !== undefined ? this.domainId : <any>null;
        data["siteId"] = this.siteId !== undefined ? this.siteId : <any>null;
        data["integrationId"] = this.integrationId !== undefined ? this.integrationId : <any>null;
        data["technician"] = this.technician !== undefined ? this.technician : <any>null;
        data["notes"] = this.notes !== undefined ? this.notes : <any>null;
        if (Array.isArray(this.customProperties)) {
            data["customProperties"] = [];
            for (let item of this.customProperties)
                data["customProperties"].push(item.toJSON());
        }
        data["dataChannelsBasedRtu"] = this.dataChannelsBasedRtu ? this.dataChannelsBasedRtu.toJSON() : <any>null;
        data["dataChannelBasedPublishedChannel"] = this.dataChannelBasedPublishedChannel ? this.dataChannelBasedPublishedChannel.toJSON() : <any>null;
        return data;
    }
}

export class EvolveDataChannelBasedRtu {
    /** Data channels RtuId.
             */
    rtuId?: string;
    /** Level data channels Rtu channel Id.
             */
    levelRtuChannelId?: string;
    /** Level data channels template Id.
             */
    levelDataChannelTemplateId?: string;
    /** A flag that determines whether the TankDimensionId is required or not.
When set to true  TankDimensionId becomes required.
             */
    isTankDimensionsSet?: boolean;
    /** Data channel tank type. Required only if IsTankDimensionsSet = false
             */
    tankType?: TankType | null;
    /** Data channel tank dimensions. Required only if IsTankDimensionsSet = true
             */
    tankDimensionId?: string | null;
    /** Data channel ProductId
             */
    productId?: string | null;
    /** Data channel display units
             */
    displayUnits?: UnitType | null;
    /** Data channel max product height
             */
    maxProductHeight?: number | null;
    /** Data channel max product height in display units
             */
    maxProductHeightInDisplayUnits?: number | null;
    /** Event rule group
             */
    eventRuleGroupId?: number | null;
    /** Reorder event rule value
             */
    reorderEventValue?: number | null;
    /** critical event rule value
             */
    criticalEventValue?: number | null;
    /** Pressure data channels Rtu channel Id.
             */
    pressureRtuChannelId?: string | null;
    /** Pressure data channels template Id.
             */
    pressureDataChannelTemplateId?: string | null;
    /** A flag to indicate a need to create a battery channel.
             */
    addBatteryChannel?: boolean;
    /** A flag to indicate a need to create rtu case temperature channel.
             */
    addRtuTemperatureChannel?: boolean;
    /** Level integration set up
             */
    levelIntegrationDetails?: DataChannelIntegrationDetails | null;
    /** Pressure integration set up
             */
    pressureIntegrationDetails?: DataChannelIntegrationDetails | null;
    /** Battery integration set up
             */
    batteryIntegrationDetails?: DataChannelIntegrationDetails | null;

    init(_data?: any) {
        if (_data) {
            this.rtuId = _data["rtuId"] !== undefined ? _data["rtuId"] : <any>null;
            this.levelRtuChannelId = _data["levelRtuChannelId"] !== undefined ? _data["levelRtuChannelId"] : <any>null;
            this.levelDataChannelTemplateId = _data["levelDataChannelTemplateId"] !== undefined ? _data["levelDataChannelTemplateId"] : <any>null;
            this.isTankDimensionsSet = _data["isTankDimensionsSet"] !== undefined ? _data["isTankDimensionsSet"] : <any>null;
            this.tankType = _data["tankType"] !== undefined ? _data["tankType"] : <any>null;
            this.tankDimensionId = _data["tankDimensionId"] !== undefined ? _data["tankDimensionId"] : <any>null;
            this.productId = _data["productId"] !== undefined ? _data["productId"] : <any>null;
            this.displayUnits = _data["displayUnits"] !== undefined ? _data["displayUnits"] : <any>null;
            this.maxProductHeight = _data["maxProductHeight"] !== undefined ? _data["maxProductHeight"] : <any>null;
            this.maxProductHeightInDisplayUnits = _data["maxProductHeightInDisplayUnits"] !== undefined ? _data["maxProductHeightInDisplayUnits"] : <any>null;
            this.eventRuleGroupId = _data["eventRuleGroupId"] !== undefined ? _data["eventRuleGroupId"] : <any>null;
            this.reorderEventValue = _data["reorderEventValue"] !== undefined ? _data["reorderEventValue"] : <any>null;
            this.criticalEventValue = _data["criticalEventValue"] !== undefined ? _data["criticalEventValue"] : <any>null;
            this.pressureRtuChannelId = _data["pressureRtuChannelId"] !== undefined ? _data["pressureRtuChannelId"] : <any>null;
            this.pressureDataChannelTemplateId = _data["pressureDataChannelTemplateId"] !== undefined ? _data["pressureDataChannelTemplateId"] : <any>null;
            this.addBatteryChannel = _data["addBatteryChannel"] !== undefined ? _data["addBatteryChannel"] : <any>null;
            this.addRtuTemperatureChannel = _data["addRtuTemperatureChannel"] !== undefined ? _data["addRtuTemperatureChannel"] : <any>null;
            this.levelIntegrationDetails = _data["levelIntegrationDetails"] ? DataChannelIntegrationDetails.fromJS(_data["levelIntegrationDetails"]) : <any>null;
            this.pressureIntegrationDetails = _data["pressureIntegrationDetails"] ? DataChannelIntegrationDetails.fromJS(_data["pressureIntegrationDetails"]) : <any>null;
            this.batteryIntegrationDetails = _data["batteryIntegrationDetails"] ? DataChannelIntegrationDetails.fromJS(_data["batteryIntegrationDetails"]) : <any>null;
        }
    }

    static fromJS(data: any): EvolveDataChannelBasedRtu {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveDataChannelBasedRtu();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rtuId"] = this.rtuId !== undefined ? this.rtuId : <any>null;
        data["levelRtuChannelId"] = this.levelRtuChannelId !== undefined ? this.levelRtuChannelId : <any>null;
        data["levelDataChannelTemplateId"] = this.levelDataChannelTemplateId !== undefined ? this.levelDataChannelTemplateId : <any>null;
        data["isTankDimensionsSet"] = this.isTankDimensionsSet !== undefined ? this.isTankDimensionsSet : <any>null;
        data["tankType"] = this.tankType !== undefined ? this.tankType : <any>null;
        data["tankDimensionId"] = this.tankDimensionId !== undefined ? this.tankDimensionId : <any>null;
        data["productId"] = this.productId !== undefined ? this.productId : <any>null;
        data["displayUnits"] = this.displayUnits !== undefined ? this.displayUnits : <any>null;
        data["maxProductHeight"] = this.maxProductHeight !== undefined ? this.maxProductHeight : <any>null;
        data["maxProductHeightInDisplayUnits"] = this.maxProductHeightInDisplayUnits !== undefined ? this.maxProductHeightInDisplayUnits : <any>null;
        data["eventRuleGroupId"] = this.eventRuleGroupId !== undefined ? this.eventRuleGroupId : <any>null;
        data["reorderEventValue"] = this.reorderEventValue !== undefined ? this.reorderEventValue : <any>null;
        data["criticalEventValue"] = this.criticalEventValue !== undefined ? this.criticalEventValue : <any>null;
        data["pressureRtuChannelId"] = this.pressureRtuChannelId !== undefined ? this.pressureRtuChannelId : <any>null;
        data["pressureDataChannelTemplateId"] = this.pressureDataChannelTemplateId !== undefined ? this.pressureDataChannelTemplateId : <any>null;
        data["addBatteryChannel"] = this.addBatteryChannel !== undefined ? this.addBatteryChannel : <any>null;
        data["addRtuTemperatureChannel"] = this.addRtuTemperatureChannel !== undefined ? this.addRtuTemperatureChannel : <any>null;
        data["levelIntegrationDetails"] = this.levelIntegrationDetails ? this.levelIntegrationDetails.toJSON() : <any>null;
        data["pressureIntegrationDetails"] = this.pressureIntegrationDetails ? this.pressureIntegrationDetails.toJSON() : <any>null;
        data["batteryIntegrationDetails"] = this.batteryIntegrationDetails ? this.batteryIntegrationDetails.toJSON() : <any>null;
        return data;
    }
}

export class EvolveDataChannelBasedPublishedChannel {
    /** Source DataChannelId based on which another data channel needs to be created.
             */
    sourceDataChannelId?: string;
    /** Comments of the published data channel.
             */
    publishedComments?: string | null;
    /** A flag that determines whether the TankDimensionId is required or not.
When set to true  TankDimensionId becomes required.
             */
    isTankDimensionsSet?: boolean;
    /** Data channel tank type. Required only if IsTankDimensionsSet = false
             */
    tankType?: TankType | null;
    /** Data channel tank dimensions. Required only if IsTankDimensionsSet = true
             */
    tankDimensionId?: string | null;
    /** Data channel ProductId
             */
    productId?: string | null;
    /** Data channel display units
             */
    displayUnits?: UnitType | null;
    /** Data channel max product height
             */
    maxProductHeight?: number | null;
    /** Data channel max product height in display units
             */
    maxProductHeightInDisplayUnits?: number | null;
    /** Event rule group
             */
    eventRuleGroupId?: number | null;
    /** Reorder event rule value
             */
    reorderEventValue?: number | null;
    /** critical event rule value
             */
    criticalEventValue?: number | null;
    /** Level integration set up
             */
    levelIntegrationDetails?: DataChannelIntegrationDetails | null;

    init(_data?: any) {
        if (_data) {
            this.sourceDataChannelId = _data["sourceDataChannelId"] !== undefined ? _data["sourceDataChannelId"] : <any>null;
            this.publishedComments = _data["publishedComments"] !== undefined ? _data["publishedComments"] : <any>null;
            this.isTankDimensionsSet = _data["isTankDimensionsSet"] !== undefined ? _data["isTankDimensionsSet"] : <any>null;
            this.tankType = _data["tankType"] !== undefined ? _data["tankType"] : <any>null;
            this.tankDimensionId = _data["tankDimensionId"] !== undefined ? _data["tankDimensionId"] : <any>null;
            this.productId = _data["productId"] !== undefined ? _data["productId"] : <any>null;
            this.displayUnits = _data["displayUnits"] !== undefined ? _data["displayUnits"] : <any>null;
            this.maxProductHeight = _data["maxProductHeight"] !== undefined ? _data["maxProductHeight"] : <any>null;
            this.maxProductHeightInDisplayUnits = _data["maxProductHeightInDisplayUnits"] !== undefined ? _data["maxProductHeightInDisplayUnits"] : <any>null;
            this.eventRuleGroupId = _data["eventRuleGroupId"] !== undefined ? _data["eventRuleGroupId"] : <any>null;
            this.reorderEventValue = _data["reorderEventValue"] !== undefined ? _data["reorderEventValue"] : <any>null;
            this.criticalEventValue = _data["criticalEventValue"] !== undefined ? _data["criticalEventValue"] : <any>null;
            this.levelIntegrationDetails = _data["levelIntegrationDetails"] ? DataChannelIntegrationDetails.fromJS(_data["levelIntegrationDetails"]) : <any>null;
        }
    }

    static fromJS(data: any): EvolveDataChannelBasedPublishedChannel {
        data = typeof data === 'object' ? data : {};
        let result = new EvolveDataChannelBasedPublishedChannel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sourceDataChannelId"] = this.sourceDataChannelId !== undefined ? this.sourceDataChannelId : <any>null;
        data["publishedComments"] = this.publishedComments !== undefined ? this.publishedComments : <any>null;
        data["isTankDimensionsSet"] = this.isTankDimensionsSet !== undefined ? this.isTankDimensionsSet : <any>null;
        data["tankType"] = this.tankType !== undefined ? this.tankType : <any>null;
        data["tankDimensionId"] = this.tankDimensionId !== undefined ? this.tankDimensionId : <any>null;
        data["productId"] = this.productId !== undefined ? this.productId : <any>null;
        data["displayUnits"] = this.displayUnits !== undefined ? this.displayUnits : <any>null;
        data["maxProductHeight"] = this.maxProductHeight !== undefined ? this.maxProductHeight : <any>null;
        data["maxProductHeightInDisplayUnits"] = this.maxProductHeightInDisplayUnits !== undefined ? this.maxProductHeightInDisplayUnits : <any>null;
        data["eventRuleGroupId"] = this.eventRuleGroupId !== undefined ? this.eventRuleGroupId : <any>null;
        data["reorderEventValue"] = this.reorderEventValue !== undefined ? this.reorderEventValue : <any>null;
        data["criticalEventValue"] = this.criticalEventValue !== undefined ? this.criticalEventValue : <any>null;
        data["levelIntegrationDetails"] = this.levelIntegrationDetails ? this.levelIntegrationDetails.toJSON() : <any>null;
        return data;
    }
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}