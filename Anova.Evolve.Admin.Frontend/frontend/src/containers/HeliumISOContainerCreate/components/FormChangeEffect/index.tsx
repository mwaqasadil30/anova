import {
  EvolveRetrieveRtuChannelUsageInfoListByRtuRequest,
  EvolveRetrieveSiteEditComponentsByIdRequest,
} from 'api/admin/api';
import AdminApiService from 'api/admin/ApiService';
import useCalculateFtpId from 'containers/HeliumISOContainerCreate/hooks/useCalculateFtpId';
import { FormChangeEffectProps } from 'containers/HeliumISOContainerCreate/types';
import { useCallback, useEffect } from 'react';

const FormChangeEffect = (props: FormChangeEffectProps) => {
  const {
    values,
    selectedRtu,
    integrationDomains,
    setFieldValue,
    setRtuChannelsFromRtu,
    setSiteDetails,
  } = props;
  const { rtuId, siteId } = values;

  const fetchRtuDetails = useCallback(
    (request: EvolveRetrieveRtuChannelUsageInfoListByRtuRequest) => {
      return AdminApiService.RTUService.retrieveRtuChannelUsageInfoListByRtu_RetrieveRtuChannelUsageInfoListByRtu(
        request
      )
        .then((response) => {
          setRtuChannelsFromRtu(
            response.retrieveRTUChannelUsageInfoListByRTUResult
          );
        })
        .catch((error) => {
          console.error('Unable to fetch RTU details', error);
        });
    },
    []
  );

  const fetchSiteDetails = useCallback(
    (request: EvolveRetrieveSiteEditComponentsByIdRequest) => {
      return AdminApiService.GeneralService.retrieveSiteEditComponentsById_RetrieveSiteEditComponentsById(
        request
      )
        .then((response) => {
          setSiteDetails(response.retrieveSiteEditComponentsByIdResult);
        })
        .catch((error) => {
          console.error('Unable to fetch site details', error);
        });
    },
    []
  );

  useEffect(() => {
    if (rtuId) {
      fetchRtuDetails({
        rtuId,
        dataChannelId: null,
        excludeNonNumericChannelNumbers: false,
      } as EvolveRetrieveRtuChannelUsageInfoListByRtuRequest);
    }
  }, [rtuId]);

  useEffect(() => {
    if (siteId) {
      fetchSiteDetails({
        siteId,
        loadEditComponents: false,
      } as EvolveRetrieveSiteEditComponentsByIdRequest);
    } else {
      setSiteDetails(null);
    }
  }, [siteId]);

  // Reset the integration ID fields when a field required for ftpId
  // calculation isn't set
  useEffect(() => {
    if (!selectedRtu || !selectedRtu?.deviceId) {
      const allIntegrationFields = [
        'heliumLevelIntegrationDetails',
        'heliumPressureIntegrationDetails',
        'nitrogenLevelIntegrationDetails',
        'nitrogenPressureIntegrationDetails',
        'batteryIntegrationDetails',
        'gpsIntegrationDetails',
      ];

      allIntegrationFields.forEach((fieldName) => {
        // @ts-ignore
        if (values[fieldName]?.shouldAutoGenerate) {
          setFieldValue(`${fieldName}.integrationId`, '');
        }
      });
    }
  }, [selectedRtu]);

  // Check/uncheck the auto generate checkbox and/or reset the integrationId
  // field when the integration target domain changes
  useEffect(() => {
    const autoGeneratedIntegrationFields = [
      'heliumLevelIntegrationDetails',
      'heliumPressureIntegrationDetails',
      'nitrogenLevelIntegrationDetails',
      'nitrogenPressureIntegrationDetails',
      'batteryIntegrationDetails',
      // NOTE: `gpsIntegrationDetails` is excluded from this list since it would
      // have the same channelNumber as battery (which would be 0) when
      // generating the FTP/integration ID
    ];

    const selectedIntegrationDomain = integrationDomains?.find(
      (domain) => domain.targetDomainId === values.integrationDomainId
    );
    const ftpFileFormat = selectedIntegrationDomain?.targetDomainFtpFileFormat;
    if (
      selectedIntegrationDomain?.autoGenerateFtpId &&
      typeof ftpFileFormat === 'number'
    ) {
      autoGeneratedIntegrationFields.forEach((fieldName) => {
        setFieldValue(`${fieldName}.shouldAutoGenerate`, true);
      });
    } else {
      autoGeneratedIntegrationFields.forEach((fieldName) => {
        setFieldValue(`${fieldName}.shouldAutoGenerate`, false);
        setFieldValue(`${fieldName}.integrationId`, '');
      });
    }
  }, [values.integrationDomainId]);

  useCalculateFtpId({
    integrationDomains,
    fieldName: 'heliumLevelIntegrationDetails',
    selectedRtu,
    values,
    selectedChannelNumber: 1,
    setFieldValue,
  });
  useCalculateFtpId({
    integrationDomains,
    fieldName: 'heliumPressureIntegrationDetails',
    selectedRtu,
    values,
    selectedChannelNumber: 2,
    setFieldValue,
  });
  useCalculateFtpId({
    integrationDomains,
    fieldName: 'nitrogenLevelIntegrationDetails',
    selectedRtu,
    values,
    selectedChannelNumber: 3,
    setFieldValue,
  });
  useCalculateFtpId({
    integrationDomains,
    fieldName: 'nitrogenPressureIntegrationDetails',
    selectedRtu,
    values,
    selectedChannelNumber: 4,
    setFieldValue,
  });
  useCalculateFtpId({
    integrationDomains,
    fieldName: 'batteryIntegrationDetails',
    selectedRtu,
    values,
    selectedChannelNumber: 'BATT_VOLTAGE',
    setFieldValue,
  });

  return null;
};

export default FormChangeEffect;
